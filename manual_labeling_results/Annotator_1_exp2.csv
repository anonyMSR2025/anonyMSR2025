cve,post_id,commit_url,cve_desc_text,commit_msg_text,code_text,is_patch(codeonly),helpfulness(codeonly),is_patch,helpfulness,true_label,method
CVE-2018-12028,CVE-2018-12028/fd3717a3cd357aa0e80e1e81d4dc94a1eaf928f1,https://github.com/phusion/passenger/commit/fd3717a3cd357aa0e80e1e81d4dc94a1eaf928f1,"<s>An Incorrect Access Control vulnerability in SpawningKit in Phusion Passenger 5.3.x before 5.3.2 allows a Passenger-managed malicious application, upon spawning a child process, to report an arbitrary different PID back to Passenger's process manager. If the malicious application then generates an error, it would cause Passenger's process manager to kill said reported arbitrary PID.</s>","<s>SpawningKit: ensure safe reading of files in the work dir after its finalization
After finalization of the work dir, it is owned by the app's user and group.
This allows the app to arbitrarily modify the work dir to insert symlinks.
In order to prevent the SpawningKit code (which may run as root) from reading
arbitrary files through symlink attacks, we use the safeReadFile() function.
This function also mitigates various DoS attacks (see its comments).
</s>"," diff --git a/src/agent/Core/SpawningKit/Handshake/Prepare.h b/src/agent/Core/SpawningKit/Handshake/Prepare.h
index 6e632e287..6093850cf 100644
--- a/src/agent/Core/SpawningKit/Handshake/Prepare.h
+++ b/src/agent/Core/SpawningKit/Handshake/Prepare.h
@@ -1,6 +1,6 @@
 /*
  *  Phusion Passenger - https://www.phusionpassenger.com/
- *  Copyright (c) 2016-2017 Phusion Holding B.V.
+ *  Copyright (c) 2016-2018 Phusion Holding B.V.
  *
  *  ""Passenger"", ""Phusion Passenger"" and ""Union Station"" are registered
  *  trademarks of Phusion Holding B.V.
@@ -33,6 +33,7 @@
 #include <vector>
 #include <stdexcept>
 #include <algorithm>
+#include <utility>
 #include <cerrno>
 #include <cstddef>
 #include <cassert>
@@ -216,6 +217,43 @@ private:
 		}
 	}
 
+	// Open various workdir subdirectories because we'll use these file descriptors later in
+	// safeReadFile() calls.
+	void openWorkDirSubdirFds() {
+		session.workDirFd = openDirFd(session.workDir->getPath());
+		session.responseDirFd = openDirFd(session.responseDir);
+		session.responseErrorDirFd = openDirFd(session.responseDir + ""/error"");
+		session.envDumpDirFd = openDirFd(session.envDumpDir);
+		session.envDumpAnnotationsDirFd = openDirFd(session.envDumpDir + ""/annotations"");
+		openJourneyStepDirFds(getFirstSubprocessJourneyStep(),
+			getLastSubprocessJourneyStep());
+		openJourneyStepDirFds(getFirstPreloaderJourneyStep(),
+			JourneyStep((int) getLastPreloaderJourneyStep() + 1));
+	}
+
+	void openJourneyStepDirFds(JourneyStep firstStep, JourneyStep lastStep) {
+		JourneyStep step;
+
+		for (step = firstStep; step < lastStep; step = JourneyStep((int) step + 1)) {
+			if (!session.journey.hasStep(step)) {
+				continue;
+			}
+
+			string stepString = journeyStepToStringLowerCase(step);
+			string stepDir = session.responseDir + ""/steps/"" + stepString;
+			session.stepDirFds.insert(make_pair(step, openDirFd(stepDir)));
+		}
+	}
+
+	int openDirFd(const string &path) {
+		int fd = open(path.c_str(), O_RDONLY);
+		if (fd == -1) {
+			int e = errno;
+			throw FileSystemException(""Cannot open "" + path, e, path);
+		}
+		return fd;
+	}
+
 	void initializeResult() {
 		session.result.initialize(*context, config);
 	}
@@ -549,6 +587,7 @@ public:
 
 			resolveUserAndGroup();
 			createWorkDir();
+			openWorkDirSubdirFds();
 			initializeResult();
 
 			UPDATE_TRACE_POINT();
",0.0,,0.0,,0.0,none
CVE-2018-12028,CVE-2018-12028/1e7c82deb4901c438f583737d8c9f2aac264737c,https://github.com/phusion/passenger/commit/1e7c82deb4901c438f583737d8c9f2aac264737c,"<s>An Incorrect Access Control vulnerability in SpawningKit in Phusion Passenger 5.3.x before 5.3.2 allows a Passenger-managed malicious application, upon spawning a child process, to report an arbitrary different PID back to Passenger's process manager. If the malicious application then generates an error, it would cause Passenger's process manager to kill said reported arbitrary PID.</s>","<s>SpawningKit: do not allow killing the PID returned by the preloader until we have verified that it is genuine
Otherwise the preloader can trick us into killing an arbitrary process.
</s>"," diff --git a/src/agent/Core/SpawningKit/SmartSpawner.h b/src/agent/Core/SpawningKit/SmartSpawner.h
index f1c66de40..dfd617ef5 100644
--- a/src/agent/Core/SpawningKit/SmartSpawner.h
+++ b/src/agent/Core/SpawningKit/SmartSpawner.h
@@ -840,16 +840,56 @@ private:
 	{
 		TRACE_POINT();
 		pid_t spawnedPid = doc[""pid""].asInt();
-		ScopeGuard guard(boost::bind(nonInterruptableKillAndWaitpid, spawnedPid));
 
-		UPDATE_TRACE_POINT();
-		waitForStdChannelFifosToBeOpenedByPeer(stdChannelsAsyncOpenState,
-			session, spawnedPid);
-
-		UPDATE_TRACE_POINT();
 		// How do we know the preloader actually forked a process
 		// instead of reporting the PID of a random other existing process?
-		// For security reasons we perform a UID check.
+		// For security reasons we perform a bunch of sanity checks,
+		// including checking the PID's UID.
+
+		if (spawnedPid < 1) {
+			UPDATE_TRACE_POINT();
+			session.journey.setStepErrored(SPAWNING_KIT_PROCESS_RESPONSE_FROM_PRELOADER);
+
+			SpawnException e(INTERNAL_ERROR, session.journey, session.config);
+			addPreloaderEnvDumps(e);
+			e.setSummary(""The the preloader said it spawned a process with PID ""
+				+ toString(spawnedPid) + "", which is not allowed."");
+			e.setSubprocessPid(spawnedPid);
+			e.setStdoutAndErrData(getBackgroundIOCapturerData(
+				stdChannelsAsyncOpenState->stdoutAndErrCapturer));
+			e.setProblemDescriptionHTML(
+				""<h2>Application process has unexpected PID</h2>""
+				""<p>The "" PROGRAM_NAME "" application server tried""
+				"" to start the web application by communicating with a""
+				"" helper process that we call a \""preloader\"". However,""
+				"" the preloader reported that it started a process with""
+				"" a PID of "" + toString(spawnedPid) + "", which is not""
+				"" allowed.</p>"");
+			if (!session.config->genericApp && session.config->startsUsingWrapper
+				&& session.config->wrapperSuppliedByThirdParty)
+			{
+				e.setSolutionDescriptionHTML(
+					""<h2>Please report this bug</h2>""
+					""<p class=\""sole-solution\"">""
+					""This is probably a bug in the preloader process. The preloader ""
+					""wrapper program is not written by the "" PROGRAM_NAME "" authors, ""
+					""but by a third party. Please report this bug to the author of ""
+					""the preloader wrapper program.""
+					""</p>"");
+			} else {
+				e.setSolutionDescriptionHTML(
+					""<h2>Please report this bug</h2>""
+					""<p class=\""sole-solution\"">""
+					""This is probably a bug in the preloader process. The preloader ""
+					""is an internal tool part of "" PROGRAM_NAME "". Please ""
+					""<a href=\"""" SUPPORT_URL ""\"">""
+					""report this bug</a>.""
+					""</p>"");
+			}
+			throw e.finalize();
+		}
+
+		UPDATE_TRACE_POINT();
 		uid_t spawnedUid = getProcessUid(session, spawnedPid,
 			stdChannelsAsyncOpenState->stdoutAndErrCapturer);
 		if (spawnedUid != session.uid) {
@@ -897,6 +937,11 @@ private:
 			throw e.finalize();
 		}
 
+		UPDATE_TRACE_POINT();
+		ScopeGuard guard(boost::bind(nonInterruptableKillAndWaitpid, spawnedPid));
+		waitForStdChannelFifosToBeOpenedByPeer(stdChannelsAsyncOpenState,
+			session, spawnedPid);
+
 		UPDATE_TRACE_POINT();
 		string alreadyReadStdoutAndErrData;
 		if (stdChannelsAsyncOpenState->stdoutAndErrCapturer != NULL) {
",1.0,,1.0,,1.0,none
CVE-2018-12028,CVE-2018-12028/3f270a9dd27984a827874bd6612d984204e31abc,https://github.com/phusion/passenger/commit/3f270a9dd27984a827874bd6612d984204e31abc,"<s>An Incorrect Access Control vulnerability in SpawningKit in Phusion Passenger 5.3.x before 5.3.2 allows a Passenger-managed malicious application, upon spawning a child process, to report an arbitrary different PID back to Passenger's process manager. If the malicious application then generates an error, it would cause Passenger's process manager to kill said reported arbitrary PID.</s>","<s>SpawningKit: sanity-check Unix domain socket addresses reported by the app
If apps can report arbitrary Unix domain socket filenames then they
can make Passenger connect to (and forward traffic to) arbitrary sockets.
That probably isn't problematic but we don't want to allow it just to be
safe.
A more important issue is this: if any of the parent directories of the
socket is writable by a normal user (Joe) that is not the app's user (Jane),
then Joe can swap that directory with something else, with contents
controlled by Joe. That way, Joe can cause Passenger to connect to (and
forward Jane's traffic to) a process that does not actually belong to Jane.
We mitigate these issues with extra permission checks, and by insisting
that any sockets must be created inside the instance directory's app.s
subdirectory.
</s>"," diff --git a/src/agent/Core/SpawningKit/Handshake/Perform.h b/src/agent/Core/SpawningKit/Handshake/Perform.h
index cd55d1d17..247cc77c7 100644
--- a/src/agent/Core/SpawningKit/Handshake/Perform.h
+++ b/src/agent/Core/SpawningKit/Handshake/Perform.h
@@ -49,6 +49,7 @@
 #include <Exceptions.h>
 #include <FileDescriptor.h>
 #include <FileTools/FileManip.h>
+#include <FileTools/PathManip.h>
 #include <Utils.h>
 #include <Utils/ScopeGuard.h>
 #include <Utils/SystemTime.h>
@@ -437,40 +438,44 @@ private:
src			if (socketsRequired) {
Forward				errors.push_back(""'sockets' must be specified"");
/			}
-		} else if (!doc[""sockets""].isArray()) {
+			return;
+		}
+		if (!doc[""sockets""].isArray()) {
 			errors.push_back(""'sockets' must be an array"");
-		} else {
-			if (socketsRequired && doc[""sockets""].empty()) {
-				errors.push_back(""'sockets' must be non-empty"");
-				return;
-			}
-
-			Json::Value::const_iterator it, end = doc[""sockets""].end();
-			for (it = doc[""sockets""].begin(); it != end; it++) {
-				const Json::Value &socketDoc = *it;
+			return;
+		}
+		if (socketsRequired && doc[""sockets""].empty()) {
+			errors.push_back(""'sockets' must be non-empty"");
+			return;
+		}
 
-				if (!socketDoc.isObject()) {
-					errors.push_back(""'sockets["" + toString(it.index())
-						+ ""]' must be an object"");
-					continue;
-				}
+		Json::Value::const_iterator it, end = doc[""sockets""].end();
+		for (it = doc[""sockets""].begin(); it != end; it++) {
+			const Json::Value &socketDoc = *it;
 
-				validateResultPropertiesFileSocketField(socketDoc,
-					""address"", Json::stringValue, it.index(),
-					true, true, errors);
-				validateResultPropertiesFileSocketField(socketDoc,
-					""protocol"", Json::stringValue, it.index(),
-					true, true, errors);
-				validateResultPropertiesFileSocketField(socketDoc,
-					""description"", Json::stringValue, it.index(),
-					false, true, errors);
-				validateResultPropertiesFileSocketField(socketDoc,
-					""concurrency"", Json::intValue, it.index(),
-					true, false, errors);
-				validateResultPropertiesFileSocketField(socketDoc,
-					""accept_http_requests"", Json::booleanValue, it.index(),
-					false, false, errors);
+			if (!socketDoc.isObject()) {
+				errors.push_back(""'sockets["" + toString(it.index())
+					+ ""]' must be an object"");
+				continue;
 			}
+
+			validateResultPropertiesFileSocketField(socketDoc,
+				""address"", Json::stringValue, it.index(),
+				true, true, errors);
+			validateResultPropertiesFileSocketField(socketDoc,
+				""protocol"", Json::stringValue, it.index(),
+				true, true, errors);
+			validateResultPropertiesFileSocketField(socketDoc,
+				""description"", Json::stringValue, it.index(),
+				false, true, errors);
+			validateResultPropertiesFileSocketField(socketDoc,
+				""concurrency"", Json::intValue, it.index(),
+				true, false, errors);
+			validateResultPropertiesFileSocketField(socketDoc,
+				""accept_http_requests"", Json::booleanValue, it.index(),
+				false, false, errors);
+			validateResultPropertiesFileSocketAddress(socketDoc,
+				it.index(), errors);
 		}
 	}
 
@@ -507,6 +512,89 @@ private:
 		}
 	}
 
+	void validateResultPropertiesFileSocketAddress(const Json::Value &doc,
+		unsigned int index, vector<string> &errors) const
+	{
+		if (!doc[""address""].isString()
+		 || getSocketAddressType(doc[""address""].asString()) != SAT_UNIX)
+		{
+			return;
+		}
+
+		string filename = parseUnixSocketAddress(doc[""address""].asString());
+
+		if (filename.empty()) {
+			errors.push_back(""'sockets["" + toString(index)
+				+ ""].address' contains an empty Unix domain socket filename"");
+			return;
+		}
+
+		if (filename[0] != '/') {
+			errors.push_back(""'sockets["" + toString(index)
+				+ ""].address' when referring to a Unix domain socket, must be""
+				"" an absolute path (given path: "" + filename + "")"");
+			return;
+		}
+
+		// If any of the parent directories is writable by a normal user
+		// (Joe) that is not the app's user (Jane), then Joe can swap that
+		// directory with something else, with contents controlled by Joe.
+		// That way, Joe can cause Passenger to connect to (and forward
+		// Jane's traffic to) a process that does not actually belong to
+		// Jane.
+		//
+		// To mitigate this risk, we insist that the socket be placed in a
+		// directory that we know is safe (instanceDir + ""/apps.s"").
+		// We don't rely on isPathProbablySecureForRootUse() because that
+		// function cannot be 100% sure that it is correct.
+
+		// instanceDir is only empty in tests
+		if (!session.context->instanceDir.empty()) {
+			StaticString actualDir = extractDirNameStatic(filename);
+			string expectedDir = session.context->instanceDir + ""/apps.s"";
+			if (actualDir != expectedDir) {
+				errors.push_back(""'sockets["" + toString(index)
+					+ ""].address', when referring to a Unix domain socket,""
+					"" must be an absolute path to a file in '""
+					+ expectedDir + ""' (given path: "" + filename + "")"");
+				return;
+			}
+		}
+
+		struct stat s;
+		int ret;
+		do {
+			ret = lstat(filename.c_str(), &s);
+		} while (ret == -1 && errno == EAGAIN);
+
+		if (ret == -1) {
+			int e = errno;
+		",0.0,,0.0,,0.0,none
CVE-2018-12028,CVE-2018-12028/a4f2b12d36483505747c1777fd9d30af0baab431,https://github.com/phusion/passenger/commit/a4f2b12d36483505747c1777fd9d30af0baab431,"<s>An Incorrect Access Control vulnerability in SpawningKit in Phusion Passenger 5.3.x before 5.3.2 allows a Passenger-managed malicious application, upon spawning a child process, to report an arbitrary different PID back to Passenger's process manager. If the malicious application then generates an error, it would cause Passenger's process manager to kill said reported arbitrary PID.</s>","<s>SpawningKit HandshakePerform: add more trace points
</s>"," diff --git a/src/agent/Core/SpawningKit/Handshake/Perform.h b/src/agent/Core/SpawningKit/Handshake/Perform.h
index c4193bace..74e874db9 100644
--- a/src/agent/Core/SpawningKit/Handshake/Perform.h
+++ b/src/agent/Core/SpawningKit/Handshake/Perform.h
@@ -373,6 +373,7 @@ private:
 	}
 
 	void loadResultPropertiesFromResponseDir(bool socketsRequired) {
+		TRACE_POINT();
 		Result &result = session.result;
 		string path = session.responseDir + ""/properties.json"";
 		Json::Reader reader;
@@ -386,6 +387,7 @@ private:
 		// a generic filesystem-related or IO-related SpawnException, as opposed
 		// to one about this problem specifically.
 
+		UPDATE_TRACE_POINT();
 		pair<string, bool> jsonContent = safeReadFile(session.responseDirFd, ""properties.json"",
 			SPAWNINGKIT_MAX_PROPERTIES_JSON_SIZE);
 		if (!jsonContent.second) {
@@ -401,6 +403,7 @@ private:
 				errors);
 		}
 
+		UPDATE_TRACE_POINT();
 		validateResultPropertiesFile(doc, socketsRequired, errors);
 		if (!errors.empty()) {
 			errors.insert(errors.begin(), ""The following errors were detected in ""
@@ -413,6 +416,7 @@ private:
 			return;
 		}
 
+		UPDATE_TRACE_POINT();
 		Json::Value::iterator it, end = doc[""sockets""].end();
 		for (it = doc[""sockets""].begin(); it != end; it++) {
 			const Json::Value &socketDoc = *it;
@@ -434,6 +438,7 @@ private:
 	void validateResultPropertiesFile(const Json::Value &doc, bool socketsRequired,
 		vector<string> &errors) const
 	{
+		TRACE_POINT();
 		if (!doc.isMember(""sockets"")) {
 			if (socketsRequired) {
 				errors.push_back(""'sockets' must be specified"");
@@ -449,6 +454,7 @@ private:
 			return;
 		}
 
+		UPDATE_TRACE_POINT();
 		Json::Value::const_iterator it, end = doc[""sockets""].end();
 		for (it = doc[""sockets""].begin(); it != end; it++) {
 			const Json::Value &socketDoc = *it;
@@ -515,6 +521,7 @@ private:
 	void validateResultPropertiesFileSocketAddress(const Json::Value &doc,
 		unsigned int index, vector<string> &errors) const
 	{
+		TRACE_POINT();
 		if (!doc[""address""].isString()
 		 || getSocketAddressType(doc[""address""].asString()) != SAT_UNIX)
 		{
@@ -548,6 +555,7 @@ private:
 		// We don't rely on isPathProbablySecureForRootUse() because that
 		// function cannot be 100% sure that it is correct.
 
+		UPDATE_TRACE_POINT();
 		// instanceDir is only empty in tests
 		if (!session.context->instanceDir.empty()) {
 			StaticString actualDir = extractDirNameStatic(filename);
@@ -561,6 +569,7 @@ private:
 			}
 		}
 
+		UPDATE_TRACE_POINT();
 		struct stat s;
 		int ret;
 		do {
@@ -587,6 +596,7 @@ private:
 		// on macOS it seems that all directories behave as if
 		// they have the setgid bit set.
 
+		UPDATE_TRACE_POINT();
 		if (s.st_uid != session.uid) {
 			errors.push_back(""'sockets["" + toString(index)
 				+ ""].address', when referring to a Unix domain socket file,""
",0.0,,0.0,,0.0,none
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2018-10191,CVE-2018-10191/1905091634a6a2925c911484434448e568330626,https://github.com/mruby/mruby/commit/1905091634a6a2925c911484434448e568330626,"<s>In versions of mruby up to and including 1.4.0, an integer overflow exists in src/vm.c::mrb_vm_exec() when handling OP_GETUPVAR in the presence of deep scope nesting, resulting in a use-after-free. An attacker that can cause Ruby code to be run can use this to possibly execute arbitrary code.</s>","<s>Check length of env stack before accessing upvar; fix #3995
</s>"," diff --git a/src/vm.c b/src/vm.c
index ae9bf2e69..0acdd1ba8 100644
--- a/src/vm.c
+++ b/src/vm.c
@@ -1201,11 +1201,11 @@ RETRY_TRY_BLOCK:
       mrb_value *regs_a = regs + a;
       struct REnv *e = uvenv(mrb, c);
 
-      if (!e) {
-        *regs_a = mrb_nil_value();
+      if (e && b < MRB_ENV_STACK_LEN(e)) {
+        *regs_a = e->stack[b];
       }
       else {
-        *regs_a = e->stack[b];
+        *regs_a = mrb_nil_value();
       }
       NEXT;
     }
",1.0,,1.0,,1.0,tfidf
CVE-2018-10191,CVE-2018-10191/4c1494d58fbccbd6363060cadfc8420480bf87e8,https://github.com/mruby/mruby/commit/4c1494d58fbccbd6363060cadfc8420480bf87e8,"<s>In versions of mruby up to and including 1.4.0, an integer overflow exists in src/vm.c::mrb_vm_exec() when handling OP_GETUPVAR in the presence of deep scope nesting, resulting in a use-after-free. An attacker that can cause Ruby code to be run can use this to possibly execute arbitrary code.</s>","<s>Check if `mruby-pack` template count overflow; fix #3942
</s>"," diff --git a/mrbgems/mruby-pack/src/pack.c b/mrbgems/mruby-pack/src/pack.c
index ceb862d3f..30139fb74 100644
--- a/mrbgems/mruby-pack/src/pack.c
+++ b/mrbgems/mruby-pack/src/pack.c
@@ -1050,6 +1050,9 @@ alias:
       count = ch - '0';
       while (tmpl->idx < tlen && isdigit(tptr[tmpl->idx])) {
         count = count * 10 + (tptr[tmpl->idx++] - '0');
+        if (count < 0) {
+          mrb_raisef(mrb, E_RUNTIME_ERROR, ""too big template length"");
+        }
       }
       continue;  /* special case */
     } else if (ch == '*')  {
",0.0,,0.0,,0.0,tfidf
CVE-2018-10191,CVE-2018-10191/ca837b1a24ab6a0d771d34ad4efd97c4ab6b2c16,https://github.com/mruby/mruby/commit/ca837b1a24ab6a0d771d34ad4efd97c4ab6b2c16,"<s>In versions of mruby up to and including 1.4.0, an integer overflow exists in src/vm.c::mrb_vm_exec() when handling OP_GETUPVAR in the presence of deep scope nesting, resulting in a use-after-free. An attacker that can cause Ruby code to be run can use this to possibly execute arbitrary code.</s>","<s>Allow `-> do rescue; end` as well as `proc do rescue; end` [Ruby2.6]
</s>"," diff --git a/mrbgems/mruby-compiler/core/parse.y b/mrbgems/mruby-compiler/core/parse.y
index 01269d8da..e4c258368 100644
--- a/mrbgems/mruby-compiler/core/parse.y
+++ b/mrbgems/mruby-compiler/core/parse.y
@@ -2568,7 +2568,7 @@ lambda_body     : tLAMBEG compstmt '}'
                     {
                       $$ = $2;
                     }
-                | keyword_do_LAMBDA compstmt keyword_end
+                | keyword_do_LAMBDA bodystmt keyword_end
                     {
                       $$ = $2;
                     }
",0.0,,0.0,,0.0,tfidf
CVE-2018-10191,CVE-2018-10191/a9d0d90f7417007db510b77caa6098ebcb6d5b7a,https://github.com/mruby/mruby/commit/a9d0d90f7417007db510b77caa6098ebcb6d5b7a,"<s>In versions of mruby up to and including 1.4.0, an integer overflow exists in src/vm.c::mrb_vm_exec() when handling OP_GETUPVAR in the presence of deep scope nesting, resulting in a use-after-free. An attacker that can cause Ruby code to be run can use this to possibly execute arbitrary code.</s>","<s>Removed the Visual Studio Version Check because it does not
work with internationalized versions of Visual Studio. It will capture
the returned string in the local codepage encoding and make ruby exits
with an invalid UTF8 error message.
Also ""Version"" might be translated and not appear in the output.
</s>"," diff --git a/tasks/toolchains/visualcpp.rake b/tasks/toolchains/visualcpp.rake
index 5bc24a73a..b008273a2 100644
--- a/tasks/toolchains/visualcpp.rake
+++ b/tasks/toolchains/visualcpp.rake
@@ -55,14 +55,15 @@ MRuby::Toolchain.new(:visualcpp) do |conf, _params|
 
   conf.file_separator = '\\'
 
-  if require 'open3'
-    Open3.popen3 conf.cc.command do |_, _, e, _|
-      if /Version (\d{2})\.\d{2}\.\d{5}/ =~ e.gets && $1.to_i <= 17
-        m = ""# VS2010/2012 support will be dropped after the next release! #""
-        h = ""#"" * m.length
-        puts h, m, h
-      end
-    end
-  end
+  # Unreliable detection and will result in invalid encoding errors for localized versions of Visual C++
+  # if require 'open3'
+  #   Open3.popen3 conf.cc.command do |_, _, e, _|
+  #     if /Version (\d{2})\.\d{2}\.\d{5}/ =~ e.gets && $1.to_i <= 17
+  #       m = ""# VS2010/2012 support will be dropped after the next release! #""
+  #       h = ""#"" * m.length
+  #       puts h, m, h
+  #     end
+  #   end
+  # end
 
 end
",0.0,,0.0,,0.0,tfidf
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2017-14337,CVE-2017-14337/423060111639801c423ad7fa59e2ed8de8e3f520,https://github.com/MISP/MISP/commit/423060111639801c423ad7fa59e2ed8de8e3f520,"<s>When MISP before 2.4.80 is configured with X.509 certificate authentication (CertAuth) in conjunction with a non-MISP external user management ReST API, if an external user provides X.509 certificate authentication and this API returns an empty value, the unauthenticated user can be granted access as an arbitrary user.</s>","<s>fix: Fixes to various issues with the cert auth
</s>"," diff --git a/app/Plugin/CertAuth/Controller/Component/Auth/CertificateAuthenticate.php b/app/Plugin/CertAuth/Controller/Component/Auth/CertificateAuthenticate.php
index ae04ae02e..43428ba3e 100644
--- a/app/Plugin/CertAuth/Controller/Component/Auth/CertificateAuthenticate.php
+++ b/app/Plugin/CertAuth/Controller/Component/Auth/CertificateAuthenticate.php
@@ -127,97 +127,69 @@ class CertificateAuthenticate extends BaseAuthenticate
 user	// to enable stateless authentication
cond	public function getUser(CakeRequest $request)
 	{
-		if (is_null(self::$user)) {
+		if (empty(self::$user)) {
 =>			if (self::$client) {
);				self::$user = self::$client;
-
+				// If $sync is true, allow the creation of the user from the certificate
 				$sync = Configure::read('CertAuth.syncUser');
-
 				if ($sync) {
 					self::getRestUser();
 				}
 
 				// find and fill user with model
-				$cn = Configure::read('CertAuth.userModel');
-				if ($cn) {
-					$k = Configure::read('CertAuth.userModelKey');
-					if ($k) {
-						$q = array($k=>self::$user[$k]);
-					} else {
-						$q = self::$user;
-					}
-					$User = ClassRegistry::init($cn);
-					$U = $User->find('first', array(
-						'conditions' => $q,
-						'recursive' => false
-					));
-					if ($U) {
-						if ($sync) {
-							$write = array();
-
-							if (!isset(self::$user['org_id']) && isset(self::$user['org'])) {
-								self::$user['org_id']=$User->Organisation->createOrgFromName(self::$user['org'], $User->id, true);
-								// reset user defaults in case it's a different org_id
-								if(self::$user['org_id'] && $U[$cn]['org_id']!=self::$user['org_id']) {
-									$d = Configure::read('CertAuth.userDefaults');
-									if ($d && is_array($d)) {
-										self::$user = $d + self::$user;
-									}
-									unset($d);
-								}
-								unset(self::$user['org']);
-							}
-
-							foreach (self::$user as $k=>$v) {
-								if (array_key_exists($k, $U[$cn]) && trim($U[$cn][$k])!=trim($v)) {
-									$write[] = $k;
-									$U[$cn][$k] = trim($v);
+				$userModelKey = empty(Configure::read('CertAuth.userModelKey')) ? 'email' : Configure::read('CertAuth.userModelKey');
+				$userDefaults = Configure::read('CertAuth.userDefaults');
+				$this->User = ClassRegistry::init('User');
+				$existingUser = $this->User->find('first', array(
+					'conditions' => array($userModelKey => self::$user[$userModelKey]),
+					'recursive' => false
+				));
+				if ($existingUser) {
+					if ($sync) {
+						if (!isset(self::$user['org_id']) && isset(self::$user['org'])) {
+							self::$user['org_id'] = $this->User->Organisation->createOrgFromName(self::$user['org'], $existingUser['User']['id'], true);
+							// reset user defaults in case it's a different org_id
+							if (self::$user['org_id'] && $existingUser['User']['org_id'] != self::$user['org_id']) {
+								if ($userDefaults && is_array($userDefaults)) {
+									self::$user = array_merge($userDefaults + self::$user);
 								}
-								unset($k, $v);
 							}
-							if ($write && !$User->save($U[$cn], true, $write)) {
-								CakeLog::write('alert', 'Could not update model at database with RestAPI data.');
-							}
-							unset($write);
-						}
-						self::$user = $User->getAuthUser($U[$cn]['id']);
-						if (isset(self::$user['gpgkey'])) unset(self::$user['gpgkey']);
-					} else if ($sync && self::$user) {
-						$User->create();
-						$org=null;
-						if (!isset(self::$user['org_id']) && isset(self::$user['org'])) {
-							$org = self::$user['org'];
 							unset(self::$user['org']);
 						}
-
-						$d = Configure::read('CertAuth.userDefaults');
-						if ($d && is_array($d)) {
-							self::$user += $d;
-						}
-						unset($d);
-
-						if ($User->save(self::$user, true)) {
-							$id = $User->id;
-							if ($org) {
-								self::$user['id'] = $id;
-								self::$user['org_id']=$User->Organisation->createOrgFromName($org, $User->id, true);
-								$User->save(self::$user, true, array('org_id'));
+						$write = array();
+						foreach (self::$user as $k => $v) {
+							if (isset($existingUser['User'][$k]) && trim($existingUser['User'][$k]) != trim($v)) {
+								$write[] = $k;
+								$existingUser['User'][$k] = trim($v);
 							}
-
-							self::$user = $User->getAuthUser($id);
-							unset($id);
-							if (isset(self::$user['gpgkey'])) unset(self::$user['gpgkey']);
-						} else {
-							CakeLog::write('alert', 'Could not insert model at database from RestAPI data.');
 						}
-						unset($org);
+						if (!empty($write) && !$this->User->save($existingUser['User'], true, $write)) {
+							CakeLog::write('alert', 'Could not update model at database with RestAPI data.');
+						}
+					}
+					self::$user = $this->User->getAuthUser($existingUser['User']['id']);
+					if (isset(self::$user['gpgkey'])) unset(self::$user['gpgkey']);
+				} else if ($sync && !empty(self::$user)) {
+					$org=null;
+					if (!isset(self::$user['org_id']) && isset(self::$user['org'])) {
+						self::$user['org_id'] = $this->User->Organisation->createOrgFromName($org, 0, true);
+						unset(self::$user['org']);
+					}
",0.0,,0.0,,0.0,none
CVE-2017-14337,CVE-2017-14337/be111a470204a974c50682054c9c7d4b94396ed9,https://github.com/MISP/MISP/commit/be111a470204a974c50682054c9c7d4b94396ed9,"<s>When MISP before 2.4.80 is configured with X.509 certificate authentication (CertAuth) in conjunction with a non-MISP external user management ReST API, if an external user provides X.509 certificate authentication and this API returns an empty value, the unauthenticated user can be granted access as an arbitrary user.</s>","<s>fix: Fix to certauth pains
</s>"," diff --git a/app/Plugin/CertAuth/Controller/Component/Auth/CertificateAuthenticate.php b/app/Plugin/CertAuth/Controller/Component/Auth/CertificateAuthenticate.php
index ce3d18db4..1ad5c481f 100644
--- a/app/Plugin/CertAuth/Controller/Component/Auth/CertificateAuthenticate.php
+++ b/app/Plugin/CertAuth/Controller/Component/Auth/CertificateAuthenticate.php
@@ -133,17 +133,19 @@ class CertificateAuthenticate extends BaseAuthenticate
 				// If $sync is true, allow the creation of the user from the certificate
 				$sync = Configure::read('CertAuth.syncUser');
 				if ($sync) {
-					self::getRestUser();
+					if (!self::getRestUser()) return false;
 				}
 
 				// find and fill user with model
 				$userModelKey = empty(Configure::read('CertAuth.userModelKey')) ? 'email' : Configure::read('CertAuth.userModelKey');
 				$userDefaults = Configure::read('CertAuth.userDefaults');
 				$this->User = ClassRegistry::init('User');
-				$existingUser = $this->User->find('first', array(
-					'conditions' => array($userModelKey => self::$user[$userModelKey]),
-					'recursive' => false
-				));
+				if (!empty(self::$user[$userModelKey])) {
+					$existingUser = $this->User->find('first', array(
+						'conditions' => array($userModelKey => self::$user[$userModelKey]),
+						'recursive' => false
+					));
+				}
 				if ($existingUser) {
 					if ($sync) {
 						if (!isset(self::$user['org_id']) && isset(self::$user['org'])) {
",1.0,,1.0,,1.0,none
CVE-2017-14337,CVE-2017-14337/9c9048422a13d32d658e4f03540389344f409a29,https://github.com/MISP/MISP/commit/9c9048422a13d32d658e4f03540389344f409a29,"<s>When MISP before 2.4.80 is configured with X.509 certificate authentication (CertAuth) in conjunction with a non-MISP external user management ReST API, if an external user provides X.509 certificate authentication and this API returns an empty value, the unauthenticated user can be granted access as an arbitrary user.</s>","<s>fix: fixes various issues with the certauth
</s>"," diff --git a/app/Plugin/CertAuth/Controller/Component/Auth/CertificateAuthenticate.php b/app/Plugin/CertAuth/Controller/Component/Auth/CertificateAuthenticate.php
index 43428ba3e..ce3d18db4 100644
--- a/app/Plugin/CertAuth/Controller/Component/Auth/CertificateAuthenticate.php
+++ b/app/Plugin/CertAuth/Controller/Component/Auth/CertificateAuthenticate.php
@@ -170,7 +170,8 @@ class CertificateAuthenticate extends BaseAuthenticate
 					self::$user = $this->User->getAuthUser($existingUser['User']['id']);
 					if (isset(self::$user['gpgkey'])) unset(self::$user['gpgkey']);
 				} else if ($sync && !empty(self::$user)) {
-					$org=null;
+					$org = isset(self::$client['org']) ? self::$client['org'] : null;
+					if ($org == null) return false;
 					if (!isset(self::$user['org_id']) && isset(self::$user['org'])) {
 						self::$user['org_id'] = $this->User->Organisation->createOrgFromName($org, 0, true);
 						unset(self::$user['org']);
@@ -192,7 +193,6 @@ class CertificateAuthenticate extends BaseAuthenticate
 				}
 			}
 		}
-
 		return self::$user;
 	}
 
",0.0,,0.0,,0.0,none
CVE-2017-14337,CVE-2017-14337/b3a60d84e2f80c031f67ce347f4f23098fad7caa,https://github.com/MISP/MISP/commit/b3a60d84e2f80c031f67ce347f4f23098fad7caa,"<s>When MISP before 2.4.80 is configured with X.509 certificate authentication (CertAuth) in conjunction with a non-MISP external user management ReST API, if an external user provides X.509 certificate authentication and this API returns an empty value, the unauthenticated user can be granted access as an arbitrary user.</s>","<s>fix: Fixed the missing refresh on attribute tags when a new tag is added
</s>"," diff --git a/app/View/Elements/Events/View/row_attribute.ctp b/app/View/Elements/Events/View/row_attribute.ctp
index da5ad27c6..eae0851c2 100644
--- a/app/View/Elements/Events/View/row_attribute.ctp
+++ b/app/View/Elements/Events/View/row_attribute.ctp
@@ -94,7 +94,7 @@
       </div>
     </td>
     <td class=""shortish"">
-      <div class=""attributeTagContainer"">
+      <div class=""attributeTagContainer"" id=""#Attribute_<?php echo h($object['id']);?>_tr .attributeTagContainer"">
         <?php echo $this->element('ajaxAttributeTags', array('attributeId' => $object['id'], 'attributeTags' => $object['AttributeTag'], 'tagAccess' => ($isSiteAdmin || $mayModify || $me['org_id'] == $event['Event']['org_id']) )); ?>
       </div>
     </td>
",0.0,,0.0,,0.0,none
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2015-2913,CVE-2015-2913/c0c90b15d27ddce965c6bd8ecbaec454b51a2de8,https://github.com/gigliovale/orientdb/commit/c0c90b15d27ddce965c6bd8ecbaec454b51a2de8,"<s>server/network/protocol/http/OHttpSessionManager.java in the Studio component in OrientDB Server Community Edition before 2.0.15 and 2.1.x before 2.1.1 improperly relies on the java.util.Random class for generation of random Session ID values, which makes it easier for remote attackers to predict a value by determining the internal state of the PRNG in this class.</s>","<s>implemented #4068
</s>"," diff --git a/server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/command/get/OServerCommandGetDisconnect.java b/server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/command/get/OServerCommandGetDisconnect.java
index 801254e0a5..b0e4d42560 100644
--- a/server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/command/get/OServerCommandGetDisconnect.java
+++ b/server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/command/get/OServerCommandGetDisconnect.java
@@ -1,63 +1,70 @@
 /*
-    *
-    *  *  Copyright 2014 Orient Technologies LTD (info(at)orientechnologies.com)
-    *  *
-    *  *  Licensed under the Apache License, Version 2.0 (the ""License"");
-    *  *  you may not use this file except in compliance with the License.
-    *  *  You may obtain a copy of the License at
-    *  *
-    *  *       http://www.apache.org/licenses/LICENSE-2.0
-    *  *
-    *  *  Unless required by applicable law or agreed to in writing, software
-    *  *  distributed under the License is distributed on an ""AS IS"" BASIS,
-    *  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    *  *  See the License for the specific language governing permissions and
-    *  *  limitations under the License.
-    *  *
-    *  * For more information: http://www.orientechnologies.com
-    *
-    */
+ *
+ *  *  Copyright 2014 Orient Technologies LTD (info(at)orientechnologies.com)
+ *  *
+ *  *  Licensed under the Apache License, Version 2.0 (the ""License"");
+ *  *  you may not use this file except in compliance with the License.
+ *  *  You may obtain a copy of the License at
+ *  *
+ *  *       http://www.apache.org/licenses/LICENSE-2.0
+ *  *
+ *  *  Unless required by applicable law or agreed to in writing, software
+ *  *  distributed under the License is distributed on an ""AS IS"" BASIS,
+ *  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  *  See the License for the specific language governing permissions and
+ *  *  limitations under the License.
+ *  *
+ *  * For more information: http://www.orientechnologies.com
+ *
+ */
 package com.orientechnologies.orient.server.network.protocol.http.command.get;
 
 import com.orientechnologies.orient.server.network.protocol.http.OHttpRequest;
- import com.orientechnologies.orient.server.network.protocol.http.OHttpResponse;
- import com.orientechnologies.orient.server.network.protocol.http.OHttpSessionManager;
- import com.orientechnologies.orient.server.network.protocol.http.OHttpUtils;
- import com.orientechnologies.orient.server.network.protocol.http.command.OServerCommandAbstract;
- import com.orientechnologies.orient.server.network.protocol.http.command.OServerCommandAuthenticatedDbAbstract;
+import com.orientechnologies.orient.server.network.protocol.http.OHttpResponse;
+import com.orientechnologies.orient.server.network.protocol.http.OHttpSessionManager;
+import com.orientechnologies.orient.server.network.protocol.http.OHttpUtils;
+import com.orientechnologies.orient.server.network.protocol.http.command.OServerCommandAbstract;
+import com.orientechnologies.orient.server.network.protocol.http.command.OServerCommandAuthenticatedDbAbstract;
 
- import java.io.IOException;
+import java.io.IOException;
 
 public class OServerCommandGetDisconnect extends OServerCommandAbstract {
-   private static final String[] NAMES = { ""GET|disconnect"" };
-
-   @Override
-   public boolean beforeExecute(OHttpRequest iRequest, OHttpResponse iResponse) throws IOException {
-     super.beforeExecute(iRequest, iResponse);
-     return true;
-   }
-
-   @Override
-   public boolean execute(final OHttpRequest iRequest, OHttpResponse iResponse) throws Exception {
-     checkSyntax(iRequest.url, 1, ""Syntax error: disconnect"");
-
-     iRequest.data.commandInfo = ""Disconnect"";
-     iRequest.data.commandDetail = null;
-
-     if (iRequest.sessionId != null) {
-       OHttpSessionManager.getInstance().removeSession(iRequest.sessionId);
-       iRequest.sessionId = OServerCommandAuthenticatedDbAbstract.SESSIONID_UNAUTHORIZED;
-       iResponse.setSessionId(iRequest.sessionId);
-     }
-
-     iResponse.keepAlive = false;
-     iResponse.send(OHttpUtils.STATUS_AUTH_CODE, OHttpUtils.STATUS_AUTH_DESCRIPTION, OHttpUtils.CONTENT_TEXT_PLAIN, ""Logged out"",
-         null);
-     return false;
-   }
-
-   @Override
-   public String[] getNames() {
-     return NAMES;
-   }
- }
+  private static final String[] NAMES = { ""GET|disconnect"" };
+
+  @Override
+  public boolean beforeExecute(OHttpRequest iRequest, OHttpResponse iResponse) throws IOException {
+    super.beforeExecute(iRequest, iResponse);
+    return true;
+  }
+
+  @Override
+  public boolean execute(final OHttpRequest iRequest, OHttpResponse iResponse) throws Exception {
+    checkSyntax(iRequest.url, 1, ""Syntax error: disconnect"");
+
+    iRequest.data.commandInfo = ""Disconnect"";
+    iRequest.data.commandDetail = null;
+
+    if (iRequest.sessionId != null) {
+      OHttpSessionManager.getInstance().removeSession(iRequest.sess",0.0,,0.0,,0.0,none
CVE-2015-2913,CVE-2015-2913/668ece96be210e742a4e2820a3085b215cf55104,https://github.com/gigliovale/orientdb/commit/668ece96be210e742a4e2820a3085b215cf55104,"<s>server/network/protocol/http/OHttpSessionManager.java in the Studio component in OrientDB Server Community Edition before 2.0.15 and 2.1.x before 2.1.1 improperly relies on the java.util.Random class for generation of random Session ID values, which makes it easier for remote attackers to predict a value by determining the internal state of the PRNG in this class.</s>","<s>Adopted SecureRandom to avoid predicable random numbers in session
</s>"," diff --git a/server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/OHttpSessionManager.java b/server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/OHttpSessionManager.java
index bcc581a06d..51a16a4349 100755
--- a/server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/OHttpSessionManager.java
+++ b/server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/OHttpSessionManager.java
@@ -1,141 +1,142 @@
 /*
-    *
-    *  *  Copyright 2014 Orient Technologies LTD (info(at)orientechnologies.com)
-    *  *
-    *  *  Licensed under the Apache License, Version 2.0 (the ""License"");
-    *  *  you may not use this file except in compliance with the License.
-    *  *  You may obtain a copy of the License at
-    *  *
-    *  *       http://www.apache.org/licenses/LICENSE-2.0
-    *  *
-    *  *  Unless required by applicable law or agreed to in writing, software
-    *  *  distributed under the License is distributed on an ""AS IS"" BASIS,
-    *  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    *  *  See the License for the specific language governing permissions and
-    *  *  limitations under the License.
-    *  *
-    *  * For more information: http://www.orientechnologies.com
-    *
-    */
+ *
+ *  *  Copyright 2014 Orient Technologies LTD (info(at)orientechnologies.com)
+ *  *
+ *  *  Licensed under the Apache License, Version 2.0 (the ""License"");
+ *  *  you may not use this file except in compliance with the License.
+ *  *  You may obtain a copy of the License at
+ *  *
+ *  *       http://www.apache.org/licenses/LICENSE-2.0
+ *  *
+ *  *  Unless required by applicable law or agreed to in writing, software
+ *  *  distributed under the License is distributed on an ""AS IS"" BASIS,
+ *  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  *  See the License for the specific language governing permissions and
+ *  *  limitations under the License.
+ *  *
+ *  * For more information: http://www.orientechnologies.com
+ *
+ */
 package com.orientechnologies.orient.server.network.protocol.http;
 
 import com.orientechnologies.common.concur.resource.OSharedResourceAbstract;
- import com.orientechnologies.common.log.OLogManager;
- import com.orientechnologies.orient.core.Orient;
- import com.orientechnologies.orient.core.config.OGlobalConfiguration;
-
- import java.util.HashMap;
- import java.util.Iterator;
- import java.util.Map;
- import java.util.Map.Entry;
- import java.util.Random;
- import java.util.TimerTask;
+import com.orientechnologies.common.log.OLogManager;
+import com.orientechnologies.orient.core.Orient;
+import com.orientechnologies.orient.core.config.OGlobalConfiguration;
+
+import java.security.SecureRandom;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.Random;
+import java.util.TimerTask;
 
 /**
-  * Handles the HTTP sessions such as a real HTTP Server.
-  *
-  * @author Luca Garulli
-  */
- public class OHttpSessionManager extends OSharedResourceAbstract {
-   private static final OHttpSessionManager instance = new OHttpSessionManager();
-   private Map<String, OHttpSession>        sessions = new HashMap<String, OHttpSession>();
-   private int                              expirationTime;
-   private Random                           random   = new Random();
-
-   protected OHttpSessionManager() {
-     expirationTime = OGlobalConfiguration.NETWORK_HTTP_SESSION_EXPIRE_TIMEOUT.getValueAsInteger() * 1000;
-
-     Orient.instance().scheduleTask(new TimerTask() {
-       @Override
-       public void run() {
-         final int expired = checkSessionsValidity();
-         if (expired > 0)
-           OLogManager.instance().debug(this, ""Removed %d session because expired"", expired);
-       }
-     }, expirationTime, expirationTime);
-   }
-
-   public int checkSessionsValidity() {
-     int expired = 0;
-
-     acquireExclusiveLock();
-     try {
-       final long now = System.currentTimeMillis();
-
-       Entry<String, OHttpSession> s;
-       for (Iterator<Map.Entry<String, OHttpSession>> it = sessions.entrySet().iterator(); it.hasNext();) {
-         s = it.next();
-
-         if (now - s.getValue().getUpdatedOn() > expirationTime) {
-           // REMOVE THE SESSION
-           it.remove();
-           expired++;
-         }
-       }
-
-     } finally {
-       releaseExclusiveLock();
-     }
-
-     return expired;
-   }
-
-   public OHttpSession[] getSessions() {
-     acquireSharedLock();
-     try {
-
-       return (OHttpSession[]) sessions.values().toArray(new OHttpSession[sessions.size()]);
-
-     } finally {
-       releaseSharedLock();
-     }
-   }
-
-   public OHttpSession getSession(final String iId) {
-     acquireSharedLock();
-     try {
-
-       final OHttpSession sess = sessions.get(iId);
-       if (sess != null)
-         sess.updateLastUpdatedOn();
-       return sess;
-
-     } finally {
-       releaseSharedLock();
-     }
-   }
-
-   public String createSess",1.0,,1.0,,1.0,none
CVE-2015-2913,CVE-2015-2913/177d62d9cf56e5ff3ee50aa46f7fe80eff4e8950,https://github.com/gigliovale/orientdb/commit/177d62d9cf56e5ff3ee50aa46f7fe80eff4e8950,"<s>server/network/protocol/http/OHttpSessionManager.java in the Studio component in OrientDB Server Community Edition before 2.0.15 and 2.1.x before 2.1.1 improperly relies on the java.util.Random class for generation of random Session ID values, which makes it easier for remote attackers to predict a value by determining the internal state of the PRNG in this class.</s>","<s>Fixed problem with install database from Studio
</s>"," diff --git a/server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/command/post/OServerCommandPostInstallDatabase.java b/server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/command/post/OServerCommandPostInstallDatabase.java
index 907ddd4185..f7a7058ec3 100755
--- a/server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/command/post/OServerCommandPostInstallDatabase.java
+++ b/server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/command/post/OServerCommandPostInstallDatabase.java
@@ -17,40 +17,19 @@
  */
 package com.orientechnologies.orient.server.network.protocol.http.command.post;
 
-import java.io.File;
-import java.io.IOException;
-import java.io.StringWriter;
-import java.net.URL;
-import java.net.URLConnection;
-import java.util.Arrays;
-import java.util.HashSet;
-import java.util.Map.Entry;
-import java.util.Set;
-
-import com.orientechnologies.common.log.OLogManager;
-import com.orientechnologies.orient.core.Orient;
 import com.orientechnologies.orient.core.command.OCommandOutputListener;
 import com.orientechnologies.orient.core.compression.impl.OZIPCompressionUtil;
-import com.orientechnologies.orient.core.config.OStorageEntryConfiguration;
-import com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;
-import com.orientechnologies.orient.core.engine.local.OEngineLocalPaginated;
-import com.orientechnologies.orient.core.engine.memory.OEngineMemory;
 import com.orientechnologies.orient.core.exception.ODatabaseException;
-import com.orientechnologies.orient.core.exception.OSecurityAccessException;
-import com.orientechnologies.orient.core.index.OIndex;
-import com.orientechnologies.orient.core.index.OIndexDefinition;
-import com.orientechnologies.orient.core.metadata.schema.OClass;
-import com.orientechnologies.orient.core.metadata.schema.OProperty;
-import com.orientechnologies.orient.core.metadata.security.ORole;
-import com.orientechnologies.orient.core.metadata.security.OUser;
-import com.orientechnologies.orient.core.record.impl.ODocument;
-import com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;
-import com.orientechnologies.orient.core.storage.OCluster;
+import com.orientechnologies.orient.core.storage.impl.local.paginated.OLocalPaginatedStorage;
 import com.orientechnologies.orient.server.network.protocol.http.OHttpRequest;
 import com.orientechnologies.orient.server.network.protocol.http.OHttpResponse;
 import com.orientechnologies.orient.server.network.protocol.http.OHttpUtils;
 import com.orientechnologies.orient.server.network.protocol.http.command.OServerCommandAuthenticatedServerAbstract;
 
+import java.io.File;
+import java.net.URL;
+import java.net.URLConnection;
+
 public class OServerCommandPostInstallDatabase extends OServerCommandAuthenticatedServerAbstract {
   private static final String[] NAMES = { ""POST|installDatabase"" };
 
@@ -63,22 +42,23 @@ public class OServerCommandPostInstallDatabase extends OServerCommandAuthenticat
     checkSyntax(iRequest.url, 1, ""Syntax error: installDatabase"");
     iRequest.data.commandInfo = ""Import database"";
     try {
-      String url = iRequest.content;
-      String name = getDbName(url);
+      final String url = iRequest.content;
+      final String name = getDbName(url);
       if (name != null) {
-       
-        String folder = server.getDatabaseDirectory() + File.separator + name;
-        File f = new File(folder);
-        if (f.exists()) {
+
+        final String folder = server.getDatabaseDirectory() + File.separator + name;
+        final File f = new File(folder);
+        if (f.exists() && OLocalPaginatedStorage.exists(folder)) {
           throw new ODatabaseException(""Database named '"" + name + ""' already exists: "");
         } else {
           f.mkdirs();
-          URL uri = new URL(url);
-          URLConnection conn = uri.openConnection();
+          final URL uri = new URL(url);
+          final URLConnection conn = uri.openConnection();
+          conn.setRequestProperty(""User-Agent"", ""OrientDB-Studio"");
+          conn.setDefaultUseCaches(false);
           OZIPCompressionUtil.uncompressDirectory(conn.getInputStream(), folder, new OCommandOutputListener() {
             @Override
             public void onMessage(String iText) {
-
             }
           });
           iResponse.send(OHttpUtils.STATUS_OK_CODE, ""OK"", OHttpUtils.CONTENT_TEXT_PLAIN, null, null);
@@ -93,7 +73,7 @@ public class OServerCommandPostInstallDatabase extends OServerCommandAuthenticat
     return false;
   }
 
-  protected String getDbName(String url) {
+  protected String getDbName(final String url) {
     String name = null;
     if (url != null) {
       int idx = url.lastIndexOf(""/"");
@@ -104,181 +84,6 @@ public class OServerCommandPostInstallDatabase extends OServerCommandAuthenticat
     return name;
   }
 
-  protected String getStoragePath(final String databaseName, final String storageMode) {
-    final String path;
-    if (storageMode.equals(OEngineLocalPaginated.NAME)) {
-      path = storageMode + "":${"" + Orien",0.0,,0.0,,0.0,none
CVE-2015-2913,CVE-2015-2913/6ff4abeff90c64edebd4239fdabeb4acd1679565,https://github.com/gigliovale/orientdb/commit/6ff4abeff90c64edebd4239fdabeb4acd1679565,"<s>server/network/protocol/http/OHttpSessionManager.java in the Studio component in OrientDB Server Community Edition before 2.0.15 and 2.1.x before 2.1.1 improperly relies on the java.util.Random class for generation of random Session ID values, which makes it easier for remote attackers to predict a value by determining the internal state of the PRNG in this class.</s>","<s>Update OHttpRequestWrapper.java
re #4123
</s>"," diff --git a/server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/OHttpRequestWrapper.java b/server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/OHttpRequestWrapper.java
index c99e56edbe..7ad34cc688 100644
--- a/server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/OHttpRequestWrapper.java
+++ b/server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/OHttpRequestWrapper.java
@@ -86,6 +86,15 @@ import java.util.Map;
      return request.httpMethod;
    }
 
+   /**
+    * Return the request's HTTP headers
+    * 
+    * @return The HTTP request headers in the form of a map
+    */
+   public Map<String, String> getHeaders() {
+     return request.headers;
+   }
+   
    /**
     * Return the request's IF-MATCH header.
     *
",0.0,,0.0,,0.0,none
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2012-6105,CVE-2012-6105/52f9e3ee5646e777cc09149e3aea55a3255b2ca4,https://github.com/moodle/moodle/commit/52f9e3ee5646e777cc09149e3aea55a3255b2ca4,"<s>blog/rsslib.php in Moodle 2.1.x before 2.1.10, 2.2.x before 2.2.7, 2.3.x before 2.3.4, and 2.4.x before 2.4.1 continues to provide a blog RSS feed after blogging is disabled, which allows remote attackers to obtain sensitive information by reading this feed.</s>","<s>MDL-37467 Do not provide blog posts via RSS when blogging is disabled
</s>"," diff --git a/blog/rsslib.php b/blog/rsslib.php
index f02a0f3fa0b..f5b8e311dc4 100644
--- a/blog/rsslib.php
+++ b/blog/rsslib.php
@@ -104,6 +104,11 @@ function blog_rss_get_params($filters) {
 function blog_rss_get_feed($context, $args) {
     global $CFG, $SITE, $DB;
 
+    if (empty($CFG->bloglevel)) {
+        debugging('Blogging disabled on this site, RSS feeds are not available');
+        return null;
+    }
+
     if (empty($CFG->enablerssfeeds)) {
         debugging('Sorry, RSS feeds are disabled on this site');
         return '';
",1.0,,1.0,,1.0,none
CVE-2012-6105,CVE-2012-6105/591b34218c9ab95cf137987f0bb8d4e60e28936a,https://github.com/moodle/moodle/commit/591b34218c9ab95cf137987f0bb8d4e60e28936a,"<s>blog/rsslib.php in Moodle 2.1.x before 2.1.10, 2.2.x before 2.2.7, 2.3.x before 2.3.4, and 2.4.x before 2.4.1 continues to provide a blog RSS feed after blogging is disabled, which allows remote attackers to obtain sensitive information by reading this feed.</s>","<s>MDL-36620 - Blog, RSS - Preventing Guests from viewing the RSS of site level blogs
Conflicts:
	blog/rsslib.php
</s>"," diff --git a/blog/rsslib.php b/blog/rsslib.php
index 6ba735da0bd..f02a0f3fa0b 100644
--- a/blog/rsslib.php
+++ b/blog/rsslib.php
@@ -109,6 +109,13 @@ function blog_rss_get_feed($context, $args) {
         return '';
     }
 
+    if ($CFG->bloglevel == BLOG_SITE_LEVEL) {
+        if (isguestuser()) {
+            debugging(get_string('nopermissiontoshow','error'));
+            return '';
+        }
+    }
+
     $sitecontext = get_context_instance(CONTEXT_SYSTEM);
     if (!has_capability('moodle/blog:view', $sitecontext)) {
         return null;
",0.0,,0.0,,0.0,none
CVE-2012-6105,CVE-2012-6105/82695f7730258adb0f292f0853bfc168e3e39b03,https://github.com/moodle/moodle/commit/82695f7730258adb0f292f0853bfc168e3e39b03,"<s>blog/rsslib.php in Moodle 2.1.x before 2.1.10, 2.2.x before 2.2.7, 2.3.x before 2.3.4, and 2.4.x before 2.4.1 continues to provide a blog RSS feed after blogging is disabled, which allows remote attackers to obtain sensitive information by reading this feed.</s>","<s>MDL-36609 javascript: ensure HTML element exists before attempting to perform JS functionality
</s>"," diff --git a/lib/javascript-static.js b/lib/javascript-static.js
index f9b06acfe83..4b47d1d07d9 100644
--- a/lib/javascript-static.js
+++ b/lib/javascript-static.js
@@ -320,11 +320,16 @@ M.util.init_maximised_embed = function(Y, id) {
         if (Y.Lang.isString(el)) {
             el = Y.one('#' + el);
         }
-        var val = el.getStyle(prop);
-        if (val == 'auto') {
-            val = el.getComputedStyle(prop);
+        // Ensure element exists.
+        if (el) {
+            var val = el.getStyle(prop);
+            if (val == 'auto') {
+                val = el.getComputedStyle(prop);
+            }
+            return parseInt(val);
+        } else {
+            return 0;
         }
-        return parseInt(val);
     };
 
     var resize_object = function() {
",0.0,,0.0,,0.0,none
CVE-2012-6105,CVE-2012-6105/933cf2e1151e6e678c5c7d47d5917bdf55c67021,https://github.com/moodle/moodle/commit/933cf2e1151e6e678c5c7d47d5917bdf55c67021,"<s>blog/rsslib.php in Moodle 2.1.x before 2.1.10, 2.2.x before 2.2.7, 2.3.x before 2.3.4, and 2.4.x before 2.4.1 continues to provide a blog RSS feed after blogging is disabled, which allows remote attackers to obtain sensitive information by reading this feed.</s>","<s>MDL-37035 Pass user locale after course locale.
</s>"," diff --git a/mod/lti/locallib.php b/mod/lti/locallib.php
index 74f0276046f..b6d8fd96093 100644
--- a/mod/lti/locallib.php
+++ b/mod/lti/locallib.php
@@ -228,11 +228,6 @@ function lti_build_request($instance, $typeconfig, $course) {
 
     $role = lti_get_ims_role($USER, $instance->cmid, $instance->course);
 
-    $locale = $course->lang;
-    if ( strlen($locale) < 1 ) {
-         $locale = $CFG->lang;
-    }
-
     $requestparams = array(
         'resource_link_id' => $instance->id,
         'resource_link_title' => $instance->name,
@@ -242,7 +237,7 @@ function lti_build_request($instance, $typeconfig, $course) {
         'context_id' => $course->id,
         'context_label' => $course->shortname,
         'context_title' => $course->fullname,
-        'launch_presentation_locale' => $locale,
+        'launch_presentation_locale' => current_language()
     );
 
     $placementsecret = $instance->servicesalt;
",0.0,,0.0,,0.0,none
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2021-46822,CVE-2021-46822/f35fd27ec641c42d6b115bfa595e483ec58188d2,https://github.com/libjpeg-turbo/libjpeg-turbo/commit/f35fd27ec641c42d6b115bfa595e483ec58188d2,<s>The PPM reader in libjpeg-turbo through 2.0.90 mishandles use of tjLoadImage for loading a 16-bit binary PPM file into a grayscale buffer and loading a 16-bit binary PGM file into an RGB buffer. This is related to a heap-based buffer overflow in the get_word_rgb_row function in rdppm.c.</s>,"<s>tjLoadImage: Fix issues w/loading 16-bit PPMs/PGMs
- The PPM reader now throws an error rather than segfaulting (due to a
  buffer overrun) if an application attempts to load a 16-bit PPM file
  into a grayscale uncompressed image buffer.  No known applications
  allowed that (not even the test applications in libjpeg-turbo),
  because that mode of operation was never expected to work and did not
  work under any circumstances.  (In fact, it was necessary to modify
  TJBench in order to reproduce the issue outside of a fuzzing
  environment.)  This was purely a matter of making the library bow out
  gracefully rather than crash if an application tries to do something
  really stupid.
- The PPM reader now throws an error rather than generating incorrect
  pixels if an application attempts to load a 16-bit PGM file into an
  RGB uncompressed image buffer.
- The PPM reader now correctly loads 16-bit PPM files into extended
  RGB uncompressed image buffers.  (Previously it generated incorrect
  pixels unless the input colorspace was JCS_RGB or JCS_EXT_RGB.)
The only way that users could have potentially encountered these issues
was through the tjLoadImage() function.  cjpeg and TJBench were
unaffected.
</s>"," diff --git a/rdppm.c b/rdppm.c
index c4c937e8..6ac8fdbf 100644
--- a/rdppm.c
+++ b/rdppm.c
@@ -5,7 +5,7 @@
  * Copyright (C) 1991-1997, Thomas G. Lane.
  * Modified 2009 by Bill Allombert, Guido Vollbeding.
  * libjpeg-turbo Modifications:
- * Copyright (C) 2015-2017, 2020, D. R. Commander.
+ * Copyright (C) 2015-2017, 2020-2021, D. R. Commander.
  * For conditions of distribution and use, see the accompanying README.ijg
  * file.
  *
@@ -516,6 +516,11 @@ get_word_rgb_row(j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
   register JSAMPLE *rescale = source->rescale;
   JDIMENSION col;
   unsigned int maxval = source->maxval;
+  register int rindex = rgb_red[cinfo->in_color_space];
+  register int gindex = rgb_green[cinfo->in_color_space];
+  register int bindex = rgb_blue[cinfo->in_color_space];
+  register int aindex = alpha_index[cinfo->in_color_space];
+  register int ps = rgb_pixelsize[cinfo->in_color_space];
 
   if (!ReadOK(source->pub.input_file, source->iobuffer, source->buffer_width))
     ERREXIT(cinfo, JERR_INPUT_EOF);
@@ -527,17 +532,20 @@ get_word_rgb_row(j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
     temp |= UCH(*bufferptr++);
     if (temp > maxval)
       ERREXIT(cinfo, JERR_PPM_OUTOFRANGE);
-    *ptr++ = rescale[temp];
+    ptr[rindex] = rescale[temp];
     temp  = UCH(*bufferptr++) << 8;
     temp |= UCH(*bufferptr++);
     if (temp > maxval)
       ERREXIT(cinfo, JERR_PPM_OUTOFRANGE);
-    *ptr++ = rescale[temp];
+    ptr[gindex] = rescale[temp];
     temp  = UCH(*bufferptr++) << 8;
     temp |= UCH(*bufferptr++);
     if (temp > maxval)
       ERREXIT(cinfo, JERR_PPM_OUTOFRANGE);
-    *ptr++ = rescale[temp];
+    ptr[bindex] = rescale[temp];
+    if (aindex >= 0)
+      ptr[aindex] = 0xFF;
+    ptr += ps;
   }
   return 1;
 }
@@ -624,7 +632,10 @@ start_input_ppm(j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
       cinfo->in_color_space = JCS_GRAYSCALE;
     TRACEMS2(cinfo, 1, JTRC_PGM, w, h);
     if (maxval > 255) {
-      source->pub.get_pixel_rows = get_word_gray_row;
+      if (cinfo->in_color_space == JCS_GRAYSCALE)
+        source->pub.get_pixel_rows = get_word_gray_row;
+      else
+        ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
     } else if (maxval == MAXJSAMPLE && sizeof(JSAMPLE) == sizeof(U_CHAR) &&
                cinfo->in_color_space == JCS_GRAYSCALE) {
       source->pub.get_pixel_rows = get_raw_row;
@@ -647,7 +658,10 @@ start_input_ppm(j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
       cinfo->in_color_space = JCS_EXT_RGB;
     TRACEMS2(cinfo, 1, JTRC_PPM, w, h);
     if (maxval > 255) {
-      source->pub.get_pixel_rows = get_word_rgb_row;
+      if (IsExtRGB(cinfo->in_color_space))
+        source->pub.get_pixel_rows = get_word_rgb_row;
+      else
+        ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
     } else if (maxval == MAXJSAMPLE && sizeof(JSAMPLE) == sizeof(U_CHAR) &&
 #if RGB_RED == 0 && RGB_GREEN == 1 && RGB_BLUE == 2 && RGB_PIXELSIZE == 3
                (cinfo->in_color_space == JCS_EXT_RGB ||
",1.0,,1.0,,1.0,lime
CVE-2021-46822,CVE-2021-46822/dd830b3ffe30a76fbe8c1f13ebc7483c9ff792e5,https://github.com/libjpeg-turbo/libjpeg-turbo/commit/dd830b3ffe30a76fbe8c1f13ebc7483c9ff792e5,<s>The PPM reader in libjpeg-turbo through 2.0.90 mishandles use of tjLoadImage for loading a 16-bit binary PPM file into a grayscale buffer and loading a 16-bit binary PGM file into an RGB buffer. This is related to a heap-based buffer overflow in the get_word_rgb_row function in rdppm.c.</s>,"<s>rdbmp.c/rdppm.c: Fix more innocuous UBSan errors
- rdbmp.c: Because of 8fb37b81713a0cdc14622dc08892ebd28a3233aa,
  bfOffBits, biClrUsed, and headerSize were made into unsigned ints.
  Thus, if bPad would eventually be negative due to a malformed header,
  UBSan complained about unsigned math being used in the intermediate
  computations.  It was unnecessary to make those variables unsigned,
  since they are only meant to hold small values, so this commit makes
  them signed again.  The UBSan error was innocuous, because it is
  effectively (if not officially) the case that
  (int)((unsigned int)a - (unsigned int)b) == (int)a - (int)b.
- rdbmp.c: If (biWidth * source->bits_per_pixel / 8) would overflow an
  unsigned int, then UBSan complained at the point at which row_width
  was set in start_input_bmp(), even though the overflow would have been
  detected later in the function.  This commit adds overflow checks
  prior to setting row_width.
- rdppm.c: read_pbm_integer() now bounds-checks the intermediate
  value computations in order to catch integer overflow caused by a
  malformed text PPM.  It's possible, though extremely unlikely, that
  the intermediate value computations could have wrapped around to a
  value smaller than maxval, but the worst case is that this would have
  generated a bogus pixel in the uncompressed image rather than throwing
  an error.
</s>"," diff --git a/rdppm.c b/rdppm.c
index d4378dda..cea124ce 100644
--- a/rdppm.c
+++ b/rdppm.c
@@ -112,11 +112,10 @@ read_pbm_integer(j_compress_ptr cinfo, FILE *infile, unsigned int maxval)

  while ((ch = pbm_getc(infile)) >= '0' && ch <= '9') {
  (((unsigned val *= 10;
[offset + 3 val += ch - '0';
+  unsigned int if (val > maxval)
+ unsigned int headerSize; ERREXIT(cinfo, JERR_PPM_OUTOFRANGE);
 biWidth }
 
- bi if (val > maxval)
-anes;
 ERREXIT(cinfo, JERR_PPM_OUTOFRANGE);
-
Meter return val;
 }
 bi
rUsed = 0;
+  int biClrUsed = 0;
   int mapentrysize = 0;         /* 0 indicates no colormap */
   int bPad;
   JDIMENSION row_width = 0;
@@ -575,6 +575,8 @@ start_input_bmp(j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
       cinfo->input_components = 4;
     else
       ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
+    if ((unsigned long long)biWidth * 3ULL > 0xFFFFFFFFULL)
+      ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
     row_width = (JDIMENSION)(biWidth * 3);
     break;
   case 32:
@@ -586,6 +588,8 @@ start_input_bmp(j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
       cinfo->input_components = 4;
     else
       ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
+    if ((unsigned long long)biWidth * 4ULL > 0xFFFFFFFFULL)
+      ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
     row_width = (JDIMENSION)(biWidth * 4);
     break;
   default:
",0.0,,0.0,,0.0,lime
CVE-2021-46822,CVE-2021-46822/b1079002ad451aab896617098b6bcbaae1d967e4,https://github.com/libjpeg-turbo/libjpeg-turbo/commit/b1079002ad451aab896617098b6bcbaae1d967e4,<s>The PPM reader in libjpeg-turbo through 2.0.90 mishandles use of tjLoadImage for loading a 16-bit binary PPM file into a grayscale buffer and loading a 16-bit binary PGM file into an RGB buffer. This is related to a heap-based buffer overflow in the get_word_rgb_row function in rdppm.c.</s>,"<s>rdppm.c: Fix innocuous MSan error
A fuzzing test case that was effectively a 1-pixel PGM file with a
maximum value of 1 and an actual value of 8 caused an uninitialized
member of the rescale[] array to be accessed in get_gray_rgb_row() or
get_gray_cmyk_row().  Since, for performance reasons, those functions do
not perform bounds checking on the PPM values, we need to ensure that
unused members of the rescale[] array are initialized.
</s>"," diff --git a/rdppm.c b/rdppm.c
index 6ac8fdbf..d4378dda 100644
--- a/rdppm.c
+++ b/rdppm.c
@@ -727,6 +727,8 @@ start_input_ppm(j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
       (*cinfo->mem->alloc_small) ((j_common_ptr)cinfo, JPOOL_IMAGE,
                                   (size_t)(((long)MAX(maxval, 255) + 1L) *
                                            sizeof(JSAMPLE)));
+    MEMZERO(source->rescale, (size_t)(((long)MAX(maxval, 255) + 1L) *
+                                      sizeof(JSAMPLE)));
     half_maxval = maxval / 2;
     for (val = 0; val <= (long)maxval; val++) {
       /* The multiplication here must be done in 32 bits to avoid overflow */
",0.0,,0.0,,0.0,lime
CVE-2021-46822,CVE-2021-46822/34d264d64e0ab1e2aca5901829eb44d9b3db7ff9,https://github.com/libjpeg-turbo/libjpeg-turbo/commit/34d264d64e0ab1e2aca5901829eb44d9b3db7ff9,<s>The PPM reader in libjpeg-turbo through 2.0.90 mishandles use of tjLoadImage for loading a 16-bit binary PPM file into a grayscale buffer and loading a 16-bit binary PGM file into an RGB buffer. This is related to a heap-based buffer overflow in the get_word_rgb_row function in rdppm.c.</s>,"<s>OSS-Fuzz: Private TurboJPEG API flag for fuzzing
This limits the tjLoadImage() behavioral changes to the scope of the
compress_fuzzer target.  Otherwise, TJBench in fuzzer builds would
refuse to load images larger than 1 Mpixel.
</s>"," diff --git a/turbojpeg.c b/turbojpeg.c
index f33f2cb2..0bbdb880 100644
--- a/turbojpeg.c
+++ b/turbojpeg.c
@@ -204,6 +204,11 @@ static int cs2pf[JPEG_NUMCS] = {
   this->isInstanceError = TRUE;  THROWG(m) \
 }
 
+#ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
+/* Private flag that triggers different TurboJPEG API behavior when fuzzing */
+#define TJFLAG_FUZZING  (1 << 31)
+#endif
+
 #define GET_INSTANCE(handle) \
   tjinstance *this = (tjinstance *)handle; \
   j_compress_ptr cinfo = NULL; \
@@ -2097,8 +2102,9 @@ DLLEXPORT unsigned char *tjLoadImage(const char *filename, int *width,
   /* Ignore 0-pixel images and images larger than 1 Megapixel when fuzzing.
      Casting *width to (unsigned long long) prevents integer overflow if
      (*width) * (*height) > INT_MAX. */
-  if (*width < 1 || *height < 1 ||
-      (unsigned long long)(*width) * (*height) > 1048576)
+  if (flags & TJFLAG_FUZZING &&
+      (*width < 1 || *height < 1 ||
+       (unsigned long long)(*width) * (*height) > 1048576))
     THROWG(""tjLoadImage(): Uncompressed image is too large"");
 #endif
 
",0.0,,0.0,,0.0,lime
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2018-15133,CVE-2018-15133/c0eb9073eb2cedab1db6c0d1ea4b3aecdc258597,https://github.com/laravel/framework/commit/c0eb9073eb2cedab1db6c0d1ea4b3aecdc258597,"<s>In Laravel Framework through 5.5.40 and 5.6.x through 5.6.29, remote code execution might occur as a result of an unserialize call on a potentially untrusted X-XSRF-TOKEN value. This involves the decrypt method in Illuminate/Encryption/Encrypter.php and PendingBroadcast in gadgetchains/Laravel/RCE/3/chain.php in phpggc. The attacker must know the application key, which normally would never occur, but could happen if the attacker previously had privileged access or successfully accomplished a previous attack.</s>","<s>dont serialize csrf cookie / header (#25121)

</s>"," diff --git a/src/Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.php b/src/Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.php
index a33e20952f..89a5501791 100644
--- a/src/Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.php
+++ b/src/Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.php
@@ -138,7 +138,7 @@ protected function getTokenFromRequest($request)
         $token = $request->input('_token') ?: $request->header('X-CSRF-TOKEN');
 
         if (! $token && $header = $request->header('X-XSRF-TOKEN')) {
-            $token = $this->encrypter->decrypt($header);
+            $token = $this->encrypter->decrypt($header, false);
         }
 
         return $token;
",1.0,,1.0,,0.0,tfidf
CVE-2018-15133,CVE-2018-15133/97467e3ca765f7a2f6cec8924ec2aa466c712c33,https://github.com/laravel/framework/commit/97467e3ca765f7a2f6cec8924ec2aa466c712c33,"<s>In Laravel Framework through 5.5.40 and 5.6.x through 5.6.29, remote code execution might occur as a result of an unserialize call on a potentially untrusted X-XSRF-TOKEN value. This involves the decrypt method in Illuminate/Encryption/Encrypter.php and PendingBroadcast in gadgetchains/Laravel/RCE/3/chain.php in phpggc. The attacker must know the application key, which normally would never occur, but could happen if the attacker previously had privileged access or successfully accomplished a previous attack.</s>","<s>disable serialization for all cookies
</s>"," diff --git a/src/Illuminate/Cookie/Middleware/EncryptCookies.php b/src/Illuminate/Cookie/Middleware/EncryptCookies.php
index 0989f7b12d..c9f94a28ef 100644
--- a/src/Illuminate/Cookie/Middleware/EncryptCookies.php
+++ b/src/Illuminate/Cookie/Middleware/EncryptCookies.php
@@ -25,15 +25,6 @@ class EncryptCookies
      */
     protected $except = [];
 
-    /**
-     * The cookies that should not be serialized.
-     *
-     * @var array
-     */
-    protected $serialization = [
-        'XSRF-TOKEN' => false,
-    ];
-
     /**
      * Create a new CookieGuard instance.
      *
@@ -43,8 +34,6 @@ class EncryptCookies
     public function __construct(EncrypterContract $encrypter)
     {
         $this->encrypter = $encrypter;
-
-        $this->serialization[config('session.cookie')] = false;
     }
 
     /**
@@ -104,7 +93,7 @@ protected function decryptCookie($name, $cookie)
     {
         return is_array($cookie)
                         ? $this->decryptArray($cookie)
-                        : $this->encrypter->decrypt($cookie, $this->serialization[$name] ?? true);
+                        : $this->encrypter->decrypt($cookie, false);
     }
 
     /**
@@ -119,7 +108,7 @@ protected function decryptArray(array $cookie)
 
         foreach ($cookie as $key => $value) {
             if (is_string($value)) {
-                $decrypted[$key] = $this->encrypter->decrypt($value, $this->serialization[$key] ?? true);
+                $decrypted[$key] = $this->encrypter->decrypt($value, false);
             }
         }
 
@@ -139,10 +128,8 @@ protected function encrypt(Response $response)
                 continue;
             }
 
-            $serialize = $this->serialization[$cookie->getName()] ?? true;
-
             $response->headers->setCookie($this->duplicate(
-                $cookie, $this->encrypter->encrypt($cookie->getValue(), $serialize)
+                $cookie, $this->encrypter->encrypt($cookie->getValue(), false)
             ));
         }
 
",0.0,,0.0,,1.0,tfidf
CVE-2018-15133,CVE-2018-15133/999e7fe6c4072cd5d7b09f68e487008eb877f09e,https://github.com/laravel/framework/commit/999e7fe6c4072cd5d7b09f68e487008eb877f09e,"<s>In Laravel Framework through 5.5.40 and 5.6.x through 5.6.29, remote code execution might occur as a result of an unserialize call on a potentially untrusted X-XSRF-TOKEN value. This involves the decrypt method in Illuminate/Encryption/Encrypter.php and PendingBroadcast in gadgetchains/Laravel/RCE/3/chain.php in phpggc. The attacker must know the application key, which normally would never occur, but could happen if the attacker previously had privileged access or successfully accomplished a previous attack.</s>","<s>[5.6] Fix for HasManyThrough returning incorrect results with cursor() (#22144)
</s>"," diff --git a/src/Illuminate/Database/Eloquent/Relations/HasManyThrough.php b/src/Illuminate/Database/Eloquent/Relations/HasManyThrough.php
index f75aa2601c..20a5731b1d 100644
--- a/src/Illuminate/Database/Eloquent/Relations/HasManyThrough.php
+++ b/src/Illuminate/Database/Eloquent/Relations/HasManyThrough.php
@@ -425,6 +425,16 @@ public function chunk($count, callable $callback)
         return $this->prepareQueryBuilder()->chunk($count, $callback);
     }
 
+    /**
+     * Get a generator for the given query.
+     *
+     * @return \Generator
+     */
+    public function cursor()
+    {
+        return $this->prepareQueryBuilder()->cursor();
+    }
+
     /**
      * Execute a callback over each item while chunking.
      *
",0.0,,0.0,,0.0,tfidf
CVE-2018-15133,CVE-2018-15133/edf3548de2ee41c4587897872a1f138ec209d631,https://github.com/laravel/framework/commit/edf3548de2ee41c4587897872a1f138ec209d631,"<s>In Laravel Framework through 5.5.40 and 5.6.x through 5.6.29, remote code execution might occur as a result of an unserialize call on a potentially untrusted X-XSRF-TOKEN value. This involves the decrypt method in Illuminate/Encryption/Encrypter.php and PendingBroadcast in gadgetchains/Laravel/RCE/3/chain.php in phpggc. The attacker must know the application key, which normally would never occur, but could happen if the attacker previously had privileged access or successfully accomplished a previous attack.</s>","<s>Allow to send a boolean as attribute
</s>"," diff --git a/src/Illuminate/Validation/Rules/RequiredIf.php b/src/Illuminate/Validation/Rules/RequiredIf.php
index 95149e8fc2..b33aa7fc49 100644
--- a/src/Illuminate/Validation/Rules/RequiredIf.php
+++ b/src/Illuminate/Validation/Rules/RequiredIf.php
@@ -7,21 +7,26 @@
 class RequiredIf
 {
     /**
-     * The callback that validates the attribute.
+     * The name of the rule.
+     */
+    protected $rule = 'required';
+
+    /**
+     * The condition that validates the attribute.
      *
-     * @var \Closure
+     * @var boolean|\Closure
      */
-    public $callback;
+    public $condition;
 
     /**
      * Create a new Closure based required validation rule.
      *
-     * @param  \Closure  $callback
+     * @param  boolean|\Closure  $condition
      * @return void
      */
-    public function __construct($callback)
+    public function __construct($condition)
     {
-        $this->callback = $callback;
+        $this->condition = $condition;
     }
 
     /**
@@ -31,6 +36,10 @@ public function __construct($callback)
      */
     public function __toString()
     {
-        return $this->callback->__invoke() ? 'required' : '';
+        if ($this->condition instanceof Closure) {
+            return $this->condition->__invoke() ? $this->rule : '';
+        }
+
+        return $this->condition ? $this->rule : '';
     }
 }
",0.0,,0.0,,0.0,tfidf
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2015-1191,CVE-2015-1191/dbdf2d055ac504ecc82b94af21a8ed71f88f67ae,https://github.com/madler/pigz/commit/dbdf2d055ac504ecc82b94af21a8ed71f88f67ae,<s>Multiple directory traversal vulnerabilities in pigz 2.3.1 allow remote attackers to write to arbitrary files via a (1) full pathname or (2) .. (dot dot) in an archive.</s>,"<s>pigz version 2.3.2
</s>"," diff --git a/pigz.c b/pigz.c
index 483c5d5..0635763 100644
--- a/pigz.c
+++ b/pigz.c
@@ -1,6 +1,6 @@
 /* pigz.c -- parallel implementation of gzip
  * Copyright (C) 2007-2015 Mark Adler
- * Version 2.3.2  xx Jan 2015  Mark Adler
+ * Version 2.3.2  24 Jan 2015  Mark Adler
  */
 
 /*
@@ -162,7 +162,17 @@
                        Update zopfli to Mar 10, 2013 Google state
                        Support zopfli in single thread case
                        Add -F, -I, -M, and -O options for zopfli tuning
-   2.3.2  xx Jan 2015  -
+   2.3.2  24 Jan 2015  Change whereis to which in Makefile for portability
+                       Return zero exit code when only warnings are issued
+                       Increase speed of unlzw (Unix compress decompression)
+                       Update zopfli to current google state
+                       Allow larger maximum blocksize (-b), now 512 MiB
+                       Do not require that -d precede -N, -n, -T options
+                       Strip any path from header name for -dN or -dNT
+                       Remove use of PATH_MAX (PATH_MAX is not reliable)
+                       Do not abort on inflate data error, do remaining files
+                       Check gzip header CRC if present
+                       Improve decompression error detection and reporting
  */
 
 #define VERSION ""pigz 2.3.2\n""
@@ -206,12 +216,13 @@
    the --independent or -i option, so that the blocks can be decompressed
    independently for partial error recovery or for random access.
 
-   Decompression can't be parallelized, at least not without specially prepared
-   deflate streams for that purpose.  As a result, pigz uses a single thread
-   (the main thread) for decompression, but will create three other threads for
-   reading, writing, and check calculation, which can speed up decompression
-   under some circumstances.  Parallel decompression can be turned off by
-   specifying one process (-dp 1 or -tp 1).
+   Decompression can't be parallelized over an arbitrary number of processors
+   like compression can be, at least not without specially prepared deflate
+   streams for that purpose.  As a result, pigz uses a single thread (the main
+   thread) for decompression, but will create three other threads for reading,
+   writing, and check calculation, which can speed up decompression under some
+   circumstances.  Parallel decompression can be turned off by specifying one
+   process (-dp 1 or -tp 1).
 
    pigz requires zlib 1.2.1 or later to allow setting the dictionary when doing
    raw deflate.  Since zlib 1.2.3 corrects security vulnerabilities in zlib
@@ -247,7 +258,7 @@
    jobs until instructed to return.  When a job is pulled, the dictionary, if
    provided, will be loaded into the deflate engine and then that input buffer
    is dropped for reuse.  Then the input data is compressed into an output
-   buffer that grows in size if necessary to hold the compressed data. The job
+   buffer that grows in size if necessary to hold the compressed data.  The job
    is then put into the write job list, sorted by the sequence number. The
    compress thread however continues to calculate the check value on the input
    data, either a CRC-32 or Adler-32, possibly in parallel with the write
@@ -351,10 +362,10 @@
 
 #include ""zlib.h""       /* deflateInit2(), deflateReset(), deflate(), */
                         /* deflateEnd(), deflateSetDictionary(), crc32(),
-                           inflateBackInit(), inflateBack(), inflateBackEnd(),
-                           Z_DEFAULT_COMPRESSION, Z_DEFAULT_STRATEGY,
-                           Z_DEFLATED, Z_NO_FLUSH, Z_NULL, Z_OK,
-                           Z_SYNC_FLUSH, z_stream */
+                           adler32(), inflateBackInit(), inflateBack(),
+                           inflateBackEnd(), Z_DEFAULT_COMPRESSION,
+                           Z_DEFAULT_STRATEGY, Z_DEFLATED, Z_NO_FLUSH, Z_NULL,
+                           Z_OK, Z_SYNC_FLUSH, z_stream */
 #if !defined(ZLIB_VERNUM) || ZLIB_VERNUM < 0x1230
 #  error Need zlib version 1.2.3 or later
 #endif
",0.0,,0.0,,0.0,lime
CVE-2015-1191,CVE-2015-1191/847e56a0fa66da91fa559763d0cf153c0a278421,https://github.com/madler/pigz/commit/847e56a0fa66da91fa559763d0cf153c0a278421,<s>Multiple directory traversal vulnerabilities in pigz 2.3.1 allow remote attackers to write to arbitrary files via a (1) full pathname or (2) .. (dot dot) in an archive.</s>,"<s>Change version number to 2.3.2.
</s>"," diff --git a/pigz.c b/pigz.c
index df25cf3..d2710ec 100644
--- a/pigz.c
+++ b/pigz.c
@@ -1,6 +1,6 @@
 /* pigz.c -- parallel implementation of gzip
- * Copyright (C) 2007, 2008, 2009, 2010, 2011, 2012, 2013 Mark Adler
- * Version 2.3.1  9 Oct 2013  Mark Adler
+ * Copyright (C) 2007-2014 Mark Adler
+ * Version 2.3.2  xx Jan 2014  Mark Adler
  */
 
 /*
@@ -162,9 +162,10 @@
                        Update zopfli to Mar 10, 2013 Google state
                        Support zopfli in single thread case
                        Add -F, -I, -M, and -O options for zopfli tuning
+   2.3.2  xx Jan 2014  -
  */
 
-#define VERSION ""pigz 2.3.1\n""
+#define VERSION ""pigz 2.3.2\n""
 
 /* To-do:
     - make source portable for Windows, VMS, etc. (see gzip source code)
",0.0,,0.0,,0.0,lime
CVE-2015-1191,CVE-2015-1191/966b1620643298db7180dd83f47ae1df09ab321c,https://github.com/madler/pigz/commit/966b1620643298db7180dd83f47ae1df09ab321c,<s>Multiple directory traversal vulnerabilities in pigz 2.3.1 allow remote attackers to write to arbitrary files via a (1) full pathname or (2) .. (dot dot) in an archive.</s>,"<s>Update 2014 to 2015.
</s>"," diff --git a/pigz.c b/pigz.c
index 4d4439a..759ee3f 100644
--- a/pigz.c
+++ b/pigz.c
@@ -1,6 +1,6 @@
 /* pigz.c -- parallel implementation of gzip
- * Copyright (C) 2007-2014 Mark Adler
- * Version 2.3.2  xx Jan 2014  Mark Adler
+ * Copyright (C) 2007-2015 Mark Adler
+ * Version 2.3.2  xx Jan 2015  Mark Adler
  */
 
 /*
@@ -162,7 +162,7 @@
                        Update zopfli to Mar 10, 2013 Google state
                        Support zopfli in single thread case
                        Add -F, -I, -M, and -O options for zopfli tuning
-   2.3.2  xx Jan 2014  -
+   2.3.2  xx Jan 2015  -
  */
 
 #define VERSION ""pigz 2.3.2\n""
",0.0,,0.0,,0.0,lime
CVE-2015-1191,CVE-2015-1191/fdad1406b3ec809f4954ff7cdf9e99eb18c2458f,https://github.com/madler/pigz/commit/fdad1406b3ec809f4954ff7cdf9e99eb18c2458f,<s>Multiple directory traversal vulnerabilities in pigz 2.3.1 allow remote attackers to write to arbitrary files via a (1) full pathname or (2) .. (dot dot) in an archive.</s>,"<s>When decompressing with -N or -NT, strip any path from header name.
This uses the path of the compressed file combined with the name
from the header as the name of the decompressed output file.  Any
path information in the header name is stripped.  This avoids a
possible vulnerability where absolute or descending paths are put
in the gzip header.
</s>"," diff --git a/pigz.c b/pigz.c
index ca307a5..38c0d4f 100644
--- a/pigz.c
+++ b/pigz.c
@@ -3520,26 +3520,35 @@ local void process(char *path)
                  "" (use -f to force)"");
     }
     else {
-        char *to, *repl;
-
-        /* use header name for output when decompressing with -N */
-        to = g.inf;
-        if (g.decode && (g.headis & 1) != 0 && g.hname != NULL) {
-            to = g.hname;
-            len = strlen(g.hname);
+        char *to = g.inf, *sufx = """";
+        size_t pre = 0;
+
+        /* select parts of the output file name */
+        if (g.decode) {
+            /* for -dN or -dNT, use the path from the input file and the name
+               from the header, stripping any path in the header name */
+            if ((g.headis & 1) != 0 && g.hname != NULL) {
+                pre = justname(g.inf) - g.inf;
+                to = justname(g.hname);
+                len = strlen(to);
+            }
+            /* for -d or -dNn, replace abbreviated suffixes */
+            else if (strcmp(to + len, "".tgz"") == 0)
+                sufx = "".tar"";
         }
-
-        /* replace .tgz with .tar when decoding */
-        repl = g.decode && strcmp(to + len, "".tgz"") ? """" : "".tar"";
+        else
+            /* add appropriate suffix when compressing */
+            sufx = g.sufx;
 
         /* create output file and open to write */
-        g.outf = MALLOC(len + (g.decode ? strlen(repl) : strlen(g.sufx)) + 1);
+        g.outf = MALLOC(pre + len + strlen(sufx) + 1);
         if (g.outf == NULL)
             bail(""not enough memory"", """");
-        memcpy(g.outf, to, len);
-        strcpy(g.outf + len, g.decode ? repl : g.sufx);
+        memcpy(g.outf, g.inf, pre);
+        memcpy(g.outf + pre, to, len);
+        strcpy(g.outf + pre + len, sufx);
         g.outd = open(g.outf, O_CREAT | O_TRUNC | O_WRONLY |
-                             (g.force ? 0 : O_EXCL), 0600);
+                              (g.force ? 0 : O_EXCL), 0600);
 
         /* if exists and not -f, give user a chance to overwrite */
         if (g.outd < 0 && errno == EEXIST && isatty(0) && g.verbosity) {
",1.0,,1.0,,1.0,lime
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2019-11812,CVE-2019-11812/3a085a6ceea00b3ab674a984dd56c1846ef775ff,https://github.com/MISP/MISP/commit/3a085a6ceea00b3ab674a984dd56c1846ef775ff,"<s>A persistent XSS issue was discovered in app/View/Helper/CommandHelper.php in MISP before 2.4.107. JavaScript can be included in the discussion interface, and can be triggered by clicking on the link.</s>","<s>fix: [security] Fix persistent xss via discussion links via javascript:// links
- low impact as it requires user interaction to trigger
- as reported by João Lucas Melo Brasio from Elytron Security S.A. (https://elytronsecurity.com)
</s>"," diff --git a/app/View/Helper/CommandHelper.php b/app/View/Helper/CommandHelper.php
index 8cc94c687..49c828774 100644
--- a/app/View/Helper/CommandHelper.php
+++ b/app/View/Helper/CommandHelper.php
@@ -68,10 +68,14 @@ App::uses('AppHelper', 'View/Helper');
                             $replacement = '%MALFORMED URL%';
                         } else {
                             if (filter_var(str_replace('$1', $data, $this->__replacement[$trigger]['url']), FILTER_VALIDATE_URL)) {
-                                $replacement = $this->Html->link(
-                                    str_replace('$1', $data, $this->__replacement[$trigger]['text']),
-                                    str_replace('$1', $data, $this->__replacement[$trigger]['url'])
-                                );
+                                if (substr($data, 0, 7) === 'http://' || substr($data, 0, 8) === 'https://') {
+                                    $replacement = $this->Html->link(
+                                        str_replace('$1', $data, $this->__replacement[$trigger]['text']),
+                                        str_replace('$1', $data, $this->__replacement[$trigger]['url'])
+                                    );
+                                } else {
+                                    $replacement = '%MALFORMED URL%';
+                                }
                             } else {
                                 $replacement = '%MALFORMED URL%';
                             }
",1.0,,1.0,,1.0,tfidf
CVE-2019-11812,CVE-2019-11812/6065023d23647288607baf593193aba408c8d00e,https://github.com/MISP/MISP/commit/6065023d23647288607baf593193aba408c8d00e,"<s>A persistent XSS issue was discovered in app/View/Helper/CommandHelper.php in MISP before 2.4.107. JavaScript can be included in the discussion interface, and can be triggered by clicking on the link.</s>","<s>fix: [UI] Notice errors fixed in the discussion threads
</s>"," diff --git a/app/View/Helper/CommandHelper.php b/app/View/Helper/CommandHelper.php
index 49c828774..9f0ae9bf1 100644
--- a/app/View/Helper/CommandHelper.php
+++ b/app/View/Helper/CommandHelper.php
@@ -36,7 +36,7 @@ App::uses('AppHelper', 'View/Helper');
             $closing = preg_match('%\[/' . $trigger . '\]%isU', $string, $closing_matches, PREG_OFFSET_CAPTURE);
             $opening_len = strlen($trigger) + 2;
             $closing_len = $opening_len + 1;
-            if ((count($opening) !== count($closing))) return false;
+            if ((count($opening_matches) !== count($closing_matches))) return false;
             $pairs = array();
             $rearrangedTags = array();
             foreach ($opening_matches as $opening_tag) {
",0.0,,0.0,,0.0,tfidf
CVE-2019-11812,CVE-2019-11812/62f15433e42fb92e45bd57dd6fc0c0bf53deb6fc,https://github.com/MISP/MISP/commit/62f15433e42fb92e45bd57dd6fc0c0bf53deb6fc,"<s>A persistent XSS issue was discovered in app/View/Helper/CommandHelper.php in MISP before 2.4.107. JavaScript can be included in the discussion interface, and can be triggered by clicking on the link.</s>","<s>fix: [security] Fix persistent xss due to invalid sanitisation of image names in titles
- triggered by expanding a screenshot
- as reported by João Lucas Melo Brasio from Elytron Security S.A. (https://elytronsecurity.com)
</s>"," diff --git a/app/webroot/js/misp.js b/app/webroot/js/misp.js
index c965a31fd..be847e7b4 100644
--- a/app/webroot/js/misp.js
+++ b/app/webroot/js/misp.js
@@ -97,7 +97,9 @@ function screenshotPopup(url, title) {
     if (!url.startsWith('data:image/')) {
         url = url.slice(0, -1);
     }
-    popupHtml = '<it class=""fa fa-spin fa-spinner"" style=""font-size: xx-large; color: white; position: fixed; left: 50%; top: 50%;""></it>'
+    popupHtml = '<it class=""fa fa-spin fa-spinner"" style=""font-size: xx-large; color: white; position: fixed; left: 50%; top: 50%;""></it>';
+    url = $('<div>').text(url).html();
+    title = $('<div>').text(title).html();
     popupHtml += '<img class=""screenshot_box-content hidden"" src=""' + url + '"" id=""screenshot-image"" title=""' + title + '"" alt=""' + title + '"" onload=""$(this).show(); $(this).parent().find(\'.fa-spinner\').remove();""/>';
     popupHtml += '<div class=""close-icon useCursorPointer"" onClick=""closeScreenshot();""></div>';
     if (!url.startsWith('data:image/')) {
",0.0,,0.0,,0.0,tfidf
CVE-2019-11812,CVE-2019-11812/3751224269b665dea5a19a8691d6eb1f1d748abf,https://github.com/MISP/MISP/commit/3751224269b665dea5a19a8691d6eb1f1d748abf,"<s>A persistent XSS issue was discovered in app/View/Helper/CommandHelper.php in MISP before 2.4.107. JavaScript can be included in the discussion interface, and can be triggered by clicking on the link.</s>","<s>chg: [diagnostic] Added message if `.git` can't be read by MISP
</s>"," diff --git a/app/View/Elements/healthElements/diagnostics.ctp b/app/View/Elements/healthElements/diagnostics.ctp
index 1ce017024..078403cc2 100644
--- a/app/View/Elements/healthElements/diagnostics.ctp
+++ b/app/View/Elements/healthElements/diagnostics.ctp
@@ -34,6 +34,12 @@
                 <?php
                     echo $version['current'] . ' (' . h($commit) . ')';
                 ?>
+                <?php if ($commit === ''): ?>
+                    <br />
+                    <span class=""red bold apply_css_arrow"">
+                        <?php echo __('Unable to fetch current commit id, check apache user read privilege.'); ?>
+                    </span>
+                <?php endif; ?>
             </span>
         </span><br />
         <span><?php echo __('Latest available version');?>
",0.0,,0.0,,0.0,tfidf
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2016-8649,CVE-2016-8649/81f466d05f2a89cb4f122ef7f593ff3f279b165c,https://github.com/lxc/lxc/commit/81f466d05f2a89cb4f122ef7f593ff3f279b165c,"<s>lxc-attach in LXC before 1.0.9 and 2.x before 2.0.6 allows an attacker inside of an unprivileged container to use an inherited file descriptor, of the host's /proc, to access the rest of the host's filesystem via the openat() family of syscalls.</s>","<s>attach: do not send procfd to attached process
So far, we opened a file descriptor refering to proc on the host inside the
host namespace and handed that fd to the attached process in
attach_child_main(). This was done to ensure that LSM labels were correctly
setup. However, by exploiting a potential kernel bug, ptrace could be used to
prevent the file descriptor from being closed which in turn could be used by an
unprivileged container to gain access to the host namespace. Aside from this
needing an upstream kernel fix, we should make sure that we don't pass the fd
for proc itself to the attached process. However, we cannot completely prevent
this, as the attached process needs to be able to change its apparmor profile
by writing to /proc/self/attr/exec or /proc/self/attr/current. To minimize the
attack surface, we only send the fd for /proc/self/attr/exec or
/proc/self/attr/current to the attached process. To do this we introduce a
little more IPC between the child and parent:
	 * IPC mechanism: (X is receiver)
	 *   initial process        intermediate          attached
	 *        X           <---  send pid of
	 *                          attached proc,
	 *                          then exit
	 *    send 0 ------------------------------------>    X
	 *                                              [do initialization]
	 *        X  <------------------------------------  send 1
	 *   [add to cgroup, ...]
	 *    send 2 ------------------------------------>    X
	 *						[set LXC_ATTACH_NO_NEW_PRIVS]
	 *        X  <------------------------------------  send 3
	 *   [open LSM label fd]
	 *    send 4 ------------------------------------>    X
	 *   						[set LSM label]
	 *   close socket                                 close socket
	 *                                                run program
The attached child tells the parent when it is ready to have its LSM labels set
up. The parent then opens an approriate fd for the child PID to
/proc/<pid>/attr/exec or /proc/<pid>/attr/current and sends it via SCM_RIGHTS
to the child. The child can then set its LSM laben. Both sides then close the
socket fds and the child execs the requested process.
Signed-off-by: Christian Brauner <christian.brauner@canonical.com>
</s>"," diff --git a/src/lxc/attach.c b/src/lxc/attach.c
index bfb2abf01..2f095b408 100644
--- a/src/lxc/attach.c
+++ b/src/lxc/attach.c
@@ -53,6 +53,7 @@
 
 #include ""namespace.h""
 #include ""log.h""
+#include ""af_unix.h""
 #include ""attach.h""
 #include ""caps.h""
 #include ""config.h""
@@ -84,80 +85,103 @@
 
 lxc_log_define(lxc_attach, lxc);
 
-int lsm_set_label_at(int procfd, int on_exec, char* lsm_label) {
+static int lsm_openat(int procfd, pid_t pid, int on_exec)
+{
+	int ret = -1;
 	int labelfd = -1;
-	int ret = 0;
 	const char* name;
-	char* command = NULL;
+#define __LSMATTRLEN /* /proc */ (5 + /* /pid-to-str */ 21 + /* /current */ 7 + /* \0 */ 1)
+	char path[__LSMATTRLEN];
 
 	name = lsm_name();
 
 	if (strcmp(name, ""nop"") == 0)
-		goto out;
+		return 0;
 
 	if (strcmp(name, ""none"") == 0)
-		goto out;
+		return 0;
 
 	/* We don't support on-exec with AppArmor */
 	if (strcmp(name, ""AppArmor"") == 0)
 		on_exec = 0;
 
 	if (on_exec) {
-		labelfd = openat(procfd, ""self/attr/exec"", O_RDWR);
-	}
-	else {
-		labelfd = openat(procfd, ""self/attr/current"", O_RDWR);
+		ret = snprintf(path, __LSMATTRLEN, ""%d/attr/exec"", pid);
+		if (ret < 0 || ret >= __LSMATTRLEN)
+			return -1;
+		labelfd = openat(procfd, path, O_RDWR);
+	} else {
+		ret = snprintf(path, __LSMATTRLEN, ""%d/attr/current"", pid);
+		if (ret < 0 || ret >= __LSMATTRLEN)
+			return -1;
+		labelfd = openat(procfd, path, O_RDWR);
 	}
 
 	if (labelfd < 0) {
 		SYSERROR(""Unable to open LSM label"");
-		ret = -1;
-		goto out;
+		return -1;
 	}
 
+	return labelfd;
+}
+
+static int lsm_set_label_at(int lsm_labelfd, int on_exec, char *lsm_label)
+{
+	int fret = -1;
+	const char* name;
+	char *command = NULL;
+
+	name = lsm_name();
+
+	if (strcmp(name, ""nop"") == 0)
+		return 0;
+
+	if (strcmp(name, ""none"") == 0)
+		return 0;
+
+	/* We don't support on-exec with AppArmor */
+	if (strcmp(name, ""AppArmor"") == 0)
+		on_exec = 0;
+
 	if (strcmp(name, ""AppArmor"") == 0) {
 		int size;
 
 		command = malloc(strlen(lsm_label) + strlen(""changeprofile "") + 1);
 		if (!command) {
 			SYSERROR(""Failed to write apparmor profile"");
-			ret = -1;
 			goto out;
 		}
 
 		size = sprintf(command, ""changeprofile %s"", lsm_label);
 		if (size < 0) {
 			SYSERROR(""Failed to write apparmor profile"");
-			ret = -1;
 			goto out;
 		}
 
-		if (write(labelfd, command, size + 1) < 0) {
-			SYSERROR(""Unable to set LSM label"");
-			ret = -1;
+		if (write(lsm_labelfd, command, size + 1) < 0) {
+			SYSERROR(""Unable to set LSM label: %s."", command);
 			goto out;
 		}
-	}
-	else if (strcmp(name, ""SELinux"") == 0) {
-		if (write(labelfd, lsm_label, strlen(lsm_label) + 1) < 0) {
+		INFO(""Set LSM label to: %s."", command);
+	} else if (strcmp(name, ""SELinux"") == 0) {
+		if (write(lsm_labelfd, lsm_label, strlen(lsm_label) + 1) < 0) {
 			SYSERROR(""Unable to set LSM label"");
-			ret = -1;
 			goto out;
 		}
-	}
-	else {
+		INFO(""Set LSM label to: %s."", lsm_label);
+	} else {
 		ERROR(""Unable to restore label for unknown LSM: %s"", name);
-		ret = -1;
 		goto out;
 	}
+	fret = 0;
 
 out:
 	free(command);
 
-	if (labelfd != -1)
-		close(labelfd);
+	if (lsm_labelfd != -1)
+		close(lsm_labelfd);
 
-	return ret;
+	return fret;
 }
 
 static struct lxc_proc_context_info *lxc_proc_get_context_info(pid_t pid)
@@ -646,7 +670,6 @@ struct attach_clone_payload {
 	struct lxc_proc_context_info* init_ctx;
 	lxc_attach_exec_t exec_function;
 	void* exec_payload;
-	int procfd;
 };
 
 static int attach_child_main(void* data);
@@ -744,7 +767,6 @@ int lxc_attach(const char* name, const char* lxcpath, lxc_attach_exec_t exec_fun
 	char* cwd;
 	char* new_cwd;
 	int ipc_sockets[2];
-	int procfd;
 	signed long personality;
 
 	if (!options)
@@ -821,6 +843,11 @@ int lxc_attach(const char* name, const char* lxcpath, lxc_attach_exec_t exec_fun
 	 *        X  <------------------------------------  send 1
 	 *   [add to cgroup, ...]
 	 *    send 2 ------------------------------------>    X
+	 *						[set LXC_ATTACH_NO_NEW_PRIVS]
+	 *        X  <------------------------------------  send 3
+	 *   [open LSM label fd]
+	 *    send 4 ------------------------------------>    X
+	 *   						[set LSM label]
 	 *   close socket                                 close socket
 	 *                                                run program
 	 */
@@ -854,6 +881,7 @@ int lxc_attach(const char* name, const char* lxcpath, lxc_attach_exec_t exec_fun
 	}
 
 	if (pid) {
+		int procfd = -1;
 		pid_t to_cleanup_pid = pid;
 
 		/* initial thread, we close the socket that is for the
@@ -868,6 +896,15 @@ int lxc_attach(const char* name, const char* lxcpath, lxc_attach_exec_t exec_fun
 				goto cleanup_error;
 		}
 
+		/* Open /proc before setns() to the containers namespace so we
+		 * don't rely on any information from inside the container.
+		 */
+		procfd = open(""/proc"", O_DIRECTORY | O_RDONLY | O_CLOEXEC);
+		if (procfd < 0) {
+			SYSERROR(""Unable to open /proc."");
+			goto cleanup_error;
+		}
+
 		/* Let the child process know to go ahead */
 		status = 0;
 		ret = lxc_write_nointr(ipc_sockets[0], &status, sizeof(status));
@@ -911,7 +948,8 @@ int lxc_attach(const char* name, cons",1.0,,1.0,,1.0,none
CVE-2016-8649,CVE-2016-8649/82b1f317c8fbf9b81cb68a2c9be8ff36260f8ebc,https://github.com/lxc/lxc/commit/82b1f317c8fbf9b81cb68a2c9be8ff36260f8ebc,"<s>lxc-attach in LXC before 1.0.9 and 2.x before 2.0.6 allows an attacker inside of an unprivileged container to use an inherited file descriptor, of the host's /proc, to access the rest of the host's filesystem via the openat() family of syscalls.</s>","<s>attach: simplify lsm_openat()
Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>
</s>"," diff --git a/src/lxc/attach.c b/src/lxc/attach.c
index 2f095b408..5e89e7d38 100644
--- a/src/lxc/attach.c
+++ b/src/lxc/attach.c
@@ -85,12 +85,13 @@
 
 lxc_log_define(lxc_attach, lxc);
 
+/* /proc/pid-to-str/current\0 = (5 + 21 + 7 + 1) */
+#define __LSMATTRLEN (5 + 21 + 7 + 1)
 static int lsm_openat(int procfd, pid_t pid, int on_exec)
 {
 	int ret = -1;
 	int labelfd = -1;
-	const char* name;
-#define __LSMATTRLEN /* /proc */ (5 + /* /pid-to-str */ 21 + /* /current */ 7 + /* \0 */ 1)
+	const char *name;
 	char path[__LSMATTRLEN];
 
 	name = lsm_name();
@@ -105,20 +106,16 @@ static int lsm_openat(int procfd, pid_t pid, int on_exec)
 	if (strcmp(name, ""AppArmor"") == 0)
 		on_exec = 0;
 
-	if (on_exec) {
+	if (on_exec)
 		ret = snprintf(path, __LSMATTRLEN, ""%d/attr/exec"", pid);
-		if (ret < 0 || ret >= __LSMATTRLEN)
-			return -1;
-		labelfd = openat(procfd, path, O_RDWR);
-	} else {
+	else
 		ret = snprintf(path, __LSMATTRLEN, ""%d/attr/current"", pid);
-		if (ret < 0 || ret >= __LSMATTRLEN)
-			return -1;
-		labelfd = openat(procfd, path, O_RDWR);
-	}
+	if (ret < 0 || ret >= __LSMATTRLEN)
+		return -1;
 
+	labelfd = openat(procfd, path, O_RDWR);
 	if (labelfd < 0) {
-		SYSERROR(""Unable to open LSM label"");
+		SYSERROR(""Unable to open file descriptor to set LSM label."");
 		return -1;
 	}
 
",0.0,,0.0,,0.0,none
CVE-2016-8649,CVE-2016-8649/4b73005c60449ae2c4327ffb5e7f39545cad425e,https://github.com/lxc/lxc/commit/4b73005c60449ae2c4327ffb5e7f39545cad425e,"<s>lxc-attach in LXC before 1.0.9 and 2.x before 2.0.6 allows an attacker inside of an unprivileged container to use an inherited file descriptor, of the host's /proc, to access the rest of the host's filesystem via the openat() family of syscalls.</s>","<s>tree-wide: priority -> level
When we merged the new logging function for the api we exposed the log level
argument in the struct as ""priority"" which we actually requested to be changed
to ""level"" which somehow didn't happen and we missed it. Given the fact there
has been no new liblxc release let's fix it right now before it hits users.
Also, take the chance to change the terminology in the log from ""priority"" to
""level"" globally. This is to prevent confusion with syslog's ""priority""
argument which we also support.
Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>
</s>"," diff --git a/src/lxc/tools/lxc_attach.c b/src/lxc/tools/lxc_attach.c
index 8c8700238..6ae33ae3d 100644
--- a/src/lxc/tools/lxc_attach.c
+++ b/src/lxc/tools/lxc_attach.c
@@ -389,7 +389,7 @@ int main(int argc, char *argv[])
omp
 into	log.name = my_args.name;
 *	log.file = my_args.log_file;
-	log.priority = my_args.log_priority;
+	log.level = my_args.log_priority;
 ||	log.prefix = my_args.progname;
_	log.quiet = my_args.quiet;
log	log.lxcpath = my_args.lxcpath[0];
->loglevel <= LXC_LOG_LEVEL_TRACE) &&
 	    lxc_log_fd >= 0) {
 		ret = seccomp_export_pfc(conf->seccomp_ctx, lxc_log_fd);
 		/* Just give an warning when export error */
",0.0,,0.0,,0.0,none
CVE-2016-8649,CVE-2016-8649/1d8e5ca2dfe4443449b35ae082c1d83ab74c903f,https://github.com/lxc/lxc/commit/1d8e5ca2dfe4443449b35ae082c1d83ab74c903f,"<s>lxc-attach in LXC before 1.0.9 and 2.x before 2.0.6 allows an attacker inside of an unprivileged container to use an inherited file descriptor, of the host's /proc, to access the rest of the host's filesystem via the openat() family of syscalls.</s>","<s>attach: close lsm label file descriptor
Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>
</s>"," diff --git a/src/lxc/attach.c b/src/lxc/attach.c
index 094495f37..aee99633d 100644
--- a/src/lxc/attach.c
+++ b/src/lxc/attach.c
@@ -972,7 +972,8 @@ int lxc_attach(const char* name, const char* lxcpath, lxc_attach_exec_t exec_fun
 
 		/* Open LSM fd and send it to child. */
 		if ((options->namespaces & CLONE_NEWNS) && (options->attach_flags & LXC_ATTACH_LSM) && init_ctx->lsm_label) {
-			int on_exec, labelfd;
+			int on_exec;
+			int labelfd = -1;
 			on_exec = options->attach_flags & LXC_ATTACH_LSM_EXEC ? 1 : 0;
 			/* Open fd for the LSM security module. */
 			labelfd = lsm_openat(procfd, attached_pid, on_exec);
@@ -981,12 +982,15 @@ int lxc_attach(const char* name, const char* lxcpath, lxc_attach_exec_t exec_fun
 
 			/* Send child fd of the LSM security module to write to. */
 			ret = lxc_abstract_unix_send_fd(ipc_sockets[0], labelfd, NULL, 0);
+			close(labelfd);
 			if (ret <= 0) {
 				ERROR(""Intended to send file descriptor %d: %s."", labelfd, strerror(errno));
 				goto on_error;
 			}
 		}
 
+		if (procfd >= 0)
+			close(procfd);
 		/* Now shut down communication with child, we're done. */
 		shutdown(ipc_sockets[0], SHUT_RDWR);
 		close(ipc_sockets[0]);
",0.0,,0.0,,0.0,none
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2019-14540,CVE-2019-14540/73c1c2cc76e6cdd7f3a5615cbe3207fe96e4d3db,https://github.com/FasterXML/jackson-databind/commit/73c1c2cc76e6cdd7f3a5615cbe3207fe96e4d3db,<s>A Polymorphic Typing issue was discovered in FasterXML jackson-databind before 2.9.10. It is related to com.zaxxer.hikari.HikariConfig.</s>,"<s>Fix #2449
</s>"," diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
index 0abadfdf3..31f070ce5 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
@@ -100,6 +100,8 @@ public class SubTypeValidator
 
         // [databind#2410]: HikariCP/metricRegistry config
         s.add(""com.zaxxer.hikari.HikariConfig"");
+        // [databind#2449]: and sub-class thereof
+        s.add(""com.zaxxer.hikari.HikariDataSource"");
 
         // [databind#2420]: CXF/JAX-RS provider/XSLT
         s.add(""org.apache.cxf.jaxrs.provider.XSLTJaxbProvider"");
",0.0,,0.0,,1.0,tfidf
CVE-2019-14540,CVE-2019-14540/0db801d131c38d8b94605217ab7cb48cb8427621,https://github.com/FasterXML/jackson-databind/commit/0db801d131c38d8b94605217ab7cb48cb8427621,<s>A Polymorphic Typing issue was discovered in FasterXML jackson-databind before 2.9.10. It is related to com.zaxxer.hikari.HikariConfig.</s>,"<s>Fix #1093 (Default typing does not work with `writerFor(Object.class)`)
</s>"," diff --git a/src/test/java/com/fasterxml/jackson/databind/jsontype/deftyping/DefaultWithBaseType1093Test.java b/src/test/java/com/fasterxml/jackson/databind/jsontype/deftyping/DefaultWithBaseType1093Test.java
new file mode 100644
index 000000000..bee9701a9
--- /dev/null
+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/deftyping/DefaultWithBaseType1093Test.java
@@ -0,0 +1,50 @@
+package com.fasterxml.jackson.databind.jsontype.deftyping;
+
+import com.fasterxml.jackson.databind.*;
+import com.fasterxml.jackson.databind.json.JsonMapper;
+import com.fasterxml.jackson.databind.testutil.NoCheckSubTypeValidator;
+
+// Tests to verify functionality to pass ""base type"" for serializing
+// polymorphic types (ones where output contains Type Id to allow later
+// deserialization deserialization), separate from fully forcing
+// actual type of value being serialized.
+public class DefaultWithBaseType1093Test extends BaseMapTest
+{
+    // [databind#1093]
+    static class Point1093 {
+        public int x, y;
+
+        protected Point1093() { }
+        public Point1093(int _x, int _y) {
+            x = _x;
+            y = _y;
+        }
+    }
+
+    // [databind#1093]
+    public void testWithDefaultTyping() throws Exception
+    {
+        ObjectMapper m = JsonMapper.builder()
+                .activateDefaultTyping(NoCheckSubTypeValidator.instance,
+                        ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT)
+                .build();
+
+        final Point1093 input = new Point1093(28, 12);
+
+        _testWithDefaultTyping(input, m.readerFor(Object.class),
+                m.writer().forType(Object.class));
+        _testWithDefaultTyping(input, m.readerFor(Object.class),
+                m.writerFor(Object.class));
+    }
+
+    private void _testWithDefaultTyping(Point1093 input, ObjectReader r,
+            ObjectWriter w) throws Exception
+    {
+        String json = w.writeValueAsString(input);
+        
+        Point1093 result = (Point1093) r.readValue(json);
+
+        assertEquals(input.x, result.x);
+        assertEquals(input.y, result.y);
+    }
+}
",0.0,,1.0,,0.0,tfidf
CVE-2019-14540,CVE-2019-14540/cb69a7040a660db95e5ccfcf0371d0da2fb4770f,https://github.com/FasterXML/jackson-databind/commit/cb69a7040a660db95e5ccfcf0371d0da2fb4770f,<s>A Polymorphic Typing issue was discovered in FasterXML jackson-databind before 2.9.10. It is related to com.zaxxer.hikari.HikariConfig.</s>,"<s>Fix #2378
</s>"," diff --git a/release-notes/VERSION-2.x b/release-notes/VERSION-2.x
index 76b90b1bc..30bd3a80f 100644
--- a/release-notes/VERSION-2.x
+++ b/release-notes/VERSION-2.x
@@ -13,6 +13,8 @@ Project: jackson-databind
 #2336: `MapDeserializer` can not merge `Map`s with polymorphic values
  (reported by Robert G)
 #2349: Add option `DefaultTyping.EVERYTHING` to support Kotlin data classes
+#2378: `@JsonAlias` doesn't work with AutoValue
+ (reported by David H)
 #2390: `Iterable` serialization breaks when adding `@JsonFilter` annotation
  (reported by Chris M)
 #2392: `BeanDeserializerModifier.modifyDeserializer()` not applied to custom bean deserializers
",0.0,,0.0,,0.0,tfidf
CVE-2019-14540,CVE-2019-14540/b3e41945a8494d026256deb3f2eb545ffa4abf7a,https://github.com/FasterXML/jackson-databind/commit/b3e41945a8494d026256deb3f2eb545ffa4abf7a,<s>A Polymorphic Typing issue was discovered in FasterXML jackson-databind before 2.9.10. It is related to com.zaxxer.hikari.HikariConfig.</s>,"<s>Fixed #2357 : missing property name in exception messages
</s>"," diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
index 87e2c699a..629d778a4 100644
--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
@@ -4283,7 +4283,7 @@ public class ObjectMapper
         }
         String actualName = p.getCurrentName();
         if (!expSimpleName.equals(actualName)) {
-            ctxt.reportInputMismatch(rootType,
+            ctxt.reportPropertyInputMismatch(rootType, actualName,
                     ""Root name '%s' does not match expected ('%s') for type %s"",
                     actualName, expSimpleName, rootType);
         }
",1.0,,0.0,,0.0,tfidf
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2017-9499,CVE-2017-9499/e05780990eecbe1b5f2884ad30e04328cec646bf,https://github.com/ImageMagick/ImageMagick/commit/e05780990eecbe1b5f2884ad30e04328cec646bf,"<s>In ImageMagick 7.0.5-7 Q16, an assertion failure was found in the function SetPixelChannelAttributes, which allows attackers to cause a denial of service via a crafted file.</s>","<s>https://github.com/ImageMagick/ImageMagick/issues/491
</s>"," diff --git a/MagickCore/image.c b/MagickCore/image.c
index ce60390fb..c2e666f51 100644
--- a/MagickCore/image.c
+++ b/MagickCore/image.c
@@ -849,7 +849,7 @@ MagickExport Image *CloneImage(const Image *image,const size_t columns,
       */
       clone_image->colors=image->colors;
       length=(size_t) image->colors;
-      clone_image->colormap=(PixelInfo *) AcquireQuantumMemory(length,
+      clone_image->colormap=(PixelInfo *) AcquireQuantumMemory(length+1,
         sizeof(*clone_image->colormap));
       if (clone_image->colormap == (PixelInfo *) NULL)
         {
",0.0,,1.0,,0.0,lime
CVE-2017-9499,CVE-2017-9499/4e6ac0e67ca157b2b96d8364fae3497b69e187bc,https://github.com/ImageMagick/ImageMagick/commit/4e6ac0e67ca157b2b96d8364fae3497b69e187bc,"<s>In ImageMagick 7.0.5-7 Q16, an assertion failure was found in the function SetPixelChannelAttributes, which allows attackers to cause a denial of service via a crafted file.</s>","<s>Fixed incorrect call to DestroyImage reported in #491.
</s>"," diff --git a/MagickCore/image.c b/MagickCore/image.c
index 9936fe17c..ce60390fb 100644
--- a/MagickCore/image.c
+++ b/MagickCore/image.c
@@ -853,7 +853,7 @@ MagickExport Image *CloneImage(const Image *image,const size_t columns,
         sizeof(*clone_image->colormap));
       if (clone_image->colormap == (PixelInfo *) NULL)
         {
-          clone_image=DestroyImage(clone_image);
+          image=(Image *) RelinquishMagickMemory(image);
           ThrowImageException(ResourceLimitError,""MemoryAllocationFailed"");
         }
       (void) CopyMagickMemory(clone_image->colormap,image->colormap,length*
",0.0,,0.0,,0.0,lime
CVE-2017-9499,CVE-2017-9499/0c5b1e430a83ef793a7334bbbee408cf3c628699,https://github.com/ImageMagick/ImageMagick/commit/0c5b1e430a83ef793a7334bbbee408cf3c628699,"<s>In ImageMagick 7.0.5-7 Q16, an assertion failure was found in the function SetPixelChannelAttributes, which allows attackers to cause a denial of service via a crafted file.</s>","<s>Added check to prevent image being 0x0 (reported in #489).
</s>"," diff --git a/coders/dds.c b/coders/dds.c
index eb9641d05..f1b1d8c71 100644
--- a/coders/dds.c
+++ b/coders/dds.c
@@ -1677,16 +1677,15 @@ static Image *ReadDDSImage(const ImageInfo *image_info,ExceptionInfo *exception)
   /*
     Initialize image structure.
   */
-  if (ReadDDSInfo(image, &dds_info) != MagickTrue) {
+  if (ReadDDSInfo(image, &dds_info) != MagickTrue)
     ThrowReaderException(CorruptImageError,""ImproperImageHeader"");
-  }
-  
+
   if (dds_info.ddscaps2 & DDSCAPS2_CUBEMAP)
     cubemap = MagickTrue;
-  
+
   if (dds_info.ddscaps2 & DDSCAPS2_VOLUME && dds_info.depth > 0)
     volume = MagickTrue;
-  
+
   (void) SeekBlob(image, 128, SEEK_SET);
 
   /*
@@ -1775,7 +1774,10 @@ static Image *ReadDDSImage(const ImageInfo *image_info,ExceptionInfo *exception)
   
   if (volume)
     num_images = dds_info.depth;
-  
+
+  if (num_images < 1)
+    ThrowReaderException(CorruptImageError,""ImproperImageHeader"");
+
   for (n = 0; n < num_images; n++)
   {
     if (n != 0)
",0.0,,0.0,,0.0,lime
CVE-2017-9499,CVE-2017-9499/7fd419441bc7103398e313558171d342c6315f44,https://github.com/ImageMagick/ImageMagick/commit/7fd419441bc7103398e313558171d342c6315f44,"<s>In ImageMagick 7.0.5-7 Q16, an assertion failure was found in the function SetPixelChannelAttributes, which allows attackers to cause a denial of service via a crafted file.</s>","<s>Added check for incorrect number of meta channels report in #492.
</s>"," diff --git a/coders/mpc.c b/coders/mpc.c
index 8088da492..86359572d 100644
--- a/coders/mpc.c
+++ b/coders/mpc.c
@@ -568,6 +568,9 @@ static Image *ReadMPCImage(const ImageInfo *image_info,ExceptionInfo *exception)
                 if (LocaleCompare(keyword,""number-meta-channels"") == 0)
                   {
                     image->number_meta_channels=StringToUnsignedLong(options);
+                    if (image->number_meta_channels > MaxPixelChannels)
+                      ThrowReaderException(CorruptImageError,
+                        ""ImproperImageHeader"");
                     break;
                   }
                 break;
",1.0,,0.0,,1.0,lime
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2015-3180,CVE-2015-3180/8e602172ff982912a4333ce3552af07e456bb2b7,https://github.com/moodle/moodle/commit/8e602172ff982912a4333ce3552af07e456bb2b7,"<s>lib/navigationlib.php in Moodle through 2.5.9, 2.6.x before 2.6.11, 2.7.x before 2.7.8, and 2.8.x before 2.8.6 allows remote authenticated users to obtain sensitive course-structure information by leveraging access to a student account with a suspended enrolment.</s>","<s>MDL-49395 accesslib: Make get_suspended_userids more efficient
</s>"," diff --git a/lib/accesslib.php b/lib/accesslib.php
index 1c0f8b04cb3..51675e9a363 100644
--- a/lib/accesslib.php
+++ b/lib/accesslib.php
@@ -2256,9 +2256,10 @@ function can_access_course(stdClass $course, $user = null, $withcapability = '',
  * @param string $withcapability
  * @param int $groupid 0 means ignore groups, any other value limits the result by group id
  * @param bool $onlyactive consider only active enrolments in enabled plugins and time restrictions
+ * @param bool $onlysuspended inverse of onlyactive, consider only suspended enrolments
  * @return array list($sql, $params)
  */
-function get_enrolled_sql(context $context, $withcapability = '', $groupid = 0, $onlyactive = false) {
+function get_enrolled_sql(context $context, $withcapability = '', $groupid = 0, $onlyactive = false, $onlysuspended = false) {
     global $DB, $CFG;
 
     // use unique prefix just in case somebody makes some SQL magic with the result
@@ -2271,6 +2272,13 @@ function get_enrolled_sql(context $context, $withcapability = '', $groupid = 0,
 
     $isfrontpage = ($coursecontext->instanceid == SITEID);
 
+    if ($onlyactive && $onlysuspended) {
+        throw new coding_exception(""Both onlyactive and onlysuspended are set, this is probably not what you want!"");
+    }
+    if ($isfrontpage && $onlysuspended) {
+        throw new coding_exception(""onlysuspended is not supported on frontpage; please add your own early-exit!"");
+    }
+
     $joins  = array();
     $wheres = array();
     $params = array();
@@ -2387,13 +2395,28 @@ function get_enrolled_sql(context $context, $withcapability = '', $groupid = 0,
     if ($isfrontpage) {
         // all users are ""enrolled"" on the frontpage
     } else {
-        $joins[] = ""JOIN {user_enrolments} {$prefix}ue ON {$prefix}ue.userid = {$prefix}u.id"";
-        $joins[] = ""JOIN {enrol} {$prefix}e ON ({$prefix}e.id = {$prefix}ue.enrolid AND {$prefix}e.courseid = :{$prefix}courseid)"";
+        $where1 = ""{$prefix}ue.status = :{$prefix}active AND {$prefix}e.status = :{$prefix}enabled"";
+        $where2 = ""{$prefix}ue.timestart < :{$prefix}now1 AND ({$prefix}ue.timeend = 0 OR {$prefix}ue.timeend > :{$prefix}now2)"";
+        $ejoin = ""JOIN {enrol} {$prefix}e ON ({$prefix}e.id = {$prefix}ue.enrolid AND {$prefix}e.courseid = :{$prefix}courseid)"";
         $params[$prefix.'courseid'] = $coursecontext->instanceid;
 
-        if ($onlyactive) {
-            $wheres[] = ""{$prefix}ue.status = :{$prefix}active AND {$prefix}e.status = :{$prefix}enabled"";
-            $wheres[] = ""{$prefix}ue.timestart < :{$prefix}now1 AND ({$prefix}ue.timeend = 0 OR {$prefix}ue.timeend > :{$prefix}now2)"";
+        if (!$onlysuspended) {
+            $joins[] = ""JOIN {user_enrolments} {$prefix}ue ON {$prefix}ue.userid = {$prefix}u.id"";
+            $joins[] = $ejoin;
+            if ($onlyactive) {
+                $wheres[] = ""$where1 AND $where2"";
+            }
+        } else {
+            // Suspended only where there is enrolment but ALL are suspended.
+            // Consider multiple enrols where one is not suspended or plain role_assign.
+            $enrolselect = ""SELECT DISTINCT {$prefix}ue.userid FROM {user_enrolments} {$prefix}ue $ejoin WHERE $where1 AND $where2"";
+            $joins[] = ""JOIN {user_enrolments} {$prefix}ue1 ON {$prefix}ue1.userid = {$prefix}u.id"";
+            $joins[] = ""JOIN {enrol} {$prefix}e1 ON ({$prefix}e1.id = {$prefix}ue1.enrolid AND {$prefix}e1.courseid = :{$prefix}_e1_courseid)"";
+            $params[""{$prefix}_e1_courseid""] = $coursecontext->instanceid;
+            $wheres[] = ""{$prefix}u.id NOT IN ($enrolselect)"";
+        }
+
+        if ($onlyactive || $onlysuspended) {
             $now = round(time(), -2); // rounding helps caching in DB
             $params = array_merge($params, array($prefix.'enabled'=>ENROL_INSTANCE_ENABLED,
                                                  $prefix.'active'=>ENROL_USER_ACTIVE,
@@ -7506,7 +7529,6 @@ function extract_suspended_users($context, &$users, $ignoreusers=array()) {
 function get_suspended_userids(context $context, $usecache = false) {
     global $DB;
 
-    // Check the cache first for performance reasons if enabled.
     if ($usecache) {
         $cache = cache::make('core', 'suspended_userids');
         $susers = $cache->get($context->id);
@@ -7515,21 +7537,14 @@ function get_suspended_userids(context $context, $usecache = false) {
         }
     }
 
-    // Get all enrolled users.
-    list($sql, $params) = get_enrolled_sql($context);
-    $users = $DB->get_records_sql($sql, $params);
-
-    // Get active enrolled users.
-    list($sql, $params) = get_enrolled_sql($context, null, null, true);
-    $activeusers = $DB->get_records_sql($sql, $params);
-
+    $coursecontext = $context->get_course_context();
     $susers = array();
-    if (sizeof($activeusers) != sizeof($users)) {
-        foreach ($users as $userid => $user) {
-            if (!array_key_exists($userid, $activeusers)) {
-                $susers[$userid] = $userid;
-            }
-        }
+
+    // Front page users are always enrolled, so suspended list is empty.
",0.0,,0.0,,0.0,none
CVE-2015-3180,CVE-2015-3180/032f18c4a50d472cddd2cb52a627d19b75921f16,https://github.com/moodle/moodle/commit/032f18c4a50d472cddd2cb52a627d19b75921f16,"<s>lib/navigationlib.php in Moodle through 2.5.9, 2.6.x before 2.6.11, 2.7.x before 2.7.8, and 2.8.x before 2.8.6 allows remote authenticated users to obtain sensitive course-structure information by leveraging access to a student account with a suspended enrolment.</s>","<s>MDL-49788 navigation: Ensure we only check active enrolments
</s>"," diff --git a/lib/navigationlib.php b/lib/navigationlib.php
index eab081140e5..28ece447646 100644
--- a/lib/navigationlib.php
+++ b/lib/navigationlib.php
@@ -1172,7 +1172,7 @@ class global_navigation extends navigation_node {
                 // course node and not populate it.
 
                 // Not enrolled, can't view, and hasn't switched roles
-                if (!can_access_course($course)) {
+                if (!can_access_course($course, null, '', true)) {
                     if ($coursenode->isexpandable === true) {
                         // Obviously the situation has changed, update the cache and adjust the node.
                         // This occurs if the user access to a course has been revoked (one way or another) after
@@ -1188,9 +1188,7 @@ class global_navigation extends navigation_node {
                         $canviewcourseprofile = false;
                         break;
                     }
-                }
-
-                if ($coursenode->isexpandable === false) {
+                } else if ($coursenode->isexpandable === false) {
                     // Obviously the situation has changed, update the cache and adjust the node.
                     // This occurs if the user has been granted access to a course (one way or another) after initially
                     // logging in for this session.
@@ -1235,7 +1233,7 @@ class global_navigation extends navigation_node {
 
                 // If the user is not enrolled then we only want to show the
                 // course node and not populate it.
-                if (!can_access_course($course)) {
+                if (!can_access_course($course, null, '', true)) {
                     $coursenode->make_active();
                     $canviewcourseprofile = false;
                     break;
@@ -1274,7 +1272,7 @@ class global_navigation extends navigation_node {
 
                 // If the user is not enrolled then we only want to show the
                 // course node and not populate it.
-                if (!can_access_course($course)) {
+                if (!can_access_course($course, null, '', true)) {
                     $coursenode->make_active();
                     $canviewcourseprofile = false;
                     break;
@@ -2324,7 +2322,7 @@ class global_navigation extends navigation_node {
                     $usercoursenode->add(get_string('notes', 'notes'), $url, self::TYPE_SETTING);
                 }
 
-                if (can_access_course($usercourse, $user->id)) {
+                if (can_access_course($usercourse, $user->id, '', true)) {
                     $usercoursenode->add(get_string('entercourse'), new moodle_url('/course/view.php', array('id'=>$usercourse->id)), self::TYPE_SETTING, null, null, new pix_icon('i/course', ''));
                 }
 
@@ -2423,6 +2421,7 @@ class global_navigation extends navigation_node {
         } else if ($coursetype == self::COURSE_CURRENT) {
             $parent = $this->rootnodes['currentcourse'];
             $url = new moodle_url('/course/view.php', array('id'=>$course->id));
+            $canexpandcourse = $this->can_expand_course($course);
         } else if ($coursetype == self::COURSE_MY && !$forcegeneric) {
             if (!empty($CFG->navshowmycoursecategories) && ($parent = $this->rootnodes['mycourses']->find($course->category, self::TYPE_MY_CATEGORY))) {
                 // Nothing to do here the above statement set $parent to the category within mycourses.
@@ -2502,7 +2501,7 @@ class global_navigation extends navigation_node {
         $cache = $this->get_expand_course_cache();
         $canexpand = $cache->get($course->id);
         if ($canexpand === false) {
-            $canexpand = isloggedin() && can_access_course($course);
+            $canexpand = isloggedin() && can_access_course($course, null, '', true);
             $canexpand = (int)$canexpand;
             $cache->set($course->id, $canexpand);
         }
@@ -2858,7 +2857,7 @@ class global_navigation_for_ajax extends global_navigation {
                 break;
             case self::TYPE_COURSE :
                 $course = $DB->get_record('course', array('id' => $this->instanceid), '*', MUST_EXIST);
-                if (!can_access_course($course)) {
+                if (!can_access_course($course, null, '', true)) {
                     // Thats OK all courses are expandable by default. We don't need to actually expand it we can just
                     // add the course node and break. This leads to an empty node.
                     $this->add_course($course);
@@ -3252,7 +3251,7 @@ class navbar extends navigation_node {
             }
             $categories[] = $categorynode;
         }
-        if (is_enrolled(context_course::instance($this->page->course->id))) {
+        if (is_enrolled(context_course::instance($this->page->course->id), null, '', true)) {
             $courses = $this->page->navigation->get('mycourses');
         } else {
             $courses = $this->page->navigation->get('courses');
@@ -4149,7 +4148,7 @@ class settings_navigation extends navigation_node {
",1.0,,1.0,,1.0,none
CVE-2015-3180,CVE-2015-3180/23eee911ef6841d6026957a677becb9dda5c26c5,https://github.com/moodle/moodle/commit/23eee911ef6841d6026957a677becb9dda5c26c5,"<s>lib/navigationlib.php in Moodle through 2.5.9, 2.6.x before 2.6.11, 2.7.x before 2.7.8, and 2.8.x before 2.8.6 allows remote authenticated users to obtain sensitive course-structure information by leveraging access to a student account with a suspended enrolment.</s>","<s>MDL-49232 enrol_self: Add behat test for non-guest self-enrolment
</s>"," diff --git a/enrol/self/tests/behat/self_enrolment.feature b/enrol/self/tests/behat/self_enrolment.feature
index a08f3bd541a..6ba06c8f362 100644
--- a/enrol/self/tests/behat/self_enrolment.feature
+++ b/enrol/self/tests/behat/self_enrolment.feature
@@ -16,6 +16,19 @@ Feature: Users can auto-enrol themself in courses where self enrolment is allowe
       | user | course | role |
       | teacher1 | C1 | editingteacher |
 
+  @javascript
+  Scenario: Self-enrolment enabled as guest
+    Given I log in as ""teacher1""
+    And I follow ""Course 1""
+    And I add ""Self enrolment"" enrolment method with:
+      | Custom instance name | Test student enrolment |
+    And I log out
+    When I follow ""Course 1""
+    And I press ""Log in as a guest""
+    Then I should see ""Guests can not access this course, please try to log in.""
+    And I press ""Continue""
+    And I should see ""Log in""
+
   @javascript
   Scenario: Self-enrolment enabled
     Given I log in as ""teacher1""
",0.0,,0.0,,0.0,none
CVE-2015-3180,CVE-2015-3180/086f4b6e4f3519a398fe1337a3d8cacccae7a745,https://github.com/moodle/moodle/commit/086f4b6e4f3519a398fe1337a3d8cacccae7a745,"<s>lib/navigationlib.php in Moodle through 2.5.9, 2.6.x before 2.6.11, 2.7.x before 2.7.8, and 2.8.x before 2.8.6 allows remote authenticated users to obtain sensitive course-structure information by leveraging access to a student account with a suspended enrolment.</s>","<s>MDL-48572 gradereport_grader: Average wrong with suspended users
</s>"," diff --git a/grade/report/grader/lib.php b/grade/report/grader/lib.php
index ade18ece64f..34797a25d63 100644
--- a/grade/report/grader/lib.php
+++ b/grade/report/grader/lib.php
@@ -1337,7 +1337,7 @@ class grade_report_grader extends grade_report {
      * @return array Array of rows for the right part of the report
      */
     public function get_right_avg_row($rows=array(), $grouponly=false) {
-        global $USER, $DB, $OUTPUT;
+        global $USER, $DB, $OUTPUT, $CFG;
 
         if (!$this->canviewhidden) {
             // Totals might be affected by hiding, if user can not see hidden grades the aggregations might be altered
@@ -1369,7 +1369,11 @@ class grade_report_grader extends grade_report {
             list($gradebookrolessql, $gradebookrolesparams) = $DB->get_in_or_equal(explode(',', $this->gradebookroles), SQL_PARAMS_NAMED, 'grbr0');
 
             // Limit to users with an active enrollment.
-            list($enrolledsql, $enrolledparams) = get_enrolled_sql($this->context);
+            $coursecontext = $this->context->get_course_context(true);
+            $defaultgradeshowactiveenrol = !empty($CFG->grade_report_showonlyactiveenrol);
+            $showonlyactiveenrol = get_user_preferences('grade_report_showonlyactiveenrol', $defaultgradeshowactiveenrol);
+            $showonlyactiveenrol = $showonlyactiveenrol || !has_capability('moodle/course:viewsuspendedusers', $coursecontext);
+            list($enrolledsql, $enrolledparams) = get_enrolled_sql($this->context, '', 0, $showonlyactiveenrol);
 
             // We want to query both the current context and parent contexts.
             list($relatedctxsql, $relatedctxparams) = $DB->get_in_or_equal($this->context->get_parent_context_ids(true), SQL_PARAMS_NAMED, 'relatedctx');
",0.0,,0.0,,0.0,none
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2012-3388,CVE-2012-3388/1db89f5e6a5b922e2b6c71517bc0eda8277c1767,https://github.com/moodle/moodle/commit/1db89f5e6a5b922e2b6c71517bc0eda8277c1767,"<s>The is_enrolled function in lib/accesslib.php in Moodle 2.2.x before 2.2.4 and 2.3.x before 2.3.1 does not properly interact with the caching feature, which might allow remote authenticated users to bypass an intended capability check via unspecified vectors that trigger caching of a user record.</s>","<s>MDL-33916 Ensure that capabilities are checked for cached user enrolments
</s>"," diff --git a/lib/accesslib.php b/lib/accesslib.php
index fcd91b8b41d..de180b40dd1 100644
--- a/lib/accesslib.php
+++ b/lib/accesslib.php
@@ -1961,6 +1961,9 @@ function is_enrolled(context $context, $user = null, $withcapability = '', $only
             $coursecontext->reload_if_dirty();
             if (isset($USER->enrol['enrolled'][$coursecontext->instanceid])) {
                 if ($USER->enrol['enrolled'][$coursecontext->instanceid] > time()) {
+                    if ($withcapability and !has_capability($withcapability, $context, $userid)) {
+                        return false;
+                    }
                     return true;
                 }
             }
",1.0,,1.0,,1.0,lime
CVE-2012-3388,CVE-2012-3388/770cee969678a2197e0c4d6b82ca019e94199845,https://github.com/moodle/moodle/commit/770cee969678a2197e0c4d6b82ca019e94199845,"<s>The is_enrolled function in lib/accesslib.php in Moodle 2.2.x before 2.2.4 and 2.3.x before 2.3.1 does not properly interact with the caching feature, which might allow remote authenticated users to bypass an intended capability check via unspecified vectors that trigger caching of a user record.</s>","<s>MDL-33916 Add unit tests to ensure that is_enrolled returns correctly
</s>"," diff --git a/lib/tests/accesslib_test.php b/lib/tests/accesslib_test.php
index ac51a372a76..6d7bc4e22a8 100644
--- a/lib/tests/accesslib_test.php
+++ b/lib/tests/accesslib_test.php
@@ -147,6 +147,59 @@ class accesslib_testcase extends advanced_testcase {
         }
     }
 
+    /**
+     * Test if user is enrolled in a course
+     * @return void
+     */
+    public function test_is_enrolled() {
+        global $DB;
+
+        // Generate data
+        $user = $this->getDataGenerator()->create_user();
+        $course = $this->getDataGenerator()->create_course();
+        $coursecontext = context_course::instance($course->id);
+        $role = $DB->get_record('role', array('shortname'=>'student'));
+
+        // There should be a manual enrolment as part of the default install
+        $plugin = enrol_get_plugin('manual');
+        $instance = $DB->get_record('enrol', array(
+            'courseid' => $course->id,
+            'enrol' => 'manual',
+        ));
+        $this->assertNotEquals($instance, false);
+
+        // Enrol the user in the course
+        $plugin->enrol_user($instance, $user->id, $role->id);
+
+        // We'll test with the mod/assign:submit capability
+        $capability= 'mod/assign:submit';
+        $this->assertTrue($DB->record_exists('capabilities', array('name' => $capability)));
+
+        // Switch to our user
+        $this->setUser($user);
+
+        // Ensure that the user has the capability first
+        $this->assertTrue(has_capability($capability, $coursecontext, $user->id));
+
+        // We first test whether the user is enrolled on the course as this
+        // seeds the cache, then we test for the capability
+        $this->assertTrue(is_enrolled($coursecontext, $user, '', true));
+        $this->assertTrue(is_enrolled($coursecontext, $user, $capability));
+
+        // Prevent the capability for this user role
+        assign_capability($capability, CAP_PROHIBIT, $role->id, $coursecontext);
+        $coursecontext->mark_dirty();
+        $this->assertFalse(has_capability($capability, $coursecontext, $user->id));
+
+        // Again, we seed the cache first by checking initial enrolment,
+        // and then we test the actual capability
+        $this->assertTrue(is_enrolled($coursecontext, $user, '', true));
+        $this->assertFalse(is_enrolled($coursecontext, $user, $capability));
+
+        // We need variable states to be reset for the next test
+        $this->resetAfterTest(true);
+    }
+
     /**
      * Test logged in test.
      * @return void
",0.0,,0.0,,0.0,lime
CVE-2012-3388,CVE-2012-3388/2b1b2017a648d3da571e0d6995e0b6cc7fcf04d2,https://github.com/moodle/moodle/commit/2b1b2017a648d3da571e0d6995e0b6cc7fcf04d2,"<s>The is_enrolled function in lib/accesslib.php in Moodle 2.2.x before 2.2.4 and 2.3.x before 2.3.1 does not properly interact with the caching feature, which might allow remote authenticated users to bypass an intended capability check via unspecified vectors that trigger caching of a user record.</s>","<s>MDL-34109 quiz cron: timelimit are timeclose of 0 are special.
If the timelimit or timeclose of a quiz are 0, this means 'no
restriction', rather than '1970' or '0 seconds'. We need to handle these
special cases correctly in the code that looks for quiz attempts that
might be in the wrong state.
</s>"," diff --git a/mod/quiz/cronlib.php b/mod/quiz/cronlib.php
index b6a1eb03113..111419c1f4b 100644
--- a/mod/quiz/cronlib.php
+++ b/mod/quiz/cronlib.php
@@ -127,15 +127,15 @@ class mod_quiz_overdue_attempt_updater {
 
           WHERE (
                 state = 'inprogress' AND (
-                    :timenow1 > usertimeclose OR
-                    :timenow2 > quiza.timestart + usertimelimit
+                    (usertimeclose > 0 AND :timenow1 > usertimeclose) OR
+                    (usertimelimit > 0 AND :timenow2 > quiza.timestart + usertimelimit)
                 )
             )
           OR
             (
                 state = 'overdue' AND (
-                    :timenow3 > graceperiod + usertimeclose OR
-                    :timenow4 > graceperiod + quiza.timestart + usertimelimit
+                    (usertimeclose > 0 AND :timenow3 > graceperiod + usertimeclose) OR
+                    (usertimelimit > 0 AND :timenow4 > graceperiod + quiza.timestart + usertimelimit)
                 )
             )
 
",0.0,,0.0,,0.0,lime
CVE-2012-3388,CVE-2012-3388/592443f4e1f36ebc602d73b1750a914a956fa6f9,https://github.com/moodle/moodle/commit/592443f4e1f36ebc602d73b1750a914a956fa6f9,"<s>The is_enrolled function in lib/accesslib.php in Moodle 2.2.x before 2.2.4 and 2.3.x before 2.3.1 does not properly interact with the caching feature, which might allow remote authenticated users to bypass an intended capability check via unspecified vectors that trigger caching of a user record.</s>","<s>MDL-34109 quiz cron: change whitespace before applying the fix.
This commit just changes the white-space, but does not change any of the
actual code. This is so that the commit I am about to make, which will
change the code, will be easier to understand.
</s>"," diff --git a/mod/quiz/cronlib.php b/mod/quiz/cronlib.php
index eab7b0fb290..b6a1eb03113 100644
--- a/mod/quiz/cronlib.php
+++ b/mod/quiz/cronlib.php
@@ -125,10 +125,19 @@ class mod_quiz_overdue_attempt_updater {
         ) group_by_results
            JOIN {quiz_attempts} quiza ON quiza.id = group_by_results.attemptid
 
-          WHERE (state = 'inprogress' AND (:timenow1 > usertimeclose OR
-                                           :timenow2 > quiza.timestart + usertimelimit))
-             OR (state = 'overdue'    AND (:timenow3 > graceperiod + usertimeclose OR
-                                           :timenow4 > graceperiod + quiza.timestart + usertimelimit))
+          WHERE (
+                state = 'inprogress' AND (
+                    :timenow1 > usertimeclose OR
+                    :timenow2 > quiza.timestart + usertimelimit
+                )
+            )
+          OR
+            (
+                state = 'overdue' AND (
+                    :timenow3 > graceperiod + usertimeclose OR
+                    :timenow4 > graceperiod + quiza.timestart + usertimelimit
+                )
+            )
 
        ORDER BY course, quiz"",
 
",0.0,,0.0,,0.0,lime
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2020-5295,CVE-2020-5295/655c8011b964367949cc76a4caf93e17502eda9e,https://github.com/octobercms/october/commit/655c8011b964367949cc76a4caf93e17502eda9e,"<s>In OctoberCMS (october/october composer package) versions from 1.0.319 and before 1.0.466, an attacker can exploit this vulnerability to read local files of an October CMS server. The vulnerability is only exploitable by an authenticated backend user with the `cms.manage_assets` permission. Issue has been patched in Build 466 (v1.0.466).</s>","<s>Fix client side validation (#5088)
* Add data-request-validate to core save buttons
* Check if client side validation is desired before running it
Fixes #5076.
</s>"," diff --git a/modules/system/assets/js/framework-min.js b/modules/system/assets/js/framework-min.js
index e0a487918..866e83dd5 100644
--- a/modules/system/assets/js/framework-min.js
+++ b/modules/system/assets/js/framework-min.js
@@ -4,7 +4,7 @@ if(window.jQuery.request!==undefined){throw new Error('The OctoberCMS framework
 +function($){""use strict"";var Request=function(element,handler,options){var $el=this.$el=$(element);this.options=options||{};if(handler===undefined){throw new Error('The request handler name is not specified.')}
 if(!handler.match(/^(?:\w+\:{2})?on*/)){throw new Error('Invalid handler name. The correct handler name format is: ""onEvent"".')}
 var $form=options.form?$(options.form):$el.closest('form'),$triggerEl=!!$form.length?$form:$el,context={handler:handler,options:options}
-if(typeof document.createElement('input').reportValidity=='function'&&$form&&$form[0]&&!$form[0].checkValidity()){$form[0].reportValidity();return false;}
+if((options.validate!==undefined)&&typeof document.createElement('input').reportValidity=='function'&&$form&&$form[0]&&!$form[0].checkValidity()){$form[0].reportValidity();return false;}
 $el.trigger('ajaxSetup',[context])
 var _event=jQuery.Event('oc.beforeRequest')
 $triggerEl.trigger(_event,context)
@@ -103,7 +103,7 @@ return result.join('&')}
 var old=$.fn.request
 $.fn.request=function(handler,option){var args=arguments
 var $this=$(this).first()
-var data={evalBeforeUpdate:$this.data('request-before-update'),evalSuccess:$this.data('request-success'),evalError:$this.data('request-error'),evalComplete:$this.data('request-complete'),ajaxGlobal:$this.data('request-ajax-global'),confirm:$this.data('request-confirm'),redirect:$this.data('request-redirect'),loading:$this.data('request-loading'),flash:$this.data('request-flash'),files:$this.data('request-files'),form:$this.data('request-form'),url:$this.data('request-url'),update:paramToObj('data-request-update',$this.data('request-update')),data:paramToObj('data-request-data',$this.data('request-data'))}
+var data={evalBeforeUpdate:$this.data('request-before-update'),evalSuccess:$this.data('request-success'),evalError:$this.data('request-error'),evalComplete:$this.data('request-complete'),ajaxGlobal:$this.data('request-ajax-global'),confirm:$this.data('request-confirm'),redirect:$this.data('request-redirect'),loading:$this.data('request-loading'),flash:$this.data('request-flash'),files:$this.data('request-files'),validate:$this.data('request-validate'),form:$this.data('request-form'),url:$this.data('request-url'),update:paramToObj('data-request-update',$this.data('request-update')),data:paramToObj('data-request-data',$this.data('request-data'))}
 if(!handler)handler=$this.data('request')
 var options=$.extend(true,{},Request.DEFAULTS,data,typeof option=='object'&&option)
 return new Request($this,handler,options)}
",0.0,,0.0,,0.0,none
CVE-2020-5295,CVE-2020-5295/2bc4084dff12eae036c848d4151ea35a29147bd0,https://github.com/octobercms/october/commit/2bc4084dff12eae036c848d4151ea35a29147bd0,"<s>In OctoberCMS (october/october composer package) versions from 1.0.319 and before 1.0.466, an attacker can exploit this vulnerability to read local files of an October CMS server. The vulnerability is only exploitable by an authenticated backend user with the `cms.manage_assets` permission. Issue has been patched in Build 466 (v1.0.466).</s>","<s>Fixed composer requirement
Composer does not support commit specific requirements when it comes to fetching the composer.json metadata, which means that this particular fix has to specify a tag instead of a commit hash.
</s>"," diff --git a/composer.json b/composer.json
index bbfec7024..eb4f8fe37 100644
--- a/composer.json
+++ b/composer.json
@@ -39,7 +39,7 @@
         ""october/backend"": ""~1.0"",
         ""october/cms"": ""~1.0"",
         ""laravel/framework"": ""~5.5.40"",
-        ""wikimedia/composer-merge-plugin"": ""dev-master#bec42272005379dc752f7d4823cfe972ff64fbdf""
+        ""wikimedia/composer-merge-plugin"": ""1.4.1""
     },
     ""require-dev"": {
         ""fzaninotto/faker"": ""~1.7"",
",0.0,,0.0,,0.0,none
CVE-2020-5295,CVE-2020-5295/2b8939cc8b5b6fe81e093fe2c9f883ada4e3c8cc,https://github.com/octobercms/october/commit/2b8939cc8b5b6fe81e093fe2c9f883ada4e3c8cc,"<s>In OctoberCMS (october/october composer package) versions from 1.0.319 and before 1.0.466, an attacker can exploit this vulnerability to read local files of an October CMS server. The vulnerability is only exploitable by an authenticated backend user with the `cms.manage_assets` permission. Issue has been patched in Build 466 (v1.0.466).</s>","<s>Improve asset file path handling
</s>"," diff --git a/modules/cms/classes/Asset.php b/modules/cms/classes/Asset.php
index c0920752f..1073f8ed8 100644
--- a/modules/cms/classes/Asset.php
+++ b/modules/cms/classes/Asset.php
@@ -285,7 +285,14 @@ class Asset extends Extendable
             $fileName = $this->fileName;
         }
 
-        return $this->theme->getPath().'/'.$this->dirName.'/'.$fileName;
+        // Limit paths to those under the assets directory
+        $directory = $this->theme->getPath() . '/' . $this->dirName . '/';
+        $path = realpath($directory . $fileName);
+        if (!starts_with($path, $directory)) {
+            return false;
+        }
+
+        return $path;
     }
 
     /**
",1.0,,1.0,,1.0,none
CVE-2020-5295,CVE-2020-5295/dc72cafcd11485941a1e3f9586863937cd403db2,https://github.com/octobercms/october/commit/dc72cafcd11485941a1e3f9586863937cd403db2,"<s>In OctoberCMS (october/october composer package) versions from 1.0.319 and before 1.0.466, an attacker can exploit this vulnerability to read local files of an October CMS server. The vulnerability is only exploitable by an authenticated backend user with the `cms.manage_assets` permission. Issue has been patched in Build 466 (v1.0.466).</s>","<s>Don't persist failed search terms (#5039)
If a column is defined as searchable, that is not actually searchable (like a partial) and a user filters a list using the searchbox, an Exception is thrown.
Unfortunately, this errorenous search term has already been persisted to the session so on subsequent page loads, the user is presented with an Exception with no way to resolve it themselves.
This PR catches any exception that happens during the search and resets any persisted search terms so that the user can continue working after a page load.
The exception itself will still be thrown.
To reproduce the issue this PR solves:
Set a partial column in any list as searchable: true
Submit a search query
Hit F5
</s>"," diff --git a/modules/backend/widgets/Search.php b/modules/backend/widgets/Search.php
index 2f5749abf..8e554fb21 100644
--- a/modules/backend/widgets/Search.php
+++ b/modules/backend/widgets/Search.php
@@ -128,7 +128,14 @@ class Search extends WidgetBase
          * Trigger class event, merge results as viewable array
          */
         $params = func_get_args();
-        $result = $this->fireEvent('search.submit', [$params]);
+        try {
+            $result = $this->fireEvent('search.submit', [$params]);
+        } catch (\Throwable $e) {
+            // Remove the search term from the session if the search has failed.
+            $this->setActiveTerm('');
+            throw $e;
+        }
+
         if ($result && is_array($result)) {
             return call_user_func_array('array_merge', $result);
         }
",0.0,,0.0,,0.0,none
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2020-25649,CVE-2020-25649/3d932709abd0b5390efe67451653fc9efa9db677,https://github.com/FasterXML/jackson-databind/commit/3d932709abd0b5390efe67451653fc9efa9db677,"<s>A flaw was found in FasterXML Jackson Databind, where it did not have entity expansion secured properly. This flaw allows vulnerability to XML external entity (XXE) attacks. The highest threat from this vulnerability is data integrity.</s>","<s>Fix #2589 (#2901)
Co-authored-by: Tatu Saloranta <tatu.saloranta@iki.fi>
</s>"," diff --git a/release-notes/VERSION-2.x b/release-notes/VERSION-2.x
index d29d8196c..ffbad878f 100644
--- a/release-notes/VERSION-2.x
+++ b/release-notes/VERSION-2.x
@@ -6,6 +6,10 @@ Project: jackson-databind
 
 2.9.10.7 (not yet released)
 
+#2589: `DOMDeserializer`: setExpandEntityReferences(false) may not prevent
+  external entity expansion in all cases
+ (reported by Bartosz B)
+
 #2854: Block one more gadget type (javax.swing, CVE-2020-xxx)
  (reported by Yangkun(ICSL))
 
",0.0,,0.0,,1.0,tfidf
CVE-2020-25649,CVE-2020-25649/93f89aa2992a5a05cad27cf4db9903c10c33239d,https://github.com/FasterXML/jackson-databind/commit/93f89aa2992a5a05cad27cf4db9903c10c33239d,"<s>A flaw was found in FasterXML Jackson Databind, where it did not have entity expansion secured properly. This flaw allows vulnerability to XML external entity (XXE) attacks. The highest threat from this vulnerability is data integrity.</s>","<s>Replace `str.length() == 0` with `str.isEmpty()` where possible (#2929)
This makes the code easier for humans to read, and allows the jvm
to quickly optimize more code.
</s>"," diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java
index 52e52832d..6347933a4 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java
@@ -150,7 +150,7 @@ public abstract class FromStringDeserializer<T> extends StdScalarDeserializer<T>
             // 29-Jun-2020, tatu: New! ""Scalar from Object"" (mostly for XML)
             text = ctxt.extractScalarFromObject(p, this, _valueClass);
         }
-        if (text.length() == 0 || (text = text.trim()).length() == 0) {
+        if (text.isEmpty() || (text = text.trim()).isEmpty()) {
             // 09-Jun-2020, tatu: Commonly `null` but may coerce to ""empty"" as well
             return (T) _deserializeFromEmptyString(ctxt);
         }
",1.0,,0.0,,0.0,tfidf
CVE-2020-25649,CVE-2020-25649/2b65fc2a7c9ea26e9e81b266da0ba9018da5e4f3,https://github.com/FasterXML/jackson-databind/commit/2b65fc2a7c9ea26e9e81b266da0ba9018da5e4f3,"<s>A flaw was found in FasterXML Jackson Databind, where it did not have entity expansion secured properly. This flaw allows vulnerability to XML external entity (XXE) attacks. The highest threat from this vulnerability is data integrity.</s>","<s>Fix an edge case in MethodGenericTypeResolver validation (#2927)
This was discovered while testing an internal project against
2.12.0-rc2-SNAPSHOT. The new test is a minimal reproducer based
very closely on a collection which failed deserialization.
</s>"," diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/MethodGenericTypeResolver.java b/src/main/java/com/fasterxml/jackson/databind/introspect/MethodGenericTypeResolver.java
index 782f33aac..4896b13cb 100644
--- a/src/main/java/com/fasterxml/jackson/databind/introspect/MethodGenericTypeResolver.java
+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/MethodGenericTypeResolver.java
@@ -190,7 +190,10 @@ final class MethodGenericTypeResolver
             return false;
         }
         ParameterizedType parameterized = maybeGetParameterizedType(type);
-        if (parameterized != null) {
+        if (parameterized != null
+                // 09-Nov-2020, ckozak: Validate equivalent parameters if possible, however when types do not
+                // exactly match, there's not much validation we can reasonably do.
+                && Objects.equals(boundType.getRawClass(), parameterized.getRawType())) {
             Type[] typeArguments = parameterized.getActualTypeArguments();
             TypeBindings bindings = boundType.getBindings();
             if (bindings.size() != typeArguments.length) {
",0.0,,0.0,,0.0,tfidf
CVE-2020-25649,CVE-2020-25649/5e2c83851a831bdfc8de3b294dd212cda0779bd3,https://github.com/FasterXML/jackson-databind/commit/5e2c83851a831bdfc8de3b294dd212cda0779bd3,"<s>A flaw was found in FasterXML Jackson Databind, where it did not have entity expansion secured properly. This flaw allows vulnerability to XML external entity (XXE) attacks. The highest threat from this vulnerability is data integrity.</s>","<s>Fix a test that was relying on unsafe modification of ObjectMapper
</s>"," diff --git a/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/TestSubtypesExternalPropertyMissingProperty.java b/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/TestSubtypesExternalPropertyMissingProperty.java
index 41a2733b1..d56fdbe63 100644
--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/TestSubtypesExternalPropertyMissingProperty.java
+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/TestSubtypesExternalPropertyMissingProperty.java
@@ -87,7 +87,7 @@ public class TestSubtypesExternalPropertyMissingProperty extends BaseMapTest
         }
     }
 
-    private final ObjectMapper MAPPER = newJsonMapper();
+    private final ObjectReader READER = newJsonMapper().reader();
 
     /*
     /**********************************************************
@@ -103,7 +103,7 @@ public class TestSubtypesExternalPropertyMissingProperty extends BaseMapTest
     private static final String orangeBoxMissingJson = ""{\""type\"":\""orange\""}}"";
 
     private static final Apple apple = new Apple(""Apple"", 16);
-    private static Box appleBox = new Box(""apple"", apple);
+    private static final Box appleBox = new Box(""apple"", apple);
     private static final String appleBoxJson = ""{\""type\"":\""apple\"",\""fruit\"":{\""name\"":\""Apple\"",\""seedCount\"":16}}"";
     private static final String appleBoxNullJson = ""{\""type\"":\""apple\"",\""fruit\"":null}"";
     private static final String appleBoxEmptyJson = ""{\""type\"":\""apple\"",\""fruit\"":{}}"";
@@ -120,13 +120,13 @@ public class TestSubtypesExternalPropertyMissingProperty extends BaseMapTest
      */
     @Test
     public void testDeserializationPresent() throws Exception {
-        MAPPER.disable(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);
-        checkOrangeBox();
-        checkAppleBox();
+        ObjectReader r = READER.without(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);
+        checkOrangeBox(r);
+        checkAppleBox(r);
 
-        MAPPER.enable(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);
-        checkOrangeBox();
-        checkAppleBox();
+        r = READER.with(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);
+        checkOrangeBox(r);
+        checkAppleBox(r);
     }
 
     /**
@@ -134,13 +134,13 @@ public class TestSubtypesExternalPropertyMissingProperty extends BaseMapTest
      */
     @Test
     public void testDeserializationNull() throws Exception {
-        MAPPER.disable(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);
-        checkOrangeBoxNull(orangeBoxNullJson);
-        checkAppleBoxNull(appleBoxNullJson);
+        ObjectReader r = READER.without(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);
+        checkOrangeBoxNull(r, orangeBoxNullJson);
+        checkAppleBoxNull(r, appleBoxNullJson);
 
-        MAPPER.enable(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);
-        checkOrangeBoxNull(orangeBoxNullJson);
-        checkAppleBoxNull(appleBoxNullJson);
+        r = READER.with(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);
+        checkOrangeBoxNull(r, orangeBoxNullJson);
+        checkAppleBoxNull(r, appleBoxNullJson);
     }
 
     /**
@@ -148,13 +148,13 @@ public class TestSubtypesExternalPropertyMissingProperty extends BaseMapTest
      */
     @Test
     public void testDeserializationEmpty() throws Exception {
-        MAPPER.disable(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);
-        checkOrangeBoxEmpty(orangeBoxEmptyJson);
-        checkAppleBoxEmpty(appleBoxEmptyJson);
+        ObjectReader r = READER.without(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);
+        checkOrangeBoxEmpty(r, orangeBoxEmptyJson);
+        checkAppleBoxEmpty(r, appleBoxEmptyJson);
 
-        MAPPER.enable(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);
-        checkOrangeBoxEmpty(orangeBoxEmptyJson);
-        checkAppleBoxEmpty(appleBoxEmptyJson);
+        r = READER.with(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);
+        checkOrangeBoxEmpty(r, orangeBoxEmptyJson);
+        checkAppleBoxEmpty(r, appleBoxEmptyJson);
     }
 
     /**
@@ -162,13 +162,13 @@ public class TestSubtypesExternalPropertyMissingProperty extends BaseMapTest
      */
     @Test
     public void testDeserializationMissing() throws Exception {
-        MAPPER.disable(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);
-        checkOrangeBoxNull(orangeBoxMissingJson);
-        checkAppleBoxNull(appleBoxMissingJson);
+        ObjectReader r = READER.without(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);
+        checkOrangeBoxNull(r, orangeBoxMissingJson);
+        checkAppleBoxNull(r, appleBoxMissingJson);
 
-        MAPPER.enable(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);
-        checkBoxJsonMappingException(orangeBoxMissingJson);
-        checkBoxJsonMappingException(appleBoxMissingJson);
+        r = READER.with(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PRO",0.0,,0.0,,0.0,tfidf
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2015-2141,CVE-2015-2141/260810ce63aa01bc02240aa7602dd90e258f7b51,https://github.com/weidai11/cryptopp/commit/260810ce63aa01bc02240aa7602dd90e258f7b51,"<s>The InvertibleRWFunction::CalculateInverse function in rw.cpp in libcrypt++ 5.6.2 does not properly blind private key operations for the Rabin-Williams digital signature algorithm, which allows remote attackers to obtain private keys via a timing attack.</s>","<s>Implmented Bernstein\'s Tweaked Roots for Rabin-Williams signatures. Thanks to Evgeny Sidorov for suggesting it
</s>"," diff --git a/rw.h b/rw.h
index 6820251e..45b39468 100644
--- a/rw.h
+++ b/rw.h
@@ -48,8 +48,9 @@ class CRYPTOPP_DLL InvertibleRWFunction : public RWFunction, public TrapdoorFunc
 	typedef InvertibleRWFunction ThisClass;
 
 public:
-	void Initialize(const Integer &n, const Integer &p, const Integer &q, const Integer &u)
-		{m_n = n; m_p = p; m_q = q; m_u = u;}
+	InvertibleRWFunction() : m_precompute(false) {}
+
+	void Initialize(const Integer &n, const Integer &p, const Integer &q, const Integer &u);
 	// generate a random private key
 	void Initialize(RandomNumberGenerator &rng, unsigned int modulusBits)
 		{GenerateRandomWithKeySize(rng, modulusBits);}
@@ -79,8 +80,21 @@ public:
 	void SetPrime2(const Integer &q) {m_q = q;}
 	void SetMultiplicativeInverseOfPrime2ModPrime1(const Integer &u) {m_u = u;}
 
+	virtual bool SupportsPrecomputation() const {return true;}
+	virtual void Precompute(unsigned int unused = 0) {PrecomputeTweakedRoots();}
+	virtual void Precompute(unsigned int unused = 0) const {PrecomputeTweakedRoots();}
+
+	virtual void LoadPrecomputation(BufferedTransformation &storedPrecomputation);
+	virtual void SavePrecomputation(BufferedTransformation &storedPrecomputation) const;
+
+protected:
+	void PrecomputeTweakedRoots() const;
+
 protected:
 	Integer m_p, m_q, m_u;
+
+	mutable Integer m_pre_2_9p, m_pre_2_3q, m_pre_q_p;
+	mutable bool m_precompute;
 };
 
 //! RW
",0.0,,0.0,,0.0,tfidf
CVE-2015-2141,CVE-2015-2141/b2820c28d3bda5fcffb799598a45466772c4b559,https://github.com/weidai11/cryptopp/commit/b2820c28d3bda5fcffb799598a45466772c4b559,"<s>The InvertibleRWFunction::CalculateInverse function in rw.cpp in libcrypt++ 5.6.2 does not properly blind private key operations for the Rabin-Williams digital signature algorithm, which allows remote attackers to obtain private keys via a timing attack.</s>","<s>Fixed spelling error in attribution
</s>"," diff --git a/rw.cpp b/rw.cpp
index e8916e91..f573fc31 100644
--- a/rw.cpp
+++ b/rw.cpp
@@ -194,10 +194,10 @@ Integer InvertibleRWFunction::CalculateInverse(RandomNumberGenerator &rng, const
 		// Do this in a loop for people using small numbers for testing
 		r.Randomize(rng, Integer::One(), m_n - Integer::One());
 		// Fix for CVE-2015-2141. Thanks to Evgeny Sidorov for reporting.
-		// Squaring to satisfy Jacobi requirements suggested by Jean-Pierre Munch.
+		// Squaring to satisfy Jacobi requirements suggested by Jean-Pierre Muench.
 		r = modn.Square(r);
 		rInv = modn.MultiplicativeInverse(r);
-	} while(rInv.IsZero());
+	} while (rInv.IsZero());
 
 	Integer re = modn.Square(r);
 	re = modn.Multiply(re, x);    // blind
",0.0,,0.0,,0.0,tfidf
CVE-2015-2141,CVE-2015-2141/1f0c35e6693db8350ebd99998dbbd23cf303e40d,https://github.com/weidai11/cryptopp/commit/1f0c35e6693db8350ebd99998dbbd23cf303e40d,"<s>The InvertibleRWFunction::CalculateInverse function in rw.cpp in libcrypt++ 5.6.2 does not properly blind private key operations for the Rabin-Williams digital signature algorithm, which allows remote attackers to obtain private keys via a timing attack.</s>","<s>Cleared initialization warning related to use of brackets
</s>"," diff --git a/rw.cpp b/rw.cpp
index f573fc31..8e07f577 100644
--- a/rw.cpp
+++ b/rw.cpp
@@ -202,7 +202,7 @@ Integer InvertibleRWFunction::CalculateInverse(RandomNumberGenerator &rng, const
 	Integer re = modn.Square(r);
 	re = modn.Multiply(re, x);    // blind
 
-	const Integer &h = re, &p = m_p, &q = m_q, &n = m_n;
+	const Integer &h = re, &p = m_p, &q = m_q;
 	Integer e, f;
 
 	const Integer U = modq.Exponentiate(h, (q+1)/8);
",0.0,,0.0,,0.0,tfidf
CVE-2015-2141,CVE-2015-2141/9425e16437439e68c7d96abef922167d68fafaff,https://github.com/weidai11/cryptopp/commit/9425e16437439e68c7d96abef922167d68fafaff,"<s>The InvertibleRWFunction::CalculateInverse function in rw.cpp in libcrypt++ 5.6.2 does not properly blind private key operations for the Rabin-Williams digital signature algorithm, which allows remote attackers to obtain private keys via a timing attack.</s>","<s>Fix for CVE-2015-2141. Thanks to Evgeny Sidorov for reporting. Squaring to satisfy Jacobi requirements suggested by JPM.
</s>"," diff --git a/rw.cpp b/rw.cpp
index cdd9f2d2..0b9318bf 100644
--- a/rw.cpp
+++ b/rw.cpp
@@ -126,10 +126,16 @@ Integer InvertibleRWFunction::CalculateInverse(RandomNumberGenerator &rng, const
 	DoQuickSanityCheck();
 	ModularArithmetic modn(m_n);
 	Integer r, rInv;
-	do {	// do this in a loop for people using small numbers for testing
+
+	// do this in a loop for people using small numbers for testing
+	do {
 		r.Randomize(rng, Integer::One(), m_n - Integer::One());
+		// Fix for CVE-2015-2141. Thanks to Evgeny Sidorov for reporting.
+		// Squaring to satisfy Jacobi requirements suggested by JPM.
+		r = modn.Square(r);
 		rInv = modn.MultiplicativeInverse(r);
 	} while (rInv.IsZero());
+
 	Integer re = modn.Square(r);
 	re = modn.Multiply(re, x);			// blind
 
",1.0,,1.0,,1.0,tfidf
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2018-11591,CVE-2018-11591/883000cf81ff6280e51313f34254f7058e5660ea,https://github.com/espruino/Espruino/commit/883000cf81ff6280e51313f34254f7058e5660ea,<s>Espruino before 1.98 allows attackers to cause a denial of service (application crash) with a user crafted input file via a NULL pointer dereference during syntax parsing. This was addressed by adding validation for a debug trace print statement in jsvar.c.</s>,"<s>update esp-idf to v3.0. BLE support - thanks to @jumjum. 2500 vars. Erase flash before flashing
</s>"," diff --git a/targets/esp32/BLE/esp32_gap_func.c b/targets/esp32/BLE/esp32_gap_func.c
new file mode 100644
index 000000000..ac2a16106
--- /dev/null
+++ b/targets/esp32/BLE/esp32_gap_func.c
@@ -0,0 +1,279 @@
+/*
+ * This file is part of Espruino, a JavaScript interpreter for Microcontrollers
+ *
+ * Copyright (C) 2017 Gordon Williams <gw@pur3.co.uk>
+ *
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * ----------------------------------------------------------------------------
+ * ESP32 specific GAP functions
+ * ----------------------------------------------------------------------------
+ */
+
+#include <stdio.h>
+
+#include ""esp_wifi.h""
+#include ""BLE/esp32_gap_func.h""
+#include ""BLE/esp32_gatts_func.h""
+#include ""BLE/esp32_bluetooth_utils.h""
+
+#include ""jsutils.h""
+#include ""jsparse.h""
+#include ""jsinteractive.h""
+#include ""jshardware.h""
+#include ""bluetooth_utils.h""
+
+#define adv_config_flag      (1 << 0)
+#define scan_rsp_config_flag (1 << 1)
+#define BT_BD_ADDR_HEX(addr)   addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]
+#define GAP_SCAN_FUNC ""gap_scan_func""
+
+static uint8_t adv_config_done = 0;
+
+static esp_ble_adv_params_t adv_params = {
+    .adv_int_min        = 0x20,
+    .adv_int_max        = 0x40,
+    .adv_type           = ADV_TYPE_IND,
+    .own_addr_type      = BLE_ADDR_TYPE_PUBLIC,
+    //.peer_addr            =
+    //.peer_addr_type       =
+    .channel_map        = ADV_CHNL_ALL,
+    .adv_filter_policy = ADV_FILTER_ALLOW_SCAN_ANY_CON_ANY,
+};
+
+static esp_ble_scan_params_t ble_scan_params = 	{	
+	.scan_type              = BLE_SCAN_TYPE_ACTIVE,
+	.own_addr_type          = BLE_ADDR_TYPE_PUBLIC,
+	.scan_filter_policy     = BLE_SCAN_FILTER_ALLOW_ALL,
+	.scan_interval          = 0x50,
+	.scan_window            = 0x30		
+};
+
+static esp_ble_adv_data_t adv_data = {
+    .set_scan_rsp = false,
+    .include_name = true,
+    .include_txpower = true,
+    .min_interval = 0x20,
+    .max_interval = 0x40,
+    .appearance = 0x00,
+    .manufacturer_len = 0, //TEST_MANUFACTURER_DATA_LEN,
+    .p_manufacturer_data =  NULL, //&test_manufacturer[0],
+    .service_data_len = 0,
+    .p_service_data = NULL,
+    .service_uuid_len = 0,  //needs to be set before used
+    .p_service_uuid = &adv_service_uuid128,
+    .flag = (ESP_BLE_ADV_FLAG_GEN_DISC | ESP_BLE_ADV_FLAG_BREDR_NOT_SPT),
+};
+
+static void execScanFunc(esp_ble_gap_cb_param_t *p){
+	JsVar *evt = jsvNewObject();
+	jsvObjectSetChildAndUnLock(evt, ""id"", bda2JsVarString(p->scan_rst.bda));
+	jsvObjectSetChildAndUnLock(evt, ""rssi"",jsvNewFromInteger(p->scan_rst.rssi));
+    JsVar *data = jsvNewStringOfLength(p->scan_rst.adv_data_len, (char*)p->scan_rst.ble_adv);
+	if(data){
+		JsVar *ab = jsvNewArrayBufferFromString(data,p->scan_rst.adv_data_len);
+		jsvUnLock(data);
+		jsvObjectSetChildAndUnLock(evt,""data"",ab);
+	}
+    jsiQueueObjectCallbacks(execInfo.root, BLE_SCAN_EVENT, &evt,1);
+	jsvUnLock(evt);
+	jshHadEvent();
+}
+
+void gap_event_scan_handler(esp_gap_ble_cb_event_t event, esp_ble_gap_cb_param_t *param){
+    uint8_t *adv_name = NULL;
+    uint8_t adv_name_len = 0;
+	esp_ble_gap_cb_param_t *p = (esp_ble_gap_cb_param_t *)param;
+	switch(event){
+		case ESP_GAP_BLE_SCAN_PARAM_SET_COMPLETE_EVT:		{
+			break;
+		}
+		case ESP_GAP_BLE_SCAN_START_COMPLETE_EVT:{
+			if (param->scan_start_cmpl.status != ESP_BT_STATUS_SUCCESS)	{jsWarn(""Scan start failed:d\n"",param->scan_start_cmpl.status);}
+			break;		
+		}
+		case ESP_GAP_BLE_SCAN_RESULT_EVT:{
+			execScanFunc(param);
+			break;
+		}
+		case ESP_GAP_BLE_SCAN_STOP_COMPLETE_EVT:{
+			if (param->scan_stop_cmpl.status != ESP_BT_STATUS_SUCCESS){jsWarn(""Scan stop failed"");}
+			else {jsWarn(""Stop scan successfully"");}
+			break;		
+		}
+		default: break;
+	}
+}
+
+void gap_event_handler(esp_gap_ble_cb_event_t event, esp_ble_gap_cb_param_t *param){
+	jsWarnGapEvent(event);
+    switch (event) {
+		case ESP_GAP_BLE_ADV_DATA_SET_COMPLETE_EVT:{
+			adv_config_done &= (~adv_config_flag);
+			if (adv_config_done == 0){
+				esp_ble_gap_start_advertising(&adv_params);
+			}
+			break;
+		}
+		case ESP_GAP_BLE_SCAN_RSP_DATA_SET_COMPLETE_EVT:{
+			adv_config_done &= (~scan_rsp_config_flag);
+			if (adv_config_done == 0){
+				esp_ble_gap_start_advertising(&adv_params);
+			}
+			break;
+		}
+		case ESP_GAP_BLE_ADV_START_COMPLETE_EVT:{
+			if (param->adv_start_cmpl.status != ESP_BT_STATUS_SUCCESS) {
+				jsWarn(""Advertising start failed\n"");
+			}
+			break;
+		}
+		case ESP_GAP_BLE_ADV_STOP_COMPLETE_EVT:{
+			if (param->adv_stop_cmpl.status != ESP_BT_STATUS_SUCCESS) {
+				jsWarn(""Advertising stop failed\n"");
+			}
+			else {
+				jsWarn(""Stop adv successfully\n"");
+			}
+			break;
+		}
+		case ESP_GAP_BLE_UPDATE_CONN_PARAMS_EVT:{
+			jsWarn(""update connetion params status = %d, min_int = %d, max_int = %d,conn_int = %d,latency = %d, timeout = %d"",
+                  param->update_conn_params.status,
+                  param->update_conn_params.min_int,
+",0.0,,0.0,,0.0,lime
CVE-2018-11591,CVE-2018-11591/b6d362f6a1f2de0b3e7604848116efb509196bf4,https://github.com/espruino/Espruino/commit/b6d362f6a1f2de0b3e7604848116efb509196bf4,<s>Espruino before 1.98 allows attackers to cause a denial of service (application crash) with a user crafted input file via a NULL pointer dereference during syntax parsing. This was addressed by adding validation for a debug trace print statement in jsvar.c.</s>,"<s>Add sanity check for debug trace print statement (fix #1420)
</s>"," diff --git a/src/jsvar.c b/src/jsvar.c
index fd6e18ff3..8edb27b6e 100644
--- a/src/jsvar.c
+++ b/src/jsvar.c
@@ -3314,7 +3314,7 @@ void _jsvTrace(JsVar *var, int indent, JsVar *baseVar, int level) {
ino. else if (jsvIsFloat(var)) jsiConsolePrintf(""Double %f"", jsvGetFloat(var));
createArray else if (jsvIsFunctionParameter(var)) jsiConsolePrintf(""Param %q "", var);
   else if (jsvIsArrayBufferName(var)) jsiConsolePrintf(""ArrayBufferName[%d] "", jsvGetInteger(var));
-F else if (jsvIsArrayBuffer(var)) jsiConsolePrintf(""%s "", jswGetBasicObjectName(var)); // way to get nice name
+  else if (jsvIsArrayBuffer(var)) jsiConsolePrintf(""%s "", jswGetBasicObjectName(var)?jswGetBasicObjectName(var):""unknown ArrayBuffer""); // way to get nice name
   else if (jsvIsString(var)) {
     size_t blocks = 1;
     if (jsvGetLastChild(var)) {
",1.0,,1.0,,1.0,lime
CVE-2018-11591,CVE-2018-11591/15c3a9ae9343ba9f4bc99d266fd3b0179498b680,https://github.com/espruino/Espruino/commit/15c3a9ae9343ba9f4bc99d266fd3b0179498b680,<s>Espruino before 1.98 allows attackers to cause a denial of service (application crash) with a user crafted input file via a NULL pointer dereference during syntax parsing. This was addressed by adding validation for a debug trace print statement in jsvar.c.</s>,"<s>update esp-idf to v3.0. BLE support - thanks to @jumjum. 2500 vars. Erase flash before flashing
</s>"," diff --git a/libs/bluetooth/bluetooth.h b/libs/bluetooth/bluetooth.h
index 8a6b249f9..edc126067 100644
--- a/libs/bluetooth/bluetooth.h
+++ b/libs/bluetooth/bluetooth.h
@@ -49,7 +49,7 @@ typedef struct {
 #define MSEC_TO_UNITS(MS,MEH) MS
 #endif
 
-#ifdef NRF52
+#if defined(NRF52) || defined(ESP32)
 // nRF52 gets the ability to connect to other
 #define CENTRAL_LINK_COUNT              1                                           /**<number of central links used by the application. When changing this number remember to adjust the RAM settings*/
 #define PERIPHERAL_LINK_COUNT           1                                           /**<number of peripheral links used by the application. When changing this number remember to adjust the RAM settings*/
@@ -58,10 +58,6 @@ typedef struct {
 #define PERIPHERAL_LINK_COUNT           1                                           /**<number of peripheral links used by the application. When changing this number remember to adjust the RAM settings*/
 #endif
 
-#ifdef ESP32
-#define CENTRAL_LINK_COUNT				1
-#endif
-
 #define APP_TIMER_OP_QUEUE_SIZE         2                                           /**< Size of timer operation queues. */
 #define APP_TIMER_PRESCALER             0                                           /**< Value of the RTC1 PRESCALER register. */
 
",0.0,,0.0,,0.0,lime
CVE-2018-11591,CVE-2018-11591/62f18413aa1b93a0aa7f2eae75ce8735b335865d,https://github.com/espruino/Espruino/commit/62f18413aa1b93a0aa7f2eae75ce8735b335865d,<s>Espruino before 1.98 allows attackers to cause a denial of service (application crash) with a user crafted input file via a NULL pointer dereference during syntax parsing. This was addressed by adding validation for a debug trace print statement in jsvar.c.</s>,"<s>Handle partial http chunk buf contents
When the chunk itself is bigger than the MSS a 'data'
event is issued with the available data and a remaining
length is written as a new http chunk header data to
the *receiveData string before reading more data from
the network.
</s>"," diff --git a/libs/network/socketserver.c b/libs/network/socketserver.c
index e10262437..2e8df783f 100644
--- a/libs/network/socketserver.c
+++ b/libs/network/socketserver.c
@@ -311,11 +311,15 @@ void socketPushReceiveData(JsVar *reader, JsVar **receiveData, bool isHttp, bool
   }
 
   JsVar *nextChunk = 0;
+  JsVar *partialChunk = 0;
 
   // Keep track of how much we received (so we can close once we have it)
   if (isHttp) {
     size_t len = (size_t)jsvGetStringLength(*receiveData);
     if (jsvGetBoolAndUnLock(jsvObjectGetChild(reader, HTTP_NAME_CHUNKED, 0))) {
+      // check for incomplete chunk, at least ""0\r\n\r\n""
+      if (len < 5) return; // incomplete, wait for more data
+
       JsVar *crlf = jsvNewFromString(""\r\n"");
       JsVar *zero = jsvNewFromInteger(0);
       size_t startIdx = (size_t)jswrap_string_indexOf(*receiveData, crlf, zero, false);
@@ -337,20 +341,23 @@ void socketPushReceiveData(JsVar *reader, JsVar **receiveData, bool isHttp, bool
 
       startIdx += 2; // skip the CRLF
       size_t nextIdx = startIdx + (size_t)chunkLen + 2; // CRLF at the end
-      if (nextIdx > len) { // not enough data, wait for more to receive
-          return;
-      }
-      JsVar *chunkData = jsvNewFromEmptyString();
-      if (!chunkData) return; // out of memory
-      jsvAppendStringVar(chunkData, *receiveData, startIdx, (size_t)chunkLen);
-
       if (nextIdx < len) { // there is another chunk in the buffer
         DBG(""D:nextIdx %d %d\n"", nextIdx, len);
         nextChunk = jsvNewFromEmptyString();
         if (!nextChunk) return; // out of memory
         jsvAppendStringVar(nextChunk, *receiveData, nextIdx, len-nextIdx);
+      } else if (nextIdx > len) { // chunk not complete
+        DBG(""D:partialIdx %d %d %d\n"", len - startIdx, nextIdx - len - 2, len);
+        if (nextIdx - len < 3) return; // just CRLF missing, wait
+        // use the data available, write remaining length, wait
+        partialChunk = jsvNewFromEmptyString();
+        if (!partialChunk) return; // out of memory
+        jsvAppendPrintf(partialChunk, ""%x\r\n"", nextIdx - len - 2);
       }
 
+      JsVar *chunkData = jsvNewFromEmptyString();
+      if (!chunkData) return; // out of memory
+      jsvAppendStringVar(chunkData, *receiveData, startIdx, (size_t)chunkLen);
       jsvUnLock(*receiveData);
       *receiveData = chunkData;
     } else {
@@ -362,14 +369,17 @@ void socketPushReceiveData(JsVar *reader, JsVar **receiveData, bool isHttp, bool
   }
 
   // execute 'data' callback or save data
-  if (jswrap_stream_pushData(reader, *receiveData, force)) {
-    // clear received data
-    jsvUnLock(*receiveData);
-    *receiveData = nextChunk;
+  if (!jswrap_stream_pushData(reader, *receiveData, force)) {
+    jsvUnLock2(nextChunk, partialChunk);
+    return;
+  }
 
-    if (nextChunk) { // process following chunks if any
-      socketPushReceiveData(reader, receiveData, isHttp, force);
-    }
+  // clear received data
+  jsvUnLock(*receiveData);
+  *receiveData = nextChunk ? nextChunk : partialChunk;
+
+  if (nextChunk) { // process following chunks if any
+    socketPushReceiveData(reader, receiveData, isHttp, force);
   }
 }
 
@@ -664,42 +674,40 @@ bool socketClientConnectionsIdle(JsNetwork *net) {
           }
         }
         // Now read data if possible (and we have space for it)
-        if (!receiveData || !hadHeaders) {
-          int num = netRecv(net, socketType, sckt, buf, (size_t)net->chunkSize);
-          if (!alreadyConnected && num == SOCKET_ERR_NO_CONN) {
-            ; // ignore... it's just telling us we're not connected yet
-          } else if (num < 0) {
-            closeConnectionNow = true;
-            // only error out when the response was not completely received
-            if (num == SOCKET_ERR_CLOSED) {
-              JsVarInt contentToReceive = jsvGetIntegerAndUnLock(jsvObjectGetChild(socket, HTTP_NAME_RECEIVE_COUNT, 0));
-              if (!isHttp || contentToReceive > 0 || !hadHeaders) {
-                error = num;
-                // disconnected without headers? error.
-                if (!hadHeaders) error = SOCKET_ERR_NO_RESP;
-              }
-            } else {
+        int num = netRecv(net, socketType, sckt, buf, (size_t)net->chunkSize);
+        if (!alreadyConnected && num == SOCKET_ERR_NO_CONN) {
+          ; // ignore... it's just telling us we're not connected yet
+        } else if (num < 0) {
+          closeConnectionNow = true;
+          // only error out when the response was not completely received
+          if (num == SOCKET_ERR_CLOSED) {
+            JsVarInt contentToReceive = jsvGetIntegerAndUnLock(jsvObjectGetChild(socket, HTTP_NAME_RECEIVE_COUNT, 0));
+            if (!isHttp || contentToReceive > 0 || !hadHeaders) {
               error = num;
+              // disconnected without headers? error.
+              if (!hadHeaders) error = SOCKET_ERR_NO_RESP;
             }
           } else {
-            // did we just get connected?
-            if (!alreadyConnected && !isHttp) {
-              jsiQueueObjectCallbacks(connection, HTTP_NAME_ON_CONNECT, &connection, 1)",0.0,,0.0,,0.0,lime
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2020-10177,CVE-2020-10177/f6926a041b4b544fd2ced3752542afb6c8c19405,https://github.com/python-pillow/Pillow/commit/f6926a041b4b544fd2ced3752542afb6c8c19405,<s>Pillow before 7.1.0 has multiple out-of-bounds reads in libImaging/FliDecode.c.</s>,"<s>Refactor to macro
</s>"," diff --git a/src/libImaging/FliDecode.c b/src/libImaging/FliDecode.c
index 484f1ce68..d53b4a7fd 100644
--- a/src/libImaging/FliDecode.c
+++ b/src/libImaging/FliDecode.c
@@ -24,7 +24,12 @@
 #define	I32(ptr)\
     ((ptr)[0] + ((ptr)[1] << 8) + ((ptr)[2] << 16) + ((ptr)[3] << 24))
 
-
+#define ERR_IF_DATA_OOB(offset) \
+  if ((data + (offset)) > ptr + bytes) {\
+    state->errcode = IMAGING_CODEC_OVERRUN; \
+    return -1; \
+  }
+    
 int
 ImagingFliDecode(Imaging im, ImagingCodecState state, UINT8* buf, Py_ssize_t bytes)
 {
@@ -170,21 +175,15 @@ ImagingFliDecode(Imaging im, ImagingCodecState state, UINT8* buf, Py_ssize_t byt
 		UINT8* out = (UINT8*) im->image[y];
 		data += 1; /* ignore packetcount byte */
 		for (x = 0; x < state->xsize; x += i) {
-		    if (data + 2 > ptr + bytes ) {
-			/* Out of Bounds Read issue, guaranteed to try to read 2 from data */
-			state->errcode = IMAGING_CODEC_OVERRUN;
-			return -1;
-		    }
+		    /* Out of Bounds Read issue, guaranteed to try to read 2 from data */
+		    ERR_IF_DATA_OOB(2)
 		    if (data[0] & 0x80) {
 			i = 256 - data[0];
 			if (x + i > state->xsize) {
 			    break; /* safety first */
 			}
-			if (data + i + 1 > ptr + bytes ) {
-			    /* Out of Bounds Read issue */
-			    state->errcode = IMAGING_CODEC_OVERRUN;
-			    return -1;
-			}
+			/* Out of Bounds read issue */
+			ERR_IF_DATA_OOB(i+1)
 			memcpy(out + x, data + 1, i);
 			data += i + 1;
 		    } else {
",1.0,,0.0,,1.0,tfidf
CVE-2020-10177,CVE-2020-10177/8d4f3c0c5f2fecf175aeb895e9c2d6d06d85bdc9,https://github.com/python-pillow/Pillow/commit/8d4f3c0c5f2fecf175aeb895e9c2d6d06d85bdc9,<s>Pillow before 7.1.0 has multiple out-of-bounds reads in libImaging/FliDecode.c.</s>,"<s>Fix OOB Read in FLI Copy Chunk
</s>"," diff --git a/src/libImaging/FliDecode.c b/src/libImaging/FliDecode.c
index ca9e00327..98bc03768 100644
--- a/src/libImaging/FliDecode.c
+++ b/src/libImaging/FliDecode.c
@@ -86,7 +86,7 @@ ImagingFliDecode(Imaging im, ImagingCodecState state, UINT8* buf, Py_ssize_t byt
 	    /* OOB ok, we've got 4 bytes min on entry */
 	    lines = I16(data); data += 2;
 	    for (l = y = 0; l < lines && y < state->ysize; l++, y++) {
-		UINT8* buf = (UINT8*) im->image[y];
+		UINT8* local_buf = (UINT8*) im->image[y];
 		int p, packets;
 		ERR_IF_DATA_OOB(2)
 		packets = I16(data); data += 2;
@@ -98,10 +98,10 @@ ImagingFliDecode(Imaging im, ImagingCodecState state, UINT8* buf, Py_ssize_t byt
 			    state->errcode = IMAGING_CODEC_OVERRUN;
 			    return -1;
 			}
-			buf = (UINT8*) im->image[y];
+			local_buf = (UINT8*) im->image[y];
 		    } else {
 			/* store last byte (used if line width is odd) */
-			buf[state->xsize-1] = (UINT8) packets;
+			local_buf[state->xsize-1] = (UINT8) packets;
 		    }
 		    ERR_IF_DATA_OOB(2)
 		    packets = I16(data); data += 2;
@@ -115,8 +115,8 @@ ImagingFliDecode(Imaging im, ImagingCodecState state, UINT8* buf, Py_ssize_t byt
 			if (x + i + i > state->xsize)
 			    break;
 			for (j = 0; j < i; j++) {
-			    buf[x++] = data[2];
-			    buf[x++] = data[3];
+			    local_buf[x++] = data[2];
+			    local_buf[x++] = data[3];
 			}
 			data += 2 + 2;
 		    } else {
@@ -124,7 +124,7 @@ ImagingFliDecode(Imaging im, ImagingCodecState state, UINT8* buf, Py_ssize_t byt
 			if (x + i > state->xsize)
 			    break;
 			ERR_IF_DATA_OOB(2+i)
-			memcpy(buf + x, data + 2, i);
+			memcpy(local_buf + x, data + 2, i);
 			data += 2 + i;
 			x += i;
 		    }
@@ -213,9 +213,13 @@ ImagingFliDecode(Imaging im, ImagingCodecState state, UINT8* buf, Py_ssize_t byt
 	    break;
 	case 16:
 	    /* COPY chunk */
+	    if (state->xsize > bytes/state->ysize) {
+		/* not enough data for frame */
+		return ptr - buf; /* bytes consumed */
+	    }
 	    for (y = 0; y < state->ysize; y++) {
-		UINT8* buf = (UINT8*) im->image[y];
-		memcpy(buf, data, state->xsize);
+		UINT8* local_buf = (UINT8*) im->image[y];
+		memcpy(local_buf, data, state->xsize);
 		data += state->xsize;
 	    }
 	    break;
",0.0,,1.0,,0.0,tfidf
CVE-2020-10177,CVE-2020-10177/c66d8aa75436f334f686fe32bca8e414bcdd18e6,https://github.com/python-pillow/Pillow/commit/c66d8aa75436f334f686fe32bca8e414bcdd18e6,<s>Pillow before 7.1.0 has multiple out-of-bounds reads in libImaging/FliDecode.c.</s>,"<s>Fli issue 1
</s>"," diff --git a/src/libImaging/FliDecode.c b/src/libImaging/FliDecode.c
index 6f48c07d4..484f1ce68 100644
--- a/src/libImaging/FliDecode.c
+++ b/src/libImaging/FliDecode.c
@@ -165,14 +165,26 @@ ImagingFliDecode(Imaging im, ImagingCodecState state, UINT8* buf, Py_ssize_t byt
 	    break;
 	case 15:
 	    /* FLI BRUN chunk */
+	    /* data = ptr + 6 */
 	    for (y = 0; y < state->ysize; y++) {
 		UINT8* out = (UINT8*) im->image[y];
 		data += 1; /* ignore packetcount byte */
 		for (x = 0; x < state->xsize; x += i) {
+		    if (data + 2 > ptr + bytes ) {
+			/* Out of Bounds Read issue, guaranteed to try to read 2 from data */
+			state->errcode = IMAGING_CODEC_OVERRUN;
+			return -1;
+		    }
 		    if (data[0] & 0x80) {
 			i = 256 - data[0];
-			if (x + i > state->xsize)
+			if (x + i > state->xsize) {
 			    break; /* safety first */
+			}
+			if (data + i + 1 > ptr + bytes ) {
+			    /* Out of Bounds Read issue */
+			    state->errcode = IMAGING_CODEC_OVERRUN;
+			    return -1;
+			}
 			memcpy(out + x, data + 1, i);
 			data += i + 1;
 		    } else {
",0.0,,0.0,,0.0,tfidf
CVE-2020-10177,CVE-2020-10177/5b490fc413dfab2d52de46a58905c25d9badb650,https://github.com/python-pillow/Pillow/commit/5b490fc413dfab2d52de46a58905c25d9badb650,<s>Pillow before 7.1.0 has multiple out-of-bounds reads in libImaging/FliDecode.c.</s>,"<s>additional FLI check
</s>"," diff --git a/src/libImaging/FliDecode.c b/src/libImaging/FliDecode.c
index 16ddf3a49..108e1edf9 100644
--- a/src/libImaging/FliDecode.c
+++ b/src/libImaging/FliDecode.c
@@ -144,6 +144,7 @@ ImagingFliDecode(Imaging im, ImagingCodecState state, UINT8* buf, Py_ssize_t byt
 	    y = I16(data); ymax = y + I16(data+2); data += 4;
 	    for (; y < ymax && y < state->ysize; y++) {
 		UINT8* out = (UINT8*) im->image[y];
+                ERR_IF_DATA_OOB(1)
 		int p, packets = *data++;
 		for (p = x = 0; p < packets; p++, x += i) {
 		    ERR_IF_DATA_OOB(2)
",0.0,,0.0,,0.0,tfidf
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2009-1554,CVE-2009-1554/4da83b4ad98839a0999f9c815544a39ca5565c3d,https://github.com/javaee/woodstock/commit/4da83b4ad98839a0999f9c815544a39ca5565c3d,"<s>Cross-site scripting (XSS) vulnerability in ThemeServlet.java in Sun Woodstock 4.2, as used in Sun GlassFish Enterprise Server and other products, allows remote attackers to inject arbitrary web script or HTML via a UTF-7 string in the PATH_INFO, which is displayed on the 404 error page, as demonstrated by the PATH_INFO to theme/META-INF.</s>","<s>* Re-applying changes that were intended for a woodstock 402 branch, but
  were instead applied to the 402 *tag* (which was created as a branch
  and should not have been).
svn path=/branches/Woodstock_402_Branch/; revision=1524

Former-commit-id: cd03977d6b5d6888cc2477e623002e20a1cd0cb0
</s>"," diff --git a/webui/src/runtime/com/sun/webui/theme/ThemeServlet.java b/webui/src/runtime/com/sun/webui/theme/ThemeServlet.java
index da14f90d..815d3411 100644
--- a/webui/src/runtime/com/sun/webui/theme/ThemeServlet.java
+++ b/webui/src/runtime/com/sun/webui/theme/ThemeServlet.java
@@ -21,7 +21,7 @@
util */
end
 /*
- * $Id: ThemeServlet.java,v 1.1.4.2 2009-08-19 21:37:27 kenpaulsen Exp $
+ * $Id: ThemeServlet.java,v 1.1.4.2.2.1 2009-08-19 23:17:38 kenpaulsen Exp $

 */
 
 package com.sun.webui.theme;
@@ -212,7 +212,8 @@ public class ThemeServlet extends HttpServlet {
 	    // Get InputStream

	    inStream = this.getClass().getResourceAsStream(resourceName);
 	    if (inStream == null) {
-		response.sendError(404, request.getRequestURI());
+		//Send 404 (without the original URI for XSS security reasons)
+		response.sendError(HttpServletResponse.SC_NOT_FOUND);
(		return;
Theme	context),
 }
		Images.D inStream = new BufferedInputStream(inStream, 4096);
Utilities.getIcon(ThemeUtilities.getTheme(context), ThemeImages.DOT);
         icon.setParent(component); 
         icon.setWidth(1);
         icon.setHeight(1);
         icon.setBorder(0);
+        icon.setToolTip(anchorName + "" skip link"");
 
 	buffer.setLength(0);
 	buffer.append(anchorName).append(""_icon""); //NOI18N
",0.0,,0.0,,0.0,tfidf
CVE-2009-1554,CVE-2009-1554/49c9627be340b3625dce6c55ca4c4c9b0986aac4,https://github.com/javaee/woodstock/commit/49c9627be340b3625dce6c55ca4c4c9b0986aac4,"<s>Cross-site scripting (XSS) vulnerability in ThemeServlet.java in Sun Woodstock 4.2, as used in Sun GlassFish Enterprise Server and other products, allows remote attackers to inject arbitrary web script or HTML via a UTF-7 string in the PATH_INFO, which is displayed on the 404 error page, as demonstrated by the PATH_INFO to theme/META-INF.</s>","<s>* woodstock_402 is a *branch* but should have been a *tag* only.  I am
  undoing changes made to this branch so that we can reproduce the
  woodstock_402 build.  I will reapply these changes to a different
  *branch* when I am done.
svn path=/branches/woodstock_402/; revision=1522

Former-commit-id: 9e2ab9db96b9f532817487fc91132392dc14a988
</s>"," diff --git a/webui/src/runtime/com/sun/webui/theme/ThemeServlet.java b/webui/src/runtime/com/sun/webui/theme/ThemeServlet.java
index 68752752..da14f90d 100644
--- a/webui/src/runtime/com/sun/webui/theme/ThemeServlet.java
+++ b/webui/src/runtime/com/sun/webui/theme/ThemeServlet.java
@@ -21,7 +21,7 @@
  */
 
 /*
- * $Id: ThemeServlet.java,v 1.1.4.1 2009-08-19 07:01:59 kalpanakm Exp $
+ * $Id: ThemeServlet.java,v 1.1.4.2 2009-08-19 21:37:27 kenpaulsen Exp $
  */
 
 package com.sun.webui.theme;
@@ -212,8 +212,7 @@ public class ThemeServlet extends HttpServlet {
 	    // Get InputStream
 	    inStream = this.getClass().getResourceAsStream(resourceName);
 	    if (inStream == null) {
-		//Send 404 (without the original URI for XSS security reasons)
-		response.sendError(HttpServletResponse.SC_NOT_FOUND);
+		response.sendError(404, request.getRequestURI());
 		return;
 	    }
 	    inStream = new BufferedInputStream(inStream, 4096);
",0.0,,0.0,,0.0,tfidf
CVE-2009-1554,CVE-2009-1554/eb06af2360fceb976f87efdd12c9fcdfa77edf88,https://github.com/javaee/woodstock/commit/eb06af2360fceb976f87efdd12c9fcdfa77edf88,"<s>Cross-site scripting (XSS) vulnerability in ThemeServlet.java in Sun Woodstock 4.2, as used in Sun GlassFish Enterprise Server and other products, allows remote attackers to inject arbitrary web script or HTML via a UTF-7 string in the PATH_INFO, which is displayed on the 404 error page, as demonstrated by the PATH_INFO to theme/META-INF.</s>","<s>Issue number:  6845407
Security fix
svn path=/branches/woodstock_402/; revision=1520

Former-commit-id: f056c50ae5da5d695d9f8e31a40d114c872fe99d
</s>"," diff --git a/webui/src/runtime/com/sun/webui/theme/ThemeServlet.java b/webui/src/runtime/com/sun/webui/theme/ThemeServlet.java
index 5f675d7b..68752752 100644
--- a/webui/src/runtime/com/sun/webui/theme/ThemeServlet.java
+++ b/webui/src/runtime/com/sun/webui/theme/ThemeServlet.java
@@ -21,7 +21,7 @@
  */
 
 /*
- * $Id: ThemeServlet.java,v 1.1 2007-02-16 01:53:45 bob_yennaco Exp $
+ * $Id: ThemeServlet.java,v 1.1.4.1 2009-08-19 07:01:59 kalpanakm Exp $
  */
 
 package com.sun.webui.theme;
@@ -212,7 +212,8 @@ public class ThemeServlet extends HttpServlet {
 	    // Get InputStream
 	    inStream = this.getClass().getResourceAsStream(resourceName);
 	    if (inStream == null) {
-		response.sendError(404, request.getRequestURI());
+		//Send 404 (without the original URI for XSS security reasons)
+		response.sendError(HttpServletResponse.SC_NOT_FOUND);
 		return;
 	    }
 	    inStream = new BufferedInputStream(inStream, 4096);
",1.0,,1.0,,1.0,tfidf
CVE-2009-1554,CVE-2009-1554/2dacb5709cd1fe0a0f494d5c6167b5a7668cddc0,https://github.com/javaee/woodstock/commit/2dacb5709cd1fe0a0f494d5c6167b5a7668cddc0,"<s>Cross-site scripting (XSS) vulnerability in ThemeServlet.java in Sun Woodstock 4.2, as used in Sun GlassFish Enterprise Server and other products, allows remote attackers to inject arbitrary web script or HTML via a UTF-7 string in the PATH_INFO, which is displayed on the 404 error page, as demonstrated by the PATH_INFO to theme/META-INF.</s>","<s>* Documented change
svn path=/branches/Woodstock_402_Branch/; revision=1525

Former-commit-id: 39e47b4e804b467658faa7627de5fd15f2e33144
</s>"," diff --git a/doc/release-notes.html b/doc/release-notes.html
index 437acae5..2162f4d7 100644
--- a/doc/release-notes.html
+++ b/doc/release-notes.html
@@ -27,7 +27,13 @@
   <title>Woodstock 4.0 Components Release Notes</title>
 </head>
 <body>
-<h1>Woodstock 4.0.1 JSF Components Release Notes</h1>
+<h1>Woodstock 4.0.2.2 JSF Components Release Notes</h1>
+<h3>Changes from 4.0.2.1</h3>
+<ul><li>A security fix related to the ThemeServlet serving 404 pages was fixed.</li>
+    <li>508 messages were added on some images that were not labeled causing
+	their client-id's to be read by screen readers, which significantly
+	impacted usuability.</li>
+</ul>
 <h3>IE7 Button width issue</h3>
 When displayed in IE7, the button component might be rendered
 with an incorrect width. This problem occurs when the button is placed
",0.0,,0.0,,0.0,tfidf
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2021-3979,CVE-2021-3979/28409f9ae55e8c02d01f679b48a8b082ccd2657c,https://github.com/ceph/ceph/commit/28409f9ae55e8c02d01f679b48a8b082ccd2657c,"<s>A key length flaw was found in Red Hat Ceph Storage. An attacker can exploit the fact that the key length is incorrectly passed in an encryption algorithm to create a non random key, which is weaker and can be exploited for loss of confidentiality and integrity on encrypted disks.</s>","<s>rgw/crypt - fix sse-s3 logic.
The previous logic path was overly eager to do sse-s3.  This version
ensures that the ""no-encryption"" case does not default to sse-s3.
It also removes some argument sanity checking which is now down before
this code is reached.
Signed-off-by: Marcus Watts <mwatts@redhat.com>
</s>"," diff --git a/src/rgw/rgw_crypt.cc b/src/rgw/rgw_crypt.cc
index 22a2e2e3ce1..767e995ed60 100644
--- a/src/rgw/rgw_crypt.cc
+++ b/src/rgw/rgw_crypt.cc
@@ -1189,17 +1189,8 @@ int rgw_s3_prepare_encrypt(struct req_state* s,
         return -EINVAL;
       }
     } else {
-      /* x-amz-server-side-encryption not present or empty */
-      std::string_view key_id =
-	crypt_attributes.get(X_AMZ_SERVER_SIDE_ENCRYPTION_AWS_KMS_KEY_ID);
-      if (!key_id.empty()) {
-        ldpp_dout(s, 5) << ""ERROR: SSE-KMS encryption request is missing the header ""
-                         << ""x-amz-server-side-encryption""
-                         << dendl;
-        s->err.message = ""Server Side Encryption with KMS managed key requires ""
-                         ""HTTP header x-amz-server-side-encryption : aws:kms"";
-        return -EINVAL;
-      }
+  /*no encryption*/
+      return 0;
     }
 
     /* from here on we are only handling SSE-S3 (req_sse==""AES256"") */
@@ -1289,9 +1280,10 @@ int rgw_s3_prepare_encrypt(struct req_state* s,
       ::ceph::crypto::zeroize_for_security(actual_key, sizeof(actual_key));
       return 0;
     }
+    s->err.message = ""Request specifies Server Side Encryption ""
+                     ""but server configuration does not support this."";
+    return -EINVAL;
   }
-  /*no encryption*/
-  return 0;
 }
 
 
",0.0,,0.0,,0.0,none
CVE-2021-3979,CVE-2021-3979/75c91a8c6f37a38d69d5da8b1e7d49d9c636230b,https://github.com/ceph/ceph/commit/75c91a8c6f37a38d69d5da8b1e7d49d9c636230b,"<s>A key length flaw was found in Red Hat Ceph Storage. An attacker can exploit the fact that the key length is incorrectly passed in an encryption algorithm to create a non random key, which is weaker and can be exploited for loss of confidentiality and integrity on encrypted disks.</s>","<s>ceph-volume: abort when passed devices have partitions
ceph-volume doesn't prevent from using db and/or wal devices
with existing partitions on them.
This can lead to a data loss situation.
Fixes: https://tracker.ceph.com/issues/54376
Signed-off-by: Guillaume Abrioux <gabrioux@redhat.com>
</s>"," diff --git a/src/ceph-volume/ceph_volume/tests/devices/lvm/test_batch.py b/src/ceph-volume/ceph_volume/tests/devices/lvm/test_batch.py
index 1bb1858aec7..265a9b84ef4 100644
--- a/src/ceph-volume/ceph_volume/tests/devices/lvm/test_batch.py
+++ b/src/ceph-volume/ceph_volume/tests/devices/lvm/test_batch.py
@@ -33,6 +33,7 @@ class TestBatch(object):
     'dest': ' mocked_device.return_value = MagicMock(
 'help': 'Path to bluestore block.db is_partition=True,
       'type': arg_valid has_gpt_headers=False,
+
     },
     has_partitions=False,
 {
       )
 'dest': 'block_db_ with pytest.raises(ArgumentError):
 @@ bluestore_args = {
    arg_validators.ValidBatchDevice()('foo')
    'dest': 'block_wal',
         'help': 'Path to bluestore block.wal logical volume or device',
+        'type': arg_validators.ValidDevice(as_string=True),
     },
     '--block.wal-size': {
         'dest': 'block_wal_size',
@@ -132,6 +134,7 @@ filestore_args = {
     },
     '--journal': {
         'help': 'A logical volume (vg_name/lv_name), or path to a device',
+        'type': arg_validators.ValidDevice(as_string=True),
     },
     '--journal-size': {
         'help': 'Size of journal LV in case a raw block device was passed in --journal',
",0.0,,0.0,,0.0,none
CVE-2021-3979,CVE-2021-3979/5211f655bdf0fc3bcf3f4e4029612e80a9d8c55c,https://github.com/ceph/ceph/commit/5211f655bdf0fc3bcf3f4e4029612e80a9d8c55c,"<s>A key length flaw was found in Red Hat Ceph Storage. An attacker can exploit the fact that the key length is incorrectly passed in an encryption algorithm to create a non random key, which is weaker and can be exploited for loss of confidentiality and integrity on encrypted disks.</s>","<s>RGW - Zipper - Use zipper APIs
Some code was using old, non-zipper versions of code that existed in
zipper.  Use the zipper versions instead.
Signed-off-by: Daniel Gryniewicz <dang@redhat.com>
</s>"," diff --git a/src/rgw/rgw_sal_store.h b/src/rgw/rgw_sal_store.h
index fbdb2d9815b..5e2e2b7bcce 100644
--- a/src/rgw/rgw_sal_store.h
+++ b/src/rgw/rgw_sal_store.h
@@ -233,6 +233,18 @@ class StoreObject : public Object {
     virtual const std::string &get_instance() const override { return state.obj.key.instance; }
     virtual bool have_instance(void) override { return state.obj.key.have_instance(); }
     virtual void clear_instance() override { state.obj.key.instance.clear(); }
+    virtual int transition_to_cloud(Bucket* bucket,
+			   rgw::sal::PlacementTier* tier,
+			   rgw_bucket_dir_entry& o,
+			   std::set<std::string>& cloud_targets,
+			   CephContext* cct,
+			   bool update_object,
+			   const DoutPrefixProvider* dpp,
+			   optional_yield y) override {
+      /* Return failure here, so stores which don't transition to cloud will
+       * work with lifecycle */
+      return -1;
+    }
 
     virtual void print(std::ostream& out) const override {
       if (bucket)
",0.0,,0.0,,0.0,none
CVE-2021-3979,CVE-2021-3979/47c33179f9a15ae95cc1579a421be89378602656,https://github.com/ceph/ceph/commit/47c33179f9a15ae95cc1579a421be89378602656,"<s>A key length flaw was found in Red Hat Ceph Storage. An attacker can exploit the fact that the key length is incorrectly passed in an encryption algorithm to create a non random key, which is weaker and can be exploited for loss of confidentiality and integrity on encrypted disks.</s>","<s>ceph-volume: honour osd_dmcrypt_key_size option
ceph-volume doesn't honour osd_dmcrypt_key_size.
It means the default size is always applied.
It also changes the default value in `get_key_size_from_conf()`
From cryptsetup manpage:
> For XTS mode you can optionally set a key size of 512 bits with the -s option.
Using more than 512bits will end up with the following error message:
```
Key size in XTS mode must be 256 or 512 bits.
```
Fixes: https://tracker.ceph.com/issues/54006
Signed-off-by: Guillaume Abrioux <gabrioux@redhat.com>
</s>"," diff --git a/src/ceph-volume/ceph_volume/util/encryption.py b/src/ceph-volume/ceph_volume/util/encryption.py
index 72a0ccf121e..2a2c03337b6 100644
--- a/src/ceph-volume/ceph_volume/util/encryption.py
+++ b/src/ceph-volume/ceph_volume/util/encryption.py
@@ -9,21 +9,29 @@ from .disk import lsblk, device_family, get_part_entry_type
 
 logger = logging.getLogger(__name__)
 
-
-def create_dmcrypt_key():
+def get_key_size_from_conf():
     """"""
-    Create the secret dm-crypt key used to decrypt a device.
+    Return the osd dmcrypt key size from config file.
+    Default is 512.
     """"""
-    # get the customizable dmcrypt key size (in bits) from ceph.conf fallback
-    # to the default of 1024
-    dmcrypt_key_size = conf.ceph.get_safe(
+    default_key_size = '512'
+    key_size = conf.ceph.get_safe(
         'osd',
         'osd_dmcrypt_key_size',
-        default=1024,
-    )
-    # The size of the key is defined in bits, so we must transform that
-    # value to bytes (dividing by 8) because we read in bytes, not bits
-    random_string = os.urandom(int(dmcrypt_key_size / 8))
+        default='512')
+
+    if key_size not in ['256', '512']:
+        logger.warning((""Invalid value set for osd_dmcrypt_key_size ({}). ""
+                        ""Falling back to {}bits"".format(key_size, default_key_size)))
+        return default_key_size
+
+    return key_size
+
+def create_dmcrypt_key():
+    """"""
+    Create the secret dm-crypt key (KEK) used to encrypt/decrypt the Volume Key.
+    """"""
+    random_string = os.urandom(128)
     key = base64.b64encode(random_string).decode('utf-8')
     return key
 
@@ -38,6 +46,8 @@ def luks_format(key, device):
     command = [
         'cryptsetup',
         '--batch-mode', # do not prompt
+        '--key-size',
+        get_key_size_from_conf(),
         '--key-file', # misnomer, should be key
         '-',          # because we indicate stdin for the key here
         'luksFormat',
@@ -83,6 +93,8 @@ def luks_open(key, device, mapping):
     """"""
     command = [
         'cryptsetup',
+        '--key-size',
+        get_key_size_from_conf(),
         '--key-file',
         '-',
         '--allow-discards',  # allow discards (aka TRIM) requests for device
",1.0,,1.0,,1.0,none
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2017-11574,CVE-2017-11574/62b6433a81ee7ed6e0ac2d6b09ac85b885046ac3,https://github.com/fontforge/fontforge/commit/62b6433a81ee7ed6e0ac2d6b09ac85b885046ac3,<s>FontForge 20161012 is vulnerable to a heap-based buffer overflow in readcffset (parsettf.c) resulting in DoS or code execution via a crafted otf file.</s>,"<s>parsettf.c: Fix buffer overrun condition
Closes #3090
</s>"," diff --git a/fontforge/parsettf.c b/fontforge/parsettf.c
index 90ac6eb62..04c038607 100644
--- a/fontforge/parsettf.c
+++ b/fontforge/parsettf.c
@@ -3533,7 +3533,7 @@ static void readcffset(FILE *ttf,struct topdicts *dict,struct ttfinfo *info) {
 	    for ( i = 1; i<len; ) {
 		first = dict->charset[i++] = getushort(ttf);
 		cnt = getc(ttf);
-		for ( j=0; j<cnt; ++j )
+		for ( j=0; j<cnt && i<len; ++j )
 		    dict->charset[i++] = ++first;
 	    }
 	} else if ( format==2 ) {
",0.0,,0.0,,1.0,none
CVE-2017-11574,CVE-2017-11574/5a0c6522682b0788fc478dd159dd6168cb5fa38b,https://github.com/fontforge/fontforge/commit/5a0c6522682b0788fc478dd159dd6168cb5fa38b,<s>FontForge 20161012 is vulnerable to a heap-based buffer overflow in readcffset (parsettf.c) resulting in DoS or code execution via a crafted otf file.</s>,"<s>parsettf.c: Fix buffer overflow condition when reading CFF top dictionary
Closes #3087
</s>"," diff --git a/fontforge/parsettf.c b/fontforge/parsettf.c
index 04c038607..992db970c 100644
--- a/fontforge/parsettf.c
+++ b/fontforge/parsettf.c
@@ -2796,6 +2796,15 @@ return( 3 );
 	pt = buffer;
 	do {
 	    ch = getc(ttf);
+		// Space for at least 2 bytes is required
+		if ((pt-buffer) > (sizeof(buffer) - 2)) {
+			// The buffer is completely full; null-terminate truncate it
+			if ((pt-buffer) == sizeof(buffer)) {
+				pt--;
+			}
+			*pt++ = '\0';
+			break;
+		}
 	    if ( pt<buffer+44 || (ch&0xf)==0xf || (ch&0xf0)==0xf0 ) {
 		pt = addnibble(pt,ch>>4);
 		pt = addnibble(pt,ch&0xf);
@@ -3019,7 +3028,7 @@ static struct topdicts *readcfftopdict(FILE *ttf, char *fontname, int len,
 
     /* Multiple master fonts can have Type2 operators here, particularly */
     /*  blend operators. We're ignoring that */
-    while ( ftell(ttf)<base+len ) {
+    while ( !feof(ttf) && ftell(ttf)<base+len ) {
 	sp = 0;
 	while ( (ret=readcffthing(ttf,&ival,&stack[sp],&oval,info))!=3 && ftell(ttf)<base+len ) {
 	    if ( ret==1 )
",1.0,,1.0,,0.0,none
CVE-2017-11574,CVE-2017-11574/6e0a5b6c9f6bd06df20fb892b6a3879a330f2d04,https://github.com/fontforge/fontforge/commit/6e0a5b6c9f6bd06df20fb892b6a3879a330f2d04,<s>FontForge 20161012 is vulnerable to a heap-based buffer overflow in readcffset (parsettf.c) resulting in DoS or code execution via a crafted otf file.</s>,"<s>Switch to functions.
</s>"," diff --git a/fontforge/parsettf.c b/fontforge/parsettf.c
index 83a95ed4c..f516cf1d9 100644
--- a/fontforge/parsettf.c
+++ b/fontforge/parsettf.c
@@ -5398,8 +5398,8 @@ static int readttf(FILE *ttf, struct ttfinfo *info, char *filename) {
 return( 0 );
     }
     /* TrueType doesn't need this but opentype dictionaries do */
-    DECLARE_TEMP_LOCALE()
-    SWITCH_TO_C_LOCALE()
+    locale_t tmplocale; locale_t oldlocale; // Declare temporary locale storage.
+    switch_to_c_locale(&tmplocale, &oldlocale); // Switch to the C locale temporarily and cache the old locale.
     readttfpreglyph(ttf,info);
     ff_progress_change_total(info->glyph_cnt);
 
@@ -5420,7 +5420,7 @@ return( 0 );
 	buts[3] = NULL;
 	choice = ff_ask(_(""Pick a font, any font...""),(const char **) buts,0,2,_(""This font contains both a TrueType 'glyf' table and an OpenType 'CFF ' table. FontForge can only deal with one at a time, please pick which one you want to use""));
 	if ( choice==2 ) {
-          SWITCH_TO_OLD_LOCALE()
+          switch_to_old_locale(&tmplocale, &oldlocale); // Switch to the cached locale.
 return( 0 );
 	} else if ( choice==0 )
 	    info->cff_start=0;
@@ -5441,16 +5441,16 @@ return( 0 );
     } else if ( info->cff_start!=0 ) {
 	info->to_order2 = (loaded_fonts_same_as_new && new_fonts_are_order2);
 	if ( !readcffglyphs(ttf,info) ) {
-	    SWITCH_TO_OLD_LOCALE()
+	    switch_to_old_locale(&tmplocale, &oldlocale); // Switch to the cached locale.
 return( 0 );
 	}
     } else if ( info->typ1_start!=0 ) {
 	if ( !readtyp1glyphs(ttf,info) ) {
-	    SWITCH_TO_OLD_LOCALE()
+	    switch_to_old_locale(&tmplocale, &oldlocale); // Switch to the cached locale.
 return( 0 );
 	}
     } else {
-	SWITCH_TO_OLD_LOCALE()
+	switch_to_old_locale(&tmplocale, &oldlocale); // Switch to the cached locale.
 return( 0 );
     }
     if ( info->bitmapdata_start!=0 && info->bitmaploc_start!=0 )
@@ -5459,7 +5459,7 @@ return( 0 );
 	ff_post_error( _(""No Bitmap Strikes""), _(""No (useable) bitmap strikes in this TTF font: %s""), filename==NULL ? ""<unknown>"" : filename );
     if ( info->onlystrikes && info->bitmaps==NULL ) {
 	free(info->chars);
-	SWITCH_TO_OLD_LOCALE()
+	switch_to_old_locale(&tmplocale, &oldlocale); // Switch to the cached locale.
 return( 0 );
     }
     if ( info->hmetrics_start!=0 )
@@ -5530,7 +5530,7 @@ return( 0 );
 	tex_read(ttf,info);
     if ( info->math_start!=0 )
 	otf_read_math(ttf,info);
-    SWITCH_TO_OLD_LOCALE()
+    switch_to_old_locale(&tmplocale, &oldlocale); // Switch to the cached locale.
     if ( !info->onlystrikes && info->glyphlocations_start!=0 && info->glyph_start!=0 )
 	ttfFixupReferences(info);
     /* Can't fix up any postscript references until we create a SplineFont */
",0.0,,0.0,,0.0,none
CVE-2017-11574,CVE-2017-11574/98932b7c1a7e3b3e24597be1dc4d985f72038d18,https://github.com/fontforge/fontforge/commit/98932b7c1a7e3b3e24597be1dc4d985f72038d18,<s>FontForge 20161012 is vulnerable to a heap-based buffer overflow in readcffset (parsettf.c) resulting in DoS or code execution via a crafted otf file.</s>,"<s>do not crash on eof (invalid input data)
</s>"," diff --git a/fontforge/parsettf.c b/fontforge/parsettf.c
index aa40a6d9b..4c2718911 100644
--- a/fontforge/parsettf.c
+++ b/fontforge/parsettf.c
@@ -5185,7 +5185,10 @@ static void readttfpostnames(FILE *ttf,struct ttfinfo *info) {
 	    /* the index table is backwards from the way I want to use it */
 	    gcbig = 0;
 	    for ( i=0; i<gc; ++i ) {
-		indexes[val = getushort(ttf)] = i;
+		val = getushort(ttf);
+		if ( val<0 )		/* Don't crash on EOF */
+	    break;
+		indexes[val] = i;
 		if ( val>=258 ) ++gcbig;
 	    }
 
",0.0,,0.0,,0.0,none
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2019-17534,CVE-2019-17534/25e457736173369dcb0f7c09d07af68aedbdc175,https://github.com/libvips/libvips/commit/25e457736173369dcb0f7c09d07af68aedbdc175,"<s>vips_foreign_load_gif_scan_image in foreign/gifload.c in libvips before 8.8.2 tries to access a color map before a DGifGetImageDesc call, leading to a use-after-free.</s>","<s>relax GIF parse rules again
lots of GIFs are very badly structured :(
</s>"," diff --git a/libvips/foreign/gifload.c b/libvips/foreign/gifload.c
index 42b9d840d..67fe4c803 100644
--- a/libvips/foreign/gifload.c
+++ b/libvips/foreign/gifload.c
@@ -404,7 +404,7 @@ vips_foreign_load_gif_code_next( VipsForeignLoadGif *gif,
 /* Quickly scan an image record.
  */
 static int
-vips_foreign_load_gif_scan_image_record( VipsForeignLoadGif *gif ) 
+vips_foreign_load_gif_scan_image( VipsForeignLoadGif *gif ) 
 {
 	VipsObjectClass *class = VIPS_OBJECT_GET_CLASS( gif );
 	GifFileType *file = gif->file;
@@ -413,6 +413,11 @@ vips_foreign_load_gif_scan_image_record( VipsForeignLoadGif *gif )
 
 	GifByteType *extension;
 
+	if( DGifGetImageDesc( gif->file ) == GIF_ERROR ) {
+		vips_foreign_load_gif_error( gif ); 
+		return( -1 );
+	}
+
 	/* Check that the frame looks sane. Perhaps giflib checks
 	 * this for us.
 	 */
@@ -587,6 +592,8 @@ vips_foreign_load_gif_set_header( VipsForeignLoadGif *gif, VipsImage *image )
 
 /* Attempt to quickly scan a GIF and discover what we need for our header. We
  * need to scan the whole file to get n_pages, transparency and colour. 
+ *
+ * Don't flag errors during header scan. Many GIFs do not follow spec.
  */
 static int
 vips_foreign_load_gif_header( VipsForeignLoad *load )
@@ -604,23 +611,12 @@ vips_foreign_load_gif_header( VipsForeignLoad *load )
 	gif->n_pages = 0;
 
 	do {
-		/* Don't flag errors during header scan. Some corrupt GIFs
-		 * will fail.
-		 */
 		if( DGifGetRecordType( gif->file, &record ) == GIF_ERROR ) 
 			continue;
 
 		switch( record ) {
 		case IMAGE_DESC_RECORD_TYPE:
-			if( DGifGetImageDesc( gif->file ) == GIF_ERROR ) {
-				vips_foreign_load_gif_error( gif ); 
-				return( -1 ); 
-			}
-
-			/* Read in the image record.
-			 */
-			if( vips_foreign_load_gif_scan_image_record( gif ) )
-				return( -1 );
+			(void) vips_foreign_load_gif_scan_image( gif );
 
 			gif->n_pages += 1;
 
@@ -630,8 +626,7 @@ vips_foreign_load_gif_header( VipsForeignLoad *load )
 			/* We will need to fetch the extensions to check for
 			 * cmaps and transparency.
 			 */
-			if( vips_foreign_load_gif_scan_extension( gif ) )
-				return( -1 );
+			(void) vips_foreign_load_gif_scan_extension( gif );
 			break;
 
 		case TERMINATE_RECORD_TYPE:
",0.0,,0.0,,0.0,none
CVE-2019-17534,CVE-2019-17534/ce684dd008532ea0bf9d4a1d89bacb35f4a83f4d,https://github.com/libvips/libvips/commit/ce684dd008532ea0bf9d4a1d89bacb35f4a83f4d,"<s>vips_foreign_load_gif_scan_image in foreign/gifload.c in libvips before 8.8.2 tries to access a color map before a DGifGetImageDesc call, leading to a use-after-free.</s>","<s>fetch map after DGifGetImageDesc()
Earlier refactoring broke GIF map fetch.
</s>"," diff --git a/libvips/foreign/gifload.c b/libvips/foreign/gifload.c
index 67fe4c803..a394da7ac 100644
--- a/libvips/foreign/gifload.c
+++ b/libvips/foreign/gifload.c
@@ -408,9 +408,8 @@ vips_foreign_load_gif_scan_image( VipsForeignLoadGif *gif )
 {
 	VipsObjectClass *class = VIPS_OBJECT_GET_CLASS( gif );
 	GifFileType *file = gif->file;
-	ColorMapObject *map = file->Image.ColorMap ?
-		file->Image.ColorMap : file->SColorMap;
 
+	ColorMapObject *map;
 	GifByteType *extension;
 
 	if( DGifGetImageDesc( gif->file ) == GIF_ERROR ) {
@@ -435,6 +434,7 @@ vips_foreign_load_gif_scan_image( VipsForeignLoadGif *gif )
 
 	/* Test for a non-greyscale colourmap for this frame.
 	 */
+	map = file->Image.ColorMap ? file->Image.ColorMap : file->SColorMap;
 	if( !gif->has_colour &&
 		map ) {
 		int i;
",1.0,,1.0,,1.0,none
CVE-2019-17534,CVE-2019-17534/4b677fb16a95f11ee1fe02502b1565cfc3d2ad19,https://github.com/libvips/libvips/commit/4b677fb16a95f11ee1fe02502b1565cfc3d2ad19,"<s>vips_foreign_load_gif_scan_image in foreign/gifload.c in libvips before 8.8.2 tries to access a color map before a DGifGetImageDesc call, leading to a use-after-free.</s>","<s>make GIF parse less strict
Some GIFs don't follow the standard very closely. Let them through.
See https://github.com/libvips/libvips/issues/1404
</s>"," diff --git a/libvips/foreign/gifload.c b/libvips/foreign/gifload.c
index 122e5f405..a76ba040a 100644
--- a/libvips/foreign/gifload.c
+++ b/libvips/foreign/gifload.c
@@ -22,6 +22,8 @@
  * 	- init pages to 0 before load
  * 14/2/19
  * 	- rework as a sequential loader ... simpler, much lower mem use
+ * 23/8/18
+ * 	- allow GIF read errors during header scan
  */
 
 /*
@@ -601,11 +603,12 @@ vips_foreign_load_gif_header( VipsForeignLoad *load )
 
 	gif->n_pages = 0;
 
-	do { 
-		if( DGifGetRecordType( gif->file, &record ) == GIF_ERROR ) {
-			vips_foreign_load_gif_error( gif ); 
-			return( -1 ); 
-		}
+	do {
+		/* Don't flag errors during header scan. Some corrupt GIFs
+		 * will fail.
+		 */
+		if( DGifGetRecordType( gif->file, &record ) == GIF_ERROR ) 
+			continue;
 
 		switch( record ) {
 		case IMAGE_DESC_RECORD_TYPE:
",0.0,,0.0,,0.0,none
CVE-2019-17534,CVE-2019-17534/1ac96313cca88c4a69019f66c7f625e15815a29f,https://github.com/libvips/libvips/commit/1ac96313cca88c4a69019f66c7f625e15815a29f,"<s>vips_foreign_load_gif_scan_image in foreign/gifload.c in libvips before 8.8.2 tries to access a color map before a DGifGetImageDesc call, leading to a use-after-free.</s>","<s>note change in gifload.c
</s>"," diff --git a/libvips/foreign/gifload.c b/libvips/foreign/gifload.c
index b45aa0594..33c45f65c 100644
--- a/libvips/foreign/gifload.c
+++ b/libvips/foreign/gifload.c
@@ -24,6 +24,7 @@
  * 	- rework as a sequential loader ... simpler, much lower mem use
  * 23/8/18
  * 	- allow GIF read errors during header scan
+ * 	- better feof() handling
  */
 
 /*
",0.0,,0.0,,0.0,none
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2022-0984,CVE-2022-0984/d9bde2ab224834000bf3b0d64da07ef750326c8c,https://github.com/moodle/moodle/commit/d9bde2ab224834000bf3b0d64da07ef750326c8c,"<s>Users with the capability to configure badge criteria (teachers and managers by default) were able to configure course badges with profile field criteria, which should only be available for site badges.</s>","<s>MDL-72852 navigation: Do not display badges when empty
If there are no course badges, students shouldn't have a link to a
page saying there are no badges available.
This patch is for displaying the Badges in the secondary navigation
only if the user can manage badges or there is, at least, one
badge available to the current user.
</s>"," diff --git a/course/lib.php b/course/lib.php
index bc9ba12dc5d..3e45225cdca 100644
--- a/course/lib.php
+++ b/course/lib.php
@@ -3958,7 +3958,7 @@ function course_get_tagged_course_modules($tag, $exclusivemode = false, $fromcon
, * @since+ Moodle 3.2
ges */
 function course_get_user_navigation_options($context, $course = null) {
-
+
 global $CFG;
+ at site level global $CFG, $USER;
 I
 in as ""admin $isloggedin = isloggedin();
Badges > Man $isguestuser = isguestuser();
@@ -4001,8 +4001,33 @@ function course_get_user_navigation_options($context, $course = null) {
enario: Check navigation } else {
 no badges
+    Given // We are in a course, so make sure we use the proper capability (course:viewparticipants).
 email |
+     $options->participants = course_can_view_participants($context);
+
+ the following ""courses"" exist // Only display badges if the current user can manage them or if they can view them and have, at least, one available badge.
+ Course 1 | C1   require_once($CFG->dirroot.'/lib/badgeslib.php');
+    |
+  $canmanage = has_any_capability([
+      | user     | course | role 'moodle/badges:createbadge',
+      | teacher | C1     | 'moodle/badges:awardbadge',
+ ""teacher""
+    And I am on ""Course 'moodle/badges:configurecriteria',
+ges""
+    Then ""Manage badges"" ""button 'moodle/badges:configuremessages',
+ a new badge"" ""button""
+    And I set 'moodle/badges:configuredetails',
+ | Name | Testing course badge |
+      | 'moodle/badges:deletebadge',
+ | Language | Basque |
+    ],
+ Description | Testing course badge description |
+   $context
+ Image author | http://author. );
+ |
+     $totalbadges = [];
+ |
+    And $canview = false;
+behat/badge.png if (!$canmanage) {
+    And I click on ""Create badge"" // This only needs to be calculated if the user can't manage badges (to improve performance).
+ by role""
+    And I expand $canview = has_capability('moodle/badges:viewbadges', $context);
+   And I click on ""Save"" ""button if (is_null($course)) {
+Manage badges"" ""link""
+    And I should $totalbadges = count(badges_get_badges(BADGE_TYPE_SITE, 0, '', '', 0, 0, $USER->id));
+ should not see ""Testing course badge""
+  } else {
+ see ""There are no badges available.""
+    And I $totalbadges = count(badges_get_badges(BADGE_TYPE_COURSE, $course->id, '', '', 0, 0, $USER->id));
+ click on ""Continue"" ""button""
+  }
+ I should see ""Testing course badge }
+
   And I follow ""Badges $options->badges = !empty($CFG->enablebadges) && !empty($CFG->badges_allowcoursebadges) &&
- And I should not see ""There are no badges available.""
+
+  Scenario: Check navigation at course level with no has_capability('moodle/badges:viewbadges', $context);
+ now.
+    Given the following ""users"" exist:
+      | username | firstname ($canmanage || ($canview && $totalbadges > 0));
    |
+   // Add view grade report is permitted.
  | 1      $grades = false;
example
com |
+    And the following ""courses"" exist:
+      | fullname | shortname | format | enablecompletion |
+      | Course 1 | C1        | topics | 1                |
+    And the following ""course enrolments"" exist:
+      | user     | course | role           |
+      | student1 | C1     | student        |
+    And I am on the ""C1"" ""Course"" page logged in as ""admin""
+    And I navigate to ""Badges > Add a new badge"" in current page administration
+    And I set the following fields to these values:
+      | Name | Testing course badge |
+      | Version | 1.0 |
+      | Language | Catalan |
+      | Description | Testing course badge description |
+    And I upload ""badges/tests/behat/badge.png"" file to ""Image"" filemanager
+    And I press ""Create badge""
+    And I set the field ""type"" to ""Manual issue by role""
+    And I expand all fieldsets
+    And I set the field ""Teacher"" to ""1""
+    And I press ""Save""
+    And I log out
+    When I am on the ""C1"" ""Course"" page logged in as ""student1""
+    Then ""Badges"" ""link"" should not exist in current page administration
+    And I log out
+    # Enable the badge.
+    And I am on the ""C1"" ""Course"" page logged in as ""admin""
+    And I follow ""Badges""
+    And I click on ""Manage badges"" ""button""
+    And I click on ""Enable access"" ""link"" in the ""Testing course badge"" ""table_row""
+    And I press ""Continue""
+    And I log out
+    # Now student should see the Badges link.
+    And I am on the ""C1"" ""Course"" page logged in as ""student1""
+    And I follow ""Badges""
+    And ""Manage badges"" ""button"" should not exist
+    And ""Add a new badge"" ""button"" should not exist
+    And I should not see ""There are no badges available.""
",0.0,,0.0,,0.0,none
CVE-2022-0984,CVE-2022-0984/cdc78a16a5da95a17fb10bf1c66689237f5a3f7d,https://github.com/moodle/moodle/commit/cdc78a16a5da95a17fb10bf1c66689237f5a3f7d,"<s>Users with the capability to configure badge criteria (teachers and managers by default) were able to configure course badges with profile field criteria, which should only be available for site badges.</s>","<s>MDL-74075 core_badges: Check accepted criterias
</s>"," diff --git a/badges/criteria_settings.php b/badges/criteria_settings.php
index cd2cb213b97..46dcd168ab2 100644
--- a/badges/criteria_settings.php
+++ b/badges/criteria_settings.php
@@ -55,6 +55,12 @@ if ($badge->is_active() || $badge->is_locked()) {
     redirect($return);
 }
 
+// Make sure the criteria type is accepted.
+$accepted = $badge->get_accepted_criteria();
+if (!in_array($type, $accepted)) {
+    redirect($return);
+}
+
 if ($badge->type == BADGE_TYPE_COURSE) {
     require_login($badge->courseid);
     $navurl = new moodle_url('/badges/index.php', array('type' => $badge->type, 'id' => $badge->courseid));
",1.0,,1.0,,1.0,none
CVE-2022-0984,CVE-2022-0984/a2d230777fbf937b856c3bdab30fb17689f67065,https://github.com/moodle/moodle/commit/a2d230777fbf937b856c3bdab30fb17689f67065,"<s>Users with the capability to configure badge criteria (teachers and managers by default) were able to configure course badges with profile field criteria, which should only be available for site badges.</s>","<s>MDL-74074 badges: Ensure profile criteria exists before completion check
</s>"," diff --git a/badges/criteria/award_criteria_profile.php b/badges/criteria/award_criteria_profile.php
index b014cf5a92b..d3ac2f25556 100644
--- a/badges/criteria/award_criteria_profile.php
+++ b/badges/criteria/award_criteria_profile.php
@@ -39,6 +39,26 @@ class award_criteria_profile extends award_criteria {
     public $required_param = 'field';
     public $optional_params = array();
 
+    /* @var array The default profile fields allowed to be used as award criteria.
+     *
+     * Note: This is used instead of user_get_default_fields(), because it is not possible to
+     * determine which fields the user can modify.
+     */
+    protected $allowed_default_fields = [
+        'firstname',
+        'lastname',
+        'email',
+        'address',
+        'phone1',
+        'phone2',
+        'department',
+        'institution',
+        'description',
+        'picture',
+        'city',
+        'country',
+    ];
+
     /**
      * Add appropriate new criteria options to the form
      *
@@ -50,10 +70,7 @@ class award_criteria_profile extends award_criteria {
         $none = true;
         $existing = array();
         $missing = array();
-
-        // Note: cannot use user_get_default_fields() here because it is not possible to decide which fields user can modify.
-        $dfields = array('firstname', 'lastname', 'email', 'address', 'phone1', 'phone2',
-                         'department', 'institution', 'description', 'picture', 'city', 'country');
+        $dfields = $this->allowed_default_fields;
 
         // Get custom fields.
         $cfields = array_filter(profile_get_custom_fields(), function($field) {
@@ -230,8 +247,8 @@ class award_criteria_profile extends award_criteria {
                 $join .= "" LEFT JOIN {user_info_data} uid{$idx} ON uid{$idx}.userid = u.id AND uid{$idx}.fieldid = :fieldid{$idx} "";
                 $params[""fieldid{$idx}""] = $param['field'];
                 $whereparts[] = ""uid{$idx}.id IS NOT NULL"";
-            } else {
-                // This is a field from {user} table.
+            } else if (in_array($param['field'], $this->allowed_default_fields)) {
+                // This is a valid field from {user} table.
                 if ($param['field'] == 'picture') {
                     // The picture field is numeric and requires special handling.
                     $whereparts[] = ""u.{$param['field']} != 0"";
",0.0,,0.0,,0.0,none
CVE-2022-0984,CVE-2022-0984/0f0b8bbf68ed185f36f8702b9bc8804c8a1c85d2,https://github.com/moodle/moodle/commit/0f0b8bbf68ed185f36f8702b9bc8804c8a1c85d2,"<s>Users with the capability to configure badge criteria (teachers and managers by default) were able to configure course badges with profile field criteria, which should only be available for site badges.</s>","<s>MDL-72246 core_completion: Only fetch other completion data on requested
Prior to this patch, the code was fetching all completion data for all
activities in a course, even when the activity was not requested. This
leads to recursion issues as the data has not been added to the cache
before this operation occurs.
To handle this situation, only the requested CM is fetched in full, and
a boolean flag is used to store whether the full data has been fetched.
When returning a partially fetched value from the cache, the flag is
used to determine whether more data must be fetched, and the cache
updated.
The flag is filtered out before the value is returned.
Note: Many of the tests were updated as these were inspecting private
features of the API which should not really be tested.
</s>"," diff --git a/lib/completionlib.php b/lib/completionlib.php
index 6198cf49728..cf3a0e0fad6 100644
--- a/lib/completionlib.php
+++ b/lib/completionlib.php
@@ -1015,6 +1015,20 @@ class completion_info {
             $userid = $USER->id;
         }
 
+        // Some call completion_info::get_data and pass $cm as an object with ID only. Make sure course is set as well.
+        if ($cm instanceof stdClass && !isset($cm->course)) {
+            $cm->course = $this->course_id;
+        }
+        // Make sure we're working on a cm_info object.
+        $cminfo = cm_info::create($cm, $userid);
+
+        // Create an anonymous function to remove the 'other_cm_completion_data_fetched' key.
+        $returnfilteredvalue = function(array $value): stdClass {
+            return (object) array_filter($value, function(string $key): bool {
+                return $key !== 'other_cm_completion_data_fetched';
+            }, ARRAY_FILTER_USE_KEY);
+        };
+
         // See if requested data is present in cache (use cache for current user only).
         $usecache = $userid == $USER->id;
         $cacheddata = array();
@@ -1027,19 +1041,22 @@ class completion_info {
                 if ($cacheddata['cacherev'] != $this->course->cacherev) {
                     // Course structure has been changed since the last caching, forget the cache.
                     $cacheddata = array();
-                } else if (isset($cacheddata[$cm->id])) {
-                    return (object)$cacheddata[$cm->id];
+                } else if (isset($cacheddata[$cminfo->id])) {
+                    $data = (array) $cacheddata[$cminfo->id];
+                    if (empty($data['other_cm_completion_data_fetched'])) {
+                        $data += $this->get_other_cm_completion_data($cminfo, $userid);
+                        $data['other_cm_completion_data_fetched'] = true;
+
+                        // Put in cache.
+                        $cacheddata[$cminfo->id] = $data;
+                        $completioncache->set($key, $cacheddata);
+                    }
+
+                    return $returnfilteredvalue($cacheddata[$cminfo->id]);
                 }
             }
         }
 
-        // Some call completion_info::get_data and pass $cm as an object with ID only. Make sure course is set as well.
-        if ($cm instanceof stdClass && !isset($cm->course)) {
-            $cm->course = $this->course_id;
-        }
-        // Make sure we're working on a cm_info object.
-        $cminfo = cm_info::create($cm, $userid);
-
         // Default data to return when no completion data is found.
         $defaultdata = [
             'id' => 0,
@@ -1077,12 +1094,9 @@ class completion_info {
                     $cacheddata[$data->cmid] = $defaultdata;
                     $cacheddata[$data->cmid]['coursemoduleid'] = $data->cmid;
                 } else {
-                    $cacheddata[$data->cmid] = (array) $data;
+                    unset($data->cmid);
+                    $cacheddata[$data->coursemoduleid] = (array) $data;
                 }
-
-                // Add the other completion data for this user in this module instance.
-                $othercminfo = $cminfos[$data->cmid];
-                $cacheddata[$othercminfo->id] += $this->get_other_cm_completion_data($othercminfo, $userid);
             }
 
             if (!isset($cacheddata[$cminfo->id])) {
@@ -1090,6 +1104,7 @@ class completion_info {
                 $this->internal_systemerror($errormessage);
             }
 
+            $data = $cacheddata[$cminfo->id];
         } else {
             // Get single record
             $data = $DB->get_record('course_modules_completion', array('coursemoduleid' => $cminfo->id, 'userid' => $userid));
@@ -1099,18 +1114,24 @@ class completion_info {
                 // Row not present counts as 'not complete'.
                 $data = $defaultdata;
             }
-            // Fill the other completion data for this user in this module instance.
-            $data += $this->get_other_cm_completion_data($cminfo, $userid);
 
-            // Put in cache
+            // Put in cache.
             $cacheddata[$cminfo->id] = $data;
         }
 
+        // Fill the other completion data for this user in this module instance.
+        $data += $this->get_other_cm_completion_data($cminfo, $userid);
+        $data['other_cm_completion_data_fetched'] = true;
+
+        // Put in cache
+        $cacheddata[$cminfo->id] = $data;
+
         if ($usecache) {
             $cacheddata['cacherev'] = $this->course->cacherev;
             $completioncache->set($key, $cacheddata);
         }
-        return (object)$cacheddata[$cminfo->id];
+
+        return $returnfilteredvalue($cacheddata[$cminfo->id]);
     }
 
     /**
@@ -1189,6 +1210,7 @@ class completion_info {
         $cmcontext = context_module::instance($data->coursemoduleid);
 
         $completioncache = cache::make('core', 'completion');
+        $cachekey = ""{$data->userid}_{$cm->course}"";
         if ($data->userid == $USER->id) {
             // Fetch other completion data to cache (e.g. require gr",0.0,,0.0,,0.0,none
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2021-37742,CVE-2021-37742/af50add82433eb2a740c3621b99d9d14d2b1e192,https://github.com/MISP/MISP/commit/af50add82433eb2a740c3621b99d9d14d2b1e192,<s>app/View/Elements/GalaxyClusters/view_relation_tree.ctp in MISP 2.4.147 allows Stored XSS when viewing galaxy cluster relationships.</s>,"<s>fix: [security] Stored XSS when viewing galaxy cluster relationships
- As reported by Dawid Czarnecki
</s>"," diff --git a/app/View/Elements/GalaxyClusters/view_relation_tree.ctp b/app/View/Elements/GalaxyClusters/view_relation_tree.ctp
index b9b7e5c33..93f4d206d 100644
--- a/app/View/Elements/GalaxyClusters/view_relation_tree.ctp
+++ b/app/View/Elements/GalaxyClusters/view_relation_tree.ctp
@@ -299,7 +299,7 @@ $randomClass = ""relation-{$random}"";
             .attr(""class"", ""well well-small"")
             .style('padding', '4px 9px')
             .style('white-space', 'nowrap')
-            .html(function(d) { return d.Relation.referenced_galaxy_cluster_type; })
+            .text(function(d) { return d.Relation.referenced_galaxy_cluster_type; })
             
         paddingX = 8;
         gEnter.append(""foreignObject"")
@@ -319,7 +319,7 @@ $randomClass = ""relation-{$random}"";
                             .style('background-color', tag.colour)
                             .style('color', getTextColour(tag.colour))
                             .style('display', 'inline')
-                            .html(tag.name)
+                            .text(tag.name)
                     });
                 }
             });
",1.0,,1.0,,1.0,lime
CVE-2021-37742,CVE-2021-37742/a4c69e5c6e8b9d45802c4b3d74d79e4f8bf0b6e7,https://github.com/MISP/MISP/commit/a4c69e5c6e8b9d45802c4b3d74d79e4f8bf0b6e7,<s>app/View/Elements/GalaxyClusters/view_relation_tree.ctp in MISP 2.4.147 allows Stored XSS when viewing galaxy cluster relationships.</s>,"<s>chg: [internal] Use ServerSyncTool for fetching remote user info
</s>"," diff --git a/app/Model/Server.php b/app/Model/Server.php
index 9bc1195c5..db10fc607 100644
--- a/app/Model/Server.php
+++ b/app/Model/Server.php
@@ -1,6 +1,7 @@
 <?php
 App::uses('AppModel', 'Model');
 App::uses('GpgTool', 'Tools');
+App::uses('ServerSyncTool', 'Tools');
 
 /**
  * @property-read array $serverSettings
@@ -500,7 +501,14 @@ class Server extends AppModel
         } else {
             $email = $user['email'];
         }
-        $server['Server']['version'] = $this->getRemoteVersion($server);
+
+        $serverSync = new ServerSyncTool($server, $this->setupSyncRequest($server));
+        try {
+            $server['Server']['version'] = $serverSync->info();
+        } catch (HttpSocketHttpException $e) {
+            // ignore for now
+        }
+
         $pulledClusters = 0;
         if (!empty($server['Server']['pull_galaxy_clusters'])) {
             $this->GalaxyCluster = ClassRegistry::init('GalaxyCluster');
@@ -779,7 +787,7 @@ class Server extends AppModel
      */
     public function getEventIdsFromServer(array $server, $all = false, HttpSocket $HttpSocket = null, $ignoreFilterRules = false, $scope = 'events', $force = false)
     {
-        if (!in_array($scope, array('events', 'sightings'))) {
+        if (!in_array($scope, ['events', 'sightings'], true)) {
             throw new InvalidArgumentException(""Scope mus be 'events' or 'sightings', '$scope' given."");
         }
 
@@ -4437,51 +4445,46 @@ class Server extends AppModel
         return array($data, $response);
     }
 
+    /**
+     * @param int $id
+     * @return array|int|null
+     * @throws JsonException
+     */
     public function getRemoteUser($id)
     {
         $server = $this->find('first', array(
             'conditions' => array('Server.id' => $id),
             'recursive' => -1
         ));
-        $HttpSocket = $this->setupHttpSocket($server);
-        $request = $this->setupSyncRequest($server);
-        $uri = $server['Server']['url'] . '/users/view/me.json';
+        if (empty($server)) {
+            return null; // server not found
+        }
+
+        $serverSync = new ServerSyncTool($server, $this->setupSyncRequest($server));
+
         try {
-            $response = $HttpSocket->get($uri, false, $request);
-        } catch (Exception $e) {
-            $this->Log = ClassRegistry::init('Log');
-            $this->Log->create();
+            $response = $serverSync->userInfo();
+            $user = $response->json();
+
+            $results = [
+                __('User') => $user['User']['email'],
+                __('Role name') => isset($user['Role']['name']) ? $user['Role']['name'] : __('Unknown, outdated instance'),
+                __('Sync flag') => isset($user['Role']['perm_sync']) ? ($user['Role']['perm_sync'] ? __('Yes') : __('No')) : __('Unknown, outdated instance'),
+            ];
+            if (isset($response->headers['X-Auth-Key-Expiration'])) {
+                $date = new DateTime($response->headers['X-Auth-Key-Expiration']);
+                $results[__('Auth key expiration')] = $date->format('Y-m-d H:i:s');
+            }
+            return $results;
+        } catch (HttpSocketHttpException $e) {
+            $this->logException('Could not fetch remote user account.', $e);
+            return $e->getCode();
+        } catch  (Exception $e) {
+            $this->logException('Could not fetch remote user account.', $e);
             $message = __('Could not fetch remote user account.');
-            $this->Log->save(array(
-                    'org' => 'SYSTEM',
-                    'model' => 'Server',
-                    'model_id' => $id,
-                    'email' => 'SYSTEM',
-                    'action' => 'error',
-                    'user_id' => 0,
-                    'title' => 'Error: ' . $message,
-            ));
+            $this->loadLog()->createLogEntry('SYSTEM', 'error', 'Server', $id, 'Error: ' . $message);
             return $message;
         }
-        if ($response->isOk()) {
-            $user = $this->jsonDecode($response->body);
-            if (!empty($user['User'])) {
-                $results = [
-                    __('User') => $user['User']['email'],
-                    __('Role name') => isset($user['Role']['name']) ? $user['Role']['name'] : __('Unknown, outdated instance'),
-                    __('Sync flag') => isset($user['Role']['perm_sync']) ? ($user['Role']['perm_sync'] ? __('Yes') : __('No')) : __('Unknown, outdated instance'),
-                ];
-                if (isset($response->headers['X-Auth-Key-Expiration'])) {
-                    $date = new DateTime($response->headers['X-Auth-Key-Expiration']);
-                    $results[__('Auth key expiration')] = $date->format('Y-m-d H:i:s');
-                }
-                return $results;
-            } else {
-                return __('No user object received in response.');
-            }
-        } else {
-            return $response->code;
-        }
     }
 
     public function __get($name)
",0.0,,0.0,,0.0,lime
CVE-2021-37742,CVE-2021-37742/f318f7c0ddac7dfd2b1f246fd8f488d9dfc3a4bf,https://github.com/MISP/MISP/commit/f318f7c0ddac7dfd2b1f246fd8f488d9dfc3a4bf,<s>app/View/Elements/GalaxyClusters/view_relation_tree.ctp in MISP 2.4.147 allows Stored XSS when viewing galaxy cluster relationships.</s>,"<s>fix: [security] Stored XSS when viewing galaxy cluster elements in JSON format
</s>"," diff --git a/app/View/GalaxyElements/ajax/index.ctp b/app/View/GalaxyElements/ajax/index.ctp
index 24290c49b..9bc542e09 100644
--- a/app/View/GalaxyElements/ajax/index.ctp
+++ b/app/View/GalaxyElements/ajax/index.ctp
@@ -83,7 +83,7 @@ if ($context == 'JSONView') {
 
 echo $this->element('/genericElements/IndexTable/index_table', $indexOptions);
 if ($context == 'JSONView') {
-    echo sprintf('<div id=""elementJSONDiv"" class=""well well-small"">%s</div>', json_encode($JSONElements));
+    echo sprintf('<div id=""elementJSONDiv"" class=""well well-small"">%s</div>', json_encode(h($JSONElements)));
 }
 ?>
 
",0.0,,0.0,,0.0,lime
CVE-2021-37742,CVE-2021-37742/073eaf9a0afc6afbf8de873292252797afe6d17f,https://github.com/MISP/MISP/commit/073eaf9a0afc6afbf8de873292252797afe6d17f,<s>app/View/Elements/GalaxyClusters/view_relation_tree.ctp in MISP 2.4.147 allows Stored XSS when viewing galaxy cluster relationships.</s>,"<s>fix: [API] Undefined index when just last_seen is set
</s>"," diff --git a/app/Model/Attribute.php b/app/Model/Attribute.php
index f4163de54..2af87cc13 100644
--- a/app/Model/Attribute.php
+++ b/app/Model/Attribute.php
@@ -741,7 +741,7 @@ class Attribute extends AppModel
     public function validateLastSeenValue($fields)
     {
         $ls = $fields['last_seen'];
-        if (is_null($this->data['Attribute']['first_seen']) || is_null($ls)) {
+        if (!isset($this->data['Attribute']['first_seen']) || is_null($ls)) {
             return true;
         }
         $converted = $this->ISODatetimeToUTC(['Attribute' => [
",0.0,,0.0,,0.0,lime
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2019-13615,CVE-2019-13615/05beb69ba60acce09f73ed491bb76f332849c3a0,https://github.com/Matroska-Org/libebml/commit/05beb69ba60acce09f73ed491bb76f332849c3a0,"<s>libebml before 1.3.6, as used in the MKV module in VideoLAN VLC Media Player binaries before 3.0.3, has a heap-based buffer over-read in EbmlElement::FindNextElement.</s>","<s>Check the max size to read before actually reading
The size check waas also missing from the length parsing
</s>"," diff --git a/src/EbmlElement.cpp b/src/EbmlElement.cpp
index 143f439..ae4441e 100644
--- a/src/EbmlElement.cpp
+++ b/src/EbmlElement.cpp
@@ -404,12 +404,14 @@ EbmlElement * EbmlElement::FindNextElement(IOCallback & DataStream, const EbmlSe
         memmove(&PossibleIdNSize[0],&PossibleIdNSize[1], --ReadIndex);
       }
 
+      if (MaxDataSize <= ReadSize)
+        break;
       if (DataStream.read(&PossibleIdNSize[ReadIndex++], 1) == 0) {
         return NULL; // no more data ?
       }
       ReadSize++;
 
-    } while (!bFound && MaxDataSize > ReadSize);
+    } while (!bFound);
 
     if (!bFound)
       // we reached the maximum we could read without a proper ID
@@ -432,6 +434,10 @@ EbmlElement * EbmlElement::FindNextElement(IOCallback & DataStream, const EbmlSe
         bFound = false;
         break;
       }
+      if (MaxDataSize <= ReadSize) {
+        bFound = false;
+        break;
+      }
       if( DataStream.read( &PossibleIdNSize[SizeIdx++], 1 ) == 0 ) {
         return NULL; // no more data ?
       }
",1.0,,1.0,,1.0,none
CVE-2019-13615,CVE-2019-13615/b66ca475be967547af9a3784e720fbbacd381be6,https://github.com/Matroska-Org/libebml/commit/b66ca475be967547af9a3784e720fbbacd381be6,"<s>libebml before 1.3.6, as used in the MKV module in VideoLAN VLC Media Player binaries before 3.0.3, has a heap-based buffer over-read in EbmlElement::FindNextElement.</s>","<s>Exit the max size loop when there's nothing left possible to find
DataStream.getFilePointer() is not correct in this context. It might force to
exit too early.
</s>"," diff --git a/src/EbmlElement.cpp b/src/EbmlElement.cpp
index ac0be41..061074b 100644
--- a/src/EbmlElement.cpp
+++ b/src/EbmlElement.cpp
@@ -478,7 +478,7 @@ EbmlElement * EbmlElement::FindNextElement(IOCallback & DataStream, const EbmlSe
     ReadIndex = SizeIdx - 1;
     memmove(&PossibleIdNSize[0], &PossibleIdNSize[1], ReadIndex);
     UpperLevel = UpperLevel_original;
-  } while ( MaxDataSize > DataStream.getFilePointer() - SizeIdx + PossibleID_Length );
+  } while ( MaxDataSize >= ReadSize );
 
   return NULL;
 }
",0.0,,0.0,,0.0,none
CVE-2019-13615,CVE-2019-13615/ff0dc3cc21494578ce731f5d7dcde5fdec23d40f,https://github.com/Matroska-Org/libebml/commit/ff0dc3cc21494578ce731f5d7dcde5fdec23d40f,"<s>libebml before 1.3.6, as used in the MKV module in VideoLAN VLC Media Player binaries before 3.0.3, has a heap-based buffer over-read in EbmlElement::FindNextElement.</s>","<s>Do not output an element with size Unknown if it's not allowed
Similar to what is done in FindNextID().
SetSizeInfinite() doesn't actually set anything. SetSizeIsFinite() is the one
that actually sets it and it is an internal API.
</s>"," diff --git a/src/EbmlElement.cpp b/src/EbmlElement.cpp
index ae4441e..ac0be41 100644
--- a/src/EbmlElement.cpp
+++ b/src/EbmlElement.cpp
@@ -461,15 +461,13 @@ EbmlElement * EbmlElement::FindNextElement(IOCallback & DataStream, const EbmlSe
           //  1 : same level
           //  + : further parent
           if (Result->ValidateSize() && (SizeFound == SizeUnknown || UpperLevel > 0 || MaxDataSize == 0 || MaxDataSize >= (PossibleID_Length + PossibleSizeLength + SizeFound))) {
-            if (SizeFound == SizeUnknown) {
-              Result->SetSizeInfinite();
+            if (SizeFound != SizeUnknown || Result->SetSizeInfinite()) {
+              Result->SizePosition = DataStream.getFilePointer() - SizeIdx + EBML_ID_LENGTH(PossibleID);
+              Result->ElementPosition = Result->SizePosition - EBML_ID_LENGTH(PossibleID);
+              // place the file at the beggining of the data
+              DataStream.setFilePointer(Result->SizePosition + _SizeLength);
+              return Result;
             }
-
-            Result->SizePosition = DataStream.getFilePointer() - SizeIdx + EBML_ID_LENGTH(PossibleID);
-            Result->ElementPosition = Result->SizePosition - EBML_ID_LENGTH(PossibleID);
-            // place the file at the beggining of the data
-            DataStream.setFilePointer(Result->SizePosition + _SizeLength);
-            return Result;
           }
         }
         delete Result;
",0.0,,0.0,,0.0,none
CVE-2019-13615,CVE-2019-13615/7e0cdc4ea479fb2635ffd9f6a6b588eb411cb5bf,https://github.com/Matroska-Org/libebml/commit/7e0cdc4ea479fb2635ffd9f6a6b588eb411cb5bf,"<s>libebml before 1.3.6, as used in the MKV module in VideoLAN VLC Media Player binaries before 3.0.3, has a heap-based buffer over-read in EbmlElement::FindNextElement.</s>","<s>delete half-constructed elements on read failure
When an EbmlMaster tries to read the next element, it uses
EbmlStream.FindNextElement() which only reads the EBML ID and the size
field. With that data it constructs the corresponding (Matroska)
element. It's now up to the EbmlMaster to read the element's payload.
If reading the payload fails, an exception will be thrown by
e.g. IOCallback.readFully(). So far the Master didn't catch that
exception, causing the half-constructed element to be dangling as it
hasn't been added to the Master yet at that point. Therefore the
exception must be caught, the element deleted and the exception
re-thrown.
</s>"," diff --git a/src/EbmlMaster.cpp b/src/EbmlMaster.cpp
index 208fd15..371deef 100644
--- a/src/EbmlMaster.cpp
+++ b/src/EbmlMaster.cpp
@@ -439,7 +439,12 @@ void EbmlMaster::Read(EbmlStream & inDataStream, const EbmlSemanticContext & sCo
           break;
         }
       } else {
-        ElementLevelA->Read(inDataStream, EBML_CONTEXT(ElementLevelA), UpperEltFound, FoundElt, AllowDummyElt, ReadFully);
+        try {
+          ElementLevelA->Read(inDataStream, EBML_CONTEXT(ElementLevelA), UpperEltFound, FoundElt, AllowDummyElt, ReadFully);
+        } catch (...) {
+          delete ElementLevelA;
+          throw;
+        }
 
         // Discard elements that couldn't be read properly if
         // SCOPE_ALL_DATA has been requested. This can happen
",0.0,,0.0,,0.0,none
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2019-1010315,CVE-2019-1010315/4c0faba32fddbd0745cbfaf1e1aeb3da5d35b9fc,https://github.com/dbry/WavPack/commit/4c0faba32fddbd0745cbfaf1e1aeb3da5d35b9fc,<s>WavPack 5.1 and earlier is affected by: CWE 369: Divide by Zero. The impact is: Divide by zero can lead to sudden crash of a software/service that tries to parse a .wav file. The component is: ParseDsdiffHeaderConfig (dsdiff.c:282). The attack vector is: Maliciously crafted .wav file. The fixed version is: After commit https://github.com/dbry/WavPack/commit/4c0faba32fddbd0745cbfaf1e1aeb3da5d35b9fc.</s>,"<s>issue #65: make sure DSDIFF files have a valid channel count
</s>"," diff --git a/cli/dsdiff.c b/cli/dsdiff.c
index 0ac4321..f357181 100644
--- a/cli/dsdiff.c
+++ b/cli/dsdiff.c
@@ -180,7 +180,7 @@ int ParseDsdiffHeaderConfig (FILE *infile, char *infilename, char *fourcc, Wavpa
 
             if (!strncmp (prop_chunk, ""SND "", 4)) {
                 char *cptr = prop_chunk + 4, *eptr = prop_chunk + dff_chunk_header.ckDataSize;
-                uint16_t numChannels, chansSpecified, chanMask = 0;
+                uint16_t numChannels = 0, chansSpecified, chanMask = 0;
                 uint32_t sampleRate;
 
                 while (eptr - cptr >= sizeof (dff_chunk_header)) {
@@ -204,7 +204,7 @@ int ParseDsdiffHeaderConfig (FILE *infile, char *infilename, char *fourcc, Wavpa
 
                             chansSpecified = (int)(dff_chunk_header.ckDataSize - sizeof (numChannels)) / 4;
 
-                            if (numChannels < chansSpecified || numChannels < 1) {
+                            if (numChannels < chansSpecified || numChannels < 1 || numChannels > 256) {
                                 error_line (""%s is not a valid .DFF file!"", infilename);
                                 free (prop_chunk);
                                 return WAVPACK_SOFT_ERROR;
@@ -279,6 +279,12 @@ int ParseDsdiffHeaderConfig (FILE *infile, char *infilename, char *fourcc, Wavpa
             free (prop_chunk);
         }
         else if (!strncmp (dff_chunk_header.ckID, ""DSD "", 4)) {
+
+            if (!config->num_channels) {
+                error_line (""%s is not a valid .DFF file!"", infilename);
+                return WAVPACK_SOFT_ERROR;
+            }
+
             total_samples = dff_chunk_header.ckDataSize / config->num_channels;
             break;
         }
",1.0,,0.0,,1.0,tfidf
CVE-2019-1010315,CVE-2019-1010315/36a24c7881427d2e1e4dc1cef58f19eee0d13aec,https://github.com/dbry/WavPack/commit/36a24c7881427d2e1e4dc1cef58f19eee0d13aec,<s>WavPack 5.1 and earlier is affected by: CWE 369: Divide by Zero. The impact is: Divide by zero can lead to sudden crash of a software/service that tries to parse a .wav file. The component is: ParseDsdiffHeaderConfig (dsdiff.c:282). The attack vector is: Maliciously crafted .wav file. The fixed version is: After commit https://github.com/dbry/WavPack/commit/4c0faba32fddbd0745cbfaf1e1aeb3da5d35b9fc.</s>,"<s>issue #28, do not overwrite heap on corrupt DSDIFF file
</s>"," diff --git a/cli/dsdiff.c b/cli/dsdiff.c
index 410dc1c..c016df9 100644
--- a/cli/dsdiff.c
+++ b/cli/dsdiff.c
@@ -153,7 +153,17 @@ int ParseDsdiffHeaderConfig (FILE *infile, char *infilename, char *fourcc, Wavpa
                 error_line (""dsdiff file version = 0x%08x"", version);
         }
         else if (!strncmp (dff_chunk_header.ckID, ""PROP"", 4)) {
-            char *prop_chunk = malloc ((size_t) dff_chunk_header.ckDataSize);
+            char *prop_chunk;
+
+            if (dff_chunk_header.ckDataSize < 4 || dff_chunk_header.ckDataSize > 1024) {
+                error_line (""%s is not a valid .DFF file!"", infilename);
+                return WAVPACK_SOFT_ERROR;
+            }
+
+            if (debug_logging_mode)
+                error_line (""got PROP chunk of %d bytes total"", (int) dff_chunk_header.ckDataSize);
+
+            prop_chunk = malloc ((size_t) dff_chunk_header.ckDataSize);
 
             if (!DoReadFile (infile, prop_chunk, (uint32_t) dff_chunk_header.ckDataSize, &bcount) ||
                 bcount != dff_chunk_header.ckDataSize) {
",0.0,,0.0,,0.0,tfidf
CVE-2019-1010315,CVE-2019-1010315/cd353bccafb1274a525c3536aaff8c48c3a33aa0,https://github.com/dbry/WavPack/commit/cd353bccafb1274a525c3536aaff8c48c3a33aa0,<s>WavPack 5.1 and earlier is affected by: CWE 369: Divide by Zero. The impact is: Divide by zero can lead to sudden crash of a software/service that tries to parse a .wav file. The component is: ParseDsdiffHeaderConfig (dsdiff.c:282). The attack vector is: Maliciously crafted .wav file. The fixed version is: After commit https://github.com/dbry/WavPack/commit/4c0faba32fddbd0745cbfaf1e1aeb3da5d35b9fc.</s>,"<s>issue #43: catch zero channel count in DSF and DSDIFF files
</s>"," diff --git a/cli/dsdiff.c b/cli/dsdiff.c
index 6e28b95..1269289 100644
--- a/cli/dsdiff.c
+++ b/cli/dsdiff.c
@@ -204,6 +204,12 @@ int ParseDsdiffHeaderConfig (FILE *infile, char *infilename, char *fourcc, Wavpa
 
                             chansSpecified = (int)(dff_chunk_header.ckDataSize - sizeof (numChannels)) / 4;
 
+                            if (numChannels < chansSpecified || numChannels < 1) {
+                                error_line (""%s is not a valid .DFF file!"", infilename);
+                                free (prop_chunk);
+                                return WAVPACK_SOFT_ERROR;
+                            }
+
                             while (chansSpecified--) {
                                 if (!strncmp (cptr, ""SLFT"", 4) || !strncmp (cptr, ""MLFT"", 4))
                                     chanMask |= 0x1;
",0.0,,1.0,,0.0,tfidf
CVE-2019-1010315,CVE-2019-1010315/928e1339c8b80a5f5c5b4b23c5c6f047165ea528,https://github.com/dbry/WavPack/commit/928e1339c8b80a5f5c5b4b23c5c6f047165ea528,<s>WavPack 5.1 and earlier is affected by: CWE 369: Divide by Zero. The impact is: Divide by zero can lead to sudden crash of a software/service that tries to parse a .wav file. The component is: ParseDsdiffHeaderConfig (dsdiff.c:282). The attack vector is: Maliciously crafted .wav file. The fixed version is: After commit https://github.com/dbry/WavPack/commit/4c0faba32fddbd0745cbfaf1e1aeb3da5d35b9fc.</s>,"<s>fix a WAV header if user specified -i (to ignore length) and we can make it valid
</s>"," diff --git a/cli/wavpack.c b/cli/wavpack.c
index c47157d..ca8c50c 100644
--- a/cli/wavpack.c
+++ b/cli/wavpack.c
@@ -2016,7 +2016,39 @@ static int pack_file (char *infilename, char *outfilename, char *out2filename, c
                 DoReadFile (wv_file.file, block_buff, wv_file.first_block_size, &bcount) &&
                 bcount == wv_file.first_block_size && !strncmp (block_buff, ""wvpk"", 4)) {
 
+                    // If we got the RIFF header from the source file, we try to update it here if it's a simple
+                    // header (not RF64) and the audio data length is appropriate. Note that this means we're no
+                    // longer strictly lossless, but the user essentially told us the length in the header was
+                    // wrong, so we're fixing it.
+
+                    if (!(loc_config.qmode & (QMODE_NO_STORE_WRAPPER | QMODE_RAW_PCM)) && WavpackGetWrapperLocation (block_buff, NULL)) {
+                        uint32_t wrapper_size;
+                        unsigned char *wrapper_location = WavpackGetWrapperLocation (block_buff, &wrapper_size);
+                        int64_t data_size = WavpackGetSampleIndex64 (wpc) * WavpackGetNumChannels (wpc) * WavpackGetBytesPerSample (wpc);
+                        ChunkHeader chunk_header;
+
+                        memcpy (&chunk_header, wrapper_location, sizeof (ChunkHeader));
+
+                        if (data_size <= 0xff000000 && !strncmp (chunk_header.ckID, ""RIFF"", 4)) {
+                            chunk_header.ckSize = wrapper_size + data_size - 8;
+                            WavpackNativeToLittleEndian (&chunk_header, ChunkHeaderFormat);
+                            memcpy (wrapper_location, &chunk_header, sizeof (ChunkHeader));
+                            memcpy (&chunk_header, wrapper_location + wrapper_size - sizeof (ChunkHeader), sizeof (ChunkHeader));
+
+                            if (!strncmp (chunk_header.ckID, ""data"", 4)) {
+                                chunk_header.ckSize = data_size;
+                                WavpackNativeToLittleEndian (&chunk_header, ChunkHeaderFormat);
+                            }
+
+                            memcpy (wrapper_location + wrapper_size - sizeof (ChunkHeader), &chunk_header, sizeof (ChunkHeader));
+                            error_line (""updated RIFF header with actual size"");
+                        }
+                        else
+                            error_line (""non-RIFF header or size too big (%llx) for RIFF!!"", data_size);
+                    }
+
                     // this call will take care of the initial WavPack header and any RIFF header the library made
+                    // (and also make sure the block checksum is correct)
 
                     WavpackUpdateNumSamples (wpc, block_buff);
 
",0.0,,0.0,,0.0,tfidf
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2017-3523,CVE-2017-3523/7500e73f0738edff50cdd31b096b1b422d7a297c,https://github.com/mysql/mysql-connector-j/commit/7500e73f0738edff50cdd31b096b1b422d7a297c,"<s>Vulnerability in the MySQL Connectors component of Oracle MySQL (subcomponent: Connector/J). Supported versions that are affected are 5.1.40 and earlier. Difficult to exploit vulnerability allows low privileged attacker with network access via multiple protocols to compromise MySQL Connectors. While the vulnerability is in MySQL Connectors, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in takeover of MySQL Connectors. CVSS 3.0 Base Score 8.5 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:H/A:H).</s>","<s>Fix for Bug#70785 (17756825), MySQL Connector/J inconsistent init state for autocommit.
</s>"," diff --git a/src/com/mysql/jdbc/ConnectionPropertiesImpl.java b/src/com/mysql/jdbc/ConnectionPropertiesImpl.java
index ae8ea443..50c67d71 100644
--- a/src/com/mysql/jdbc/ConnectionPropertiesImpl.java
+++ b/src/com/mysql/jdbc/ConnectionPropertiesImpl.java
@@ -1,5 +1,5 @@
 /*
-  Copyright (c) 2002, 2016, Oracle and/or its affiliates. All rights reserved.
+  Copyright (c) 2002, 2017, Oracle and/or its affiliates. All rights reserved.
 
   The MySQL Connector/J is licensed under the terms of the GPLv2
   <http://www.gnu.org/licenses/old-licenses/gpl-2.0.html>, like most MySQL Connectors.
@@ -1767,7 +1767,10 @@ public class ConnectionPropertiesImpl implements Serializable, ConnectionPropert
      * @see com.mysql.jdbc.IConnectionProperties#getElideSetAutoCommits()
      */
     public boolean getElideSetAutoCommits() {
-        return this.elideSetAutoCommits.getValueAsBoolean();
+        // Server Bug#66884 (SERVER_STATUS is always initiated with SERVER_STATUS_AUTOCOMMIT=1) invalidates this feature.
+        return false;
+        // TODO Turn this feature back on as soon as the server bug is fixed. Consider making it version specific.
+        // return this.elideSetAutoCommits.getValueAsBoolean();
     }
 
     /*
",0.0,,0.0,,0.0,tfidf
CVE-2017-3523,CVE-2017-3523/e94bdbe2f2bdabdb73eb6f8e98914e015c4c8241,https://github.com/mysql/mysql-connector-j/commit/e94bdbe2f2bdabdb73eb6f8e98914e015c4c8241,"<s>Vulnerability in the MySQL Connectors component of Oracle MySQL (subcomponent: Connector/J). Supported versions that are affected are 5.1.40 and earlier. Difficult to exploit vulnerability allows low privileged attacker with network access via multiple protocols to compromise MySQL Connectors. While the vulnerability is in MySQL Connectors, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in takeover of MySQL Connectors. CVSS 3.0 Base Score 8.5 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:H/A:H).</s>","<s>Fix for Bug#81108 (23264511), FabricMySQLConnectionProxy.setShardTable method logic miss.
</s>"," diff --git a/src/com/mysql/fabric/jdbc/FabricMySQLConnectionProxy.java b/src/com/mysql/fabric/jdbc/FabricMySQLConnectionProxy.java
index f613df0c..e2de75ae 100644
--- a/src/com/mysql/fabric/jdbc/FabricMySQLConnectionProxy.java
+++ b/src/com/mysql/fabric/jdbc/FabricMySQLConnectionProxy.java
@@ -1,5 +1,5 @@
 /*
-  Copyright (c) 2013, 2016, Oracle and/or its affiliates. All rights reserved.
+  Copyright (c) 2013, 2017, Oracle and/or its affiliates. All rights reserved.
 
   The MySQL Connector/J is licensed under the terms of the GPLv2
   <http://www.gnu.org/licenses/old-licenses/gpl-2.0.html>, like most MySQL Connectors.
@@ -337,8 +337,8 @@ public class FabricMySQLConnectionProxy extends ConnectionPropertiesImpl impleme
             String db = this.database;
             if (shardTable.contains(""."")) {
                 String pair[] = shardTable.split(""\\."");
-                table = pair[0];
-                db = pair[1];
+                db = pair[0];
+                table = pair[1];
             }
             this.shardMapping = this.fabricConnection.getShardMapping(db, table);
             if (this.shardMapping == null) {
",0.0,,1.0,,0.0,tfidf
CVE-2017-3523,CVE-2017-3523/6189e718de5b6c6115aee45dd7a480081c129d68,https://github.com/mysql/mysql-connector-j/commit/6189e718de5b6c6115aee45dd7a480081c129d68,"<s>Vulnerability in the MySQL Connectors component of Oracle MySQL (subcomponent: Connector/J). Supported versions that are affected are 5.1.40 and earlier. Difficult to exploit vulnerability allows low privileged attacker with network access via multiple protocols to compromise MySQL Connectors. While the vulnerability is in MySQL Connectors, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in takeover of MySQL Connectors. CVSS 3.0 Base Score 8.5 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:H/A:H).</s>","<s>Fix for Bug#25438355, Improper automatic deserialization of binary data.
 Please enter the commit message for your changes. Lines starting
</s>"," diff --git a/src/com/mysql/jdbc/ResultSetImpl.java b/src/com/mysql/jdbc/ResultSetImpl.java
index d6cda597..44a6e2c2 100644
--- a/src/com/mysql/jdbc/ResultSetImpl.java
+++ b/src/com/mysql/jdbc/ResultSetImpl.java
@@ -1,5 +1,5 @@
 /*
-  Copyright (c) 2002, 2016, Oracle and/or its affiliates. All rights reserved.
+  Copyright (c) 2002, 2017, Oracle and/or its affiliates. All rights reserved.
 
   The MySQL Connector/J is licensed under the terms of the GPLv2
   <http://www.gnu.org/licenses/old-licenses/gpl-2.0.html>, like most MySQL Connectors.
@@ -3429,24 +3429,26 @@ public class ResultSetImpl implements ResultSetInternalMethods {
                         byte[] data = getBytes(columnIndex);
                         Object obj = data;
 
-                        if ((data != null) && (data.length >= 2)) {
-                            if ((data[0] == -84) && (data[1] == -19)) {
-                                // Serialized object?
-                                try {
-                                    ByteArrayInputStream bytesIn = new ByteArrayInputStream(data);
-                                    ObjectInputStream objIn = new ObjectInputStream(bytesIn);
-                                    obj = objIn.readObject();
-                                    objIn.close();
-                                    bytesIn.close();
-                                } catch (ClassNotFoundException cnfe) {
-                                    throw SQLError.createSQLException(Messages.getString(""ResultSet.Class_not_found___91"") + cnfe.toString()
-                                            + Messages.getString(""ResultSet._while_reading_serialized_object_92""), getExceptionInterceptor());
-                                } catch (IOException ex) {
-                                    obj = data; // not serialized?
+                        if (this.connection.getAutoDeserialize()) {
+                            if ((data != null) && (data.length >= 2)) {
+                                if ((data[0] == -84) && (data[1] == -19)) {
+                                    // Serialized object?
+                                    try {
+                                        ByteArrayInputStream bytesIn = new ByteArrayInputStream(data);
+                                        ObjectInputStream objIn = new ObjectInputStream(bytesIn);
+                                        obj = objIn.readObject();
+                                        objIn.close();
+                                        bytesIn.close();
+                                    } catch (ClassNotFoundException cnfe) {
+                                        throw SQLError.createSQLException(Messages.getString(""ResultSet.Class_not_found___91"") + cnfe.toString()
+                                                + Messages.getString(""ResultSet._while_reading_serialized_object_92""), getExceptionInterceptor());
+                                    } catch (IOException ex) {
+                                        obj = data; // not serialized?
+                                    }
                                 }
-                            }
 
-                            return obj.toString();
+                                return obj.toString();
+                            }
                         }
 
                         return extractStringFromNativeColumn(columnIndex, mysqlType);
",1.0,,0.0,,1.0,tfidf
CVE-2017-3523,CVE-2017-3523/b6394030cdcfcec75abffc85ef336a8aeec405c6,https://github.com/mysql/mysql-connector-j/commit/b6394030cdcfcec75abffc85ef336a8aeec405c6,"<s>Vulnerability in the MySQL Connectors component of Oracle MySQL (subcomponent: Connector/J). Supported versions that are affected are 5.1.40 and earlier. Difficult to exploit vulnerability allows low privileged attacker with network access via multiple protocols to compromise MySQL Connectors. While the vulnerability is in MySQL Connectors, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in takeover of MySQL Connectors. CVSS 3.0 Base Score 8.5 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:H/A:H).</s>","<s>Update to Bug#70785 (17756825) message in CHANGES.
</s>"," diff --git a/CHANGES b/CHANGES
index 1ac31faf..071b5eb2 100644
--- a/CHANGES
+++ b/CHANGES
@@ -5,6 +5,7 @@
   - Fix for Bug#25438355, Improper automatic deserialization of binary data.
 
   - Fix for Bug#70785 (17756825), MySQL Connector/J inconsistent init state for autocommit.
+    Property 'elideSetAutoCommits' is temporarily disabled due to Bug#66884. Defaults to 'false' until this bug is fixed.
 
   - Fix for Bug#75615 (21181249), Incorrect implementation of Connection.setNetworkTimeout().
 
",0.0,,0.0,,0.0,tfidf
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2018-1000409,CVE-2018-1000409/517da6ed389f0a606dd9bb8595bc79fc93f4331c,https://github.com/jenkinsci/jenkins/commit/517da6ed389f0a606dd9bb8595bc79fc93f4331c,"<s>A session fixation vulnerability exists in Jenkins 2.145 and earlier, LTS 2.138.1 and earlier in core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java that prevented Jenkins from invalidating the existing session and creating a new one when a user signed up for a new user account.</s>","<s>[SECURITY-1158]
</s>"," diff --git a/test/src/test/java/hudson/security/HudsonPrivateSecurityRealm2SEC1158Test.java b/test/src/test/java/hudson/security/HudsonPrivateSecurityRealm2SEC1158Test.java
new file mode 100644
index 0000000000..fca41a931d
--- /dev/null
+++ b/test/src/test/java/hudson/security/HudsonPrivateSecurityRealm2SEC1158Test.java
@@ -0,0 +1,73 @@
+/*
+ * The MIT License
+ *
+ * Copyright (c) 2015, CloudBees, Inc
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the ""Software""), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+package hudson.security;
+
+import com.gargoylesoftware.htmlunit.html.HtmlPage;
+import com.gargoylesoftware.htmlunit.util.Cookie;
+import hudson.security.pages.SignupPage;
+import org.junit.Rule;
+import org.junit.Test;
+import org.jvnet.hudson.test.Issue;
+import org.jvnet.hudson.test.JenkinsRule;
+
+import static org.hamcrest.Matchers.containsString;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotEquals;
+import static org.junit.Assert.assertThat;
+
+//TODO to be merged into HudsonPrivateSecurityRealm2Test after security release
+public class HudsonPrivateSecurityRealm2SEC1158Test {
+    
+    @Rule
+    public JenkinsRule rule = new JenkinsRule();
+    
+    @Test
+    @Issue(""SECURITY-1158"")
+    public void singupNoLongerVulnerableToSessionFixation() throws Exception {
+        HudsonPrivateSecurityRealm securityRealm = new HudsonPrivateSecurityRealm(true, false, null);
+        rule.jenkins.setSecurityRealm(securityRealm);
+        JenkinsRule.WebClient wc = rule.createWebClient();
+        
+        // to trigger the creation of a session
+        wc.goTo("""");
+        Cookie sessionBefore = wc.getCookieManager().getCookie(""JSESSIONID"");
+        String sessionIdBefore = sessionBefore.getValue();
+        
+        SignupPage signup = new SignupPage(wc.goTo(""signup""));
+        signup.enterUsername(""alice"");
+        signup.enterPassword(""alice"");
+        signup.enterFullName(""Alice User"");
+        signup.enterEmail(""alice@nowhere.com"");
+        HtmlPage success = signup.submit(rule);
+        assertThat(success.getElementById(""main-panel"").getTextContent(), containsString(""Success""));
+        assertThat(success.getAnchorByHref(""/jenkins/user/alice"").getTextContent(), containsString(""Alice User""));
+        
+        assertEquals(""Alice User"", securityRealm.getUser(""alice"").getDisplayName());
+        
+        Cookie sessionAfter = wc.getCookieManager().getCookie(""JSESSIONID"");
+        String sessionIdAfter = sessionAfter.getValue();
+        
+        assertNotEquals(sessionIdAfter, sessionIdBefore);
+    }
+}
",0.0,,0.0,,1.0,tfidf
CVE-2018-1000409,CVE-2018-1000409/01157a699f611ca7492e872103ac01526a982cf2,https://github.com/jenkinsci/jenkins/commit/01157a699f611ca7492e872103ac01526a982cf2,"<s>A session fixation vulnerability exists in Jenkins 2.145 and earlier, LTS 2.138.1 and earlier in core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java that prevented Jenkins from invalidating the existing session and creating a new one when a user signed up for a new user account.</s>","<s>[SECURITY-1128]
</s>"," diff --git a/core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java b/core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java
index 01b3233108..e877ee6291 100644
--- a/core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java
+++ b/core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java
@@ -475,8 +475,9 @@ public class HudsonPrivateSecurityRealm extends AbstractPasswordBasedSecurityRea
      * This is to map users under the security realm URL.
      * This in turn helps us set up the right navigation breadcrumb.
      */
+    @Restricted(NoExternalUse.class)
     public User getUser(String id) {
-        return User.getById(id, true);
+        return User.getById(id, User.ALLOW_USER_CREATION_VIA_URL && hasPermission(Jenkins.ADMINISTER));
     }
 
     // TODO
",1.0,,1.0,,0.0,tfidf
CVE-2018-1000409,CVE-2018-1000409/c3351d2e7c3edfee82b9470e9aa1168982296072,https://github.com/jenkinsci/jenkins/commit/c3351d2e7c3edfee82b9470e9aa1168982296072,"<s>A session fixation vulnerability exists in Jenkins 2.145 and earlier, LTS 2.138.1 and earlier in core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java that prevented Jenkins from invalidating the existing session and creating a new one when a user signed up for a new user account.</s>","<s>[SECURITY-1074]
</s>"," diff --git a/core/src/main/java/hudson/FilePath.java b/core/src/main/java/hudson/FilePath.java
index 8f112f1886..25db871436 100644
--- a/core/src/main/java/hudson/FilePath.java
+++ b/core/src/main/java/hudson/FilePath.java
@@ -79,6 +79,7 @@ import java.net.URL;
 import java.net.URLConnection;
 import java.nio.file.Files;
 import java.nio.file.InvalidPathException;
+import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Comparator;
@@ -2949,5 +2950,60 @@ public final class FilePath implements Serializable {
         return IOUtils.mkdirs(dir);
     }
 
+    /**
+     * Check if the relative child is really a descendant after symlink resolution if any.
+     *
+     * TODO un-restrict it in a weekly after the patch
+     */
+    @Restricted(NoExternalUse.class)
+    public boolean isDescendant(@Nonnull String potentialChildRelativePath) throws IOException, InterruptedException {
+        return act(new IsDescendant(potentialChildRelativePath));
+    }
+
+    private class IsDescendant extends SecureFileCallable<Boolean> {
+        private static final long serialVersionUID = 1L;
+        private String potentialChildRelativePath;
+
+        private IsDescendant(@Nonnull String potentialChildRelativePath){
+            this.potentialChildRelativePath = potentialChildRelativePath;
+        }
+
+        @Override
+        public Boolean invoke(@Nonnull File parentFile, @Nonnull VirtualChannel channel) throws IOException, InterruptedException {
+            if (new File(potentialChildRelativePath).isAbsolute()) {
+                throw new IllegalArgumentException(""Only a relative path is supported, the given path is absolute: "" + potentialChildRelativePath);
+            }
+
+            Path parent = parentFile.getAbsoluteFile().toPath().normalize();
+
+            String remainingPath = potentialChildRelativePath;
+            File currentFile = parentFile;
+            while (!remainingPath.isEmpty()) {
+                File directChild = this.getDirectChild(currentFile, remainingPath);
+                File childUsingFullPath = new File(currentFile, remainingPath);
+                remainingPath = childUsingFullPath.getAbsolutePath().substring(directChild.getAbsolutePath().length());
+                
+                File childFileSymbolic = Util.resolveSymlinkToFile(directChild);
+                if (childFileSymbolic == null) {
+                    currentFile = directChild;
+                } else {
+                    currentFile = childFileSymbolic;
+                }
+            }
+
+            //TODO could be refactored using Util#isDescendant(File, File) from 2.80+
+            Path child = currentFile.getAbsoluteFile().toPath().normalize();
+            return child.startsWith(parent);
+        }
+
+        private @CheckForNull File getDirectChild(File parentFile, String childPath){
+            File current = new File(parentFile, childPath);
+            while (current != null && !parentFile.equals(current.getParentFile())) {
+                current = current.getParentFile();
+            }
+            return current;
+        }
+    }
+
     private static final SoloFilePathFilter UNRESTRICTED = SoloFilePathFilter.wrap(FilePathFilter.UNRESTRICTED);
 }
",0.0,,0.0,,0.0,tfidf
CVE-2018-1000409,CVE-2018-1000409/fd5f5be0304c6bf1918892b81e2efb6b6d09c521,https://github.com/jenkinsci/jenkins/commit/fd5f5be0304c6bf1918892b81e2efb6b6d09c521,"<s>A session fixation vulnerability exists in Jenkins 2.145 and earlier, LTS 2.138.1 and earlier in core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java that prevented Jenkins from invalidating the existing session and creating a new one when a user signed up for a new user account.</s>","<s>[SECURITY-867]
</s>"," diff --git a/test/src/test/java/jenkins/security/stapler/Security867Test.java b/test/src/test/java/jenkins/security/stapler/Security867Test.java
new file mode 100644
index 0000000000..8527cac809
--- /dev/null
+++ b/test/src/test/java/jenkins/security/stapler/Security867Test.java
@@ -0,0 +1,167 @@
+/*
+ * The MIT License
+ *
+ * Copyright (c) 2018, CloudBees, Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the ""Software""), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+package jenkins.security.stapler;
+
+import com.gargoylesoftware.htmlunit.Page;
+import hudson.model.RootAction;
+import org.junit.Rule;
+import org.junit.Test;
+import org.jvnet.hudson.test.Issue;
+import org.jvnet.hudson.test.JenkinsRule;
+import org.jvnet.hudson.test.TestExtension;
+
+import javax.annotation.CheckForNull;
+
+import static org.hamcrest.Matchers.allOf;
+import static org.hamcrest.Matchers.containsString;
+import static org.hamcrest.Matchers.equalTo;
+import static org.hamcrest.Matchers.not;
+import static org.junit.Assert.assertThat;
+
+public class Security867Test {
+    @Rule
+    public JenkinsRule j = new JenkinsRule();
+    
+    @Test
+    @Issue(""SECURITY-867"")
+    public void folderTraversalPrevented_avoidStealingSecretInView() throws Exception {
+        JenkinsRule.WebClient wc = j.createWebClient();
+        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
+        
+        String publicContent = ""Test OK"";
+        String secretContent = ""s3cr3t"";
+        
+        // to validate the attack reproduction you can disable the protection
+        // Facet.ALLOW_VIEW_NAME_PATH_TRAVERSAL = true;
+        
+        // regular behavior
+        assertThat(getContentAndCheck200(wc, ""rootAction1/public""), containsString(publicContent));
+        
+        // malicious usage prevention
+        
+        // looking for /jenkins/security/stapler/Security867Test/NotRootAction2/secret
+        assertThat(getContent(wc, ""rootAction1/%2fjenkins%2fsecurity%2fstapler%2fSecurity867Test%2fNotRootAction2%2fsecret""), 
+                not(containsString(secretContent)));
+            
+        // looking for /jenkins\security\stapler\Security867Test\NotRootAction2\secret => 
+        // absolute path with backslash (initial forward one is required for absolute)
+        assertThat(getContent(wc,""rootAction1/%2fjenkins%5csecurity%5cstapler%5cSecurity867Test%5cNotRootAction2%5csecret""), 
+                not(containsString(secretContent)));
+            
+        // looking for ../NotRootAction2/secret => relative path
+        assertThat(getContent(wc,""rootAction1/%2e%2e%2fNotRootAction2%2fsecret""), 
+                not(containsString(secretContent)));
+            
+        // looking for ..\NotRootAction2\secret => relative path without forward slash
+        assertThat(getContent(wc, ""rootAction1/%2e%2e%5cNotRootAction2%5csecret""),
+                not(containsString(secretContent)));
+    }
+    
+    private String getContent(JenkinsRule.WebClient wc, String url) throws Exception {
+        Page page = wc.goTo(url, null);
+        return page.getWebResponse().getContentAsString();
+    }
+    
+    private String getContentAndCheck200(JenkinsRule.WebClient wc, String url) throws Exception {
+        Page page = wc.goTo(url, null);
+        assertThat(page.getWebResponse().getStatusCode(), equalTo(200));
+        return page.getWebResponse().getContentAsString();
+    }
+    
+    @Test
+    @Issue(""SECURITY-867"")
+    public void folderTraversalPrevented_avoidStealingSecretFromDifferentObject() throws Exception {
+        JenkinsRule.WebClient wc = j.createWebClient();
+        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
+        
+        String action1Config = j.jenkins.getExtensionList(RootAction.class).get(RootAction1.class).getMyConfig();
+        String action3Config = j.jenkins.getExtensionList(RootAction.class).get(RootAction3.class).getMyConfig();
+        
+        // to validate the attack reproduction you can disable the protection
+        // Facet.ALLOW_VIEW_NAME_PATH_TRAVERSAL = true;
+        
+        // regular behavior, the c",0.0,,0.0,,0.0,tfidf
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2021-37750,CVE-2021-37750/78fd66926c4be5910c1e21d9e553dfb792ae822a,https://github.com/krb5/krb5/commit/78fd66926c4be5910c1e21d9e553dfb792ae822a,<s>The Key Distribution Center (KDC) in MIT Kerberos 5 (aka krb5) before 1.18.5 and 1.19.x before 1.19.3 has a NULL pointer dereference in kdc/do_tgs_req.c via a FAST inner body that lacks a server field.</s>,"<s>Implement replaced_reply_key input to issue_pac()
If a kdcpreauth module fully replaces the reply key during an AS
request, pass the reply key as the replaced_reply_key input to
issue_pac().  In Windows environments this is used to provide an NTLM
hash to the LSA when the client cannot be presumed to have a password
to derive it from.
To test this, add a fake PAC_CREDENTIALS_INFO buffer to the PAC in the
test KDB module, and alter adata.c to display the set of PAC buffer
types when a PAC is present.
ticket: 9050 (new)
</s>"," diff --git a/src/kdc/do_tgs_req.c b/src/kdc/do_tgs_req.c
index b1a190f5c..f90c7cf0f 100644
--- a/src/kdc/do_tgs_req.c
+++ b/src/kdc/do_tgs_req.c
@@ -591,7 +591,7 @@ process_tgs_req(krb5_kdc_req *request, krb5_data *pkt,
                               subject_server, local_tgt, &local_tgt_key,
                               subkey != NULL ? subkey :
                               header_ticket->enc_part2->session,
-                              encrypting_key, subject_key, pkt, request,
+                              encrypting_key, subject_key, NULL, pkt, request,
                               altcprinc, subject_pac, subject_tkt,
                               &auth_indicators, &enc_tkt_reply);
     if (errcode) {
",0.0,,0.0,,0.0,tfidf
CVE-2021-37750,CVE-2021-37750/a06945b4ec267e8b80e5e8c95edd89930ff12103,https://github.com/krb5/krb5/commit/a06945b4ec267e8b80e5e8c95edd89930ff12103,<s>The Key Distribution Center (KDC) in MIT Kerberos 5 (aka krb5) before 1.18.5 and 1.19.x before 1.19.3 has a NULL pointer dereference in kdc/do_tgs_req.c via a FAST inner body that lacks a server field.</s>,"<s>Fix many unlikely memory leaks
These are on error paths and often require allocation failures, so are
unlikely to be issues in practice.  Reported by Coverity and cppcheck.
</s>"," diff --git a/src/kdc/do_tgs_req.c b/src/kdc/do_tgs_req.c
index 6d244ffd4..582e497cc 100644
--- a/src/kdc/do_tgs_req.c
+++ b/src/kdc/do_tgs_req.c
@@ -162,17 +162,14 @@ process_tgs_req(krb5_kdc_req *request, krb5_data *pkt,
str, fetch, }
no

    errcode = kdc_make_rstate(kdc_active_realm, &state);
-entry(context if (errcode !=0) {
-_free_keytab_entry krb5_free_kdc_req(kdc_context, request);
-   zapfree(password return errcode;
-
   }
+rb5_ if (errcode != 0)
+salt);
    goto cleanup;
_
_data_cont /* Initialize audit state. */
     errcode = kau_init_kdc_req(kdc_context, request, from, &au_state);
-    if (errcode) {
-        krb5_free_kdc_req(kdc_context, request);
-        return errcode;
-    }
+    if (errcode)
+        goto cleanup;
+
     /* Seed the audit trail with the request ID and basic information. */
     kau_tgs_req(kdc_context, TRUE, au_state);
 
@@ -733,11 +730,13 @@ cleanup:
     if (errcode)
         emsg = krb5_get_error_message (kdc_context, errcode);
 
-    au_state->status = status;
-    if (!errcode)
-        au_state->reply = &reply;
-    kau_tgs_req(kdc_context, errcode ? FALSE : TRUE, au_state);
-    kau_free_kdc_req(au_state);
+    if (au_state != NULL) {
+        au_state->status = status;
+        if (!errcode)
+            au_state->reply = &reply;
+        kau_tgs_req(kdc_context, errcode ? FALSE : TRUE, au_state);
+        kau_free_kdc_req(au_state);
+    }
 
     log_tgs_req(kdc_context, from, request, &reply, cprinc,
                 sprinc, altcprinc, authtime,
@@ -747,7 +746,7 @@ cleanup:
         emsg = NULL;
     }
 
-    if (errcode) {
+    if (errcode && state != NULL) {
         int got_err = 0;
         if (status == 0) {
             status = krb5_get_error_message (kdc_context, errcode);
",0.0,,0.0,,0.0,tfidf
CVE-2021-37750,CVE-2021-37750/d775c95af7606a51bf79547a94fa52ddd1cb7f49,https://github.com/krb5/krb5/commit/d775c95af7606a51bf79547a94fa52ddd1cb7f49,<s>The Key Distribution Center (KDC) in MIT Kerberos 5 (aka krb5) before 1.18.5 and 1.19.x before 1.19.3 has a NULL pointer dereference in kdc/do_tgs_req.c via a FAST inner body that lacks a server field.</s>,"<s>Fix KDC null deref on TGS inner body null server
After the KDC decodes a FAST inner body, it does not check for a null
server.  Prior to commit 39548a5b17bbda9eeb63625a201cfd19b9de1c5b this
would typically result in an error from krb5_unparse_name(), but with
the addition of get_local_tgt() it results in a null dereference.  Add
a null check.
Reported by Joseph Sutton of Catalyst.
CVE-2021-37750:
In MIT krb5 releases 1.14 and later, an authenticated attacker can
cause a null dereference in the KDC by sending a FAST TGS request with
no server field.
ticket: 9008 (new)
tags: pullup
target_version: 1.19-next
target_version: 1.18-next
</s>"," diff --git a/src/kdc/do_tgs_req.c b/src/kdc/do_tgs_req.c
index 582e497cc..32dc65fa8 100644
--- a/src/kdc/do_tgs_req.c
+++ b/src/kdc/do_tgs_req.c
@@ -204,6 +204,11 @@ process_tgs_req(krb5_kdc_req *request, krb5_data *pkt,
         status = ""FIND_FAST"";
         goto cleanup;
     }
+    if (sprinc == NULL) {
+        status = ""NULL_SERVER"";
+        errcode = KRB5KDC_ERR_S_PRINCIPAL_UNKNOWN;
+        goto cleanup;
+    }
 
     errcode = get_local_tgt(kdc_context, &sprinc->realm, header_server,
                             &local_tgt, &local_tgt_storage, &local_tgt_key);
",1.0,,1.0,,1.0,tfidf
CVE-2021-37750,CVE-2021-37750/9544229ff3b6793cad39ce7d8dd2467ec2cf4f45,https://github.com/krb5/krb5/commit/9544229ff3b6793cad39ce7d8dd2467ec2cf4f45,<s>The Key Distribution Center (KDC) in MIT Kerberos 5 (aka krb5) before 1.18.5 and 1.19.x before 1.19.3 has a NULL pointer dereference in kdc/do_tgs_req.c via a FAST inner body that lacks a server field.</s>,"<s>Issue an error from KDC on S4U2Self failures
Commit 3b163eed1cf1f55dd4a7bc6d6fffc34f55695b00 mistakenly separated
the call to kdc_process_s4u2self_req() from its error check, causing
the KDC to ignore S4U2Self padata with bad checksums.  Restore the
error check so that the KDC replies with an error as intended.
[ghudson@mit.edu: removed old error check later on in the code;
rewrote commit message]
ticket: 9038 (new)
</s>"," diff --git a/src/kdc/do_tgs_req.c b/src/kdc/do_tgs_req.c
index 32dc65fa8..45837fbe0 100644
--- a/src/kdc/do_tgs_req.c
+++ b/src/kdc/do_tgs_req.c
@@ -276,6 +276,8 @@ process_tgs_req(krb5_kdc_req *request, krb5_data *pkt,
         au_state->status = status;
         kau_s4u2self(kdc_context, errcode ? FALSE : TRUE, au_state);
         au_state->s4u2self_user = NULL;
+        if (errcode)
+            goto cleanup;
     }
 
     /* For user-to-user and S4U2Proxy requests, decrypt the second ticket. */
@@ -295,9 +297,6 @@ process_tgs_req(krb5_kdc_req *request, krb5_data *pkt,
         goto cleanup;
     }
 
-    if (errcode)
-        goto cleanup;
-
     if (s4u_x509_user != NULL && client == NULL) {
         /*
          * For an S4U2Self referral request (the requesting service is
",0.0,,0.0,,0.0,tfidf
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2022-0153,CVE-2022-0153/6aca30e10b4181534f73f96d6e2ebeb45ec15069,https://github.com/forkcms/forkcms/commit/6aca30e10b4181534f73f96d6e2ebeb45ec15069,<s>SQL Injection in GitHub repository forkcms/forkcms prior to 5.11.1.</s>,"<s>Prevent sql injection through the ids of the blog comments
</s>"," diff --git a/src/Backend/Modules/Blog/Engine/Model.php b/src/Backend/Modules/Blog/Engine/Model.php
index 6ee1dce52..129cfdf55 100644
--- a/src/Backend/Modules/Blog/Engine/Model.php
+++ b/src/Backend/Modules/Blog/Engine/Model.php
@@ -501,7 +501,7 @@ class Model
             'SELECT *
              FROM blog_comments AS i
              WHERE i.id IN (' . implode(', ', array_fill(0, count($ids), '?')) . ')',
-            $ids
+            array_map('intval', $ids)
         );
     }
 
",0.0,,0.0,,0.0,none
CVE-2022-0153,CVE-2022-0153/0226a23ae42f10827bf33490026c49ddc6d8d82b,https://github.com/forkcms/forkcms/commit/0226a23ae42f10827bf33490026c49ddc6d8d82b,<s>SQL Injection in GitHub repository forkcms/forkcms prior to 5.11.1.</s>,"<s>Prevent sql injection through the ids of bulk deleting tags
</s>"," diff --git a/src/Backend/Modules/Tags/Engine/Model.php b/src/Backend/Modules/Tags/Engine/Model.php
index 6be8d8f31..d9d088f66 100644
--- a/src/Backend/Modules/Tags/Engine/Model.php
+++ b/src/Backend/Modules/Tags/Engine/Model.php
@@ -28,8 +28,8 @@ class Model
         // get database
         $database = BackendModel::getContainer()->get('database');
 
-        // make sure $ids is an array
-        $ids = (array) $ids;
+        // make sure $ids is an array of integers
+        $ids = array_map('intval', (array) $ids);
 
         // delete tags
         $database->delete('tags', 'id IN (' . implode(',', $ids) . ')');
",0.0,,0.0,,0.0,none
CVE-2022-0153,CVE-2022-0153/3710cbca3f995a9542cbe4547a6292bf4e02d816,https://github.com/forkcms/forkcms/commit/3710cbca3f995a9542cbe4547a6292bf4e02d816,<s>SQL Injection in GitHub repository forkcms/forkcms prior to 5.11.1.</s>,"<s>Fix sql injection through the type and language parameter of the translation export
</s>"," diff --git a/src/Backend/Modules/Locale/Actions/Export.php b/src/Backend/Modules/Locale/Actions/Export.php
index c99a8592a..8f5a00a96 100644
--- a/src/Backend/Modules/Locale/Actions/Export.php
+++ b/src/Backend/Modules/Locale/Actions/Export.php
@@ -5,6 +5,7 @@ namespace Backend\Modules\Locale\Actions;
 use Backend\Core\Engine\Base\ActionIndex as BackendBaseActionIndex;
 use Backend\Core\Engine\Model as BackendModel;
 use Backend\Core\Language\Language as BL;
+use Backend\Core\Language\Locale;
 use Backend\Modules\Locale\Engine\Model as BackendLocaleModel;
 use Symfony\Component\HttpFoundation\Response;
 
@@ -47,7 +48,7 @@ class Export extends BackendBaseActionIndex
             // create an array for the languages, surrounded by quotes (example: 'en')
             $languages = [];
             foreach ($this->filter['language'] as $key => $val) {
-                $languages[$key] = '\'' . $val . '\'';
+                $languages[$key] = '\'' . Locale::fromString($val) . '\'';
             }
 
             $query .= ' AND l.language IN (' . implode(',', $languages) . ')';
@@ -70,7 +71,9 @@ class Export extends BackendBaseActionIndex
             // create an array for the types, surrounded by quotes (example: 'lbl')
             $types = [];
             foreach ($this->filter['type'] as $key => $val) {
-                $types[$key] = '\'' . $val . '\'';
+                if (in_array($val, BackendLocaleModel::TYPES)) {
+                    $types[$key] = '\'' . $val . '\'';
+                }
             }
 
             $query .= ' AND l.type IN (' . implode(',', $types) . ')';
",1.0,,1.0,,0.0,none
CVE-2022-0153,CVE-2022-0153/7a12046a67ae5d8cf04face3ee75e55f03a1a608,https://github.com/forkcms/forkcms/commit/7a12046a67ae5d8cf04face3ee75e55f03a1a608,<s>SQL Injection in GitHub repository forkcms/forkcms prior to 5.11.1.</s>,"<s>Prevent sql injection through the ids of the action
</s>"," diff --git a/src/Backend/Modules/FormBuilder/Engine/Model.php b/src/Backend/Modules/FormBuilder/Engine/Model.php
index 6a1354352..6028b7607 100644
--- a/src/Backend/Modules/FormBuilder/Engine/Model.php
+++ b/src/Backend/Modules/FormBuilder/Engine/Model.php
@@ -152,6 +152,7 @@ class Model
     public static function deleteData(array $ids): void
     {
         $database = BackendModel::getContainer()->get('database');
+        $ids = array_map('intval', $ids);
 
         $database->delete('forms_data', 'id IN(' . implode(',', $ids) . ')');
         $database->delete('forms_data_fields', 'data_id IN(' . implode(',', $ids) . ')');
",0.0,,0.0,,1.0,none
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2020-19497,CVE-2020-19497/5fa49ef9fc4368fe3d19b5fdaa36d8fa5e7f4606,https://github.com/tbeu/matio/commit/5fa49ef9fc4368fe3d19b5fdaa36d8fa5e7f4606,"<s>Integer overflow vulnerability in Mat_VarReadNextInfo5 in mat5.c in tbeu matio (aka MAT File I/O Library) 1.5.17, allows attackers to cause a Denial of Service or possibly other unspecified impacts.</s>","<s>Fix integer addition overflow
As reported by https://github.com/tbeu/matio/issues/121
</s>"," diff --git a/src/mat5.c b/src/mat5.c
index abdb351..78e2f4f 100644
--- a/src/mat5.c
+++ b/src/mat5.c
@@ -1009,9 +1009,16 @@ ReadNextCell( mat_t *mat, matvar_t *matvar )
                     if ( uncomp_buf[0] == MAT_T_INT8 ) {    /* Name not in tag */
                         mat_uint32_t len = uncomp_buf[1];
 
-                        if ( len % 8 > 0 )
-                            len = len+(8-(len % 8));
-                        cells[i]->name = (char*)malloc(len+1);
+                        if ( len % 8 > 0 ) {
+                            if ( len < UINT32_MAX - 8 + (len % 8) )
+                              len = len + 8 - (len % 8);
+                            else {
+                                Mat_VarFree(cells[i]);
+                                cells[i] = NULL;
+                                break;
+                            }
+                        }
+                        cells[i]->name = (char*)malloc(len + 1);
                         nbytes -= len;
                         if ( NULL != cells[i]->name ) {
                             /* Variable name */
@@ -1079,7 +1086,8 @@ ReadNextCell( mat_t *mat, matvar_t *matvar )
         mat_uint32_t array_flags;
 
         for ( i = 0; i < nelems; i++ ) {
-            int cell_bytes_read,name_len;
+            int cell_bytes_read;
+            mat_uint32_t name_len;
             cells[i] = Mat_VarCalloc();
             if ( !cells[i] ) {
                 Mat_Critical(""Couldn't allocate memory for cell %"" SIZE_T_FMTSTR, i);
@@ -1153,7 +1161,13 @@ ReadNextCell( mat_t *mat, matvar_t *matvar )
                 if ( buf[0] == MAT_T_INT8 ) {    /* Name not in tag */
                     name_len = buf[1];
                     if ( name_len % 8 > 0 )
-                        name_len = name_len+(8-(name_len % 8));
+                        if ( name_len < UINT32_MAX - 8 + (name_len % 8) )
+                            name_len = name_len + 8 - (name_len % 8);
+                        else {
+                            Mat_VarFree(cells[i]);
+                            cells[i] = NULL;
+                            break;
+                        }
                     nBytes -= name_len;
                     (void)fseek((FILE*)mat->fp,name_len,SEEK_CUR);
                 }
@@ -4872,8 +4886,13 @@ Mat_VarReadNextInfo5( mat_t *mat )
 
                     if ( len % 8 == 0 )
                         len_pad = len;
-                    else
+                    else if ( len < UINT32_MAX - 8 + (len % 8) )
                         len_pad = len + 8 - (len % 8);
+                    else {
+                        Mat_VarFree(matvar);
+                        matvar = NULL;
+                        break;
+                    }
                     matvar->name = (char*)malloc(len_pad + 1);
                     if ( NULL != matvar->name ) {
                         /* Variable name */
@@ -4974,8 +4993,14 @@ Mat_VarReadNextInfo5( mat_t *mat )
                     len = buf[1];
                 if ( len % 8 == 0 )
                     len_pad = len;
-                else
+                else if ( len < UINT32_MAX - 8 + (len % 8) )
                     len_pad = len + 8 - (len % 8);
+                else {
+                    Mat_VarFree(matvar);
+                    matvar = NULL;
+                    (void)fseek((FILE*)mat->fp, fpos, SEEK_SET);
+                    break;
+                }
                 matvar->name = (char*)malloc(len_pad + 1);
                 if ( NULL != matvar->name ) {
                     readresult = fread(matvar->name, 1, len_pad, (FILE*)mat->fp);
",1.0,,1.0,,1.0,none
CVE-2020-19497,CVE-2020-19497/d616904ad41f71a394780bda76f9585485d854a4,https://github.com/tbeu/matio/commit/d616904ad41f71a394780bda76f9585485d854a4,"<s>Integer overflow vulnerability in Mat_VarReadNextInfo5 in mat5.c in tbeu matio (aka MAT File I/O Library) 1.5.17, allows attackers to cause a Denial of Service or possibly other unspecified impacts.</s>","<s>Avoid stack-overflow
As reported by https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=19035
</s>"," diff --git a/src/mat5.c b/src/mat5.c
index 5e3464e..ae76074 100644
--- a/src/mat5.c
+++ b/src/mat5.c
@@ -1663,8 +1663,18 @@ ReadNextFunctionHandle(mat_t *mat, matvar_t *matvar)
     if ( matvar->data != NULL ) {
         size_t i;
         matvar_t **functions = (matvar_t**)matvar->data;
-        for ( i = 0; i < nelems; i++ )
+        for ( i = 0; i < nelems; i++ ) {
             functions[i] = Mat_VarReadNextInfo(mat);
+            err = NULL == functions[i];
+            if ( err )
+                break;
+        }
+        if ( err ) {
+            free(matvar->data);
+            matvar->data = NULL;
+            matvar->data_size = 0;
+            matvar->nbytes    = 0;
+        }
     } else {
         matvar->data_size = 0;
         matvar->nbytes    = 0;
",0.0,,0.0,,0.0,none
CVE-2020-19497,CVE-2020-19497/3767126016f6ded5f74b321dd5a1796291ffc481,https://github.com/tbeu/matio/commit/3767126016f6ded5f74b321dd5a1796291ffc481,"<s>Integer overflow vulnerability in Mat_VarReadNextInfo5 in mat5.c in tbeu matio (aka MAT File I/O Library) 1.5.17, allows attackers to cause a Denial of Service or possibly other unspecified impacts.</s>","<s>Avoid empty instruction
</s>"," diff --git a/src/mat5.c b/src/mat5.c
index f55998d..1e4d334 100644
--- a/src/mat5.c
+++ b/src/mat5.c
@@ -1631,7 +1631,7 @@ ReadNextFunctionHandle(mat_t *mat, matvar_t *matvar)
     matvar->data = malloc(matvar->nbytes);
     if ( matvar->data != NULL ) {
         size_t i;
-        matvar_t **functions = (matvar_t**)matvar->data;;
+        matvar_t **functions = (matvar_t**)matvar->data;
         for ( i = 0; i < nelems; i++ )
             functions[i] = Mat_VarReadNextInfo(mat);
     } else {
",0.0,,0.0,,0.0,none
CVE-2020-19497,CVE-2020-19497/69f7141f5d47eae33ecdd8e88ca0b50e25ce883a,https://github.com/tbeu/matio/commit/69f7141f5d47eae33ecdd8e88ca0b50e25ce883a,"<s>Integer overflow vulnerability in Mat_VarReadNextInfo5 in mat5.c in tbeu matio (aka MAT File I/O Library) 1.5.17, allows attackers to cause a Denial of Service or possibly other unspecified impacts.</s>","<s>Fix uninitialized variable
As reported by https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=16834
</s>"," diff --git a/src/mat4.c b/src/mat4.c
index a786c21..601a3d6 100644
--- a/src/mat4.c
+++ b/src/mat4.c
@@ -865,7 +865,7 @@ Mat_VarReadNextInfo4(mat_t *mat)
     }
 
     matvar->rank = 2;
-    matvar->dims = (size_t*)malloc(2*sizeof(*matvar->dims));
+    matvar->dims = (size_t*)calloc(2, sizeof(*matvar->dims));
     if ( NULL == matvar->dims ) {
         Mat_VarFree(matvar);
         return NULL;
",0.0,,0.0,,0.0,none
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2019-16237,CVE-2019-16237/0968da1ff76e7443c2590f4182087bb501d9c8f5,https://github.com/dino/dino/commit/0968da1ff76e7443c2590f4182087bb501d9c8f5,<s>Dino before 2019-09-10 does not properly check the source of an MAM message in module/xep/0313_message_archive_management.vala.</s>,"<s>Only notify on last MAM message, only if not read
fixes #293
</s>"," diff --git a/xmpp-vala/src/module/xep/0313_message_archive_management.vala b/xmpp-vala/src/module/xep/0313_message_archive_management.vala
index 343a5fbd..00f8f99b 100644
--- a/xmpp-vala/src/module/xep/0313_message_archive_management.vala
+++ b/xmpp-vala/src/module/xep/0313_message_archive_management.vala
@@ -14,7 +14,8 @@ public class Module : XmppStreamModule {
 
     private ReceivedPipelineListener received_pipeline_listener = new ReceivedPipelineListener();
 
-    public void query_archive(XmppStream stream, string? jid, DateTime? start, DateTime? end) {
+    public delegate void OnFinished(XmppStream stream);
+    public void query_archive(XmppStream stream, string? jid, DateTime? start, DateTime? end, owned OnFinished? on_finished = null) {
         if (stream.get_flag(Flag.IDENTITY) == null) return;
 
         DataForms.DataForm data_form = new DataForms.DataForm();
@@ -38,7 +39,7 @@ public class Module : XmppStreamModule {
         }
         StanzaNode query_node = new StanzaNode.build(""query"", NS_VER(stream)).add_self_xmlns().put_node(data_form.get_submit_node());
         Iq.Stanza iq = new Iq.Stanza.set(query_node);
-        stream.get_module(Iq.Module.IDENTITY).send_iq(stream, iq, page_through_results);
+        stream.get_module(Iq.Module.IDENTITY).send_iq(stream, iq, (stream, iq) => { page_through_results(stream, iq, on_finished); });
     }
 
     public override void attach(XmppStream stream) {
@@ -53,10 +54,11 @@ public class Module : XmppStreamModule {
     public override string get_ns() { return NS_URI; }
     public override string get_id() { return IDENTITY.id; }
 
-    private static void page_through_results(XmppStream stream, Iq.Stanza iq) {
+    private static void page_through_results(XmppStream stream, Iq.Stanza iq, owned OnFinished? on_finished = null) {
         string? last = iq.stanza.get_deep_string_content(NS_VER(stream) + "":fin"", ""http://jabber.org/protocol/rsm"" + "":set"", ""last"");
         if (last == null) {
             stream.get_flag(Flag.IDENTITY).cought_up = true;
+            if (on_finished != null) on_finished(stream);
             return;
         }
 
@@ -67,7 +69,7 @@ public class Module : XmppStreamModule {
                     )
                 )
             );
-        stream.get_module(Iq.Module.IDENTITY).send_iq(stream, paging_iq, page_through_results);
+        stream.get_module(Iq.Module.IDENTITY).send_iq(stream, paging_iq, (stream, iq) => { page_through_results(stream, iq, on_finished); });
     }
 
     private void query_availability(XmppStream stream) {
",0.0,,0.0,,0.0,lime
CVE-2019-16237,CVE-2019-16237/fb36ea055301b6db513a31acde30f315e2c0fd68,https://github.com/dino/dino/commit/fb36ea055301b6db513a31acde30f315e2c0fd68,<s>Dino before 2019-09-10 does not properly check the source of an MAM message in module/xep/0313_message_archive_management.vala.</s>,"<s>Message Archive Management
</s>"," diff --git a/xmpp-vala/src/module/xep/0313_message_archive_management.vala b/xmpp-vala/src/module/xep/0313_message_archive_management.vala
new file mode 100644
index 00000000..522f6dca
--- /dev/null
+++ b/xmpp-vala/src/module/xep/0313_message_archive_management.vala
@@ -0,0 +1,126 @@
+using Xmpp.Core;
+
+namespace Xmpp.Xep.MessageArchiveManagement {
+
+public const string NS_URI = ""urn:xmpp:mam:2"";
+public const string NS_URI_1 = ""urn:xmpp:mam:1"";
+
+public class Module : XmppStreamModule {
+    public static ModuleIdentity<Module> IDENTITY = new ModuleIdentity<Module>(NS_URI, ""0313_message_archive_management"");
+
+    public signal void feature_available(XmppStream stream);
+
+    public void query_archive(XmppStream stream, string? jid, DateTime? start, DateTime? end) {
+        if (stream.get_flag(Flag.IDENTITY) == null) return;
+
+        DataForms.DataForm data_form = new DataForms.DataForm();
+        DataForms.DataForm.HiddenField form_type_field = new DataForms.DataForm.HiddenField() { var=""FORM_TYPE"" };
+        form_type_field.set_value_string(NS_VER(stream));
+        data_form.add_field(form_type_field);
+        if (jid != null) {
+            DataForms.DataForm.Field field = new DataForms.DataForm.Field() { var=""with"" };
+            field.set_value_string(jid);
+            data_form.add_field(field);
+        }
+        if (start != null) {
+            DataForms.DataForm.Field field = new DataForms.DataForm.Field() { var=""start"" };
+            field.set_value_string(DateTimeProfiles.to_datetime(start));
+            data_form.add_field(field);
+        }
+        if (end != null) {
+            DataForms.DataForm.Field field = new DataForms.DataForm.Field() { var=""end"" };
+            field.set_value_string(DateTimeProfiles.to_datetime(end));
+            data_form.add_field(field);
+        }
+        StanzaNode query_node = new StanzaNode.build(""query"", NS_VER(stream)).add_self_xmlns().put_node(data_form.get_submit_node());
+        Iq.Stanza iq = new Iq.Stanza.set(query_node);
+        stream.get_module(Iq.Module.IDENTITY).send_iq(stream, iq, page_through_results);
+    }
+
+    public override void attach(XmppStream stream) {
+        stream.get_module(Message.Module.IDENTITY).pre_received_message.connect(on_pre_received_message);
+        stream.stream_negotiated.connect(query_availability);
+    }
+
+    public override void detach(XmppStream stream) { }
+
+    public override string get_ns() { return NS_URI; }
+    public override string get_id() { return IDENTITY.id; }
+
+    private void on_pre_received_message(XmppStream stream, Message.Stanza message) {
+//        if (message.from != stream.remote_name) return;
+        if (stream.get_flag(Flag.IDENTITY) == null) return;
+
+        StanzaNode? message_node = message.stanza.get_deep_subnode(NS_VER(stream) + "":result"", ""urn:xmpp:forward:0:forwarded"", Message.NS_URI + "":message"");
+        if (message_node != null) {
+            StanzaNode? forward_node = message.stanza.get_deep_subnode(NS_VER(stream) + "":result"", ""urn:xmpp:forward:0:forwarded"", DelayedDelivery.NS_URI + "":delay"");
+            DateTime? datetime = DelayedDelivery.Module.get_time_for_node(forward_node);
+            message.add_flag(new MessageFlag(datetime));
+
+            message.stanza = message_node;
+            message.rerun_parsing = true;
+        }
+    }
+
+    private static void page_through_results(XmppStream stream, Iq.Stanza iq) {
+        string? last = iq.stanza.get_deep_string_content(NS_VER(stream) + "":fin"", ""http://jabber.org/protocol/rsm"" + "":set"", ""last"");
+        if (last == null) {
+            stream.get_flag(Flag.IDENTITY).cought_up = true;
+            return;
+        }
+
+        Iq.Stanza paging_iq = new Iq.Stanza.set(
+                new StanzaNode.build(""query"", NS_VER(stream)).add_self_xmlns().put_node(
+                    new StanzaNode.build(""set"", ""http://jabber.org/protocol/rsm"").add_self_xmlns().put_node(
+                        new StanzaNode.build(""after"", ""http://jabber.org/protocol/rsm"").put_node(new StanzaNode.text(last))
+                    )
+                )
+            );
+        stream.get_module(Iq.Module.IDENTITY).send_iq(stream, paging_iq, page_through_results);
+    }
+
+    private void query_availability(XmppStream stream) {
+        stream.get_module(Xep.ServiceDiscovery.Module.IDENTITY).request_info(stream, get_bare_jid(stream.get_flag(Bind.Flag.IDENTITY).my_jid), (stream, info_result) => {
+            if (info_result.features.contains(NS_URI)) {
+                stream.add_flag(new Flag(NS_URI));
+            } else if (info_result.features.contains(NS_URI_1)) {
+                stream.add_flag(new Flag(NS_URI_1));
+            }
+            if (stream.get_flag(Flag.IDENTITY) != null) feature_available(stream);
+        });
+    }
+
+    private static string NS_VER(XmppStream stream) {
+        return stream.get_flag(Flag.IDENTITY).ns_ver;
+    }
+}
+
+public class Flag : XmppStreamFlag {
+    public static FlagIdentity<Flag> IDENTITY = new FlagIdentity<Flag>(NS_URI, ""message_archive_management"");
+    public bool",0.0,,0.0,,0.0,lime
CVE-2019-16237,CVE-2019-16237/307f16cc86dd2b95aa02ab8a85110e4a2d5e7363,https://github.com/dino/dino/commit/307f16cc86dd2b95aa02ab8a85110e4a2d5e7363,<s>Dino before 2019-09-10 does not properly check the source of an MAM message in module/xep/0313_message_archive_management.vala.</s>,"<s>Fix check of source of MAM message
</s>"," diff --git a/xmpp-vala/src/module/xep/0313_message_archive_management.vala b/xmpp-vala/src/module/xep/0313_message_archive_management.vala
index 674224c9..e99193a7 100644
--- a/xmpp-vala/src/module/xep/0313_message_archive_management.vala
+++ b/xmpp-vala/src/module/xep/0313_message_archive_management.vala
@@ -94,11 +94,16 @@ public class ReceivedPipelineListener : StanzaListener<MessageStanza> {
     public override string[] after_actions { get { return after_actions_const; } }
 
     public override async bool run(XmppStream stream, MessageStanza message) {
-        //        if (message.from != stream.remote_name) return;
         if (stream.get_flag(Flag.IDENTITY) == null) return false;
 
         StanzaNode? message_node = message.stanza.get_deep_subnode(NS_VER(stream) + "":result"", ""urn:xmpp:forward:0:forwarded"", Xmpp.NS_URI + "":message"");
         if (message_node != null) {
+            // MAM messages must come from our server // TODO or a MUC server
+            if (!message.from.equals(stream.get_flag(Bind.Flag.IDENTITY).my_jid.bare_jid)) {
+                warning(""Received alledged MAM message from %s, ignoring"", message.from.to_string());
+                return true;
+            }
+
             StanzaNode? forward_node = message.stanza.get_deep_subnode(NS_VER(stream) + "":result"", ""urn:xmpp:forward:0:forwarded"", DelayedDelivery.NS_URI + "":delay"");
             DateTime? datetime = DelayedDelivery.Module.get_time_for_node(forward_node);
             message.add_flag(new MessageFlag(datetime));
",1.0,,1.0,,1.0,lime
CVE-2019-16237,CVE-2019-16237/dff8e08669996936cb58884c71b5ecd6ad7b1f76,https://github.com/dino/dino/commit/dff8e08669996936cb58884c71b5ecd6ad7b1f76,<s>Dino before 2019-09-10 does not properly check the source of an MAM message in module/xep/0313_message_archive_management.vala.</s>,"<s>MAM fixes
- don't send first request for timestamp -60
- only open conversation for messages within last 24h
- always show latest message in conversation tabs
</s>"," diff --git a/libdino/src/service/message_processor.vala b/libdino/src/service/message_processor.vala
index 14d4ef28..d1490aa0 100644
--- a/libdino/src/service/message_processor.vala
+++ b/libdino/src/service/message_processor.vala
@@ -45,7 +45,8 @@ public class MessageProcessor : StreamInteractionModule, Object {
             on_message_received(account, message);
         });
         stream_interactor.module_manager.get_module(account, Xmpp.Xep.MessageArchiveManagement.Module.IDENTITY).feature_available.connect( (stream) => {
-            stream.get_module(Xep.MessageArchiveManagement.Module.IDENTITY).query_archive(stream, null, account.mam_earliest_synced.add_minutes(-1), null);
+            DateTime start_time = account.mam_earliest_synced.to_unix() > 60 ? account.mam_earliest_synced.add_minutes(-1) : account.mam_earliest_synced;
+            stream.get_module(Xep.MessageArchiveManagement.Module.IDENTITY).query_archive(stream, null, start_time, null);
         });
     }
 
@@ -102,15 +103,21 @@ public class MessageProcessor : StreamInteractionModule, Object {
             if ((is_uuid && !db.contains_message_by_stanza_id(new_message.stanza_id, conversation.account)) ||
                     (!is_uuid && !db.contains_message(new_message, conversation.account))) {
                 stream_interactor.get_module(MessageStorage.IDENTITY).add_message(new_message, conversation);
-                if (new_message.direction == Entities.Message.DIRECTION_SENT) {
-                    message_sent(new_message, conversation);
-                } else {
-                    message_received(new_message, conversation);
+
+                bool is_mam_message = Xep.MessageArchiveManagement.MessageFlag.get_flag(stanza) != null;
+                bool is_recent = new_message.local_time.compare(new DateTime.now_utc().add_hours(-24)) > 0;
+                if (!is_mam_message || is_recent) {
+                    print(new_message.local_time.to_string() + ""\n"");
+                    if (new_message.direction == Entities.Message.DIRECTION_SENT) {
+                        message_sent(new_message, conversation);
+                    } else {
+                        message_received(new_message, conversation);
+                    }
                 }
 
                 Core.XmppStream? stream = stream_interactor.get_stream(conversation.account);
                 Xep.MessageArchiveManagement.Flag? mam_flag = stream != null ? stream.get_flag(Xep.MessageArchiveManagement.Flag.IDENTITY) : null;
-                if (Xep.MessageArchiveManagement.MessageFlag.get_flag(stanza) != null || (mam_flag != null && mam_flag.cought_up == true)) {
+                if (is_mam_message || (mam_flag != null && mam_flag.cought_up == true)) {
                     conversation.account.mam_earliest_synced = new_message.local_time;
                 }
             }
",0.0,,0.0,,0.0,lime
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2021-45927,CVE-2021-45927/373b7ff4c4daf887269c078407cb1338942c4ea6,https://github.com/mdbtools/mdbtools/commit/373b7ff4c4daf887269c078407cb1338942c4ea6,<s>MDB Tools (aka mdbtools) 0.9.2 has a stack-based buffer overflow (at 0x7ffd6e029ee0) in mdb_numeric_to_string (called from mdb_xfer_bound_data and _mdb_attempt_bind).</s>,"<s>Version 0.9.3, final
</s>"," diff --git a/NEWS b/NEWS
index 2944a21..648d1ca 100644
--- a/NEWS
+++ b/NEWS
@@ -1,45 +1,28 @@
-Version 0.9.3, Beta 4
-=============
-
-libmdb:
-* Fix build failure with emscripten #299
-
-Version 0.9.3, Beta 3
-=============
-
-libmdb / libmdbsql:
-* Fix build when _XOPEN_SOURCE was already defined on the platform #298
-
-Version 0.9.3, Beta 2
-=============
-
-libmdb:
-* Migrate to g_memdup2 #287 #288
-
-libmdbsql:
-* Allow double quoted ("") database names #291
-* Allow spaces in database names #292 #293
-
-Docs:
-* Add JET version for access 2013/2016/2019 to docs #286
-
-Version 0.9.3, Beta 1
+Version 0.9.3
 =============
 
 libmdb:
 * Support files created with Access 2019 #260 #277
 * Fix a warning when reading in binary property values #262
 * Fix signed-unsigned comparison warning #269
+* Migrate to `g_memdup2` #287 #288
+* Fix build when `_XOPEN_SOURCE` was already defined on the platform #298
+* Fix build failure with emscripten #299
 
 libmdbsql:
 * Support negative floating point literals #274 #279
-* Comparison operators behaved incorrectly when the constant was on the left #283 #285
 * Improved support for file paths in `CONNECT TO` statements #275 #280 #282
+* Comparison operators behaved incorrectly when the constant was on the left #283 #285
+* Allow double quoted ("") database names #291
+* Allow spaces in database names #292 #293
 
 ODBC:
 * unixODBC now uses the `--libdir` passed at configure-time #261
 * Fix a segfault in PyODBC when `SQLGetTypeInfo` is called on an unsupported data type #278
 
+Docs:
+* Add JET version for access 2013/2016/2019 to docs #286
+
 Version 0.9.2
 =============
 
",0.0,,0.0,,1.0,tfidf
CVE-2021-45927,CVE-2021-45927/74fd4b1ff9937dd6550510da43e0ff510f4e710c,https://github.com/mdbtools/mdbtools/commit/74fd4b1ff9937dd6550510da43e0ff510f4e710c,<s>MDB Tools (aka mdbtools) 0.9.2 has a stack-based buffer overflow (at 0x7ffd6e029ee0) in mdb_numeric_to_string (called from mdb_xfer_bound_data and _mdb_attempt_bind).</s>,"<s>MDB Tools 0.9.3, Beta 3
</s>"," diff --git a/configure.ac b/configure.ac
index 836bfd3..a1468bf 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1,5 +1,5 @@
 dnl Process this file with autoconf to produce a configure script.
-AC_INIT([mdbtools],[0.9.3-beta2],[https://github.com/mdbtools/mdbtools/issues],[],[https://github.com/mdbtools/mdbtools])
+AC_INIT([mdbtools],[0.9.3-beta3],[https://github.com/mdbtools/mdbtools/issues],[],[https://github.com/mdbtools/mdbtools])
 AC_CONFIG_MACRO_DIR([m4])
 AC_CONFIG_AUX_DIR([build-aux])
 AC_CONFIG_SRCDIR(src/extras/mdb-dump.c)
",0.0,,0.0,,0.0,tfidf
CVE-2021-45927,CVE-2021-45927/e52c47d561a2582aa9a6c6c9a59cf7503b7040fd,https://github.com/mdbtools/mdbtools/commit/e52c47d561a2582aa9a6c6c9a59cf7503b7040fd,<s>MDB Tools (aka mdbtools) 0.9.2 has a stack-based buffer overflow (at 0x7ffd6e029ee0) in mdb_numeric_to_string (called from mdb_xfer_bound_data and _mdb_attempt_bind).</s>,"<s>MDB Tools 0.9.3, Beta 4
</s>"," diff --git a/configure.ac b/configure.ac
index a1468bf..063935e 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1,5 +1,5 @@
 dnl Process this file with autoconf to produce a configure script.
-AC_INIT([mdbtools],[0.9.3-beta3],[https://github.com/mdbtools/mdbtools/issues],[],[https://github.com/mdbtools/mdbtools])
+AC_INIT([mdbtools],[0.9.3-beta4],[https://github.com/mdbtools/mdbtools/issues],[],[https://github.com/mdbtools/mdbtools])
 AC_CONFIG_MACRO_DIR([m4])
 AC_CONFIG_AUX_DIR([build-aux])
 AC_CONFIG_SRCDIR(src/extras/mdb-dump.c)
",0.0,,0.0,,0.0,tfidf
CVE-2021-45927,CVE-2021-45927/14648829315ae1f6eacd28b97b8a051b0ffe0498,https://github.com/mdbtools/mdbtools/commit/14648829315ae1f6eacd28b97b8a051b0ffe0498,<s>MDB Tools (aka mdbtools) 0.9.2 has a stack-based buffer overflow (at 0x7ffd6e029ee0) in mdb_numeric_to_string (called from mdb_xfer_bound_data and _mdb_attempt_bind).</s>,"<s>mdb-tables: Support --version flag
</s>"," diff --git a/src/util/mdb-tables.c b/src/util/mdb-tables.c
index f186262..efd3b3a 100644
--- a/src/util/mdb-tables.c
+++ b/src/util/mdb-tables.c
@@ -19,6 +19,7 @@
 /* this utility dumps the schema for an existing database */
 
 #include ""mdbtools.h""
+#include ""mdbver.h""
 
 struct type_struct {
 	char *name;
@@ -85,6 +86,7 @@ main (int argc, char **argv)
 	int objtype = MDB_TABLE;
 	char *str_objtype = NULL;
 	char *locale = NULL;
+	int print_mdbver = 0;
 
 	GOptionEntry entries[] = {
 		{ ""system"", 'S', G_OPTION_FLAG_REVERSE, G_OPTION_ARG_NONE, &skip_sys, ""Include system tables"", NULL},
@@ -92,6 +94,7 @@ main (int argc, char **argv)
 		{ ""delimiter"", 'd', 0, G_OPTION_ARG_STRING, &delimiter, ""Table name delimiter"", ""char""},
 		{ ""type"", 't', 0, G_OPTION_ARG_STRING, &str_objtype, ""Type of entry"", ""type""},
 		{ ""showtype"", 'T', 0, G_OPTION_ARG_NONE, &show_type, ""Show type"", NULL},
+		{ ""version"", 0, 0, G_OPTION_ARG_NONE, &print_mdbver, ""Show mdbtools version and exit"", NULL},
 		{ NULL },
 	};
 	GError *error = NULL;
@@ -110,6 +113,14 @@ main (int argc, char **argv)
 	}
 	setlocale(LC_CTYPE, locale);
 
+	if (print_mdbver) {
+		if (argc > 1) {
+			fputs(g_option_context_get_help(opt_context, TRUE, NULL), stderr);
+		}
+		fprintf(stdout,""%s\n"", MDB_FULL_VERSION);
+		exit(argc > 1);
+	}
+
 	if (argc != 2) {
 		fputs(""Wrong number of arguments.\n\n"", stderr);
 		fputs(g_option_context_get_help(opt_context, TRUE, NULL), stderr);
",1.0,,1.0,,0.0,tfidf
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2015-3197,CVE-2015-3197/f26a179abce861741345057ba03a752e39f2835e,https://github.com/openssl/openssl/commit/f26a179abce861741345057ba03a752e39f2835e,"<s>ssl/s2_srvr.c in OpenSSL 1.0.1 before 1.0.1r and 1.0.2 before 1.0.2f does not prevent use of disabled ciphers, which makes it easier for man-in-the-middle attackers to defeat cryptographic protection mechanisms by performing computations on SSLv2 traffic, related to the get_client_master_key and get_client_hello functions.</s>","<s>Update CHANGES and NEWS for release
Add details about the latest issues into CHANGES and NEWS ready for the
next release.
Reviewed-by: Rich Salz <rsalz@openssl.org>
</s>"," diff --git a/CHANGES b/CHANGES
index e03c46f921..d090d75579 100644
--- a/CHANGES
+++ b/CHANGES
@@ -4,6 +4,49 @@
 
  Changes between 1.0.2e and 1.0.2f [xx XXX xxxx]
 
+  *) DH small subgroups
+
+     Historically OpenSSL only ever generated DH parameters based on ""safe""
+     primes. More recently (in version 1.0.2) support was provided for
+     generating X9.42 style parameter files such as those required for RFC 5114
+     support. The primes used in such files may not be ""safe"". Where an
+     application is using DH configured with parameters based on primes that are
+     not ""safe"" then an attacker could use this fact to find a peer's private
+     DH exponent. This attack requires that the attacker complete multiple
+     handshakes in which the peer uses the same private DH exponent. For example
+     this could be used to discover a TLS server's private DH exponent if it's
+     reusing the private DH exponent or it's using a static DH ciphersuite.
+
+     OpenSSL provides the option SSL_OP_SINGLE_DH_USE for ephemeral DH (DHE) in
+     TLS. It is not on by default. If the option is not set then the server
+     reuses the same private DH exponent for the life of the server process and
+     would be vulnerable to this attack. It is believed that many popular
+     applications do set this option and would therefore not be at risk.
+
+     The fix for this issue adds an additional check where a ""q"" parameter is
+     available (as is the case in X9.42 based parameters). This detects the
+     only known attack, and is the only possible defense for static DH
+     ciphersuites. This could have some performance impact.
+
+     Additionally the SSL_OP_SINGLE_DH_USE option has been switched on by
+     default and cannot be disabled. This could have some performance impact.
+
+     This issue was reported to OpenSSL by Antonio Sanso (Adobe).
+     (CVE-2016-0701)
+     [Matt Caswell]
+
+  *) SSLv2 doesn't block disabled ciphers
+
+     A malicious client can negotiate SSLv2 ciphers that have been disabled on
+     the server and complete SSLv2 handshakes even if all SSLv2 ciphers have
+     been disabled, provided that the SSLv2 protocol was not also disabled via
+     SSL_OP_NO_SSLv2.
+
+     This issue was reported to OpenSSL on 26th December 2015 by Nimrod Aviram
+     and Sebastian Schinzel.
+     (CVE-2015-3197)
+     [Viktor Dukhovni]
+
   *) Reject DH handshakes with parameters shorter than 1024 bits.
      [Kurt Roeckx]
 
",0.0,,0.0,,0.0,none
CVE-2015-3197,CVE-2015-3197/95605f3ae1ec8857e8cb612ce35805a3b0207d21,https://github.com/openssl/openssl/commit/95605f3ae1ec8857e8cb612ce35805a3b0207d21,"<s>ssl/s2_srvr.c in OpenSSL 1.0.1 before 1.0.1r and 1.0.2 before 1.0.2f does not prevent use of disabled ciphers, which makes it easier for man-in-the-middle attackers to defeat cryptographic protection mechanisms by performing computations on SSLv2 traffic, related to the get_client_master_key and get_client_hello functions.</s>","<s>Prepare for 1.0.2f release
Reviewed-by: Richard Levitte <levitte@openssl.org>
</s>"," diff --git a/README b/README
index 5884483857..1e9869daee 100644
--- a/README
+++ b/README
@@ -1,5 +1,5 @@
 
- OpenSSL 1.0.2f-dev
+ OpenSSL 1.0.2f 28 Jan 2016
ANG
 file Copyright (c) 1998-2015 The OpenSSL Project
. Copyright (c) 1995-1998 Eric A. Young, Tim J. Hudson

+  Major changes between OpenSSL 1.0.2e and OpenSSL 1.0.2f [28 Jan 2016]
 
       o DH small subgroups (CVE-2016-0701)
       o SSLv2 doesn't block disabled ciphers (CVE-2015-3197)
",0.0,,0.0,,0.0,none
CVE-2015-3197,CVE-2015-3197/d81a1600588b726c2bdccda7efad3cc7a87d6245,https://github.com/openssl/openssl/commit/d81a1600588b726c2bdccda7efad3cc7a87d6245,"<s>ssl/s2_srvr.c in OpenSSL 1.0.1 before 1.0.1r and 1.0.2 before 1.0.2f does not prevent use of disabled ciphers, which makes it easier for man-in-the-middle attackers to defeat cryptographic protection mechanisms by performing computations on SSLv2 traffic, related to the get_client_master_key and get_client_hello functions.</s>","<s>Better SSLv2 cipher-suite enforcement
Based on patch by: Nimrod Aviram <nimrod.aviram@gmail.com>
CVE-2015-3197
Reviewed-by: Tim Hudson <tjh@openssl.org>
Reviewed-by: Richard Levitte <levitte@openssl.org>
</s>"," diff --git a/ssl/s2_srvr.c b/ssl/s2_srvr.c
index 5e2e0acc35..07e9df8282 100644
--- a/ssl/s2_srvr.c
+++ b/ssl/s2_srvr.c
@@ -402,7 +402,7 @@ static int get_client_master_key(SSL *s)
         }
 
         cp = ssl2_get_cipher_by_char(p);
-        if (cp == NULL) {
+        if (cp == NULL || sk_SSL_CIPHER_find(s->session->ciphers, cp) < 0) {
             ssl2_return_error(s, SSL2_PE_NO_CIPHER);
             SSLerr(SSL_F_GET_CLIENT_MASTER_KEY, SSL_R_NO_CIPHER_MATCH);
             return (-1);
@@ -692,8 +692,12 @@ static int get_client_hello(SSL *s)
             prio = cs;
             allow = cl;
         }
+
+        /* Generate list of SSLv2 ciphers shared between client and server */
         for (z = 0; z < sk_SSL_CIPHER_num(prio); z++) {
-            if (sk_SSL_CIPHER_find(allow, sk_SSL_CIPHER_value(prio, z)) < 0) {
+            const SSL_CIPHER *cp = sk_SSL_CIPHER_value(prio, z);
+            if ((cp->algorithm_ssl & SSL_SSLV2) == 0 ||
+                sk_SSL_CIPHER_find(allow, cp) < 0) {
                 (void)sk_SSL_CIPHER_delete(prio, z);
                 z--;
             }
@@ -702,6 +706,13 @@ static int get_client_hello(SSL *s)
             sk_SSL_CIPHER_free(s->session->ciphers);
             s->session->ciphers = prio;
         }
+
+        /* Make sure we have at least one cipher in common */
+        if (sk_SSL_CIPHER_num(s->session->ciphers) == 0) {
+            ssl2_return_error(s, SSL2_PE_NO_CIPHER);
+            SSLerr(SSL_F_GET_CLIENT_HELLO, SSL_R_NO_CIPHER_MATCH);
+            return -1;
+        }
         /*
          * s->session->ciphers should now have a list of ciphers that are on
          * both the client and server. This list is ordered by the order the
",1.0,,1.0,,1.0,none
CVE-2015-3197,CVE-2015-3197/607e77300ead771e2a61a58df3981dad773c8f7a,https://github.com/openssl/openssl/commit/607e77300ead771e2a61a58df3981dad773c8f7a,"<s>ssl/s2_srvr.c in OpenSSL 1.0.1 before 1.0.1r and 1.0.2 before 1.0.2f does not prevent use of disabled ciphers, which makes it easier for man-in-the-middle attackers to defeat cryptographic protection mechanisms by performing computations on SSLv2 traffic, related to the get_client_master_key and get_client_hello functions.</s>","<s>Validate ClientHello session_id field length and send alert on failure
RT#4080
Reviewed-by: Rich Salz <rsalz@openssl.org>
Reviewed-by: Matt Caswell <matt@openssl.org>
</s>"," diff --git a/ssl/s2_srvr.c b/ssl/s2_srvr.c
index 4289272b73..5e2e0acc35 100644
--- a/ssl/s2_srvr.c
+++ b/ssl/s2_srvr.c
@@ -598,6 +598,11 @@ static int get_client_hello(SSL *s)
         s->s2->tmp.cipher_spec_length = i;
         n2s(p, i);
         s->s2->tmp.session_id_length = i;
+        if ((i < 0) || (i > SSL_MAX_SSL_SESSION_ID_LENGTH)) {
+            ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR);
+            SSLerr(SSL_F_GET_CLIENT_HELLO, SSL_R_LENGTH_MISMATCH);
+            return -1;
+        }
         n2s(p, i);
         s->s2->challenge_length = i;
         if ((i < SSL2_MIN_CHALLENGE_LENGTH) ||
",0.0,,0.0,,0.0,none
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2022-29711,CVE-2022-29711/cc6112b8fb36039b862b42d86eb79ef7ee89d31b,https://github.com/librenms/librenms/commit/cc6112b8fb36039b862b42d86eb79ef7ee89d31b,<s>LibreNMS v22.3.0 was discovered to contain a cross-site scripting (XSS) vulnerability via the component /Table/GraylogController.php.</s>,"<s>fix graylog xss (#13931)

</s>"," diff --git a/app/Http/Controllers/Table/GraylogController.php b/app/Http/Controllers/Table/GraylogController.php
index bc0d9f418..ec911c790 100644
--- a/app/Http/Controllers/Table/GraylogController.php
+++ b/app/Http/Controllers/Table/GraylogController.php
@@ -118,8 +118,8 @@ class GraylogController extends SimpleTableController
         return [
             'severity'  => $this->severityLabel($level),
             'timestamp' => $displayTime,
-            'source'    => $device ? Url::deviceLink($device) : $message['message']['source'],
-            'message'   => $message['message']['message'] ?? '',
+            'source'    => $device ? Url::deviceLink($device) : htmlspecialchars($message['message']['source']),
+            'message'   => htmlspecialchars($message['message']['message'] ?? ''),
             'facility'  => is_numeric($facility) ? ""($facility) "" . __(""syslog.facility.$facility"") : $facility,
             'level'     => (is_numeric($level) && $level >= 0) ? ""($level) "" . __(""syslog.severity.$level"") : $level,
         ];
",1.0,,1.0,,1.0,lime
CVE-2022-29711,CVE-2022-29711/acdf51decae03b2de136d8bbda3fc9beb65884bb,https://github.com/librenms/librenms/commit/acdf51decae03b2de136d8bbda3fc9beb65884bb,<s>LibreNMS v22.3.0 was discovered to contain a cross-site scripting (XSS) vulnerability via the component /Table/GraylogController.php.</s>,"<s>Print full error message in poller/discovery output (#13903)
It was previously missing the file and line number the error occurred on.  Only showing the error message and stack trace before.
</s>"," diff --git a/LibreNMS/Poller.php b/LibreNMS/Poller.php
index b5ab8d056..b936da22d 100644
--- a/LibreNMS/Poller.php
+++ b/LibreNMS/Poller.php
@@ -180,7 +180,7 @@ class Poller
                     $instance->poll($this->os);
                 } catch (Throwable $e) {
                     // isolate module exceptions so they don't disrupt the polling process
-                    $this->logger->error(""%rError polling $module module for {$this->device->hostname}.%n "" . $e->getMessage() . PHP_EOL . $e->getTraceAsString(), ['color' => true]);
+                    $this->logger->error(""%rError polling $module module for {$this->device->hostname}.%n $e"", ['color' => true]);
                     \Log::event(""Error polling $module module. Check log file for more details."", $this->device, 'poller', Alert::ERROR);
                 }
 
",0.0,,0.0,,0.0,lime
CVE-2022-29711,CVE-2022-29711/15feac72971b83e6c1c485c8893dc6a37e8b995b,https://github.com/librenms/librenms/commit/15feac72971b83e6c1c485c8893dc6a37e8b995b,<s>LibreNMS v22.3.0 was discovered to contain a cross-site scripting (XSS) vulnerability via the component /Table/GraylogController.php.</s>,"<s>Bump version to 22.4.0
</s>"," diff --git a/LibreNMS/Util/Version.php b/LibreNMS/Util/Version.php
index dccf21dd7..85721d8e1 100644
--- a/LibreNMS/Util/Version.php
+++ b/LibreNMS/Util/Version.php
@@ -33,7 +33,7 @@ use Symfony\Component\Process\Process;
 class Version
 {
     // Update this on release
-    public const VERSION = '22.3.0';
+    public const VERSION = '22.4.0';
 
     /**
      * @var bool
@@ -67,7 +67,7 @@ class Version
     public function localCommit(): array
     {
         if ($this->is_git_install) {
-            [$local_sha, $local_date] = array_pad(explode('|', rtrim(`git show --pretty='%H|%ct' -s HEAD`), 2), 2, '');
+            [$local_sha, $local_date] = explode('|', rtrim(`git show --pretty='%H|%ct' -s HEAD`));
 
             return [
                 'sha' => $local_sha,
",0.0,,0.0,,0.0,lime
CVE-2022-29711,CVE-2022-29711/7e5641d4fef987fd69d537ea40b686258582cd8a,https://github.com/librenms/librenms/commit/7e5641d4fef987fd69d537ea40b686258582cd8a,<s>LibreNMS v22.3.0 was discovered to contain a cross-site scripting (XSS) vulnerability via the component /Table/GraylogController.php.</s>,"<s>Replaced OpenWRT icon with new logo (#13891)
* Added new OpenWRT icon to replace old logo
* New logo has an icon usable without text per look & feel of LibreNMS
* Compatible with OpenWRT usage guidelines refer:
    https://openwrt.org/docs/guide-graphic-designer/openwrt-logo
* Update openwrt.svg
Co-authored-by: Neil Lathwood <gh+n@laf.io>
</s>"," diff --git a/html/images/os/openwrt.svg b/html/images/os/openwrt.svg
index 4aab7d0ca..ace3117b8 100644
--- a/html/images/os/openwrt.svg
+++ b/html/images/os/openwrt.svg
@@ -1 +1 @@
-<svg viewBox=""0 0 40000 9200"" xmlns=""http://www.w3.org/2000/svg""><path d=""m33817 8423c0 63 8 153 50 204 30 35 64 53 110 53s81-16 110-51c42-50 49-148 49-210s-7-148-50-198c-29-34-61-51-106-51-47 0-83 17-113 53-42 50-50 137-50 200zm-1567-7c0-55-7-130-44-174-27-31-57-45-98-45-34 0-57 14-78 40-35 43-40 138-40 190 0 53 6 137 42 180 22 27 47 42 82 42 39 0 68-15 93-44 37-44 43-135 43-189zm-1774-201c-8-22-19-43-33-57-29-29-66-37-106-37-52 0-90 19-122 61-7 10-13 21-19 34h280zm-1824 0c-8-22-19-43-33-57-29-29-66-37-106-37-52 0-90 19-122 61-7 10-13 21-19 34h280zm-8950 0c-8-22-19-43-33-57-29-29-66-37-106-37-52 0-90 19-122 61-7 10-13 21-19 34h280zm-2795 0c-8-22-19-43-33-57-29-29-66-37-106-37-52 0-90 19-122 61-7 10-13 21-19 34h280zm18765-469c24-17 50-32 76-45 91-44 192-60 292-60 102 0 210 16 298 69 46 28 85 62 118 102 50-46 106-88 165-116 88-41 186-55 282-55 151 0 292 43 398 154 114 121 144 296 144 456v919h-690v-843c0-19-2-61-15-77l-2-4c-14-19-29-32-53-32-31 0-55 9-75 33-29 34-33 108-33 150v773h-690v-816c0-21 0-70-6-90-5-15-13-27-25-36-11-9-24-12-39-12-31 0-55 10-75 34-30 35-35 114-35 158v763h-690v-1498h655zm-2545 678c0-218 73-410 232-563 168-161 385-220 615-220 253 0 497 66 669 260 129 146 186 322 186 515 0 218-71 411-230 564-169 163-393 220-623 220-208 0-411-48-574-182-185-153-275-355-275-594zm-843 677c-16 12-33 22-49 31-89 47-187 68-287 68-203 0-372-77-488-244-114-163-159-353-159-549 0-201 42-409 181-562 124-137 283-204 468-204 86 0 170 14 250 46 16 7 31 14 47 22v-537h695v1998h-657v-69zm-2086-465c6 12 12 23 20 32 34 38 73 54 124 54 35 0 68-8 98-25 22-12 47-40 62-60l1-1zm738 0 288 26-71 122c-76 131-177 247-313 319-149 79-343 97-509 97-150 0-319-17-455-83-122-60-217-153-288-268-80-129-113-275-113-426 0-218 68-413 227-565 167-160 386-216 613-216 163 0 345 20 491 96 126 66 223 161 290 286 75 141 97 308 97 466v147h-257zm-2562 0c6 12 12 23 20 32 33 38 73 54 124 54 35 0 68-8 98-25 22-12 47-40 62-60l1-1zm738 0 288 26-71 122c-76 131-177 247-313 319-149 79-343 97-509 97-150 0-319-17-455-83-122-60-217-153-288-268-80-129-112-275-112-426 0-218 68-413 227-565 167-160 386-216 613-216 163 0 345 20 491 96 126 66 223 161 290 286 75 141 97 308 97 466v147h-258zm-2028-927c68-49 148-68 232-68 101 0 200 34 289 80l74 39-227 516-82-34c-28-12-77-30-108-30-36 0-60 13-80 42-57 85-63 284-63 382v533h-692v-1498h657zm-1615 33v138h711v548h-710v742h-750v-1999h1579v571zm-2412 388c-4-7-9-14-16-19-27-18-61-24-94-24-14 0-53 2-67 10 40 17 136 29 177 33zm67 579c-2-2-6-4-8-5-37-18-150-36-192-43-19-3-38-6-58-10 10 26 26 55 48 70 27 18 67 23 99 23s76-4 102-24l3-2c1-2 4-5 6-9zm-519-116c-23-7-44-14-65-22-87-33-158-89-213-162-60-79-88-169-88-267 0-104 30-199 96-281 65-81 152-136 251-170 120-42 261-52 388-52 117 0 265 4 377 40 85 27 162 71 225 134 66 66 112 150 145 236l43 110-356 34c19 6 37 13 55 20 92 38 172 95 229 177 54 77 82 164 82 258 0 98-31 189-84 271-62 96-155 161-258 206-134 57-297 71-442 71-178 0-415-17-568-119-125-83-202-202-235-347l-23-100zm-1229-463c-4-7-10-14-16-19-27-18-61-24-94-24-14 0-53 2-67 10 40 17 137 29 177 33zm67 579c-2-2-6-4-8-5-37-18-150-36-192-43-19-3-38-6-58-10 10 26 26 55 48 70 27 18 67 23 99 23s76-4 102-24l3-2c2-2 5-5 6-9zm-519-116c-23-7-44-14-65-22-87-33-158-89-213-162-60-79-89-169-89-267 0-104 30-199 96-281 65-81 152-136 250-170 120-42 261-52 388-52 117 0 265 4 377 40 85 27 162 71 225 134 66 66 112 150 145 236l42 110-356 34c19 6 38 13 55 20 92 38 172 95 229 177 54 77 82 164 82 258 0 98-31 189-83 271-62 96-155 161-258 206-134 57-298 71-442 71-178 0-416-17-568-119-125-83-202-202-235-347l-23-100zm-1500 43c6 12 12 23 20 32 33 38 73 54 124 54 35 0 68-8 99-25 22-12 47-40 62-60l1-1zm738 0 288 26-71 122c-76 131-177 247-313 319-149 79-342 97-509 97-150 0-318-17-455-83-122-60-217-153-288-268-80-129-112-275-112-426 0-218 68-413 227-565 167-160 386-216 613-216 163 0 345 20 491 96 126 66 223 161 290 286 75 141 96 308 96 466v147h-257zm-2349-1465h690v1998h-690zm-1184 1465c6 12 12 23 20 32 34 38 73 54 124 54 35 0 68-8 99-25 22-12 47-40 62-60l1-1zm738 0 288 26-71 122c-76 131-177 247-313 319-149 79-342 97-509 97-150 0-319-17-455-83-122-60-217-153-288-268-80-129-113-275-113-426 0-218 68-413 227-565 167-160 386-216 613-216 163 0 345 20 491 96 126 66 223 161 290 286 75 141 96 308 96 466v147h-256zm-2028-927c69-49 148-68 232-68 101 0 200 34 289 80l75 39-227 516-82-34c-28-12-77-30-108-30-36 0-60 13-80 42-57 85-63 284-63 382v533h-692v-1498h657v38zm-3710 170 197-708h670l200 712 136-711h722l-443 1998h-696l-252-899-250 899h-695l-447-1998h725zm2784-208v1498h-690v-1998h690z"" fill=""#a6a6a6""/><path d=""m35108 7761h474v192c68-80 137-138 207-171 69-34 153-51 252-51 106 0 189 19 251 56s112 93 151 166c80-86 152-145 218-176s147-47 243-47c142 0 253 42 332 126 80 84 120 215 120 394v828h-508v-753c0-60-12-105-35-133-34-46-76-68-126-68-60 0-108 22-144 65s-55 113-55 208v682h-509v-726c0-58-3-97-10-118-11-33-29-60-56-80-26-20-58-30-94-30-58 0-106 22-144 66s-56 116-56 216v673h-509v-1319zm-1382 662c0 118 24 206 72 262s107",0.0,,0.0,,0.0,lime
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2022-0824,CVE-2022-0824/39ea464f0c40b325decd6a5bfb7833fa4a142e38,https://github.com/webmin/webmin/commit/39ea464f0c40b325decd6a5bfb7833fa4a142e38,<s>Improper Access Control to Remote Code Execution in GitHub repository webmin/webmin prior to 1.990.</s>,"<s>Foreign module may need a check
</s>"," diff --git a/web-lib-funcs.pl b/web-lib-funcs.pl
index 984a2bf77..76826e251 100755
--- a/web-lib-funcs.pl
+++ b/web-lib-funcs.pl
@@ -5144,7 +5144,8 @@ if ($module_name) {
 	}
 
 if ($module_name && !$main::no_acl_check &&
-    !defined($ENV{'FOREIGN_MODULE_NAME'}) &&
+    (!defined($ENV{'FOREIGN_MODULE_NAME'}) ||
+      defined($ENV{'FOREIGN_MODULE_SEC_CHECK'})) &&
     $main::webmin_script_type eq 'web') {
 	# Check if the HTTP user can access this module
 	if (!&foreign_available($module_name)) {
",1.0,,1.0,,1.0,none
CVE-2022-0824,CVE-2022-0824/f365761bd3103eff4c177a48744b4b0576f76037,https://github.com/webmin/webmin/commit/f365761bd3103eff4c177a48744b4b0576f76037,<s>Improper Access Control to Remote Code Execution in GitHub repository webmin/webmin prior to 1.990.</s>,"<s>Use legacy command in init script if installed https://github.com/webmin/webmin/issues/1603
</s>"," diff --git a/firewall/firewall-lib.pl b/firewall/firewall-lib.pl
index dcd9f06c0..30e4da450 100755
--- a/firewall/firewall-lib.pl
+++ b/firewall/firewall-lib.pl
@@ -316,7 +316,7 @@ else {
 # Create (if necessary) the Webmin iptables init script
 sub create_webmin_init
 {
-local $res = &has_command(""ip${ipvx}tables-restore"");
+local $res = &iptable_restore_command();
 local $ipt = &has_command(""ip${ipvx}tables"");
 local $out = &backquote_command(""$res -h 2>&1 </dev/null"");
 if ($out =~ /\s+-w\s+/) {
@@ -392,12 +392,17 @@ foreach $c (""ip${ipvx}tables"", ""ip${ipvx}tables-restore"", ""ip${ipvx}tables-save""
 return undef;
 }
 
+sub iptables_restore_command
+{
+return &has_command(""ip${ipvx}tables-legacy-restore"") ||
+       &has_command(""ip${ipvx}tables-restore"");
+}
+
 # iptables_restore()
 # Activates the current firewall rules, and returns any error
 sub iptables_restore
 {
-local $rcmd = &has_command(""ip${ipvx}tables-legacy-restore"") ||
-	      ""ip${ipvx}tables-restore"";
+local $rcmd = &iptables_restore_command();
 local $out = &backquote_logged(""cd / && $rcmd <$ipvx_save 2>&1"");
 return $? ? ""<pre>$out</pre>"" : undef;
 }
",0.0,,0.0,,0.0,none
CVE-2022-0824,CVE-2022-0824/b647c2c0841cbfd36920eb52e28d1e7986cb0001,https://github.com/webmin/webmin/commit/b647c2c0841cbfd36920eb52e28d1e7986cb0001,<s>Improper Access Control to Remote Code Execution in GitHub repository webmin/webmin prior to 1.990.</s>,"<s>Fix to display sub-title in virtual server mode
</s>"," diff --git a/webminlog/search.cgi b/webminlog/search.cgi
index c0dca1ffe..b997a16f4 100755
--- a/webminlog/search.cgi
+++ b/webminlog/search.cgi
@@ -63,7 +63,7 @@ if ($in{'csv'}) {
 	&PrintHeader(undef, ""text/csv"");
 	}
 else {
-	&ui_print_header(undef, &html_escape($in{'search_title'} || $text{'search_title'}), """", undef, undef, $in{'no_return'});
+	&ui_print_header($in{'search_sub_title'} || undef, &html_escape($in{'search_title'} || $text{'search_title'}), """", undef, undef, $in{'no_return'});
 	}
 
 # Perform initial search in index
@@ -217,6 +217,7 @@ elsif (@match) {
 		      ""&return="".&urlize($in{'return'} || """").
 		      ""&returndesc="".&urlize($in{'returndesc'} || """").
 		      ""&no_return="".&urlize($in{'no_return'} || """").
+		      ""&search_sub_title="".&urlize($in{'search_sub_title'} || """").
 		      ""&file="".($in{'fall'} ? """" : &urlize($in{'file'})).
 		      ""&search="".&urlize($in || """"),
 		      &filter_javascript($desc)) );
",0.0,,0.0,,0.0,none
CVE-2022-0824,CVE-2022-0824/61892753b7ef7edb083eb105d5552cf3ae857e08,https://github.com/webmin/webmin/commit/61892753b7ef7edb083eb105d5552cf3ae857e08,<s>Improper Access Control to Remote Code Execution in GitHub repository webmin/webmin prior to 1.990.</s>,"<s>Use new ui-lib, and add columns for in and out traffic https://github.com/webmin/webmin/issues/1600
</s>"," diff --git a/bandwidth/index.cgi b/bandwidth/index.cgi
index f6ed8f643..04278e1ce 100755
--- a/bandwidth/index.cgi
+++ b/bandwidth/index.cgi
@@ -124,54 +124,47 @@ elsif ($missingrule || !$sysconf) {
 if (@hours) {
 	# Show reporting form
 	print &ui_form_start(""index.cgi"");
-	print ""<table>\n"";
-
-	print ""<tr> <td><b>$text{'index_by'}</b></td>\n"";
-	print ""<td>"",&ui_select(""by"", $in{'by'},
-		[ [ 'hour', $text{'index_hour'} ],
-		  [ 'day', $text{'index_day'} ],
-		  [ 'host', $text{'index_host'} ],
-		  [ 'proto', $text{'index_proto'} ],
-		  [ 'iport', $text{'index_iport'} ],
-		  [ 'oport', $text{'index_oport'} ],
-		  [ 'port', $text{'index_port'} ] ]),""</td>\n"";
-
-	print ""<td><b>$text{'index_for'}</b></td>\n"";
-	print ""<td>"",&ui_select(""for"", $in{'for'},
-		[ [ '', $text{'index_all'} ],
-		  [ 'host', $text{'index_forhost'} ],
-		  [ 'proto', $text{'index_forproto'} ],
-		  [ 'iport', $text{'index_foriport'} ],
-		  [ 'oport', $text{'index_foroport'} ] ]),""\n"";
-	print &ui_textbox(""what"", $in{'for'} ? $in{'what'} : """", 20),
-	      ""</td> </tr>\n"";
-
-	print ""<tr> <td><b>$text{'index_from'}</b></td>\n"";
-	print ""<td colspan=4>"",
+	print &ui_table_start(undef, undef, 2);
+
+	print &ui_table_row($text{'index_by'},
+		&ui_select(""by"", $in{'by'},
+			[ [ 'hour', $text{'index_hour'} ],
+			  [ 'day', $text{'index_day'} ],
+			  [ 'host', $text{'index_host'} ],
+			  [ 'proto', $text{'index_proto'} ],
+			  [ 'iport', $text{'index_iport'} ],
+			  [ 'oport', $text{'index_oport'} ],
+			  [ 'port', $text{'index_port'} ] ]));
+
+	print &ui_table_row($text{'index_for'},
+		&ui_select(""for"", $in{'for'},
+			[ [ '', $text{'index_all'} ],
+			  [ 'host', $text{'index_forhost'} ],
+			  [ 'proto', $text{'index_forproto'} ],
+			  [ 'iport', $text{'index_foriport'} ],
+			  [ 'oport', $text{'index_foroport'} ] ])."" "".
+		&ui_textbox(""what"", $in{'for'} ? $in{'what'} : """", 20));
+
+	print &ui_table_row($text{'index_from'},
 		&date_input($in{'from_day'}, $in{'from_month'},
-			    $in{'from_year'}, ""from""),
-		&hourmin_input($in{'from_hour'}, ""00"", ""from""),""</td> </tr>\n"";
+			    $in{'from_year'}, ""from"").
+		&hourmin_input($in{'from_hour'}, ""00"", ""from""));
 
-	print ""<tr> <td><b>$text{'index_to'}</b></td>\n"";
-	print ""<td colspan=4>"",
+	print &ui_table_row($text{'index_to'},
 		&date_input($in{'to_day'}, $in{'to_month'},
-			    $in{'to_year'}, ""to""),
-		&hourmin_input($in{'to_hour'}, ""00"", ""to""),""</td> </tr>\n"";
+			    $in{'to_year'}, ""to"").
+		&hourmin_input($in{'to_hour'}, ""00"", ""to""));
 
 	if (!%in) {
 		# Enable by default
 		$in{'low'} = 1;
 		}
-	print ""<tr> <td></td> <td colspan=4>\n"";
-	print &ui_checkbox(""low"", 1, $text{'index_low'}, $in{'low'});
-	print &ui_checkbox(""resolv"", 1, $text{'index_resolv'}, $in{'resolv'});
-	print ""</td> </tr>\n"";
+	print &ui_table_row("""",
+		&ui_checkbox(""low"", 1, $text{'index_low'}, $in{'low'}).
+		&ui_checkbox(""resolv"", 1, $text{'index_resolv'}, $in{'resolv'}));
 
-	print ""<tr> <td colspan=4>"",
-		&ui_submit($text{'index_search'}),""</td> </td>\n"";
-
-	print ""</table>\n"";
-	print &ui_form_end();
+	print &ui_table_end();
+	print &ui_form_end([ [ undef, $text{'index_search'} ] ]);
 	}
 elsif (!$missingrule && $sysconf) {
 	print ""<b>$text{'index_none'}</b><p>\n"";
@@ -344,37 +337,45 @@ if ($in{'by'}) {
 		@order = grep { $count{$_} } @order;
 		}
 	if (@order) {
-		print ""<table width=100% cellpadding=0 cellspacing=0>\n"";
-		print ""<tr>\n"";
-		print ""<td><b>"",$text{'index_h'.$in{'by'}},""</b></td>\n"";
-		print ""<td colspan=2><b>$text{'index_usage'}</b></td>\n"";
-		print ""</tr>\n"";
-		$total = 0;
+		print &ui_columns_start([ $text{'index_h'.$in{'by'}},
+					  $text{'index_usage'},
+					  $text{'index_in'},
+					  $text{'index_out'},
+					  $text{'index_total'} ], 100, 0);
+		$itotal = $ototal = $total = 0;
 		foreach $k (@order) {
-			print ""<tr>\n"";
+			my @cols;
 			if ($in{'by'} eq 'hour') {
-				print ""<td>"",&make_date($k*60*60),""</td>\n"";
+				push(@cols, &make_date($k*60*60));
 				}
 			elsif ($in{'by'} eq 'day') {
 				$date = &make_date_day($k*60*60);
-				print ""<td>$date</td>\n"";
+				push(@cols, $date);
 				}
 			else {
-				print ""<td>$k</td>\n"";
+				push(@cols, $k);
 				}
-			print ""<td>"";
-			printf ""<img src=images/red.gif width=%d height=10>"",
+			my $bar = sprintf
+				""<img src=images/red.gif width=%d height=10>"",
 				$max ? int($width * $icount{$k}/$max)+1 : 1;
-			printf ""<img src=images/blue.gif width=%d height=10>"",
+			$bar .= sprintf
+				""<img src=images/blue.gif width=%d height=10>"",
 				$max ? int($width * $ocount{$k}/$max)+1 : 1;
-			print ""</td>"";
-			print ""<td>"",&nice_size($count{$k}),""</td>\n"";
+			push(@cols, $bar);
+			push(@cols, &nice_size($icount{$k}),
+				    &nice_size($ocount{$k}),
+				    &nice_size($count{$k}));
 			$total += $count{$k};
+			$itotal += $icount{$k};
+			$ototal += $ocount{$k};
 			print ""</tr>\n"";
+			print &ui_columns_row(\@cols);
 			}
-		print ""<tr> <td colspan=2></td> <td><b>"",
-		&nice_size($total),""</td> </tr>\n"";
-		print ""</table>\n"";
+		print &ui_columns_row([ undef, undef,
+					&nice_size($itotal),
+					&nice_size($",0.0,,0.0,,0.0,none
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2012-1209,CVE-2012-1209/df75e0797a6540c4d656969a2e7df7689603b2cf,https://github.com/forkcms/forkcms/commit/df75e0797a6540c4d656969a2e7df7689603b2cf,<s>Cross-site scripting (XSS) vulnerability in backend/core/engine/base.php in Fork CMS 3.2.4 and possibly other versions before 3.2.5 allows remote attackers to inject arbitrary web script or HTML via the highlight parameter.</s>,"<s>This should fix the backend XSS.
</s>"," diff --git a/backend/core/engine/base.php b/backend/core/engine/base.php
index 60897359c..0d3b21671 100644
--- a/backend/core/engine/base.php
+++ b/backend/core/engine/base.php
@@ -11,6 +11,7 @@
  * This class implements a lot of functionality that can be extended by a specific action
  *
  * @author Tijs Verkoyen <tijs@sumocoders.be>
+ * @author Frederik Heyninck <frederik@figure8.be>
  */
 class BackendBaseAction
 {
@@ -168,21 +169,21 @@ class BackendBaseAction
 			$this->tpl->assign('report', true);
 
 			// camelcase the string
-			$messageName = SpoonFilter::toCamelCase($this->getParameter('report'), '-');
+			$messageName = SpoonFilter::toCamelCase(SpoonFilter::stripHTML($this->getParameter('report')), '-');
 
 			// if we have data to use it will be passed as the var parameter
 			if(!empty($var)) $this->tpl->assign('reportMessage', vsprintf(BL::msg($messageName), $var));
 			else $this->tpl->assign('reportMessage', BL::msg($messageName));
 
 			// highlight an element with the given id if needed
-			if($this->getParameter('highlight')) $this->tpl->assign('highlight', $this->getParameter('highlight'));
+			if($this->getParameter('highlight')) $this->tpl->assign('highlight', SpoonFilter::stripHTML($this->getParameter('highlight')));
 		}
 
 		// is there an error to show?
 		if($this->getParameter('error') !== null)
 		{
 			// camelcase the string
-			$errorName = SpoonFilter::toCamelCase($this->getParameter('error'), '-');
+			$errorName = SpoonFilter::toCamelCase(SpoonFilter::stripHTML($this->getParameter('error')), '-');
 
 			// if we have data to use it will be passed as the var parameter
 			if(!empty($var)) $this->tpl->assign('errorMessage', vsprintf(BL::err($errorName), $var));
",1.0,,1.0,,0.0,tfidf
CVE-2012-1209,CVE-2012-1209/c8ec9c58a6b3c46cdd924532c1de99bcda6072ed,https://github.com/forkcms/forkcms/commit/c8ec9c58a6b3c46cdd924532c1de99bcda6072ed,<s>Cross-site scripting (XSS) vulnerability in backend/core/engine/base.php in Fork CMS 3.2.4 and possibly other versions before 3.2.5 allows remote attackers to inject arbitrary web script or HTML via the highlight parameter.</s>,"<s>Make sure the highlight string doesn't contain html tags.
</s>"," diff --git a/backend/core/engine/base.php b/backend/core/engine/base.php
index ff9ef41d0..73c0a83ff 100644
--- a/backend/core/engine/base.php
+++ b/backend/core/engine/base.php
@@ -155,7 +155,10 @@ class BackendBaseAction
 			else $this->tpl->assign('reportMessage', BL::msg($messageName));
 
 			// highlight an element with the given id if needed
-			if($this->getParameter('highlight')) $this->tpl->assign('highlight', $this->getParameter('highlight'));
+			if($this->getParameter('highlight'))
+			{
+				$this->tpl->assign('highlight', strip_tags($this->getParameter('highlight')));
+			}
 		}
 
 		// is there an error to show?
",0.0,,0.0,,1.0,tfidf
CVE-2012-1209,CVE-2012-1209/988011b23d6e2a5562b458f8961b0d4b96eb70c7,https://github.com/forkcms/forkcms/commit/988011b23d6e2a5562b458f8961b0d4b96eb70c7,<s>Cross-site scripting (XSS) vulnerability in backend/core/engine/base.php in Fork CMS 3.2.4 and possibly other versions before 3.2.5 allows remote attackers to inject arbitrary web script or HTML via the highlight parameter.</s>,"<s>Make sure no html tags are in the get variable.
</s>"," diff --git a/backend/core/engine/base.php b/backend/core/engine/base.php
index e4d73070e..834ac5187 100644
--- a/backend/core/engine/base.php
+++ b/backend/core/engine/base.php
@@ -139,7 +139,7 @@ class BackendBaseAction
 		}
 
 		// store var so we don't have to call this function twice
-		$var = $this->getParameter('var', 'array');
+		$var = array_map('strip_tags', $this->getParameter('var', 'array'));
 
 		// is there a report to show?
 		if($this->getParameter('report') !== null)
",0.0,,0.0,,0.0,tfidf
CVE-2012-1209,CVE-2012-1209/a9986b86c53de0582248b39605660fbba0c21a29,https://github.com/forkcms/forkcms/commit/a9986b86c53de0582248b39605660fbba0c21a29,<s>Cross-site scripting (XSS) vulnerability in backend/core/engine/base.php in Fork CMS 3.2.4 and possibly other versions before 3.2.5 allows remote attackers to inject arbitrary web script or HTML via the highlight parameter.</s>,"<s>XSS / LFI Fox
</s>"," diff --git a/frontend/core/engine/javascript.php b/frontend/core/engine/javascript.php
index 8de23787d..b25b0a138 100644
--- a/frontend/core/engine/javascript.php
+++ b/frontend/core/engine/javascript.php
@@ -194,6 +194,17 @@ class FrontendJavascript
 	 */
 	private function setModule($value)
 	{
+		$modules = (array) FrontendModel::getModules();
+		
+		if(!in_array((string) $value, $modules))
+		{
+			// when debug is on throw an exception
+			if(SPOON_DEBUG) throw new FrontendException('Invalid file.');
+
+			// when debug is of show a descent message
+			else exit(SPOON_DEBUG_MESSAGE);
+		}
+		
 		$this->module = (string) $value;
 	}
 }
",0.0,,0.0,,0.0,tfidf
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2018-15601,CVE-2018-15601/1e7e29bab89d8807f5bd165f54258b71cada5fd9,https://github.com/jbroadway/elefant/commit/1e7e29bab89d8807f5bd165f54258b71cada5fd9,"<s>apps/filemanager/handlers/upload/drop.php in Elefant CMS 2.0.3 performs a urldecode step too late in the ""Cannot upload executable files"" protection mechanism.</s>","<s>Added .pht, .php3, .php4, and .phar to restricted file uploads
</s>"," diff --git a/apps/filemanager/handlers/upload/drop.php b/apps/filemanager/handlers/upload/drop.php
index df76f119..881c3889 100644
--- a/apps/filemanager/handlers/upload/drop.php
+++ b/apps/filemanager/handlers/upload/drop.php
@@ -40,7 +40,7 @@ if (isset ($_FILES['file']['error']) && $_FILES['file']['error'] > 0) {
 // some browsers may urlencode the file name
 $_FILES['file']['name'] = urldecode ($_FILES['file']['name']);
.(
-if (preg_match ('/\.(php5?|phtml|js|rb|py|pl|sh|bash|exe)$/i', $_FILES['file']['name'])) {
+if (preg_match ('/\.(php|phtml|pht|php3|php4|php5|phar|js|rb|py|pl|sh|bash|exe)$/i', $_FILES['file']['name'])) {
$	echo json_encode (array ('success' => false, 'error' => __ ('Cannot upload executable files due to security.')));
		return;
 }
 . __ ('Cannot upload executable files due to security.') . '</p>';
 		echo '<p><a href=""/filemanager"">' . __ ('Back') . '</a></p>';
",0.0,,0.0,,0.0,none
CVE-2018-15601,CVE-2018-15601/afb3346e50b992bcba143660ca2149e563430e05,https://github.com/jbroadway/elefant/commit/afb3346e50b992bcba143660ca2149e563430e05,"<s>apps/filemanager/handlers/upload/drop.php in Elefant CMS 2.0.3 performs a urldecode step too late in the ""Cannot upload executable files"" protection mechanism.</s>","<s>Decode file names before restricting extensions
</s>"," diff --git a/apps/filemanager/handlers/upload/drop.php b/apps/filemanager/handlers/upload/drop.php
index 8a8bd175..df76f119 100644
--- a/apps/filemanager/handlers/upload/drop.php
+++ b/apps/filemanager/handlers/upload/drop.php
@@ -37,14 +37,14 @@ if (isset ($_FILES['file']['error']) && $_FILES['file']['error'] > 0) {
 	return;
 }
 
+// some browsers may urlencode the file name
+$_FILES['file']['name'] = urldecode ($_FILES['file']['name']);
+
 if (preg_match ('/\.(php5?|phtml|js|rb|py|pl|sh|bash|exe)$/i', $_FILES['file']['name'])) {
 	echo json_encode (array ('success' => false, 'error' => __ ('Cannot upload executable files due to security.')));
 	return;
 }
 
-// some browsers may urlencode the file name
-$_FILES['file']['name'] = urldecode ($_FILES['file']['name']);
-
 if (@file_exists ($root . $_POST['path'] . '/' . $_FILES['file']['name'])) {
 	echo json_encode (array ('success' => false, 'error' => __ ('A file by that name already exists.')));
 	return;
",1.0,,1.0,,1.0,none
CVE-2018-15601,CVE-2018-15601/d4cfbab9b9fda695c14933ad636f00d2e821dc58,https://github.com/jbroadway/elefant/commit/d4cfbab9b9fda695c14933ad636f00d2e821dc58,"<s>apps/filemanager/handlers/upload/drop.php in Elefant CMS 2.0.3 performs a urldecode step too late in the ""Cannot upload executable files"" protection mechanism.</s>","<s>Prevent .phtml files from being uploaded
</s>"," diff --git a/apps/filemanager/handlers/upload/drop.php b/apps/filemanager/handlers/upload/drop.php
index 33d77fdb..8a8bd175 100644
--- a/apps/filemanager/handlers/upload/drop.php
+++ b/apps/filemanager/handlers/upload/drop.php
@@ -37,7 +37,7 @@ if (isset ($_FILES['file']['error']) && $_FILES['file']['error'] > 0) {
file	return;
 }
Back
-if (preg_match ('/\.(php5?|js|rb|py|pl|sh|bash|exe)$/i', $_FILES['file']['name'])) {
+if (preg_match ('/\.(php5?|phtml|js|rb|py|pl|sh|bash|exe)$/i', $_FILES['file']['name'])) {
pl	echo json_encode (array ('success' => false, 'error' => __ ('Cannot upload executable files due to security.')));
page	return;
 }
 File Name') . ': ' . $_FILES['file']['name'][$i];
 		echo '<p>' . __ ('Cannot upload executable files due to security.') . '</p>';
 		echo '<p><a href=""/filemanager"">' . __ ('Back') . '</a></p>';
",0.0,,0.0,,0.0,none
CVE-2018-15601,CVE-2018-15601/862e4fcd21dadeb750c1dc61098cdac8e7cbdb20,https://github.com/jbroadway/elefant/commit/862e4fcd21dadeb750c1dc61098cdac8e7cbdb20,"<s>apps/filemanager/handlers/upload/drop.php in Elefant CMS 2.0.3 performs a urldecode step too late in the ""Cannot upload executable files"" protection mechanism.</s>","<s>Fixed validation errors in RSS output
</s>"," diff --git a/apps/blog/handlers/rss.php b/apps/blog/handlers/rss.php
index 74de3433..d2208f72 100644
--- a/apps/blog/handlers/rss.php
+++ b/apps/blog/handlers/rss.php
@@ -27,6 +27,18 @@ if (! $res) {
 		} else {
 			$page->posts[$k]->body = $tpl->run_includes (Markdown ($page->posts[$k]->body));
 		}
+		
+		// Strip script, iframe, link, and video tags
+		$html = preg_replace ('#<script(.*?)>(.*?)</script>#is', '', $page->posts[$k]->body);
+		$html = preg_replace ('#<iframe(.*?)>(.*?)</iframe>#is', '', $html);
+		$html = preg_replace ('#<link(.*?)>#is', '', $html);
+		$html = preg_replace ('#<video(.*?)>(.*?)</video>#is', '', $html);
+		
+		// Make sure all URLs are absolutized
+		$html = preg_replace ('/(src|href)=""\//i', '\1=""' . $this->absolutize ('/'), $html);
+		
+		$page->posts[$k]->body = $html;
+		
 		if ($preview_chars) {
 			$page->posts[$k]->body = blog_filter_truncate ($page->posts[$k]->body, $preview_chars);
 		}
@@ -36,5 +48,5 @@ if (! $res) {
 	$cache->set ('blog_rss', $res, 1800); // half an hour
 }
 $page->layout = FALSE;
-header ('Content-Type: text/xml');
+header ('Content-Type: text/xml; charset=UTF-8');
 echo $res;
",0.0,,0.0,,0.0,none
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2020-24371,CVE-2020-24371/a6da1472c0c5e05ff249325f979531ad51533110,https://github.com/lua/lua/commit/a6da1472c0c5e05ff249325f979531ad51533110,"<s>lgc.c in Lua 5.4.0 mishandles the interaction between barriers and the sweep phase, leading to a memory access violation involving collectgarbage.</s>","<s>Fixed bug: barriers cannot be active during sweep
Barriers cannot be active during sweep, even in generational mode.
(Although gen. mode is not incremental, it can hit a barrier when
deleting a thread and closing its upvalues.)  The colors of objects are
being changed during sweep and, therefore, cannot be trusted.
</s>"," diff --git a/testes/gengc.lua b/testes/gengc.lua
index 4e80dd7e..7a7dabdd 100644
--- a/testes/gengc.lua
+++ b/testes/gengc.lua
@@ -57,13 +57,39 @@ do   -- bug in 5.4.0
   local obj = {}     -- create a new object
   collectgarbage(""step"", 0)   -- make it a survival
   assert(not T or T.gcage(obj) == ""survival"")
-  setmetatable(obj, {__gc = gcf, x = ""ok""})   -- create its metatable
+  setmetatable(obj, {__gc = gcf, x = ""+""})   -- create its metatable
   assert(not T or T.gcage(getmetatable(obj)) == ""new"")
   obj = nil   -- clear object
   collectgarbage(""step"", 0)   -- will call obj's finalizer
 end
 
 
+do   -- another bug in 5.4.0
+  local old = {10}
+  collectgarbage()   -- make 'old' old
+  local co = coroutine.create(
+    function ()
+      local x = nil
+      local f = function ()
+                  return x[1]
+                end
+      x = coroutine.yield(f)
+      coroutine.yield()
+    end
+  )
+  local _, f = coroutine.resume(co)   -- create closure over 'x' in coroutine
+  collectgarbage(""step"", 0)   -- make upvalue a survival
+  old[1] = {""hello""}    -- 'old' go to grayagain as 'touched1'
+  coroutine.resume(co, {123})     -- its value will be new
+  co = nil
+  collectgarbage(""step"", 0)   -- hit the barrier
+  assert(f() == 123 and old[1][1] == ""hello"")
+  collectgarbage(""step"", 0)   -- run the collector once more
+  -- make sure old[1] was not collected
+  assert(f() == 123 and old[1][1] == ""hello"")
+end
+
+
 if T == nil then
   (Message or print)('\n >>> testC not active: \z
                              skipping some generational tests <<<\n')
",0.0,,1.0,,1.0,tfidf
CVE-2020-24371,CVE-2020-24371/b9b554e0f68726b19274209ea6ce910b7e9f5fbf,https://github.com/lua/lua/commit/b9b554e0f68726b19274209ea6ce910b7e9f5fbf,"<s>lgc.c in Lua 5.4.0 mishandles the interaction between barriers and the sweep phase, leading to a memory access violation involving collectgarbage.</s>","<s>Clearer handling of gray lists when entering generational mode
When entering generational mode, all objects are old. So, the only
objects that need to be in a gray list are threads, which can be
assigned without barriers. Changes in anything else (e.g., weak
tables) will trigger barriers that, if needed, will add the object
to a gray list.
</s>"," diff --git a/lgc.c b/lgc.c
index 9973c9db..5e8c02d3 100644
--- a/lgc.c
+++ b/lgc.c
@@ -368,12 +368,17 @@ static int remarkupvals (global_State *g) {
 }
 
 
+static void cleargraylists (global_State *g) {
+  g->gray = g->grayagain = NULL;
+  g->weak = g->allweak = g->ephemeron = NULL;
+}
+
+
 /*
 ** mark root set and reset all gray lists, to start a new collection
 */
 static void restartcollection (global_State *g) {
-  g->gray = g->grayagain = NULL;
-  g->weak = g->allweak = g->ephemeron = NULL;
+  cleargraylists(g);
   markobject(g, g->mainthread);
   markvalue(g, &g->l_registry);
   markmt(g);
@@ -1019,19 +1024,30 @@ static void setpause (global_State *g);
 
 
 /*
-** Sweep a list of objects, deleting dead ones and turning
-** the non dead to old (without changing their colors).
+** Sweep a list of objects to enter generational mode.  Deletes dead
+** objects and turns the non dead to old. All non-dead threads---which
+** are now old---must be in a gray list.  Everything else is not in a
+** gray list.
+**
 */
 static void sweep2old (lua_State *L, GCObject **p) {
   GCObject *curr;
+  global_State *g = G(L);
   while ((curr = *p) != NULL) {
     if (iswhite(curr)) {  /* is 'curr' dead? */
-      lua_assert(isdead(G(L), curr));
+      lua_assert(isdead(g, curr));
       *p = curr->next;  /* remove 'curr' from list */
       freeobj(L, curr);  /* erase 'curr' */
     }
     else {  /* all surviving objects become old */
       setage(curr, G_OLD);
+      if (curr->tt == LUA_VTHREAD) {  /* threads must be watched */
+        lua_State *th = gco2th(curr);
+        linkgclist(th, g->grayagain);  /* insert into 'grayagain' list */
+        black2gray(th);  /* OK if already gray */
+      }
+      else  /* everything else is black */
+        gray2black(curr);  /* OK if already black */
       p = &curr->next;  /* go to next element */
     }
   }
@@ -1221,7 +1237,14 @@ static void youngcollection (lua_State *L, global_State *g) {
 }
 
 
+/*
+** Clears all gray lists, sweeps objects, and prepare sublists to enter
+** generational mode. The sweeps remove dead objects and turn all
+** surviving objects to old. Threads go back to 'grayagain'; everything
+** else is turned black (not in any gray list).
+*/
 static void atomic2gen (lua_State *L, global_State *g) {
+  cleargraylists(g);
   /* sweep all elements making them old */
   g->gcstate = GCSswpallgc;
   sweep2old(L, &g->allgc);
@@ -1244,7 +1267,8 @@ static void atomic2gen (lua_State *L, global_State *g) {
 
 /*
 ** Enter generational mode. Must go until the end of an atomic cycle
-** to ensure that all threads and weak tables are in the gray lists.
+** to ensure that all objects are correctly marked and weak tables
+** are cleared.
 ** Then, turn all objects into old and finishes the collection.
 */
 static lu_mem entergen (lua_State *L, global_State *g) {
",0.0,,0.0,,0.0,tfidf
CVE-2020-24371,CVE-2020-24371/71f70df3271f6e8ae9e8efcaef3be19f8d37c161,https://github.com/lua/lua/commit/71f70df3271f6e8ae9e8efcaef3be19f8d37c161,"<s>lgc.c in Lua 5.4.0 mishandles the interaction between barriers and the sweep phase, leading to a memory access violation involving collectgarbage.</s>","<s>OLD1 ages advanced by 'markold'
Objects aged OLD1 have their ages advanced by 'markold', which has to
visit them anyway. So, the GC doesn't need to ""sweep"" the old1 list.
</s>"," diff --git a/lgc.c b/lgc.c
index faa9c902..eec73871 100644
--- a/lgc.c
+++ b/lgc.c
@@ -1131,7 +1131,7 @@ static void correctgraylists (global_State *g) {
 
 
 /*
-** Mark 'OLD1' objects when starting a new young collection.
+** Mark black 'OLD1' objects when starting a new young collection.
 ** Gray objects are already in some gray list, and so will be visited
 ** in the atomic step.
 */
@@ -1140,6 +1140,7 @@ static void markold (global_State *g, GCObject *from, GCObject *to) {
   for (p = from; p != to; p = p->next) {
     if (getage(p) == G_OLD1) {
       lua_assert(!iswhite(p));
+      changeage(p, G_OLD1, G_OLD);  /* now they are old */
       if (isblack(p)) {
         black2gray(p);  /* should be '2white', but gray works too */
         reallymarkobject(g, p);
@@ -1176,16 +1177,16 @@ static void youngcollection (lua_State *L, global_State *g) {
   /* sweep nursery and get a pointer to its last live element */
   g->gcstate = GCSswpallgc;
   psurvival = sweepgen(L, g, &g->allgc, g->survival);
-  /* sweep 'survival' and 'old' */
-  sweepgen(L, g, psurvival, g->reallyold);
+  /* sweep 'survival' */
+  sweepgen(L, g, psurvival, g->old);
   g->reallyold = g->old;
   g->old = *psurvival;  /* 'survival' survivals are old now */
   g->survival = g->allgc;  /* all news are survivals */
 
   /* repeat for 'finobj' lists */
   psurvival = sweepgen(L, g, &g->finobj, g->finobjsur);
-  /* sweep 'survival' and 'old' */
-  sweepgen(L, g, psurvival, g->finobjrold);
+  /* sweep 'survival' */
+  sweepgen(L, g, psurvival, g->finobjold);
   g->finobjrold = g->finobjold;
   g->finobjold = *psurvival;  /* 'survival' survivals are old now */
   g->finobjsur = g->finobj;  /* all news are survivals */
",1.0,,0.0,,0.0,tfidf
CVE-2020-24371,CVE-2020-24371/31b8c2d4380a762d1ed6a7faee74a1d107f86014,https://github.com/lua/lua/commit/31b8c2d4380a762d1ed6a7faee74a1d107f86014,"<s>lgc.c in Lua 5.4.0 mishandles the interaction between barriers and the sweep phase, leading to a memory access violation involving collectgarbage.</s>","<s>Fixed bug of access violation in finalizers
Errors in finalizers need a valid 'pc' to produce an error message,
even if the error is not propagated. Therefore, calls to the GC (which
may call finalizers) inside luaV_execute must save the 'pc'.
</s>"," diff --git a/lvm.c b/lvm.c
index d78d6be2..66d451b0 100644
--- a/lvm.c
+++ b/lvm.c
@@ -1101,9 +1101,9 @@ void luaV_finishOp (lua_State *L) {
 /* idem, but without changing the stack */
 #define halfProtectNT(exp)  (savepc(L), (exp))
 
-
+/* 'c' is the limit of live values in the stack */
 #define checkGC(L,c)  \
-	{ luaC_condGC(L, L->top = (c),  /* limit of live values */ \
+	{ luaC_condGC(L, (savepc(L), L->top = (c)), \
                          updatetrap(ci)); \
            luai_threadyield(L); }
 
@@ -1791,8 +1791,7 @@ void luaV_execute (lua_State *L, CallInfo *ci) {
         vmbreak;
       }
       vmcase(OP_VARARGPREP) {
-        luaT_adjustvarargs(L, GETARG_A(i), ci, cl->p);
-        updatetrap(ci);
+        ProtectNT(luaT_adjustvarargs(L, GETARG_A(i), ci, cl->p));
         if (trap) {
           luaD_hookcall(L, ci);
           L->oldpc = pc + 1;  /* next opcode will be seen as a ""new"" line */
",0.0,,0.0,,0.0,tfidf
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2014-0238,CVE-2014-0238/f97486ef5dc3e8735440edc4fc8808c63e1a3ef0,https://github.com/file/file/commit/f97486ef5dc3e8735440edc4fc8808c63e1a3ef0,<s>The cdf_read_property_info function in cdf.c in the Fileinfo component in PHP before 5.4.29 and 5.5.x before 5.5.13 allows remote attackers to cause a denial of service (infinite loop or out-of-bounds memory access) via a vector that (1) has zero length or (2) is too long.</s>,"<s>CVE-2014-0207: Prevent 0 element vectors and vectors longer than the number
of properties from accessing random memory.
</s>"," diff --git a/src/cdf.c b/src/cdf.c
index 48a00ec4..375406c3 100644
--- a/src/cdf.c
+++ b/src/cdf.c
@@ -35,7 +35,7 @@
 #include ""file.h""
 
 #ifndef lint
-FILE_RCSID(""@(#)$File: cdf.c,v 1.58 2014/05/13 16:41:06 christos Exp $"")
+FILE_RCSID(""@(#)$File: cdf.c,v 1.59 2014/05/14 23:22:48 christos Exp $"")
 #endif
 
 #include <assert.h>
@@ -827,6 +827,10 @@ cdf_read_property_info(const cdf_stream_t *sst, const cdf_header_t *h,
 		    i, inp[i].pi_id, inp[i].pi_type, q - p, offs));
 		if (inp[i].pi_type & CDF_VECTOR) {
 			nelements = CDF_GETUINT32(q, 1);
+			if (nelements == 0) {
+				DPRINTF((""CDF_VECTOR with nelements == 0\n""));
+				goto out;
+			}
 			o = 2;
 		} else {
 			nelements = 1;
@@ -901,7 +905,9 @@ cdf_read_property_info(const cdf_stream_t *sst, const cdf_header_t *h,
 			}
 			DPRINTF((""nelements = %"" SIZE_T_FORMAT ""u\n"",
 			    nelements));
-			for (j = 0; j < nelements; j++, i++) {
+			for (j = 0; j < nelements && i < sh.sh_properties;
+			    j++, i++)
+			{
 				uint32_t l = CDF_GETUINT32(q, o);
 				inp[i].pi_str.s_len = l;
 				inp[i].pi_str.s_buf = (const char *)
",1.0,,1.0,,1.0,lime
CVE-2014-0238,CVE-2014-0238/b8acc83781d5a24cc5101e525d15efe0482c280d,https://github.com/file/file/commit/b8acc83781d5a24cc5101e525d15efe0482c280d,<s>The cdf_read_property_info function in cdf.c in the Fileinfo component in PHP before 5.4.29 and 5.5.x before 5.5.13 allows remote attackers to cause a denial of service (infinite loop or out-of-bounds memory access) via a vector that (1) has zero length or (2) is too long.</s>,"<s>Remove loop that kept reading the same offset (Jan Kaluza)
</s>"," diff --git a/src/cdf.c b/src/cdf.c
index f7c46aed..c591a14a 100644
--- a/src/cdf.c
+++ b/src/cdf.c
@@ -35,7 +35,7 @@
 #include ""file.h""
 
 #ifndef lint
-FILE_RCSID(""@(#)$File: cdf.c,v 1.55 2014/02/27 23:26:17 christos Exp $"")
+FILE_RCSID(""@(#)$File: cdf.c,v 1.56 2014/05/05 16:11:21 christos Exp $"")
 #endif
 
 #include <assert.h>
@@ -932,7 +932,7 @@ int
 cdf_unpack_summary_info(const cdf_stream_t *sst, const cdf_header_t *h,
     cdf_summary_info_header_t *ssi, cdf_property_info_t **info, size_t *count)
 {
-	size_t i, maxcount;
+	size_t maxcount;
 	const cdf_summary_info_header_t *si =
 	    CAST(const cdf_summary_info_header_t *, sst->sst_tab);
 	const cdf_section_declaration_t *sd =
@@ -947,21 +947,13 @@ cdf_unpack_summary_info(const cdf_stream_t *sst, const cdf_header_t *h,
 	ssi->si_os = CDF_TOLE2(si->si_os);
 	ssi->si_class = si->si_class;
 	cdf_swap_class(&ssi->si_class);
-	ssi->si_count = CDF_TOLE2(si->si_count);
+	ssi->si_count = CDF_TOLE4(si->si_count);
 	*count = 0;
 	maxcount = 0;
 	*info = NULL;
-	for (i = 0; i < CDF_TOLE4(si->si_count); i++) {
-		if (i >= CDF_LOOP_LIMIT) {
-			DPRINTF((""Unpack summary info loop limit""));
-			errno = EFTYPE;
-			return -1;
-		}
-		if (cdf_read_property_info(sst, h, CDF_TOLE4(sd->sd_offset),
-		    info, count, &maxcount) == -1) {
-			return -1;
-		}
-	}
+	if (cdf_read_property_info(sst, h, CDF_TOLE4(sd->sd_offset), info,
+	    count, &maxcount) == -1)
+		return -1;
 	return 0;
 }
 
",0.0,,0.0,,0.0,lime
CVE-2014-0238,CVE-2014-0238/93e063ee374b6a75729df9e7201fb511e47e259d,https://github.com/file/file/commit/93e063ee374b6a75729df9e7201fb511e47e259d,<s>The cdf_read_property_info function in cdf.c in the Fileinfo component in PHP before 5.4.29 and 5.5.x before 5.5.13 allows remote attackers to cause a denial of service (infinite loop or out-of-bounds memory access) via a vector that (1) has zero length or (2) is too long.</s>,"<s>Add missing check offset test (Francisco Alonso, Jan Kaluza at RedHat)
</s>"," diff --git a/src/cdf.c b/src/cdf.c
index 0bfb31a2..c258e82f 100644
--- a/src/cdf.c
+++ b/src/cdf.c
@@ -35,7 +35,7 @@
 #include ""file.h""
 
 #ifndef lint
-FILE_RCSID(""@(#)$File: cdf.c,v 1.61 2014/06/04 17:23:19 christos Exp $"")
+FILE_RCSID(""@(#)$File: cdf.c,v 1.62 2014/06/04 17:26:07 christos Exp $"")
 #endif
 
 #include <assert.h>
@@ -816,7 +816,11 @@ cdf_read_property_info(const cdf_stream_t *sst, const cdf_header_t *h,
 	if (cdf_check_stream_offset(sst, h, e, 0, __LINE__) == -1)
 		goto out;
 	for (i = 0; i < sh.sh_properties; i++) {
-		size_t ofs = CDF_GETUINT32(p, (i << 1) + 1);
+		size_t tail = (i << 1) + 1;
+		if (cdf_check_stream_offset(sst, h, p, tail * sizeof(uint32_t),
+		    __LINE__) == -1)
+			goto out;
+		size_t ofs = CDF_GETUINT32(p, tail);
 		q = (const uint8_t *)(const void *)
 		    ((const char *)(const void *)p + ofs
 		    - 2 * sizeof(uint32_t));
",0.0,,0.0,,0.0,lime
CVE-2014-0238,CVE-2014-0238/a4a350ab786b0272ac62f8de2da3ed4d93655d01,https://github.com/file/file/commit/a4a350ab786b0272ac62f8de2da3ed4d93655d01,<s>The cdf_read_property_info function in cdf.c in the Fileinfo component in PHP before 5.4.29 and 5.5.x before 5.5.13 allows remote attackers to cause a denial of service (infinite loop or out-of-bounds memory access) via a vector that (1) has zero length or (2) is too long.</s>,"<s>PR/342: Jan Kaluza: Reverse order of evaluation to fix out of bounds read.
</s>"," diff --git a/src/softmagic.c b/src/softmagic.c
index 77270ead..68efd89b 100644
--- a/src/softmagic.c
+++ b/src/softmagic.c
@@ -32,7 +32,7 @@
 #include ""file.h""
 
 #ifndef	lint
-FILE_RCSID(""@(#)$File: softmagic.c,v 1.181 2014/03/27 18:12:12 christos Exp $"")
+FILE_RCSID(""@(#)$File: softmagic.c,v 1.182 2014/03/28 19:07:08 christos Exp $"")
 #endif	/* lint */
 
 #include ""magic.h""
@@ -235,8 +235,8 @@ match(struct magic_set *ms, struct magic *magic, uint32_t nmagic,
 		if (file_check_mem(ms, ++cont_level) == -1)
 			return -1;
 
-		while (magic[magindex+1].cont_level != 0 &&
-		    ++magindex < nmagic) {
+		while (++magindex < nmagic &&
+		    magic[magindex].cont_level != 0) {
 			m = &magic[magindex];
 			ms->line = m->lineno; /* for messages */
 
",0.0,,0.0,,0.0,lime
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2019-18656,CVE-2019-18656/bfc6235fb7f3d965f6c33acde235fa561aace1af,https://github.com/pimcore/pimcore/commit/bfc6235fb7f3d965f6c33acde235fa561aace1af,<s>Pimcore 6.2.3 has XSS in the translations grid because bundles/AdminBundle/Resources/public/js/pimcore/settings/translations.js mishandles certain HTML elements.</s>,"<s>[Assets] Grid Improvements - column configuration & export for Asset metadata (#5093)
* [Asset] Grid Improvements - Grid options & export for metadata
* [Asset] Grid Improvements - Grid options & export for metadata - code style
* [Asset] Grid Improvements - Grid options & export for metadata - db migration
* [Asset] Grid Improvements - Grid options & export for metadata - Fix namespace
* [Asset] Grid Improvements - Grid options & export for metadata - Objects xlsx settings
* [Asset] Grid Improvements - Grid options & export for metadata - minor fixes
* [Asset] Grid Improvements - Grid options & export for metadata - minor fixes 2
* [Asset] Grid Improvements - Grid options & export for metadata - strict language match
* [Asset] Grid Improvements - Grid options & export for metadata - refactor grid export
* [Asset] Grid Improvements - Grid options & export for metadata - refactor grid column config
* [Asset] Grid Improvements - Grid options & export for metadata - Add column specific language config
* [Asset] Grid Improvements - Grid options & export for metadata - refactor grid config
* [Asset] Grid Improvements - Grid options & export for metadata - install sql
* [Asset] Grid Improvements - Grid options & export for metadata - system fields naming issue and ui changes
</s>"," diff --git a/bundles/AdminBundle/Resources/public/js/pimcore/asset/folder.js b/bundles/AdminBundle/Resources/public/js/pimcore/asset/folder.js
index 04f463fe9b..0abad4e8b7 100644
--- a/bundles/AdminBundle/Resources/public/js/pimcore/asset/folder.js
+++ b/bundles/AdminBundle/Resources/public/js/pimcore/asset/folder.js
@@ -33,7 +33,7 @@ pimcore.asset.folder = Class.create(pimcore.asset.asset, {
         }
 
         this.tagAssignment = new pimcore.element.tag.assignment(this, ""asset"");
-        this.listfolder = new pimcore.asset.listfolder(this);
+        this.listfolder = new pimcore.asset.listfolder(this, ""folder"");
         this.workflows = new pimcore.element.workflows(this, ""asset"");
 
         this.getData();
",0.0,,0.0,,0.0,none
CVE-2019-18656,CVE-2019-18656/fceafd057f98048541d6bb7841a8d2b3fffb6b2e,https://github.com/pimcore/pimcore/commit/fceafd057f98048541d6bb7841a8d2b3fffb6b2e,<s>Pimcore 6.2.3 has XSS in the translations grid because bundles/AdminBundle/Resources/public/js/pimcore/settings/translations.js mishandles certain HTML elements.</s>,"<s>[Data Object] Full support for advanced many-to-many data-types in gr (#5155)
* [Data Object] Full support for advanced many-to-many data-types in grid view #5118
* [Data Object] Full support for advanced many-to-many data-types in grid view #5118 - styling
</s>"," diff --git a/bundles/AdminBundle/Resources/public/js/pimcore/object/helpers/grid.js b/bundles/AdminBundle/Resources/public/js/pimcore/object/helpers/grid.js
index 5d29425fbc..a6e3046fe4 100644
--- a/bundles/AdminBundle/Resources/public/js/pimcore/object/helpers/grid.js
+++ b/bundles/AdminBundle/Resources/public/js/pimcore/object/helpers/grid.js
@@ -384,6 +384,63 @@ pimcore.object.helpers.grid = Class.create({
             }
 
         }
-    }
+    },
+
+    advancedRelationGridRenderer: function (field, pathProperty, value, metaData, record) {
+        var key = field.key;
+        this.applyPermissionStyle(key, value, metaData, record);
+
+        if(record.data.inheritedFields[key]
+            && record.data.inheritedFields[key].inherited == true) {
+            metaData.tdCls += "" grid_value_inherited"";
+        }
+
+
+        if (value && value.length) {
+            var result;
+
+            var columnKeys = field.layout.columnKeys ? field.layout.columnKeys : [];
+            if (columnKeys && columnKeys.length) {
+                result = '<table border=""0"" cellpadding=""0""  cellspacing=""0"" style=""border-collapse: collapse;"">';
+                var i;
+
+                result += '<tr><td>&nbsp;</td>';
+                for (let i = 0; i < columnKeys.length; i++) {
+                    result += '<td style=""padding: 0 5px 0 5px; font-size:11px; border-bottom: 1px solid #d0d0d0; border-top: 1px solid #d0d0d0; border-left: 1px solid #d0d0d0; border-right: 1px solid #d0d0d0;"">' + ts(columnKeys[i]) + '</td>';
+                }
+                result += '</tr>';
+
 
+                for (let i = 0; i < value.length && i < 10; i++) {
+                    result += '<tr>';
+
+                    result += '<td style=""padding: 0 5px 0 5px; border-bottom: 1px solid #d0d0d0;  border-top: 1px solid #d0d0d0; border-left: 1px solid #d0d0d0;"">';
+                    let item = value[i];
+                    result += item[pathProperty];
+                    result += '</td>';
+
+                    for (let col = 0; col < columnKeys.length; col++) {
+                        let colName = columnKeys[col];
+                        result += '<td style=""padding: 0 5px 0 5px; font-size:11px; border-bottom: 1px solid #d0d0d0;  border-top: 1px solid #d0d0d0; border-left: 1px solid #d0d0d0; border-right: 1px solid #d0d0d0;"">';
+                        let displayValue = item[colName] ? item[colName] : ""&nbsp"";
+                        result += displayValue;
+                        result += '</td>';
+                    }
+
+                    result += '</tr>';
+                }
+
+                result += '</table>';
+            } else {
+                result = [];
+                for (let i = 0; i < value.length && i < 10; i++) {
+                    var item = value[i];
+                    result.push(item[pathProperty]);
+                }
+                return result.join(""<br />"");
+            }
+            return result;
+        }
+        return value;
+    }
 });
",0.0,,0.0,,0.0,none
CVE-2019-18656,CVE-2019-18656/ca036e9f86bb5cdb3dac0930ec131e5f35e26c5f,https://github.com/pimcore/pimcore/commit/ca036e9f86bb5cdb3dac0930ec131e5f35e26c5f,<s>Pimcore 6.2.3 has XSS in the translations grid because bundles/AdminBundle/Resources/public/js/pimcore/settings/translations.js mishandles certain HTML elements.</s>,"<s>Fixed possible XSS in the translations grid
</s>"," diff --git a/bundles/AdminBundle/Resources/public/js/pimcore/settings/translations.js b/bundles/AdminBundle/Resources/public/js/pimcore/settings/translations.js
index 757ccde31f..cebeffc55a 100644
--- a/bundles/AdminBundle/Resources/public/js/pimcore/settings/translations.js
+++ b/bundles/AdminBundle/Resources/public/js/pimcore/settings/translations.js
@@ -102,6 +102,9 @@ pimcore.settings.translations = Class.create({
                 dataIndex: ""_"" + languages[i],
                 filter: 'string',
                 getEditor: this.getCellEditor.bind(this, languages[i]),
+                renderer: function (text) {
+                    return replace_html_event_attributes(strip_tags(text, 'div,span,b,strong,em,i,small,sup,sub,p'));
+                },
                 id: ""translation_column_"" + this.translationType + ""_"" + languages[i].toLowerCase()
             };
             if (applyInitialSettings) {
",1.0,,1.0,,1.0,none
CVE-2019-18656,CVE-2019-18656/2032298775a19af724cb9b205567f0efe502bc69,https://github.com/pimcore/pimcore/commit/2032298775a19af724cb9b205567f0efe502bc69,<s>Pimcore 6.2.3 has XSS in the translations grid because bundles/AdminBundle/Resources/public/js/pimcore/settings/translations.js mishandles certain HTML elements.</s>,"<s>Enable grid filter for calculated values
</s>"," diff --git a/bundles/AdminBundle/Resources/public/js/pimcore/object/tags/calculatedValue.js b/bundles/AdminBundle/Resources/public/js/pimcore/object/tags/calculatedValue.js
index 70c737f1e1..0641617e7d 100644
--- a/bundles/AdminBundle/Resources/public/js/pimcore/object/tags/calculatedValue.js
+++ b/bundles/AdminBundle/Resources/public/js/pimcore/object/tags/calculatedValue.js
@@ -60,9 +60,7 @@ pimcore.object.tags.calculatedValue = Class.create(pimcore.object.tags.abstract,
         return this.component;
     },
 
-
     getLayoutShow: function () {
-
         this.getLayoutEdit();
         this.component.setReadOnly(true);
 
@@ -79,5 +77,32 @@ pimcore.object.tags.calculatedValue = Class.create(pimcore.object.tags.abstract,
 
     isInvalidMandatory: function () {
         return true;
+    },
+
+    getGridColumnFilter: function (field) {
+        return {type: 'string', dataIndex: field.key};
+    },
+
+    getGridColumnConfig:function (field) {
+        var renderer = function (key, value, metaData, record) {
+            this.applyPermissionStyle(key, value, metaData, record);
+
+            try {
+                if (record.data.inheritedFields && record.data.inheritedFields[key] && record.data.inheritedFields[key].inherited == true) {
+                    metaData.tdCls += "" grid_value_inherited"";
+                }
+            } catch (e) {
+                console.log(e);
+            }
+
+            if (value) {
+                value = value.replace(/\n/g,""<br>"");
+                value = strip_tags(value, '<br>');
+            }
+            return value;
+        }.bind(this, field.key);
+
+        return {text:ts(field.label), sortable:true, dataIndex:field.key, renderer:renderer,
+            editor:this.getGridColumnEditor(field)};
     }
 });
\ No newline at end of file
",0.0,,0.0,,0.0,none
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2014-3552,CVE-2014-3552/f0ab42f9858ff157225a8c7cb50ac2504a1e3f97,https://github.com/moodle/moodle/commit/f0ab42f9858ff157225a8c7cb50ac2504a1e3f97,"<s>The Shibboleth authentication plugin in auth/shibboleth/index.php in Moodle through 2.3.11, 2.4.x before 2.4.11, and 2.5.x before 2.5.7 does not check whether a session ID is empty, which allows remote authenticated users to hijack sessions via crafted plugin interaction.</s>","<s>MDL-45485 auth_shibboleth: User taking over other user's session
Replacing code with call to complete_user_login() since it calls session_regenerate_id().
</s>"," diff --git a/auth/shibboleth/index.php b/auth/shibboleth/index.php
index cf9695899ad..9cc3af1b789 100644
--- a/auth/shibboleth/index.php
+++ b/auth/shibboleth/index.php
@@ -49,21 +49,7 @@
         if ($shibbolethauth->user_login($frm->username, $frm->password)
                 && $user = authenticate_user_login($frm->username, $frm->password)) {
 
-            enrol_check_plugins($user);
-            session_set_user($user);
-
-            $USER->loggedin = true;
-            $USER->site     = $CFG->wwwroot; // for added security, store the site in the
-
-            update_user_login_times();
-
-            // Don't show previous shibboleth username on login page
-
-            set_login_session_preferences();
-
-            unset($SESSION->lang);
-            $SESSION->justloggedin = true;
-
+            complete_user_login($user);
             add_to_log(SITEID, 'user', 'login', ""view.php?id=$USER->id&course="".SITEID, $USER->id, 0, $USER->id);
 
             if (user_not_fully_set_up($USER)) {
",1.0,,1.0,,1.0,lime
CVE-2014-3552,CVE-2014-3552/b2d5a4ee3883bc399868d4e0c756578ba04c4162,https://github.com/moodle/moodle/commit/b2d5a4ee3883bc399868d4e0c756578ba04c4162,"<s>The Shibboleth authentication plugin in auth/shibboleth/index.php in Moodle through 2.3.11, 2.4.x before 2.4.11, and 2.5.x before 2.5.7 does not check whether a session ID is empty, which allows remote authenticated users to hijack sessions via crafted plugin interaction.</s>","<s>MDL-45469 Conditional availability: Restrict by text area broken
It has never worked, because the data for text area fields is not
loaded into the $USER object.
Changing it so that the dropdown list does not include these types
of field. (This 2.6 version of change is similar to the 2.7 code
but in a different location and without unit test.)
</s>"," diff --git a/lib/conditionlib.php b/lib/conditionlib.php
index 11616aef6fb..3a9b203e958 100644
--- a/lib/conditionlib.php
+++ b/lib/conditionlib.php
@@ -631,7 +631,7 @@ abstract class condition_info_base {
      * @return array Associative array from user field constants to display name
      */
     public static function get_condition_user_fields($formatoptions = null) {
-        global $DB;
+        global $DB, $CFG;
 
         $userfields = array(
             'firstname' => get_user_field_name('firstname'),
@@ -655,7 +655,19 @@ abstract class condition_info_base {
 
         // Go through the custom profile fields now
         if ($user_info_fields = $DB->get_records('user_info_field')) {
+            require_once($CFG->dirroot . '/user/profile/lib.php');
             foreach ($user_info_fields as $field) {
+                // This logic is the same as used in profile_user_record function
+                // to exclude some field types from being loaded into the $USER
+                // record.
+                require_once($CFG->dirroot . '/user/profile/field/' .
+                        $field->datatype . '/field.class.php');
+                $newfield = 'profile_field_' . $field->datatype;
+                $formfield = new $newfield();
+                if (!$formfield->is_user_object_data()) {
+                    continue;
+                }
+
                 if ($formatoptions) {
                     $userfields[$field->id] = format_string($field->name, true, $formatoptions);
                 } else {
",0.0,,0.0,,0.0,lime
CVE-2014-3552,CVE-2014-3552/dc97145785b9ae192168659c65309bca61a58151,https://github.com/moodle/moodle/commit/dc97145785b9ae192168659c65309bca61a58151,"<s>The Shibboleth authentication plugin in auth/shibboleth/index.php in Moodle through 2.3.11, 2.4.x before 2.4.11, and 2.5.x before 2.5.7 does not check whether a session ID is empty, which allows remote authenticated users to hijack sessions via crafted plugin interaction.</s>","<s>MDL-45760 make sure to check permission before setting header
</s>"," diff --git a/notes/index.php b/notes/index.php
index 62c01b9979d..b2cfe36882b 100644
--- a/notes/index.php
+++ b/notes/index.php
@@ -15,6 +15,10 @@ $userid       = optional_param('user', 0, PARAM_INT);
 $filtertype   = optional_param('filtertype', '', PARAM_ALPHA);
 $filterselect = optional_param('filterselect', 0, PARAM_INT);
 
+if (empty($CFG->enablenotes)) {
+    print_error('notesdisabled', 'notes');
+}
+
 $url = new moodle_url('/notes/index.php');
 if ($courseid != SITEID) {
     $url->param('course', $courseid);
@@ -61,11 +65,6 @@ if ($userid) {
 
 /// require login to access notes
 require_login($course);
-add_to_log($courseid, 'notes', 'view', 'index.php?course='.$courseid.'&amp;user='.$userid, 'view notes');
-
-if (empty($CFG->enablenotes)) {
-    print_error('notesdisabled', 'notes');
-}
 
 /// output HTML
 if ($course->id == SITEID) {
@@ -73,8 +72,11 @@ if ($course->id == SITEID) {
 } else {
     $coursecontext = context_course::instance($course->id);   // Course context
 }
+require_capability('moodle/notes:view', $coursecontext);
 $systemcontext = context_system::instance();   // SYSTEM context
 
+add_to_log($courseid, 'notes', 'view', 'index.php?course='.$courseid.'&amp;user='.$userid, 'view notes');
+
 $strnotes = get_string('notes', 'notes');
 if ($userid) {
     $PAGE->set_context(context_user::instance($user->id));
",0.0,,0.0,,0.0,lime
CVE-2014-3552,CVE-2014-3552/a7a0e1fea1b5fe968b62ca16bd5878c82eabfd4f,https://github.com/moodle/moodle/commit/a7a0e1fea1b5fe968b62ca16bd5878c82eabfd4f,"<s>The Shibboleth authentication plugin in auth/shibboleth/index.php in Moodle through 2.3.11, 2.4.x before 2.4.11, and 2.5.x before 2.5.7 does not check whether a session ID is empty, which allows remote authenticated users to hijack sessions via crafted plugin interaction.</s>","<s>Moodle release 2.5.7
</s>"," diff --git a/version.php b/version.php
index c1b02921e52..411d0525e61 100644
--- a/version.php
+++ b/version.php
@@ -29,11 +29,11 @@
 
 defined('MOODLE_INTERNAL') || die();
 
-$version  = 2013051406.03;              // 20130514      = branching date YYYYMMDD - do not modify!
+$version  = 2013051407.00;              // 20130514      = branching date YYYYMMDD - do not modify!
                                         //         RR    = release increments - 00 in DEV branches
                                         //           .XX = incremental changes
 
-$release  = '2.5.6+ (Build: 20140529)';  // Human-friendly version name
+$release  = '2.5.7 (Build: 20140714)';  // Human-friendly version name
 
 $branch   = '25';                       // this version's branch
 $maturity = MATURITY_STABLE;            // this version's maturity level
",0.0,,0.0,,0.0,lime
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2014-7848,CVE-2014-7848/f96d071f2a6839f4d84d37abf22e1976a2359b6a,https://github.com/moodle/moodle/commit/f96d071f2a6839f4d84d37abf22e1976a2359b6a,"<s>lib/phpunit/bootstrap.php in Moodle 2.6.x before 2.6.6 and 2.7.x before 2.7.3 allows remote attackers to obtain sensitive information via a direct request, which reveals the full path in an error message.</s>","<s>MDL-44257 message: added test to make sure the stored file still exists
</s>"," diff --git a/lib/moodlelib.php b/lib/moodlelib.php
index 12707d7d2d1..cafd6c6cfc3 100644
--- a/lib/moodlelib.php
+++ b/lib/moodlelib.php
@@ -5854,7 +5854,16 @@ function email_to_user($user, $from, $subject, $messagetext, $messagehtml = '',
         } else {
             require_once($CFG->libdir.'/filelib.php');
             $mimetype = mimeinfo('type', $attachname);
-            $mail->addAttachment($CFG->dataroot .'/'. $attachment, $attachname, 'base64', $mimetype);
+
+            $attachmentpath = $attachment;
+
+            // If the attachment is a full path to a file in the tempdir, use it as is,
+            // otherwise assume it is a relative path from the dataroot (for backwards compatibility reasons).
+            if (strpos($attachmentpath, $CFG->tempdir) !== 0) {
+                $attachmentpath = $CFG->dataroot . '/' . $attachmentpath;
+            }
+
+            $mail->addAttachment($attachmentpath, $attachname, 'base64', $mimetype);
         }
     }
 
",0.0,,0.0,,0.0,tfidf
CVE-2014-7848,CVE-2014-7848/0baf9763636aa4158a45ef2b539d2df0aa0bbd53,https://github.com/moodle/moodle/commit/0baf9763636aa4158a45ef2b539d2df0aa0bbd53,"<s>lib/phpunit/bootstrap.php in Moodle 2.6.x before 2.6.6 and 2.7.x before 2.7.3 allows remote attackers to obtain sensitive information via a direct request, which reveals the full path in an error message.</s>","<s>MDL-47287 prevent web access to phpunit boostrap
</s>"," diff --git a/lib/phpunit/bootstrap.php b/lib/phpunit/bootstrap.php
index 749bcfa8b73..c7684dcc81d 100644
--- a/lib/phpunit/bootstrap.php
+++ b/lib/phpunit/bootstrap.php
@@ -26,6 +26,10 @@
  * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
  */
 
+if (isset($_SERVER['REMOTE_ADDR'])) {
+    die; // No access from web!
+}
+
 // we want to know about all problems
 error_reporting(E_ALL | E_STRICT);
 ini_set('display_errors', '1');
",1.0,,1.0,,1.0,tfidf
CVE-2014-7848,CVE-2014-7848/c3cc812448af45da337e1779d1b6a1e20bdbd07f,https://github.com/moodle/moodle/commit/c3cc812448af45da337e1779d1b6a1e20bdbd07f,"<s>lib/phpunit/bootstrap.php in Moodle 2.6.x before 2.6.6 and 2.7.x before 2.7.3 allows remote attackers to obtain sensitive information via a direct request, which reveals the full path in an error message.</s>","<s>MDL-46182 Inefficient query during Moodle upgrade on course_section table.
This part of the code is changing an index on the course_sections table to be unique, for this to happen in the upgrade script the index must be deleted and then the new version added.
Before this change the following was being done:
* The index is removed
* A query to delete records that were not unique on this index is performed
* The unique version of the index is added
After this change the following happens:
* A query to delete records that were not unique on this index is performed
* The index is removed
* The unique version of the index is added
When the original index is present the query uses it, which greatly improves the execution plan.
Before the change an upgrade on a site with around 387967 course_section records the upgrade would be stuck on the delete query for many hours, after the change the time can be measured in minutes.
</s>"," diff --git a/lib/db/upgrade.php b/lib/db/upgrade.php
index e328a263721..1e692dd75c7 100644
--- a/lib/db/upgrade.php
+++ b/lib/db/upgrade.php
@@ -358,16 +358,6 @@ function xmldb_main_upgrade($oldversion) {
     if ($oldversion < 2012042300.00) {
         // This change makes the course_section index unique.
 
-        // xmldb does not allow changing index uniqueness - instead we must drop
-        // index then add it again
-        $table = new xmldb_table('course_sections');
-        $index = new xmldb_index('course_section', XMLDB_INDEX_NOTUNIQUE, array('course', 'section'));
-
-        // Conditionally launch drop index course_section
-        if ($dbman->index_exists($table, $index)) {
-            $dbman->drop_index($table, $index);
-        }
-
         // Look for any duplicate course_sections entries. There should not be
         // any but on some busy systems we found a few, maybe due to previous
         // bugs.
@@ -389,6 +379,19 @@ function xmldb_main_upgrade($oldversion) {
         $rs->close();
         $transaction->allow_commit();
 
+        // XMLDB does not allow changing index uniqueness - instead we must drop
+        // index then add it again.
+        // MDL-46182: The query to make the index unique uses the index,
+        // so the removal of the non-unique version needs to happen after any
+        // data changes have been made.
+        $table = new xmldb_table('course_sections');
+        $index = new xmldb_index('course_section', XMLDB_INDEX_NOTUNIQUE, array('course', 'section'));
+
+        // Conditionally launch drop index course_section.
+        if ($dbman->index_exists($table, $index)) {
+            $dbman->drop_index($table, $index);
+        }
+
         // Define index course_section (unique) to be added to course_sections
         $index = new xmldb_index('course_section', XMLDB_INDEX_UNIQUE, array('course', 'section'));
 
",0.0,,0.0,,0.0,tfidf
CVE-2014-7848,CVE-2014-7848/c58c99db60ed854f4fb182cb637c2865316c3631,https://github.com/moodle/moodle/commit/c58c99db60ed854f4fb182cb637c2865316c3631,"<s>lib/phpunit/bootstrap.php in Moodle 2.6.x before 2.6.6 and 2.7.x before 2.7.3 allows remote attackers to obtain sensitive information via a direct request, which reveals the full path in an error message.</s>","<s>MDL-47883 admin: Fix missing string in the plugin validation
</s>"," diff --git a/admin/tool/installaddon/lang/en/tool_installaddon.php b/admin/tool/installaddon/lang/en/tool_installaddon.php
index a55199a47e2..90c42b99eb0 100644
--- a/admin/tool/installaddon/lang/en/tool_installaddon.php
+++ b/admin/tool/installaddon/lang/en/tool_installaddon.php
@@ -66,6 +66,7 @@ $string['validationmsg_filenotexists'] = 'Extracted file not found';
 $string['validationmsg_filesnumber'] = 'Not enough files found in the package';
 $string['validationmsg_filestatus'] = 'Unable to extract all files';
 $string['validationmsg_filestatus_info'] = 'Attempting to extract file {$a->file} resulted in error \'{$a->status}\'.';
+$string['validationmsg_foundlangfile'] = 'Found language file';
 $string['validationmsg_maturity'] = 'Declared maturity level';
 $string['validationmsg_maturity_help'] = 'The add-on can declare its maturity level. If the maintainer considers the add-on stable, the declared maturity level will read MATURITY_STABLE. All other maturity levels (such as alpha or beta) should be considered unstable and a warning is raised.';
 $string['validationmsg_missingexpectedlangenfile'] = 'English language file name mismatch';
",0.0,,0.0,,0.0,tfidf
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2015-4050,CVE-2015-4050/d320d27699abcea12479cf608908fa91bcc133d4,https://github.com/fabpot/symfony/commit/d320d27699abcea12479cf608908fa91bcc133d4,"<s>FragmentListener in the HttpKernel component in Symfony 2.3.19 through 2.3.28, 2.4.9 through 2.4.10, 2.5.4 through 2.5.11, and 2.6.0 through 2.6.7, when ESI or SSI support enabled, does not check if the _controller attribute is set, which allows remote attackers to bypass URL signing and security rules by including (1) no hash or (2) an invalid hash in a request to /_fragment.</s>","<s>[HttpKernel] Do not call the FragmentListener if _controller is already defined
</s>"," diff --git a/src/Symfony/Component/HttpKernel/EventListener/FragmentListener.php b/src/Symfony/Component/HttpKernel/EventListener/FragmentListener.php
index 6f45c3b129..04193aadd2 100644
--- a/src/Symfony/Component/HttpKernel/EventListener/FragmentListener.php
+++ b/src/Symfony/Component/HttpKernel/EventListener/FragmentListener.php
@@ -58,7 +58,7 @@ class FragmentListener implements EventSubscriberInterface
     {
         $request = $event->getRequest();
 
-        if ($this->fragmentPath !== rawurldecode($request->getPathInfo())) {
+        if ($request->attributes->has('_controller') || $this->fragmentPath !== rawurldecode($request->getPathInfo())) {
             return;
         }
 
",1.0,,1.0,,1.0,none
CVE-2015-4050,CVE-2015-4050/54bb3995ab3eaaeee3dd88df0faf9d4e9bb986b1,https://github.com/fabpot/symfony/commit/54bb3995ab3eaaeee3dd88df0faf9d4e9bb986b1,"<s>FragmentListener in the HttpKernel component in Symfony 2.3.19 through 2.3.28, 2.4.9 through 2.4.10, 2.5.4 through 2.5.11, and 2.6.0 through 2.6.7, when ESI or SSI support enabled, does not check if the _controller attribute is set, which allows remote attackers to bypass URL signing and security rules by including (1) no hash or (2) an invalid hash in a request to /_fragment.</s>","<s>[EventDispatcher] make listeners removable from an executed listener
</s>"," diff --git a/src/Symfony/Component/HttpKernel/Tests/Debug/TraceableEventDispatcherTest.php b/src/Symfony/Component/HttpKernel/Tests/Debug/TraceableEventDispatcherTest.php
index c7a3edb890..89f181b4fc 100644
--- a/src/Symfony/Component/HttpKernel/Tests/Debug/TraceableEventDispatcherTest.php
+++ b/src/Symfony/Component/HttpKernel/Tests/Debug/TraceableEventDispatcherTest.php
@@ -223,6 +223,19 @@ class TraceableEventDispatcherTest extends \PHPUnit_Framework_TestCase
, $listener)
   $kernel->handle($request);
     }
iss
+this->wra public function testListenerCanRemoveItselfWhenExecuted()
++   {
+       fore $eventDispatcher = new TraceableEventDispatcher(new EventDispatcher(), new Stopwatch());
+        $listener1 = function () use ($eventDispatcher, &$listener1) {
+EventId][$wrappedListener];
+
 $eventDispatcher->removeListener('foo', $listener1);
+originalListener === $listener) };
+        $eventDispatcher->addListener('foo', $listener1);
+ppedListeners[$this-> $eventDispatcher->addListener('foo', function () {});
+        $eventDispatcher->dispatch('foo');
+
+->removeListener($eventName, $this->assertCount(1, $eventDispatcher->getListeners('foo'), 'expected listener1 to be removed');
+    }
+

+   protected function getHttpKernel($dispatcher, $controller)
   return $ {
dispatcher->removeListener($event $resolver = $this->getMock('Symfony\Component\HttpKernel\Controller\ControllerResolverInterface');
",0.0,,0.0,,0.0,none
CVE-2015-4050,CVE-2015-4050/5930800cfd904db6e8c646e5e90756d346268c96,https://github.com/fabpot/symfony/commit/5930800cfd904db6e8c646e5e90756d346268c96,"<s>FragmentListener in the HttpKernel component in Symfony 2.3.19 through 2.3.28, 2.4.9 through 2.4.10, 2.5.4 through 2.5.11, and 2.6.0 through 2.6.7, when ESI or SSI support enabled, does not check if the _controller attribute is set, which allows remote attackers to bypass URL signing and security rules by including (1) no hash or (2) an invalid hash in a request to /_fragment.</s>","<s>[HttpKernel] Handle an array vary header in the http cache store
</s>"," diff --git a/src/Symfony/Component/HttpKernel/HttpCache/Store.php b/src/Symfony/Component/HttpKernel/HttpCache/Store.php
index fcd9a25254..4901e2cf29 100644
--- a/src/Symfony/Component/HttpKernel/HttpCache/Store.php
+++ b/src/Symfony/Component/HttpKernel/HttpCache/Store.php
@@ -127,7 +127,7 @@ class Store implements StoreInterface
         // find a cached entry that matches the request.
         $match = null;
         foreach ($entries as $entry) {
-            if ($this->requestsMatch(isset($entry[1]['vary'][0]) ? $entry[1]['vary'][0] : '', $request->headers->all(), $entry[0])) {
+            if ($this->requestsMatch(isset($entry[1]['vary'][0]) ? implode(', ', $entry[1]['vary']) : '', $request->headers->all(), $entry[0])) {
                 $match = $entry;
 
                 break;
",0.0,,0.0,,0.0,none
CVE-2015-4050,CVE-2015-4050/b6e0a9246d4d524ec701428e4e04faa100497f2f,https://github.com/fabpot/symfony/commit/b6e0a9246d4d524ec701428e4e04faa100497f2f,"<s>FragmentListener in the HttpKernel component in Symfony 2.3.19 through 2.3.28, 2.4.9 through 2.4.10, 2.5.4 through 2.5.11, and 2.6.0 through 2.6.7, when ESI or SSI support enabled, does not check if the _controller attribute is set, which allows remote attackers to bypass URL signing and security rules by including (1) no hash or (2) an invalid hash in a request to /_fragment.</s>","<s>[HttpKernel][Bundle] Check extension implements ExtensionInterface
- Avoid fatal errors on line 89 (calling getAlias on objects of
  unknown type).
- Help developers solve problems with their extensions
</s>"," diff --git a/src/Symfony/Component/HttpKernel/Bundle/Bundle.php b/src/Symfony/Component/HttpKernel/Bundle/Bundle.php
index 51070c5963..43adbb0bfd 100644
--- a/src/Symfony/Component/HttpKernel/Bundle/Bundle.php
+++ b/src/Symfony/Component/HttpKernel/Bundle/Bundle.php
@@ -78,6 +78,13 @@ abstract class Bundle extends ContainerAware implements BundleInterface
             if (class_exists($class)) {
                 $extension = new $class();
 
+                if (!$extension instanceof ExtensionInterface) {
+                    throw new \LogicException(sprintf(
+                        'Extension %s must implement Symfony\Component\DependencyInjection\Extension\ExtensionInterface.',
+                        $class
+                    ));
+                }
+
                 // check naming convention
                 $expectedAlias = Container::underscore($basename);
                 if ($expectedAlias != $extension->getAlias()) {
",0.0,,0.0,,0.0,none
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2015-5322,CVE-2015-5322/5431e397216b4ab80e58bdabcb06a0066bce6592,https://github.com/jenkinsci/jenkins/commit/5431e397216b4ab80e58bdabcb06a0066bce6592,<s>Directory traversal vulnerability in Jenkins before 1.638 and LTS before 1.625.2 allows remote attackers to list directory contents and read arbitrary files in the Jenkins servlet resources via directory traversal sequences in a request to jnlpJars/.</s>,"<s>[SECURITY-195] - Throw the MalformedURLException if the request includes the relative addressing
</s>"," diff --git a/core/src/main/java/hudson/model/Slave.java b/core/src/main/java/hudson/model/Slave.java
index 5c1a204796..3b20de4ad0 100644
--- a/core/src/main/java/hudson/model/Slave.java
+++ b/core/src/main/java/hudson/model/Slave.java
@@ -323,6 +323,13 @@ public abstract class Slave extends Node implements Serializable {
         public URL getURL() throws MalformedURLException {
             String name = fileName;
             if (name.equals(""hudson-cli.jar""))  name=""jenkins-cli.jar"";
+            
+            // Prevent the sandbox escaping (SECURITY-195)
+            if (name.contains("".."")) {
+                throw new MalformedURLException(""The specified file path "" + fileName + "" contains '..'. ""
+                        + ""The path is not allowed due to security reasons"");
+            }
+            
             URL res = Jenkins.getInstance().servletContext.getResource(""/WEB-INF/"" + name);
             if(res==null) {
                 // during the development this path doesn't have the files.
",1.0,,1.0,,1.0,lime
CVE-2015-5322,CVE-2015-5322/672f8deb6859bb32e428e33ae83aafa04a196f38,https://github.com/jenkinsci/jenkins/commit/672f8deb6859bb32e428e33ae83aafa04a196f38,<s>Directory traversal vulnerability in Jenkins before 1.638 and LTS before 1.625.2 allows remote attackers to list directory contents and read arbitrary files in the Jenkins servlet resources via directory traversal sequences in a request to jnlpJars/.</s>,"<s>Remove the dead code
</s>"," diff --git a/test/src/test/java/hudson/model/SlaveTest2.java b/test/src/test/java/hudson/model/SlaveTest2.java
index bc57f7ec99..a88824ff55 100644
--- a/test/src/test/java/hudson/model/SlaveTest2.java
+++ b/test/src/test/java/hudson/model/SlaveTest2.java
@@ -84,10 +84,6 @@ public class SlaveTest2 {
             return;
         }
         fail(""Expected the MalformedURLException for "" + url);
-        
-        // Access from a Web client
-        JenkinsRule.WebClient client = rule.createWebClient();
-        client.assertFails(""jnlpJars/"" + URLEncoder.encode(url, ""UTF-8""), 500);
     }
     
     private void assertJnlpJarUrlIsAllowed(@Nonnull Slave slave, @Nonnull String url) throws Exception {
",0.0,,0.0,,0.0,lime
CVE-2015-5322,CVE-2015-5322/054a329c59171ca12ff98f7063ce7fd053ee08bf,https://github.com/jenkinsci/jenkins/commit/054a329c59171ca12ff98f7063ce7fd053ee08bf,<s>Directory traversal vulnerability in Jenkins before 1.638 and LTS before 1.625.2 allows remote attackers to list directory contents and read arbitrary files in the Jenkins servlet resources via directory traversal sequences in a request to jnlpJars/.</s>,"<s>[SECURITY-206] Need to call ChannelConfigurator on JNLP slave channels.
</s>"," diff --git a/core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol.java b/core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol.java
index d82a42e51a..f69211cf8c 100644
--- a/core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol.java
+++ b/core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol.java
@@ -9,6 +9,7 @@ import hudson.remoting.Engine;
 import hudson.slaves.SlaveComputer;
 import jenkins.AgentProtocol;
 import jenkins.model.Jenkins;
+import jenkins.security.ChannelConfigurator;
 import jenkins.security.HMACConfidentialKey;
 import org.jenkinsci.remoting.nio.NioChannelHub;
 
@@ -117,6 +118,10 @@ public class JnlpSlaveAgentProtocol extends AgentProtocol {
             try {
                 ChannelBuilder cb = createChannelBuilder(nodeName);
 
+                for (ChannelConfigurator cc : ChannelConfigurator.all()) {
+                    cc.onChannelBuilding(cb, computer);
+                }
+
                 computer.setChannel(cb.withHeaderStream(log).build(socket), log,
                     new Listener() {
                         @Override
",0.0,,0.0,,0.0,lime
CVE-2015-5322,CVE-2015-5322/1002ada4ddef9109b3d9775c911eea6d9c1330db,https://github.com/jenkinsci/jenkins/commit/1002ada4ddef9109b3d9775c911eea6d9c1330db,<s>Directory traversal vulnerability in Jenkins before 1.638 and LTS before 1.625.2 allows remote attackers to list directory contents and read arbitrary files in the Jenkins servlet resources via directory traversal sequences in a request to jnlpJars/.</s>,"<s>[SECURITY-195] - Direct unit test for the issue
</s>"," diff --git a/test/src/test/java/hudson/model/SlaveTest2.java b/test/src/test/java/hudson/model/SlaveTest2.java
new file mode 100644
index 0000000000..532fa858c5
--- /dev/null
+++ b/test/src/test/java/hudson/model/SlaveTest2.java
@@ -0,0 +1,66 @@
+/*
+ * The MIT License
+ *
+ * Copyright (c) 2015 CloudBees, Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the ""Software""), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+package hudson.model;
+
+import java.net.MalformedURLException;
+import org.junit.Rule;
+import org.junit.Test;
+import org.jvnet.hudson.test.JenkinsRule;
+
+import static org.junit.Assert.*;
+import org.jvnet.hudson.test.Bug;
+
+/**
+ * Tests for the {@link Slave} class.
+ * There is also a Groovy implementation of such test file, hence the class name 
+ * has an index.
+ * @author Oleg Nenashev
+ */
+public class SlaveTest2 {
+    
+    @Rule
+    public JenkinsRule rule = new JenkinsRule();
+    
+    @Test
+    //TODO: uncomment after upgrading to the new core version (1.580+)
+    //@Issue(""SECURITY-195"")
+    public void shouldNotEscapeJnlpSlavesResources() throws Exception {
+        Slave slave = rule.createSlave();
+        
+        // Raw access to API
+        Slave.JnlpJar jnlpJar = slave.getComputer().getJnlpJars(""../"");
+        try {
+            jnlpJar.getURL();
+        } catch (MalformedURLException ex) {
+            // we expect the exception here
+            ex.printStackTrace();
+            return;
+        }
+        fail(""Expected the MalformedURLException"");
+        
+        // Access from a Web client
+        JenkinsRule.WebClient client = rule.createWebClient();
+        client.assertFails(""jnlpJars/..%f"", 500);
+    }
+}
",0.0,,0.0,,0.0,lime
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2016-8654,CVE-2016-8654/4a59cfaf9ab3d48fca4a15c0d2674bf7138e3d1a,https://github.com/jasper-software/jasper/commit/4a59cfaf9ab3d48fca4a15c0d2674bf7138e3d1a,<s>A heap-buffer overflow vulnerability was found in QMFB code in JPC codec caused by buffer being allocated with too small size. jasper versions before 2.0.0 are affected.</s>,"<s>Fixed a buffer overrun problem in the QMFB code in the JPC codec
that was caused by a buffer being allocated with a size that was too small
in some cases.
Added a new regression test case.
</s>"," diff --git a/src/libjasper/jpc/jpc_qmfb.c b/src/libjasper/jpc/jpc_qmfb.c
index 45be24e..f26070f 100644
--- a/src/libjasper/jpc/jpc_qmfb.c
+++ b/src/libjasper/jpc/jpc_qmfb.c
@@ -374,7 +374,7 @@ void jpc_qmfb_split_col(jpc_fix_t *a, int numrows, int stride,
 	register jpc_fix_t *dstptr;
 	register int n;
 	register int m;
-	int hstartcol;
+	int hstartrow;
 
 	/* Get a buffer. */
 	if (bufsize > QMFB_SPLITBUFSIZE) {
@@ -385,9 +385,9 @@ void jpc_qmfb_split_col(jpc_fix_t *a, int numrows, int stride,
 	}
 
 	if (numrows >= 2) {
-		hstartcol = (numrows + 1 - parity) >> 1;
-		// ORIGINAL (WRONG): m = (parity) ? hstartcol : (numrows - hstartcol);
-		m = numrows - hstartcol;
+		hstartrow = (numrows + 1 - parity) >> 1;
+		// ORIGINAL (WRONG): m = (parity) ? hstartrow : (numrows - hstartrow);
+		m = numrows - hstartrow;
 
 		/* Save the samples destined for the highpass channel. */
 		n = m;
@@ -408,7 +408,7 @@ void jpc_qmfb_split_col(jpc_fix_t *a, int numrows, int stride,
 			srcptr += stride << 1;
 		}
 		/* Copy the saved samples into the highpass channel. */
-		dstptr = &a[hstartcol * stride];
+		dstptr = &a[hstartrow * stride];
 		srcptr = buf;
 		n = m;
 		while (n-- > 0) {
@@ -439,20 +439,21 @@ void jpc_qmfb_split_colgrp(jpc_fix_t *a, int numrows, int stride,
 	register int n;
 	register int i;
 	int m;
-	int hstartcol;
+	int hstartrow;
 
 	/* Get a buffer. */
 	if (bufsize > QMFB_SPLITBUFSIZE) {
-		if (!(buf = jas_alloc2(bufsize, sizeof(jpc_fix_t)))) {
+		if (!(buf = jas_alloc3(bufsize, JPC_QMFB_COLGRPSIZE,
+		  sizeof(jpc_fix_t)))) {
 			/* We have no choice but to commit suicide in this case. */
 			abort();
 		}
 	}
 
 	if (numrows >= 2) {
-		hstartcol = (numrows + 1 - parity) >> 1;
-		// ORIGINAL (WRONG): m = (parity) ? hstartcol : (numrows - hstartcol);
-		m = numrows - hstartcol;
+		hstartrow = (numrows + 1 - parity) >> 1;
+		// ORIGINAL (WRONG): m = (parity) ? hstartrow : (numrows - hstartrow);
+		m = numrows - hstartrow;
 
 		/* Save the samples destined for the highpass channel. */
 		n = m;
@@ -485,7 +486,7 @@ void jpc_qmfb_split_colgrp(jpc_fix_t *a, int numrows, int stride,
 			srcptr += stride << 1;
 		}
 		/* Copy the saved samples into the highpass channel. */
-		dstptr = &a[hstartcol * stride];
+		dstptr = &a[hstartrow * stride];
 		srcptr = buf;
 		n = m;
 		while (n-- > 0) {
@@ -526,7 +527,7 @@ void jpc_qmfb_split_colres(jpc_fix_t *a, int numrows, int numcols,
 
 	/* Get a buffer. */
 	if (bufsize > QMFB_SPLITBUFSIZE) {
-		if (!(buf = jas_alloc2(bufsize, sizeof(jpc_fix_t)))) {
+		if (!(buf = jas_alloc3(bufsize, numcols, sizeof(jpc_fix_t)))) {
 			/* We have no choice but to commit suicide in this case. */
 			abort();
 		}
@@ -721,7 +722,8 @@ void jpc_qmfb_join_colgrp(jpc_fix_t *a, int numrows, int stride,
 
 	/* Allocate memory for the join buffer from the heap. */
 	if (bufsize > QMFB_JOINBUFSIZE) {
-		if (!(buf = jas_alloc3(bufsize, JPC_QMFB_COLGRPSIZE, sizeof(jpc_fix_t)))) {
+		if (!(buf = jas_alloc3(bufsize, JPC_QMFB_COLGRPSIZE,
+		  sizeof(jpc_fix_t)))) {
 			/* We have no choice but to commit suicide. */
 			abort();
 		}
",1.0,,1.0,,1.0,none
CVE-2016-8654,CVE-2016-8654/aa0b0f79ade5eef8b0e7a214c03f5af54b36ba7d,https://github.com/jasper-software/jasper/commit/aa0b0f79ade5eef8b0e7a214c03f5af54b36ba7d,<s>A heap-buffer overflow vulnerability was found in QMFB code in JPC codec caused by buffer being allocated with too small size. jasper versions before 2.0.0 are affected.</s>,"<s>Fixed numerous integer overflow problems in the code for packet iterators
in the JPC decoder.
</s>"," diff --git a/src/libjasper/jpc/jpc_t2cod.c b/src/libjasper/jpc/jpc_t2cod.c
index 679516f..5e2c862 100644
--- a/src/libjasper/jpc/jpc_t2cod.c
+++ b/src/libjasper/jpc/jpc_t2cod.c
@@ -198,7 +198,8 @@ static int jpc_pi_nextrlcp(register jpc_pi_t *pi)
 		  JAS_CAST(int, pchg->lyrnoend); ++pi->lyrno) {
 			for (pi->compno = pchg->compnostart, pi->picomp =
 			  &pi->picomps[pi->compno]; pi->compno < pi->numcomps &&
-			  pi->compno < JAS_CAST(int, pchg->compnoend); ++pi->compno, ++pi->picomp) {
+			  pi->compno < JAS_CAST(int, pchg->compnoend); ++pi->compno,
+			  ++pi->picomp) {
 				if (pi->rlvlno >= pi->picomp->numrlvls) {
 					continue;
 				}
@@ -247,10 +248,17 @@ static int jpc_pi_nextrpcl(register jpc_pi_t *pi)
 		  ++compno, ++picomp) {
 			for (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <
 			  picomp->numrlvls; ++rlvlno, ++pirlvl) {
-				xstep = picomp->hsamp * (1 << (pirlvl->prcwidthexpn +
-				  picomp->numrlvls - rlvlno - 1));
-				ystep = picomp->vsamp * (1 << (pirlvl->prcheightexpn +
-				  picomp->numrlvls - rlvlno - 1));
+				// Check for the potential for overflow problems.
+				if (pirlvl->prcwidthexpn + pi->picomp->numrlvls >
+				  JAS_UINTFAST32_NUMBITS - 2 ||
+				  pirlvl->prcheightexpn + pi->picomp->numrlvls >
+				  JAS_UINTFAST32_NUMBITS - 2) {
+					return -1;
+				}
+				xstep = picomp->hsamp * (JAS_CAST(uint_fast32_t, 1) <<
+				  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1));
+				ystep = picomp->vsamp * (JAS_CAST(uint_fast32_t, 1) <<
+				  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1));
 				pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);
 				pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);
 			}
@@ -280,21 +288,24 @@ static int jpc_pi_nextrpcl(register jpc_pi_t *pi)
 					rpy = r + pi->pirlvl->prcheightexpn;
 					trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);
 					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);
-					if (((pi->x == pi->xstart && ((trx0 << r) % (1 << rpx)))
-					  || !(pi->x % (1 << rpx))) &&
-					  ((pi->y == pi->ystart && ((try0 << r) % (1 << rpy)))
-					  || !(pi->y % (1 << rpy)))) {
-						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x, pi->picomp->hsamp
-						  << r), pi->pirlvl->prcwidthexpn) - JPC_FLOORDIVPOW2(trx0,
-						  pi->pirlvl->prcwidthexpn);
-						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y, pi->picomp->vsamp
-						  << r), pi->pirlvl->prcheightexpn) - JPC_FLOORDIVPOW2(try0,
-						  pi->pirlvl->prcheightexpn);
+					if (((pi->x == pi->xstart &&
+					  ((trx0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpx)))
+					  || !(pi->x % (JAS_CAST(uint_fast32_t, 1) << rpx))) &&
+					  ((pi->y == pi->ystart &&
+					  ((try0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpy)))
+					  || !(pi->y % (JAS_CAST(uint_fast32_t, 1) << rpy)))) {
+						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x,
+						  pi->picomp->hsamp << r), pi->pirlvl->prcwidthexpn) -
+						  JPC_FLOORDIVPOW2(trx0, pi->pirlvl->prcwidthexpn);
+						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y,
+						  pi->picomp->vsamp << r), pi->pirlvl->prcheightexpn) -
+						  JPC_FLOORDIVPOW2(try0, pi->pirlvl->prcheightexpn);
 						pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;
 
 						assert(pi->prcno < pi->pirlvl->numprcs);
 						for (pi->lyrno = 0; pi->lyrno <
-						  pi->numlyrs && pi->lyrno < JAS_CAST(int, pchg->lyrnoend); ++pi->lyrno) {
+						  pi->numlyrs && pi->lyrno < JAS_CAST(int,
+						  pchg->lyrnoend); ++pi->lyrno) {
 							prclyrno = &pi->pirlvl->prclyrnos[pi->prcno];
 							if (pi->lyrno >= *prclyrno) {
 								++(*prclyrno);
@@ -339,16 +350,19 @@ static int jpc_pi_nextpcrl(register jpc_pi_t *pi)
 		  ++compno, ++picomp) {
 			for (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <
 			  picomp->numrlvls; ++rlvlno, ++pirlvl) {
-				xstep = picomp->hsamp * (1 <<
-				  (pirlvl->prcwidthexpn + picomp->numrlvls -
-				  rlvlno - 1));
-				ystep = picomp->vsamp * (1 <<
-				  (pirlvl->prcheightexpn + picomp->numrlvls -
-				  rlvlno - 1));
-				pi->xstep = (!pi->xstep) ? xstep :
-				  JAS_MIN(pi->xstep, xstep);
-				pi->ystep = (!pi->ystep) ? ystep :
-				  JAS_MIN(pi->ystep, ystep);
+				// Check for the potential for overflow problems.
+				if (pirlvl->prcwidthexpn + pi->picomp->numrlvls >
+				  JAS_UINTFAST32_NUMBITS - 2 ||
+				  pirlvl->prcheightexpn + pi->picomp->numrlvls >
+				  JAS_UINTFAST32_NUMBITS - 2) {
+					return -1;
+				}
+				xstep = picomp->hsamp * (JAS_CAST(uint_fast32_t, 1) <<
+				  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1));
+				ystep = picomp->vsamp * (JAS_CAST(uint_fast32_t, 1) <<
+				  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1));
+				pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);
+				pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);
 			}
 		}
 		pi->prgvolfirst = 0;
@@ -375,20 +389,23 @@ static int jpc_pi_nextpcrl(register jpc_pi_t *pi)
 					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);
 					rpx = r + pi->pirlvl->prcwidthexpn;
 					rpy = r + pi->pirlvl->prcheightexpn;
-					if (((pi->x == pi->xstart && ((trx0 << r) % (1 << rpx))) ||
+",0.0,,0.0,,0.0,none
CVE-2016-8654,CVE-2016-8654/6c6c123465d8299b60cc527c1c2983c29368e8d6,https://github.com/jasper-software/jasper/commit/6c6c123465d8299b60cc527c1c2983c29368e8d6,<s>A heap-buffer overflow vulnerability was found in QMFB code in JPC codec caused by buffer being allocated with too small size. jasper versions before 2.0.0 are affected.</s>,"<s>Fixed a minor const correctness issue in the JPC codec.
</s>"," diff --git a/src/libjasper/jpc/jpc_util.h b/src/libjasper/jpc/jpc_util.h
index 526312a..d123160 100644
--- a/src/libjasper/jpc/jpc_util.h
+++ b/src/libjasper/jpc/jpc_util.h
@@ -63,7 +63,7 @@
 #define JPC_UTIL_H
 
 /* Parse a comma separated list of real numbers into an array of doubles. */
-int jpc_atoaf(char *s, int *numvalues, double **values);
+int jpc_atoaf(const char *s, int *numvalues, double **values);
 
 /* Upsample a sequence. */
 jas_seq_t *jpc_seq_upsample(jas_seq_t *seq, int n);
",0.0,,0.0,,0.0,none
CVE-2016-8654,CVE-2016-8654/da11593fc485dd3c47af0f3118f11a102e1aa3d9,https://github.com/jasper-software/jasper/commit/da11593fc485dd3c47af0f3118f11a102e1aa3d9,<s>A heap-buffer overflow vulnerability was found in QMFB code in JPC codec caused by buffer being allocated with too small size. jasper versions before 2.0.0 are affected.</s>,"<s>Fixed the incorrect placement of a test file.
</s>"," diff --git a/data/test/bad/PoC1.jpc b/data/test/bad/PoC1.jpc
deleted file mode 100644
index 9523954..0000000
Binary files a/data/test/bad/PoC1.jpc and /dev/null differ
",0.0,,0.0,,0.0,none
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2011-2197,CVE-2011-2197/53a2c0baf2b128dd4808eca313256f6f4bb8c4cd,https://github.com/rails/rails/commit/53a2c0baf2b128dd4808eca313256f6f4bb8c4cd,"<s>The cross-site scripting (XSS) prevention feature in Ruby on Rails 2.x before 2.3.12, 3.0.x before 3.0.8, and 3.1.x before 3.1.0.rc2 does not properly handle mutation of safe buffers, which makes it easier for remote attackers to conduct XSS attacks via crafted strings to an application that uses a problematic string method, as demonstrated by the sub method.</s>","<s>Ensure that the strings returned by SafeBuffer#gsub and friends aren't considered html_safe?
Also make sure that the versions of those methods which modify a string in place such as gsub! can't be called on safe buffers at all.
</s>"," diff --git a/activesupport/test/safe_buffer_test.rb b/activesupport/test/safe_buffer_test.rb
index bf61f9e58c..4371f35e3b 100644
--- a/activesupport/test/safe_buffer_test.rb
+++ b/activesupport/test/safe_buffer_test.rb
@@ -38,4 +38,16 @@ def setup
     new_buffer = @buffer.to_s
     assert_equal ActiveSupport::SafeBuffer, new_buffer.class
   end
+
+  test ""Should not return safe buffer from gsub"" do
+    altered_buffer = @buffer.gsub('', 'asdf')
+    assert_equal 'asdf', altered_buffer
+    assert !altered_buffer.html_safe?
+  end
+
+  test ""Should not allow gsub! on safe buffers"" do
+    assert_raise TypeError do
+      @buffer.gsub!('', 'asdf')
+    end
+  end
 end
",1.0,,1.0,,1.0,none
CVE-2011-2197,CVE-2011-2197/d75652540e8bb9fd565e1d251e6fcd9c3f2e8516,https://github.com/rails/rails/commit/d75652540e8bb9fd565e1d251e6fcd9c3f2e8516,"<s>The cross-site scripting (XSS) prevention feature in Ruby on Rails 2.x before 2.3.12, 3.0.x before 3.0.8, and 3.1.x before 3.1.0.rc2 does not properly handle mutation of safe buffers, which makes it easier for remote attackers to conduct XSS attacks via crafted strings to an application that uses a problematic string method, as demonstrated by the sub method.</s>","<s>bumping to 3.0.8.rc2
</s>"," diff --git a/activerecord/lib/active_record/version.rb b/activerecord/lib/active_record/version.rb
index 5641681613..54f9e8775a 100644
--- a/activerecord/lib/active_record/version.rb
+++ b/activerecord/lib/active_record/version.rb
@@ -3,7 +3,7 @@ module VERSION #:nodoc:
:
   MAJOR = 3
 3
   MINOR = 0
 0
   TINYIN = 8
-
-  PRE  PRE = ""rc1""
+
+  PRE  PRE = ""rc2""
""
 
   STRING = [MAJOR, MINOR, TINY, PRE].compact.join('.')
)
 end
 end
",0.0,,0.0,,0.0,none
CVE-2011-2197,CVE-2011-2197/7d2f47234b91044577a390268e08db50aa3f49c9,https://github.com/rails/rails/commit/7d2f47234b91044577a390268e08db50aa3f49c9,"<s>The cross-site scripting (XSS) prevention feature in Ruby on Rails 2.x before 2.3.12, 3.0.x before 3.0.8, and 3.1.x before 3.1.0.rc2 does not properly handle mutation of safe buffers, which makes it easier for remote attackers to conduct XSS attacks via crafted strings to an application that uses a problematic string method, as demonstrated by the sub method.</s>","<s>Fix console to accept [environment] [options] as specified in docs.
</s>"," diff --git a/railties/lib/rails/commands/console.rb b/railties/lib/rails/commands/console.rb
index de2f190ad5..66dbb5d11e 100644
--- a/railties/lib/rails/commands/console.rb
+++ b/railties/lib/rails/commands/console.rb
@@ -47,6 +47,6 @@ def start
 end
 
 # Has to set the RAILS_ENV before config/application is required
-if ARGV.first && !ARGV.first.index(""-"") && env = ARGV.pop # has to pop the env ARGV so IRB doesn't freak
+if ARGV.first && !ARGV.first.index(""-"") && env = ARGV.shift # has to shift the env ARGV so IRB doesn't freak
   ENV['RAILS_ENV'] = %w(production development test).detect {|e| e =~ /^#{env}/} || env
 end
",0.0,,0.0,,0.0,none
CVE-2011-2197,CVE-2011-2197/579d044279015d187660ee62b8b06a3522fbfb96,https://github.com/rails/rails/commit/579d044279015d187660ee62b8b06a3522fbfb96,"<s>The cross-site scripting (XSS) prevention feature in Ruby on Rails 2.x before 2.3.12, 3.0.x before 3.0.8, and 3.1.x before 3.1.0.rc2 does not properly handle mutation of safe buffers, which makes it easier for remote attackers to conduct XSS attacks via crafted strings to an application that uses a problematic string method, as demonstrated by the sub method.</s>","<s>adding a test for #1322
</s>"," diff --git a/activerecord/test/cases/associations/eager_test.rb b/activerecord/test/cases/associations/eager_test.rb
index 4e258d3cc7..476e3e45f5 100644
--- a/activerecord/test/cases/associations/eager_test.rb
+++ b/activerecord/test/cases/associations/eager_test.rb
@@ -357,6 +357,21 @@ def test_eager_load_has_many_with_string_keys
     assert_equal subscriptions, subscriber.subscriptions.sort_by(&:id)
   end
 
+  def test_string_id_column_joins
+    s = Subscriber.create! do |c|
+      c.id = ""PL""
+    end
+
+    b = Book.create! do |t|
+      t.id = ""UE""
+    end
+
+    Subscription.create!(:subscriber_id => ""PL"", :book_id => ""UE"")
+    s.reload
+    s.books
+    s.book_ids = s.book_ids
+  end
+
   def test_eager_load_has_many_through_with_string_keys
     books = books(:awdr, :rfr)
     subscriber = Subscriber.find(subscribers(:second).id, :include => :books)
",0.0,,0.0,,0.0,none
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2014-7834,CVE-2014-7834/3aa9d93c7a78d14fa30e2afbfd8fa7e09bc9cb41,https://github.com/moodle/moodle/commit/3aa9d93c7a78d14fa30e2afbfd8fa7e09bc9cb41,"<s>mod/forum/externallib.php in Moodle 2.6.x before 2.6.6 and 2.7.x before 2.7.3 does not verify group permissions, which allows remote authenticated users to access a forum via the forum_get_discussions web service.</s>","<s>MDL-45303 Web Services: forum_get_discussions ws misses permissions check
</s>"," diff --git a/mod/forum/tests/externallib_test.php b/mod/forum/tests/externallib_test.php
index 21c46290817..b3f15ceeed9 100644
--- a/mod/forum/tests/externallib_test.php
+++ b/mod/forum/tests/externallib_test.php
@@ -177,11 +177,6 @@ class mod_forum_external_testcase extends externallib_advanced_testcase {
         $record->trackingtype = FORUM_TRACKING_FORCED;
         $forum2 = self::getDataGenerator()->create_module('forum', $record);
 
-        // Third forum where we will only have one discussion with no replies.
-        $record = new stdClass();
-        $record->course = $course2->id;
-        $forum3 = self::getDataGenerator()->create_module('forum', $record);
-
         // Add discussions to the forums.
         $record = new stdClass();
         $record->course = $course1->id;
@@ -195,12 +190,6 @@ class mod_forum_external_testcase extends externallib_advanced_testcase {
         $record->forum = $forum2->id;
         $discussion2 = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_discussion($record);
 
-        $record = new stdClass();
-        $record->course = $course2->id;
-        $record->userid = $user2->id;
-        $record->forum = $forum3->id;
-        $discussion3 = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_discussion($record);
-
         // Add three replies to the discussion 1 from different users.
         $record = new stdClass();
         $record->discussion = $discussion1->id;
@@ -227,12 +216,12 @@ class mod_forum_external_testcase extends externallib_advanced_testcase {
         $discussion2reply2 = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_post($record);
 
         // Check the forums were correctly created.
-        $this->assertEquals(3, $DB->count_records_select('forum', 'id = :forum1 OR id = :forum2 OR id = :forum3',
-                array('forum1' => $forum1->id, 'forum2' => $forum2->id, 'forum3' => $forum3->id)));
+        $this->assertEquals(2, $DB->count_records_select('forum', 'id = :forum1 OR id = :forum2',
+                array('forum1' => $forum1->id, 'forum2' => $forum2->id)));
 
         // Check the discussions were correctly created.
-        $this->assertEquals(3, $DB->count_records_select('forum_discussions', 'forum = :forum1 OR forum = :forum2
-                OR id = :forum3', array('forum1' => $forum1->id, 'forum2' => $forum2->id, 'forum3' => $forum3->id)));
+        $this->assertEquals(2, $DB->count_records_select('forum_discussions', 'forum = :forum1 OR forum = :forum2',
+                                                            array('forum1' => $forum1->id, 'forum2' => $forum2->id)));
 
         // Check the posts were correctly created, don't forget each discussion created also creates a post.
         $this->assertEquals(7, $DB->count_records_select('forum_posts', 'discussion = :discussion1 OR discussion = :discussion2',
@@ -261,11 +250,6 @@ class mod_forum_external_testcase extends externallib_advanced_testcase {
         $newrole = create_role('Role 2', 'role2', 'Role 2 description');
         $this->assignUserCapability('mod/forum:viewdiscussion', $context->id, $newrole);
 
-        // Assign capabilities to view discussions for forum 3.
-        $cm = get_coursemodule_from_id('forum', $forum3->cmid, 0, false, MUST_EXIST);
-        $context = context_module::instance($cm->id);
-        $this->assignUserCapability('mod/forum:viewdiscussion', $context->id, $newrole);
-
         // Create what we expect to be returned when querying the forums.
         $expecteddiscussions = array();
         $expecteddiscussions[$discussion1->id] = array(
@@ -322,47 +306,21 @@ class mod_forum_external_testcase extends externallib_advanced_testcase {
                 'lastuserpicture' => $user3->picture,
                 'lastuseremail' => $user3->email
             );
-            $expecteddiscussions[$discussion3->id] = array(
-                'id' => $discussion3->id,
-                'course' => $discussion3->course,
-                'forum' => $discussion3->forum,
-                'name' => $discussion3->name,
-                'firstpost' => $discussion3->firstpost,
-                'userid' => $discussion3->userid,
-                'groupid' => $discussion3->groupid,
-                'assessed' => $discussion3->assessed,
-                'timemodified' => $discussion3->timemodified,
-                'usermodified' => $discussion3->usermodified,
-                'timestart' => $discussion3->timestart,
-                'timeend' => $discussion3->timeend,
-                'firstuserfullname' => fullname($user2),
-                'firstuserimagealt' => $user2->imagealt,
-                'firstuserpicture' => $user2->picture,
-                'firstuseremail' => $user2->email,
-                'subject' => $discussion3->name,
-                'numreplies' => 0,
-                'numunread' => 1,
-                'lastpost' => $discussion3->firstpost,
-                'lastuserid' => $user2->id,
-                'lastuserfullname' => fullname($user2),
-                'lastuserimagealt' => $user2->imagealt,
-",1.0,,1.0,,1.0,none
CVE-2014-7834,CVE-2014-7834/d8c1ffd0a0f8ce2bc9c61dd798880cff8ce64ce7,https://github.com/moodle/moodle/commit/d8c1ffd0a0f8ce2bc9c61dd798880cff8ce64ce7,"<s>mod/forum/externallib.php in Moodle 2.6.x before 2.6.6 and 2.7.x before 2.7.3 does not verify group permissions, which allows remote authenticated users to access a forum via the forum_get_discussions web service.</s>","<s>MDL-47916 web services: Fixed invalid returned value type
</s>"," diff --git a/mod/forum/externallib.php b/mod/forum/externallib.php
index 4ff0332482e..16b0c6d482d 100644
--- a/mod/forum/externallib.php
+++ b/mod/forum/externallib.php
@@ -459,9 +459,13 @@ class mod_forum_external extends external_api {
             }
 
             // Function forum_get_all_discussion_posts adds postread field.
-            if (!isset($post->postread)) {
+            // Note that the value returned can be a boolean or an integer. The WS expects a boolean.
+            if (empty($post->postread)) {
                 $posts[$pid]->postread = false;
+            } else {
+                $posts[$pid]->postread = true;
             }
+
             $posts[$pid]->canreply = $canreply;
             if (!empty($posts[$pid]->children)) {
                 $posts[$pid]->children = array_keys($posts[$pid]->children);
",0.0,,0.0,,0.0,none
CVE-2014-7834,CVE-2014-7834/3c354a42ed0af16e41d12a1584c69d717e6d6f93,https://github.com/moodle/moodle/commit/3c354a42ed0af16e41d12a1584c69d717e6d6f93,"<s>mod/forum/externallib.php in Moodle 2.6.x before 2.6.6 and 2.7.x before 2.7.3 does not verify group permissions, which allows remote authenticated users to access a forum via the forum_get_discussions web service.</s>","<s>MDL-46588 web services: Unit tests added
</s>"," diff --git a/lib/tests/externallib_test.php b/lib/tests/externallib_test.php
index f0a2a04cee4..369c342b466 100644
--- a/lib/tests/externallib_test.php
+++ b/lib/tests/externallib_test.php
@@ -147,6 +147,28 @@ class core_externallib_testcase extends advanced_testcase {
         $fetchedcontext = test_exernal_api::get_context_wrapper(array(""contextlevel"" => ""course"", ""instanceid"" => $course->id));
         $this->assertEquals($realcontext, $fetchedcontext);
 
+        // Passing empty values.
+        try {
+            $fetchedcontext = test_exernal_api::get_context_wrapper(array(""contextid"" => 0));
+            $this->fail('Exception expected from get_context_wrapper()');
+        } catch (moodle_exception $e) {
+            $this->assertInstanceOf('invalid_parameter_exception', $e);
+        }
+
+        try {
+            $fetchedcontext = test_exernal_api::get_context_wrapper(array(""instanceid"" => 0));
+            $this->fail('Exception expected from get_context_wrapper()');
+        } catch (moodle_exception $e) {
+            $this->assertInstanceOf('invalid_parameter_exception', $e);
+        }
+
+        try {
+            $fetchedcontext = test_exernal_api::get_context_wrapper(array(""contextid"" => null));
+            $this->fail('Exception expected from get_context_wrapper()');
+        } catch (moodle_exception $e) {
+            $this->assertInstanceOf('invalid_parameter_exception', $e);
+        }
+
         // Passing wrong level.
         $this->setExpectedException('invalid_parameter_exception');
         $fetchedcontext = test_exernal_api::get_context_wrapper(array(""contextlevel"" => ""random"", ""instanceid"" => $course->id));
",0.0,,0.0,,0.0,none
CVE-2014-7834,CVE-2014-7834/0db87f6d4a784c85ce63b453239395d39ffd3935,https://github.com/moodle/moodle/commit/0db87f6d4a784c85ce63b453239395d39ffd3935,"<s>mod/forum/externallib.php in Moodle 2.6.x before 2.6.6 and 2.7.x before 2.7.3 does not verify group permissions, which allows remote authenticated users to access a forum via the forum_get_discussions web service.</s>","<s>MDL-27930 Lesson: the count-down timer does not work
</s>"," diff --git a/mod/lesson/locallib.php b/mod/lesson/locallib.php
index 9517df2402c..78a0527f9a9 100644
--- a/mod/lesson/locallib.php
+++ b/mod/lesson/locallib.php
@@ -488,14 +488,15 @@ function lesson_clock_block_contents($cmid, $lesson, $timer, $page) {
s the correct answer';
 $string return null;
ronganswer'] }
That
- the wrong answer $content = '<div class=""jshidewhenenabled"">';
+The following pages $content = '<div id=""lesson-timer"">';
 page';
+ $content .=is $lesson->time_remaining($timer->starttime);
'] = 'Time $content .= '</div>';
 =
Spend at least $clocksettings = array('starttime'=>$timer->starttime, 'servertime'=>time(),'testlength'=>($lesson->maxtime * 60));
-    $page->requires->data_for_js('clocksettings', $clocksettings);
+    $page->requires->data_for_js('clocksettings', $clocksettings, true);
+    $page->requires->strings_for_js(array('timeisup'), 'lesson');
     $page->requires->js('/mod/lesson/timer.js');
-    $page->requires->js_function_call('show_clock');
+    $page->requires->js_init_call('show_clock');
 
     $bc = new block_contents();
     $bc->title = get_string('timeremaining', 'lesson');
",0.0,,0.0,,0.0,none
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
CVE-2021-3521,CVE-2021-3521/bd36c5dc9fb6d90c46fbfed8c2d67516fc571ec8,https://github.com/rpm-software-management/rpm/commit/bd36c5dc9fb6d90c46fbfed8c2d67516fc571ec8,"<s>There is a flaw in RPM's signature functionality. OpenPGP subkeys are associated with a primary key via a ""binding signature."" RPM does not check the binding signature of subkeys prior to importing them. If an attacker is able to add or socially engineer another party to add a malicious subkey to a legitimate public key, RPM could wrongly trust a malicious signature. The greatest impact of this flaw is to data integrity. To exploit this flaw, an attacker must either compromise an RPM repository or convince an administrator to install an untrusted RPM or public key. It is strongly recommended to only use RPMs and public keys from trusted sources.</s>","<s>Validate and require subkey binding signatures on PGP public keys
All subkeys must be followed by a binding signature by the primary key
as per the OpenPGP RFC, enforce the presence and validity in the parser.
The implementation is as kludgey as they come to work around our
simple-minded parser structure without touching API, to maximise
backportability. Store all the raw packets internally as we decode them
to be able to access previous elements at will, needed to validate ordering
and access the actual data. Add testcases for manipulated keys whose
import previously would succeed.
Depends on the two previous commits:
7b399fcb8f52566e6f3b4327197a85facd08db91 and
236b802a4aa48711823a191d1b7f753c82a89ec5
Fixes CVE-2021-3521.
</s>"," diff --git a/rpmio/rpmpgp.c b/rpmio/rpmpgp.c
index aad7c275c..d70802ae8 100644
--- a/rpmio/rpmpgp.c
+++ b/rpmio/rpmpgp.c
@@ -1062,37 +1062,121 @@ static pgpDigParams pgpDigParamsNew(uint8_t tag)
     return digp;
 }
 
+static int hashKey(DIGEST_CTX hash, const struct pgpPkt *pkt, int exptag)
+{
+    int rc = -1;
+    if (pkt->tag == exptag) {
+	uint8_t head[] = {
+	    0x99,
+	    (pkt->blen >> 8),
+	    (pkt->blen     ),
+	};
+
+	rpmDigestUpdate(hash, head, 3);
+	rpmDigestUpdate(hash, pkt->body, pkt->blen);
+	rc = 0;
+    }
+    return rc;
+}
+
+static int pgpVerifySelf(pgpDigParams key, pgpDigParams selfsig,
+			const struct pgpPkt *all, int i)
+{
+    int rc = -1;
+    DIGEST_CTX hash = NULL;
+
+    switch (selfsig->sigtype) {
+    case PGPSIGTYPE_SUBKEY_BINDING:
+	hash = rpmDigestInit(selfsig->hash_algo, 0);
+	if (hash) {
+	    rc = hashKey(hash, &all[0], PGPTAG_PUBLIC_KEY);
+	    if (!rc)
+		rc = hashKey(hash, &all[i-1], PGPTAG_PUBLIC_SUBKEY);
+	}
+	break;
+    default:
+	/* ignore types we can't handle */
+	rc = 0;
+	break;
+    }
+
+    if (hash && rc == 0)
+	rc = pgpVerifySignature(key, selfsig, hash);
+
+    rpmDigestFinal(hash, NULL, NULL, 0);
+
+    return rc;
+}
+
 int pgpPrtParams(const uint8_t * pkts, size_t pktlen, unsigned int pkttype,
 		 pgpDigParams * ret)
 {
     const uint8_t *p = pkts;
     const uint8_t *pend = pkts + pktlen;
     pgpDigParams digp = NULL;
-    struct pgpPkt pkt;
+    pgpDigParams selfsig = NULL;
+    int i = 0;
+    int alloced = 16; /* plenty for normal cases */
+    struct pgpPkt *all = xmalloc(alloced * sizeof(*all));
     int rc = -1; /* assume failure */
+    int expect = 0;
+    int prevtag = 0;
 
     while (p < pend) {
-	if (decodePkt(p, (pend - p), &pkt))
+	struct pgpPkt *pkt = &all[i];
+	if (decodePkt(p, (pend - p), pkt))
 	    break;
 
 	if (digp == NULL) {
-	    if (pkttype && pkt.tag != pkttype) {
+	    if (pkttype && pkt->tag != pkttype) {
 		break;
 	    } else {
-		digp = pgpDigParamsNew(pkt.tag);
+		digp = pgpDigParamsNew(pkt->tag);
 	    }
 	}
 
-	if (pgpPrtPkt(&pkt, digp))
+	if (expect) {
+	    if (pkt->tag != expect)
+		break;
+	    selfsig = pgpDigParamsNew(pkt->tag);
+	}
+
+	if (pgpPrtPkt(pkt, selfsig ? selfsig : digp))
 	    break;
 
-	p += (pkt.body - pkt.head) + pkt.blen;
+	if (selfsig) {
+	    /* subkeys must be followed by binding signature */
+	    if (prevtag == PGPTAG_PUBLIC_SUBKEY) {
+		if (selfsig->sigtype != PGPSIGTYPE_SUBKEY_BINDING)
+		    break;
+	    }
+
+	    int xx = pgpVerifySelf(digp, selfsig, all, i);
+
+	    selfsig = pgpDigParamsFree(selfsig);
+	    if (xx)
+		break;
+	    expect = 0;
+	}
+
+	if (pkt->tag == PGPTAG_PUBLIC_SUBKEY)
+	    expect = PGPTAG_SIGNATURE;
+	prevtag = pkt->tag;
+
+	i++;
+	p += (pkt->body - pkt->head) + pkt->blen;
 	if (pkttype == PGPTAG_SIGNATURE)
 	    break;
+
+	if (alloced <= i) {
+	    alloced *= 2;
+	    all = xrealloc(all, alloced * sizeof(*all));
+	}
     }
 
-    rc = (digp && (p == pend)) ? 0 : -1;
+    rc = (digp && (p == pend) && expect == 0) ? 0 : -1;
 
+    free(all);
     if (ret && rc == 0) {
 	*ret = digp;
     } else {
",0.0,,1.0,,1.0,none
CVE-2021-3521,CVE-2021-3521/a9cca032a2b7c0c6bcacc6ab4ecd25c95cc75305,https://github.com/rpm-software-management/rpm/commit/a9cca032a2b7c0c6bcacc6ab4ecd25c95cc75305,"<s>There is a flaw in RPM's signature functionality. OpenPGP subkeys are associated with a primary key via a ""binding signature."" RPM does not check the binding signature of subkeys prior to importing them. If an attacker is able to add or socially engineer another party to add a malicious subkey to a legitimate public key, RPM could wrongly trust a malicious signature. The greatest impact of this flaw is to data integrity. To exploit this flaw, an attacker must either compromise an RPM repository or convince an administrator to install an untrusted RPM or public key. It is strongly recommended to only use RPMs and public keys from trusted sources.</s>","<s>Ignore subkeys that cannot be used for signing
This ensures that a signature is only accepted if the subkey that made
it is actually allowed to sign.  Test 265 verifies that RPM ignores
subkeys that cannot sign.
A subkey is considered to be capable of signing if, and only if, its
subkey binding signature has a hashed key flags subpacket that contains
the flag 0x02.  RFC4880 requires that the subkey binding signature be
v4, which this requirement enforces implicitly.  RFC4880 also requires
that primary key binding signatures be present and checked.  This is not
yet implemented, but may be implemented later.
Fixes #1911.
</s>"," diff --git a/rpmio/rpmpgp.c b/rpmio/rpmpgp.c
index 66837b18f..22ac9c816 100644
--- a/rpmio/rpmpgp.c
+++ b/rpmio/rpmpgp.c
@@ -1117,6 +1117,31 @@ static int pgpVerifySelf(pgpDigParams key, pgpDigParams selfsig,
     return rc;
 }
 
+static int parseSubkeySig(const struct pgpPkt *pkt, uint8_t tag,
+			  pgpDigParams *params_p) {
+    pgpDigParams params = *params_p = NULL; /* assume failure */
+
+    if (pkt->tag != PGPTAG_SIGNATURE)
+	goto fail;
+
+    params = pgpDigParamsNew(tag);
+
+    if (pgpPrtSig(tag, pkt->body, pkt->blen, params))
+	goto fail;
+
+    if (params->sigtype != PGPSIGTYPE_SUBKEY_BINDING &&
+	params->sigtype != PGPSIGTYPE_SUBKEY_REVOKE)
+    {
+	goto fail;
+    }
+
+    *params_p = params;
+    return 0;
+fail:
+    pgpDigParamsFree(params);
+    return -1;
+}
+
 static const size_t RPM_MAX_OPENPGP_BYTES = 65535; /* max number of bytes in a key */
 
 int pgpPrtParams(const uint8_t * pkts, size_t pktlen, unsigned int pkttype,
@@ -1238,7 +1263,28 @@ int pgpPrtParamsSubkeys(const uint8_t *pkts, size_t pktlen,
 		pgpDigParamsFree(digps[count]);
 		continue;
 	    }
-	    count++;
+
+	    pgpDigParams subkey_sig = NULL;
+	    if (decodePkt(p, pend - p, &pkt) ||
+	        parseSubkeySig(&pkt, 0, &subkey_sig))
+	    {
+		pgpDigParamsFree(digps[count]);
+		break;
+	    }
+
+	    /* Is the subkey revoked or incapable of signing? */
+	    int ignore = subkey_sig->sigtype != PGPSIGTYPE_SUBKEY_BINDING ||
+			 !((subkey_sig->saved & PGPDIG_SIG_HAS_KEY_FLAGS) &&
+			   (subkey_sig->key_flags & 0x02));
+	    if (ignore) {
+		pgpDigParamsFree(digps[count]);
+	    } else {
+		digps[count]->key_flags = subkey_sig->key_flags;
+		digps[count]->saved |= PGPDIG_SIG_HAS_KEY_FLAGS;
+		count++;
+	    }
+	    p += (pkt.body - pkt.head) + pkt.blen;
+	    pgpDigParamsFree(subkey_sig);
 	}
     }
     rc = (p == pend) ? 0 : -1;
",1.0,,0.0,,0.0,none
CVE-2021-3521,CVE-2021-3521/31c41707d74e465b0a776df8938ee7f903dd08c9,https://github.com/rpm-software-management/rpm/commit/31c41707d74e465b0a776df8938ee7f903dd08c9,"<s>There is a flaw in RPM's signature functionality. OpenPGP subkeys are associated with a primary key via a ""binding signature."" RPM does not check the binding signature of subkeys prior to importing them. If an attacker is able to add or socially engineer another party to add a malicious subkey to a legitimate public key, RPM could wrongly trust a malicious signature. The greatest impact of this flaw is to data integrity. To exploit this flaw, an attacker must either compromise an RPM repository or convince an administrator to install an untrusted RPM or public key. It is strongly recommended to only use RPMs and public keys from trusted sources.</s>","<s>Reject OpenPGP data at or over 64KiB
Such data is probably an attempt to exploit RPM, not do anything useful.
This avoids a whole class of silly integer overflow problems.
Signatures in packages are already limited to less than 64MiB by the
maximum size of the signature header, and this is already a sufficient
limitation.
</s>"," diff --git a/rpmio/rpmpgp.c b/rpmio/rpmpgp.c
index 02009000e..59c80d7c4 100644
--- a/rpmio/rpmpgp.c
+++ b/rpmio/rpmpgp.c
@@ -1104,6 +1104,8 @@ static int pgpVerifySelf(pgpDigParams key, pgpDigParams selfsig,
     return rc;
 }
 
+static const size_t RPM_MAX_OPENPGP_BYTES = 65535; /* max number of bytes in a key */
+
 int pgpPrtParams(const uint8_t * pkts, size_t pktlen, unsigned int pkttype,
 		 pgpDigParams * ret)
 {
@@ -1113,11 +1115,14 @@ int pgpPrtParams(const uint8_t * pkts, size_t pktlen, unsigned int pkttype,
     pgpDigParams selfsig = NULL;
     int i = 0;
     int alloced = 16; /* plenty for normal cases */
-    struct pgpPkt *all = xmalloc(alloced * sizeof(*all));
     int rc = -1; /* assume failure */
     int expect = 0;
     int prevtag = 0;
 
+    if (pktlen > RPM_MAX_OPENPGP_BYTES)
+	return rc; /* reject absurdly large data */
+
+    struct pgpPkt *all = xmalloc(alloced * sizeof(*all));
     while (p < pend) {
 	struct pgpPkt *pkt = &all[i];
 	if (decodePkt(p, (pend - p), pkt))
",0.0,,0.0,,0.0,none
CVE-2021-3521,CVE-2021-3521/abaf2c6b20b49512933ae1606e29c77ef522e2cf,https://github.com/rpm-software-management/rpm/commit/abaf2c6b20b49512933ae1606e29c77ef522e2cf,"<s>There is a flaw in RPM's signature functionality. OpenPGP subkeys are associated with a primary key via a ""binding signature."" RPM does not check the binding signature of subkeys prior to importing them. If an attacker is able to add or socially engineer another party to add a malicious subkey to a legitimate public key, RPM could wrongly trust a malicious signature. The greatest impact of this flaw is to data integrity. To exploit this flaw, an attacker must either compromise an RPM repository or convince an administrator to install an untrusted RPM or public key. It is strongly recommended to only use RPMs and public keys from trusted sources.</s>","<s>Fix typo in rpmGetSubkeys() API docs
</s>"," diff --git a/rpmio/rpmkeyring.h b/rpmio/rpmkeyring.h
index 8aeed8c6c..da2a8ad20 100644
--- a/rpmio/rpmkeyring.h
+++ b/rpmio/rpmkeyring.h
@@ -67,7 +67,7 @@ rpmKeyring rpmKeyringLink(rpmKeyring keyring);
 rpmPubkey rpmPubkeyNew(const uint8_t *pkt, size_t pktlen);
 
 /** \ingroup rpmkeyring
- * Return array of subkeys belonging to maikey
+ * Return array of subkeys belonging to mainkey
  * param mainkey	main rpmPubkey
  * param count		count of returned subkeys
  * @return		an array of subkey's handles
",0.0,,0.0,,0.0,none
