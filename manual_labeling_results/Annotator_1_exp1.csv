<s>SQL injection vulnerability in the checkEmailFormat function in plugins/jojo_core/classes/Jojo.php in Jojo before 1.2.2 allows remote attackers to execute arbitrary SQL commands via the X-Forwarded-For HTTP header to /articles/test/.</s>,post_id,commit_url,cve_desc_text,commit_msg_text,code_text,is_patch,"helpfulness (1 - 3, 3 is most helpful)",true_label,method
CVE-2017-5609,CVE-2017-5609/c62d667287f2d76c81e03a740a581eb3c51249b6,https://github.com/s9y/Serendipity/commit/c62d667287f2d76c81e03a740a581eb3c51249b6,<s>SQL injection vulnerability in include/functions_entries.inc.php in Serendipity 2.0.5 allows remote authenticated users to execute arbitrary SQL commands via the cat parameter.</s>,"<s>  * [Security] Fix missing integer casting for inserting new categories
    (thanks to cdxy)
</s>"," diff --git a/include/functions_entries.inc.php b/include/functions_entries.inc.php
index 45453c80..59bdf81a 100644
--- a/include/functions_entries.inc.php
+++ b/include/functions_entries.inc.php
@@ -1523,7 +1523,7 @@ function serendipity_updertEntry($entry) {
         if (is_array($categories)) {
             serendipity_db_query(""DELETE FROM {$serendipity['dbPrefix']}entrycat WHERE entryid={$entry['id']}"");
             foreach ($categories as $cat) {
-                serendipity_db_query(""INSERT INTO {$serendipity['dbPrefix']}entrycat (entryid, categoryid) VALUES ({$entry['id']}, {$cat})"");
+                serendipity_db_query(""INSERT INTO {$serendipity['dbPrefix']}entrycat (entryid, categoryid) VALUES ({$entry['id']}, "" . (int)$cat . "")"");
             }
         } elseif ($had_categories) {
             // This case actually only happens if an existing entry is edited, and its category assignments are all removed.
",1.0,1.0,1.0,tfidf
CVE-2017-5609,CVE-2017-5609/0c8416f5dff8a5c6c8a765b0ee6ee618c920bc36,https://github.com/s9y/Serendipity/commit/0c8416f5dff8a5c6c8a765b0ee6ee618c920bc36,<s>SQL injection vulnerability in include/functions_entries.inc.php in Serendipity 2.0.5 allows remote authenticated users to execute arbitrary SQL commands via the cat parameter.</s>,"<s>Allow setting a default category.
Needs some testing, I am not sure how to solve the case now where ""no category"" shall be used. It will always fall back to the default category.
Probably if someone uses a default category, that's the intended behaviour?
</s>"," diff --git a/include/functions_entries.inc.php b/include/functions_entries.inc.php
index f68d2339..45453c80 100644
--- a/include/functions_entries.inc.php
+++ b/include/functions_entries.inc.php
@@ -627,7 +627,7 @@ function &serendipity_fetchEntryProperties($id) {
  * @param   string  The ACL artifact condition. If set to ""write"" only categories will be shown that the author can write to. If set to ""read"", only categories will be show that the author can read or write to.
  * @return  array   Returns the array of categories
  */
-function &serendipity_fetchCategories($authorid = null, $name = null, $order = null, $artifact_mode = 'write') {
+function &serendipity_fetchCategories($authorid = null, $name = null, $order = null, $artifact_mode = 'write', $flat = false) {
     global $serendipity;
 
     if ($name === null) {
@@ -716,6 +716,16 @@ function &serendipity_fetchCategories($authorid = null, $name = null, $order = n
     $ret =& serendipity_db_query($querystring);
     if (is_string($ret)) {
         echo ""Query failed: $ret"";
+    } else {
+        if ($flat) {
+          $cats = serendipity_walkRecursive($ret, 'categoryid', 'parentid', VIEWMODE_THREADED);
+          $flat_cats = array();
+          $flat_cats[0] = NO_CATEGORY;
+          foreach($cats AS $catidx => $catdata) {
+              $flat_cats[$catdata['categoryid']] = str_repeat('&nbsp;', $catdata['depth']*2) . serendipity_specialchars($catdata['category_name']);
+          }
+          return $flat_cats;
+        }
     }
     return $ret;
 }
",0.0,1.0,0.0,tfidf
,,,,,,,,,
CVE-2022-21189,CVE-2022-21189/ea55dcc5f9b79663f7d4e72f45cd033e3fb7ae52,https://github.com/dexie/Dexie.js/commit/ea55dcc5f9b79663f7d4e72f45cd033e3fb7ae52,"<s>The package dexie before 3.2.2, from 4.0.0-alpha.1 and before 4.0.0-alpha.3 are vulnerable to Prototype Pollution in the Dexie.setByKeyPath(obj, keyPath, value) function which does not properly check the keys being set (like __proto__ or constructor). This can allow an attacker to add/modify properties of the Object.prototype leading to prototype pollution vulnerability. **Note:** This vulnerability can occur in multiple ways, for example when modifying a collection with untrusted user input.</s>","<s>Build output
</s>"," diff --git a/addons/Dexie.Syncable/dist/dexie-syncable.min.js b/addons/Dexie.Syncable/dist/dexie-syncable.min.js
new file mode 100644
index 00000000..9221e5c2
--- /dev/null
+++ b/addons/Dexie.Syncable/dist/dexie-syncable.min.js
@@ -0,0 +1 @@
+(function(e,n){""object""==typeof exports&&""undefined""!=typeof module?module.exports=n(require(""dexie""),require(""dexie-observable"")):""function""==typeof define&&define.amd?define([""dexie"",""dexie-observable""],n):((e=""undefined""!=typeof globalThis?globalThis:e||self).Dexie=e.Dexie||{},e.Dexie.Syncable=n(e.Dexie))})(this,function(e){""use strict"";function n(e){return e&&""object""==typeof e&&""default""in e?e:{default:e}}var R=n(e),s=R.default.Promise;function d(e){return n.prototype.save=function(){return R.default.vip(function(){return e.save()})},n;function n(e,n){this.nodeID=e,n&&R.default.extend(this,n)}}var y=1,h=2,u=3;function O(c){return function(e){var i={};e.forEach(function(e){var n;i.hasOwnProperty(e.table)||(i[e.table]=((n={})[y]=[],n[u]=[],n[h]=[],n)),i[e.table][e.type].push(e)});var n=Object.keys(i),t=n.map(function(e){return c.table(e)});return c.transaction(""rw"",t,function(){n.forEach(function(e){var n=c.table(e),t=!n.schema.primKey.keyPath,r=i[e][y],o=i[e][u],a=i[e][h];0<r.length&&n.bulkPut(r.map(function(e){return e.obj}),t?r.map(function(e){return e.key}):void 0),0<a.length&&function(n,t){var e=t.map(function(e){return e.key}),r={};n.where("":id"").anyOf(e).raw().each(function(e,n){r[n.primaryKey+""""]=e}).then(function(){var e=t.filter(function(e){return r.hasOwnProperty(e.key+"""")}).map(function(n){var t=r[n.key+""""];return Object.keys(n.mods).forEach(function(e){R.default.setByKeyPath(t,e,n.mods[e])}),t});return n.bulkPut(e)})}(n,a),0<o.length&&n.bulkDelete(o.map(function(e){return e.key}))})})}}function v(e){if(0===e.remoteBaseRevisions.length)return{maxClientRevision:1/0,remoteBaseRevision:null};for(var n=e.remoteBaseRevisions.length-1;0<=n;--n)if(e.myRevision>=e.remoteBaseRevisions[n].local)return{maxClientRevision:n===e.remoteBaseRevisions.length-1?1/0:e.remoteBaseRevisions[n+1].local,remoteBaseRevision:e.remoteBaseRevisions[n].remote};return{maxClientRevision:e.remoteBaseRevisions[0].local,remoteBaseRevision:null}}function b(e,n){switch(e.type){case y:switch(n.type){case y:return n;case h:return function(e,n){var t=R.default.deepClone(e);return Object.keys(n.mods).forEach(function(e){R.default.setByKeyPath(t.obj,e,n.mods[e])}),t}(e,n);case u:return n}break;case h:switch(n.type){case y:return n;case h:return function(e,r){var o=R.default.deepClone(e);return Object.keys(r.mods).forEach(function(n){var t=!1;Object.keys(e.mods).filter(function(e){return 0===n.indexOf(e+""."")}).forEach(function(e){R.default.setByKeyPath(o.mods[e],n.substr(e.length+1),r.mods[n]),t=!0}),t||(o.mods[n]=r.mods[n]),Object.keys(e.mods).filter(function(e){return 0===e.indexOf(n+""."")}).forEach(function(e){delete o.mods[e]})}),o}(e,n);case u:return n}break;case u:switch(n.type){case y:return n;case h:case u:return e}}}function o(s,u,e){var l=e;return function(e,r){var n=function(u,l,f){return function(e,n,t,r){var a={},i=0,o=!1,c=l.id,s=e;return u.transaction(""r"",u._changes,function(){return u._changes.where(""rev"").between(e,t,!1,!0).until(function(){if(i===n)return o=!0}).each(function(e){if(s=e.rev,e.source!==c){var n={type:e.type,table:e.table,key:e.key};e.type===y?n.obj=e.obj:e.type===h&&(n.mods=e.mods);var t=e.table+"":""+e.key,r=a[t];if(r){var o=b(r,n);a[t]=o}else a[t]=n,++i}})}).then(function(){var e=Object.keys(a).map(function(e){return a[e]});return f.hasMoreToGive=o,r(e,o,{myRevision:s})})}}(s,e,u),t=function(i,c,s,u,l,f){return function e(t,o,n){var a=!1;return n.until(function(){if(o.length===s)return a=!0}).each(function(e,n){o.push({type:y,table:t.currentTable,key:n.key,obj:n.value}),t.currentKey=n.key}).then(function(){if(a)return l.hasMoreToGive=!0,f(o,null,!0,{dbUploadState:t});if(0!==t.tablesToUpload.length)return t.currentTable=t.tablesToUpload.shift(),e(t,o,i.table(t.currentTable).orderBy("":id""));var r=v(c);return u(t.localBaseRevision,s-o.length,r.maxClientRevision,function(e,n,t){return o=o.concat(e),t.dbUploadState=null,f(o,r.remoteBaseRevision,n,t)})})}}(s,e,l,n,u,r);if(0<=e.myRevision){var o=v(e);return n(e.myRevision,l,o.maxClientRevision,function(e,n,t){return r(e,o.remoteBaseRevision,n,t)})}if(null===e.dbUploadState){var a=s.tables.filter(function(e){return e.schema.observable}).map(function(e){return e.name});if(0===a.length)return R.default.Promise.resolve(r([],null,!1,{}));var i={tablesToUpload:a,currentTable:a.shift(),currentKey:null};return s._changes.orderBy(""rev"").last(function(e){i.localBaseRevision=e&&e.rev||0;var n=s.table(i.currentTable).orderBy("":id"");return t(i,[],n)})}if(e.dbUploadState.currentKey){var c=s.table(e.dbUploadState.currentTable).where("":id"").above(e.dbUploadState.currentKey);return t(R.default.deepClone(e.dbUploadState),[],c)}c=s.table(i.currentTable).orderBy("":id"");return t(R.default.deepClone(e.dbUploadState),[],c)}}var w={ERROR:-1,OFFLINE:0,CONNECTING:1,ONLINE:2,SYNCING:3,ERROR_WILL_RETRY:4},E=R.default.Promise;function p(b,p,a,m,g){var i=function(a){re",0.0,3.0,0.0,tfidf
CVE-2022-21189,CVE-2022-21189/1d655a69b9f28c3af6fae10cf5c61df387dc689b,https://github.com/dexie/Dexie.js/commit/1d655a69b9f28c3af6fae10cf5c61df387dc689b,"<s>The package dexie before 3.2.2, from 4.0.0-alpha.1 and before 4.0.0-alpha.3 are vulnerable to Prototype Pollution in the Dexie.setByKeyPath(obj, keyPath, value) function which does not properly check the keys being set (like __proto__ or constructor). This can allow an attacker to add/modify properties of the Object.prototype leading to prototype pollution vulnerability. **Note:** This vulnerability can occur in multiple ways, for example when modifying a collection with untrusted user input.</s>","<s>Prohibit prototype pollution
</s>"," diff --git a/src/functions/utils.ts b/src/functions/utils.ts
index da97860c..8485c933 100644
--- a/src/functions/utils.ts
+++ b/src/functions/utils.ts
@@ -151,7 +151,7 @@ export function setByKeyPath(obj, keyPath, value) {
                 } else obj[currentKeyPath] = value;
             else {
                 var innerObj = obj[currentKeyPath];
-                if (!innerObj) innerObj = (obj[currentKeyPath] = {});
+                if (!innerObj || !hasOwn(obj, currentKeyPath)) innerObj = (obj[currentKeyPath] = {});
                 setByKeyPath(innerObj, remainingKeyPath, value);
             }
         } else {
",1.0,3.0,1.0,tfidf
,,,,,,,,,
CVE-2019-1010294,CVE-2019-1010294/7e768f8a473409215fe3fff8f6e31f8a3a0103c6,https://github.com/OP-TEE/optee_os/commit/7e768f8a473409215fe3fff8f6e31f8a3a0103c6,<s>Linaro/OP-TEE OP-TEE 3.3.0 and earlier is affected by: Rounding error. The impact is: Potentially leaking code and/or data from previous Trusted Application. The component is: optee_os. The fixed version is: 3.4.0 and later.</s>,"<s>core: clear the entire TA area
Previously we cleared (memset to zero) the size corresponding to code
and data segments, however the allocation for the TA is made on the
granularity of the memory pool, meaning that we did not clear all memory
and because of that we could potentially leak code and data of a
previous loaded TA.
Fixes: OP-TEE-2018-0006: ""Potential disclosure of previously loaded TA
code and data""
Signed-off-by: Joakim Bech <joakim.bech@linaro.org>
Tested-by: Joakim Bech <joakim.bech@linaro.org> (QEMU v7, v8)
Suggested-by: Jens Wiklander <jens.wiklander@linaro.org>
Reviewed-by: Jens Wiklander <jens.wiklander@linaro.org>
Reported-by: Riscure <inforequest@riscure.com>
Reported-by: Alyssa Milburn <a.a.milburn@vu.nl>
Acked-by: Etienne Carriere <etienne.carriere@linaro.org>
</s>"," diff --git a/core/arch/arm/kernel/user_ta.c b/core/arch/arm/kernel/user_ta.c
index 808cffd43..e70061e36 100644
--- a/core/arch/arm/kernel/user_ta.c
+++ b/core/arch/arm/kernel/user_ta.c
@@ -197,8 +197,12 @@ static struct mobj *alloc_ta_mem(size_t size)
 #else
 	struct mobj *mobj = mobj_mm_alloc(mobj_sec_ddr, size, &tee_mm_sec_ddr);
 
-	if (mobj)
-		memset(mobj_get_va(mobj, 0), 0, size);
+	if (mobj) {
+		size_t granularity = BIT(tee_mm_sec_ddr.shift);
+
+		/* Round up to allocation granularity size */
+		memset(mobj_get_va(mobj, 0), 0, ROUNDUP(size, granularity));
+	}
 	return mobj;
 #endif
 }
",1.0,1.0,1.0,lime
CVE-2019-1010294,CVE-2019-1010294/0b107f4c8908cd04318ed4bccac0b3ecbeae587e,https://github.com/OP-TEE/optee_os/commit/0b107f4c8908cd04318ed4bccac0b3ecbeae587e,<s>Linaro/OP-TEE OP-TEE 3.3.0 and earlier is affected by: Rounding error. The impact is: Potentially leaking code and/or data from previous Trusted Application. The component is: optee_os. The fixed version is: 3.4.0 and later.</s>,"<s>core: arm64: pager: make sure __thread_enter_user_mode is unpaged
__thread_enter_user_mode() cannot be paged out, because the pager cannot
be invoked to restore any faulting code page after SP has been switched to
use SP_EL1. At this point, a synchronous exception would take the CPU to
the 0x200 offset in the exception vector, which corresponds to
[workaround_]el1_sync_sp1 and is an error-catching infinite loop. This
explains the behavior described in [1].
Add the requisite KEEP_PAGER so that the function is kept in the unpaged
area.
Fixes: [1] https://github.com/OP-TEE/optee_os/issues/2684
Signed-off-by: Jerome Forissier <jerome.forissier@linaro.org>
Reviewed-by: Joakim Bech <joakim.bech@linaro.org>
Reviewed-by: Jens Wiklander <jens.wiklander@linaro.org>
</s>"," diff --git a/core/arch/arm/kernel/thread_a64.S b/core/arch/arm/kernel/thread_a64.S
index c9e284f72..c38f280d6 100644
--- a/core/arch/arm/kernel/thread_a64.S
+++ b/core/arch/arm/kernel/thread_a64.S
@@ -317,6 +317,7 @@ FUNC __thread_enter_user_mode , :
 	store_xregs sp, THREAD_CORE_LOCAL_X0, 0, 1
 	b eret_to_el0
 END_FUNC __thread_enter_user_mode
+KEEP_PAGER __thread_enter_user_mode
 
 /*
  * void thread_unwind_user_mode(uint32_t ret, uint32_t exit_status0,
",0.0,1.0,0.0,lime
,,,,,,,,,
CVE-2022-24823,CVE-2022-24823/185f8b2756a36aaa4f973f1a2a025e7d981823f1,https://github.com/netty/netty/commit/185f8b2756a36aaa4f973f1a2a025e7d981823f1,"<s>Netty is an open-source, asynchronous event-driven network application framework. The package `io.netty:netty-codec-http` prior to version 4.1.77.Final contains an insufficient fix for CVE-2021-21290. When Netty's multipart decoders are used local information disclosure can occur via the local system temporary directory if temporary storing uploads on the disk is enabled. This only impacts applications running on Java version 6 and lower. Additionally, this vulnerability impacts code running on Unix-like systems, and very old versions of Mac OSX and Windows as they all share the system temporary directory between all users. Version 4.1.77.Final contains a patch for this vulnerability. As a workaround, specify one's own `java.io.tmpdir` when starting the JVM or use DefaultHttpDataFactory.setBaseDir(...) to set the directory to something that is only readable by the current user.</s>","<s>Merge pull request from GHSA-269q-hmxg-m83q
* Correctly modify permission for temporary files when using Java 6 in all cases
Motivation:
[GHSA-5mcr-gq6c-3hq2](https://github.com/netty/netty/security/advisories/GHSA-5mcr-gq6c-3hq2) did not correctly fix all cases for temprory files when running on java 6.
Modifications:
- Add correctly adjust perms in all cases
- Add logging if adjusting of permissions fails
Result:
Fixes https://github.com/netty/netty/security/advisories/GHSA-269q-hmxg-m83q
* Throw on failure
</s>"," diff --git a/common/src/main/java/io/netty/util/internal/PlatformDependent.java b/common/src/main/java/io/netty/util/internal/PlatformDependent.java
index 8532046366..00310e585e 100644
--- a/common/src/main/java/io/netty/util/internal/PlatformDependent.java
+++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java
@@ -1447,13 +1447,20 @@ public final class PlatformDependent {
             }
             return Files.createTempFile(directory.toPath(), prefix, suffix).toFile();
         }
+        final File file;
         if (directory == null) {
-            return File.createTempFile(prefix, suffix);
+            file = File.createTempFile(prefix, suffix);
+        } else {
+            file = File.createTempFile(prefix, suffix, directory);
         }
-        File file = File.createTempFile(prefix, suffix, directory);
+
         // Try to adjust the perms, if this fails there is not much else we can do...
-        file.setReadable(false, false);
-        file.setReadable(true, true);
+        if (!file.setReadable(false, false)) {
+            throw new IOException(""Failed to set permissions on temporary file "" + file);
+        }
+        if (!file.setReadable(true, true)) {
+            throw new IOException(""Failed to set permissions on temporary file "" + file);
+        }
         return file;
     }
 
",1.0,2.0,1.0,lime
CVE-2022-24823,CVE-2022-24823/7be44fba673147ff881903bb994fbdbd112f19d5,https://github.com/netty/netty/commit/7be44fba673147ff881903bb994fbdbd112f19d5,"<s>Netty is an open-source, asynchronous event-driven network application framework. The package `io.netty:netty-codec-http` prior to version 4.1.77.Final contains an insufficient fix for CVE-2021-21290. When Netty's multipart decoders are used local information disclosure can occur via the local system temporary directory if temporary storing uploads on the disk is enabled. This only impacts applications running on Java version 6 and lower. Additionally, this vulnerability impacts code running on Unix-like systems, and very old versions of Mac OSX and Windows as they all share the system temporary directory between all users. Version 4.1.77.Final contains a patch for this vulnerability. As a workaround, specify one's own `java.io.tmpdir` when starting the JVM or use DefaultHttpDataFactory.setBaseDir(...) to set the directory to something that is only readable by the current user.</s>","<s>Update transport-native-epoll compile flags (#12272) (#12313)
Motivation:
Loading of the native epoll transport might segfault the JVM if musl is used and no glibc-compat is installed:
Modifications:
- Move libraries to LIBS where they should be, avoiding need for
  -Wl,--no-as-needed.
- Use -O2 instead of -O3; there are no tight loops so -O3 just increases
  code size for no benefit.
- Add -pipe for faster compilation.
- Add -D_FORTIFY_SOURCE=2 and -Wl,-z,relro for security.
- Add -Wl,-z,now for security and to improve musl
  compatibility. musl does not implement __strdup and __strndup which
  old glibc aliases strdup and strndup to, but OpenJDK loads libraries
  with RTLD_LAZY, so this is not discovered until too late. See
  https://github.com/grpc/grpc-java/issues/8751#issuecomment-1086963256
  for more information.
- Add -ffunction-sections -fdata-sections -Wl,--gc-sections to reduce
  output size and avoid linking librt when not really needed (only used
  for kqueue)
Result:
""Fixes"" #11701 by making the native library load fail.
Co-authored-by: Alex Xu <351006+Hello71@users.noreply.github.com>
</s>"," diff --git a/transport-native-epoll/pom.xml b/transport-native-epoll/pom.xml
index d2768a4d3d..cad13b4b77 100644
--- a/transport-native-epoll/pom.xml
+++ b/transport-native-epoll/pom.xml
@@ -34,8 +34,9 @@
     <unix.common.lib.dir>${project.build.directory}/unix-common-lib</unix.common.lib.dir>
     <unix.common.lib.unpacked.dir>${unix.common.lib.dir}/META-INF/native/lib</unix.common.lib.unpacked.dir>
     <unix.common.include.unpacked.dir>${unix.common.lib.dir}/META-INF/native/include</unix.common.include.unpacked.dir>
-    <jni.compiler.args.cflags>CFLAGS=-O3 -Werror -fno-omit-frame-pointer -Wunused-variable -fvisibility=hidden -I${unix.common.include.unpacked.dir}</jni.compiler.args.cflags>
-    <jni.compiler.args.ldflags>LDFLAGS=-L${unix.common.lib.unpacked.dir} -Wl,--no-as-needed -lrt -ldl -Wl,--whole-archive -l${unix.common.lib.name} -Wl,--no-whole-archive</jni.compiler.args.ldflags>
+    <jni.compiler.args.cflags>CFLAGS=-O2 -pipe -Werror -fno-omit-frame-pointer -Wunused-variable -fvisibility=hidden -D_FORTIFY_SOURCE=2 -ffunction-sections -fdata-sections -I${unix.common.include.unpacked.dir}</jni.compiler.args.cflags>
+    <jni.compiler.args.ldflags>LDFLAGS=-Wl,-z,relro -Wl,-z,now -Wl,--as-needed -Wl,--gc-sections -L${unix.common.lib.unpacked.dir}</jni.compiler.args.ldflags>
+    <jni.compiler.args.libs>LIBS=-Wl,--whole-archive -l${unix.common.lib.name} -Wl,--no-whole-archive -ldl</jni.compiler.args.libs>
     <nativeSourceDirectory>${project.basedir}/src/main/c</nativeSourceDirectory>
     <skipTests>true</skipTests>
     <japicmp.skip>true</japicmp.skip>
@@ -157,6 +158,7 @@
                   <platform>.</platform>
                   <configureArgs>
                     <arg>${jni.compiler.args.ldflags}</arg>
+                    <arg>${jni.compiler.args.libs}</arg>
                     <arg>${jni.compiler.args.cflags}</arg>
                     <configureArg>--libdir=${project.build.directory}/native-build/target/lib</configureArg>
                   </configureArgs>
@@ -306,6 +308,7 @@
                   <platform>.</platform>
                   <configureArgs>
                     <arg>${jni.compiler.args.ldflags}</arg>
+                    <arg>${jni.compiler.args.libs}</arg>
                     <arg>${jni.compiler.args.cflags}</arg>
                     <configureArg>--libdir=${project.build.directory}/native-build/target/lib</configureArg>
                     <configureArg>--host=aarch64-linux-gnu</configureArg>
",0.0,2.0,0.0,lime
,,,,,,,,,
CVE-2019-12243,CVE-2019-12243/1653747e798fa32b5fe6ced74cd2e931167ff7f3,https://github.com/istio/istio/commit/1653747e798fa32b5fe6ced74cd2e931167ff7f3,<s>Istio 1.1.x through 1.1.6 has Incorrect Access Control.</s>,"<s>Add application port option for gateways (#14059)
* Add application ports for gateways
* Check all ports for readiness
</s>"," diff --git a/pilot/cmd/pilot-agent/status/util/listeners.go b/pilot/cmd/pilot-agent/status/util/listeners.go
index be2d4dcf40..23c8e6ddcf 100644
--- a/pilot/cmd/pilot-agent/status/util/listeners.go
+++ b/pilot/cmd/pilot-agent/status/util/listeners.go
@@ -21,6 +21,8 @@ import (
 	""strings""
 
 	multierror ""github.com/hashicorp/go-multierror""
+
+	""istio.io/istio/pilot/pkg/model""
 )
 
 var (
@@ -28,7 +30,7 @@ var (
 )
 
 // GetInboundListeningPorts returns a map of inbound ports for which Envoy has active listeners.
-func GetInboundListeningPorts(adminPort uint16) (map[uint16]bool, string, error) {
+func GetInboundListeningPorts(adminPort uint16, nodeType model.NodeType) (map[uint16]bool, string, error) {
 	buf, err := doHTTPGet(fmt.Sprintf(""http://127.0.0.1:%d/listeners"", adminPort))
 	if err != nil {
 		return nil, """", multierror.Prefix(err, ""failed retrieving Envoy listeners:"")
@@ -50,8 +52,17 @@ func GetInboundListeningPorts(adminPort uint16) (map[uint16]bool, string, error)
 		}
 		// Before checking if listener is local, removing port portion of the address
 		ipAddr := strings.TrimSuffix(l, "":""+ipAddrParts[len(ipAddrParts)-1])
-		if !isLocalListener(ipAddr) {
-			continue
+
+		switch nodeType {
+		// For gateways, we will not listen on a local host, instead on 0.0.0.0
+		case model.Router:
+			if ipAddr != ""0.0.0.0"" {
+				continue
+			}
+		default:
+			if !isLocalListener(ipAddr) {
+				continue
+			}
 		}
 
 		portStr := ipAddrParts[len(ipAddrParts)-1]
",0.0,1.0,0.0,lime
CVE-2019-12243,CVE-2019-12243/eec7a74473deee98cad0a996f41a32a47dd453c2,https://github.com/istio/istio/commit/eec7a74473deee98cad0a996f41a32a47dd453c2,<s>Istio 1.1.x through 1.1.6 has Incorrect Access Control.</s>,"<s>fix 13868 (#13894)
Signed-off-by: Kuat Yessenov <kuat@google.com>
</s>"," diff --git a/mixer/test/client/pilotplugin_tcp/pilotplugin_tcp_test.go b/mixer/test/client/pilotplugin_tcp/pilotplugin_tcp_test.go
index 53bf913caf..48f8ea9c14 100644
--- a/mixer/test/client/pilotplugin_tcp/pilotplugin_tcp_test.go
+++ b/mixer/test/client/pilotplugin_tcp/pilotplugin_tcp_test.go
@@ -139,7 +139,7 @@ func TestPilotPluginTCP(t *testing.T) {
 	}
 
 	snapshots := cache.NewSnapshotCache(true, mock{}, nil)
-	snapshots.SetSnapshot(id, makeSnapshot(s, t))
+	snapshots.SetSnapshot(id, makeSnapshot(s, t, model.SidecarProxy))
 	server := xds.NewServer(snapshots, nil)
 	discovery.RegisterAggregatedDiscoveryServiceServer(grpcServer, server)
 	go func() {
@@ -155,8 +155,14 @@ func TestPilotPluginTCP(t *testing.T) {
 	defer s.TearDown()
 
 	s.WaitEnvoyReady()
+	if _, _, err := env.HTTPGet(fmt.Sprintf(""http://localhost:%d/echo"", s.Ports().ClientProxyPort)); err != nil {
+		t.Errorf(""Failed in request: %v"", err)
+	}
+	s.VerifyCheck(""tcp-inbound"", checkAttributesOkInbound)
 
-	// Issues a GET echo request with 0 size body
+	// force a client-side policy check at ingress node type
+	snapshots.SetSnapshot(id, makeSnapshot(s, t, model.Router))
+	s.WaitEnvoyReady()
 	if _, _, err := env.HTTPGet(fmt.Sprintf(""http://localhost:%d/echo"", s.Ports().ClientProxyPort)); err != nil {
 		t.Errorf(""Failed in request: %v"", err)
 	}
@@ -201,9 +207,8 @@ var (
 	}
 	mesh = &model.Environment{
 		Mesh: &meshconfig.MeshConfig{
-			MixerCheckServer:            ""mixer_server:9091"",
-			MixerReportServer:           ""mixer_server:9091"",
-			EnableClientSidePolicyCheck: true,
+			MixerCheckServer:  ""mixer_server:9091"",
+			MixerReportServer: ""mixer_server:9091"",
 		},
 		ServiceDiscovery: mock{},
 	}
@@ -212,26 +217,6 @@ var (
 			model.Hostname(""svc.ns3""): &svc,
 		},
 	}
-	serverParams = plugin.InputParams{
-		ListenerProtocol: plugin.ListenerProtocolTCP,
-		Env:              mesh,
-		Node: &model.Proxy{
-			ID:   ""pod1.ns1"",
-			Type: model.SidecarProxy,
-		},
-		ServiceInstance: &model.ServiceInstance{Service: &svc},
-		Push:            &pushContext,
-	}
-	clientParams = plugin.InputParams{
-		ListenerProtocol: plugin.ListenerProtocolTCP,
-		Env:              mesh,
-		Node: &model.Proxy{
-			ID:   ""pod2.ns2"",
-			Type: model.SidecarProxy,
-		},
-		Service: &svc,
-		Push:    &pushContext,
-	}
 )
 
 func makeListener(port uint16, cluster string) *v2.Listener {
@@ -252,12 +237,33 @@ func makeListener(port uint16, cluster string) *v2.Listener {
 	}
 }
 
-func makeSnapshot(s *env.TestSetup, t *testing.T) cache.Snapshot {
+func makeSnapshot(s *env.TestSetup, t *testing.T, node model.NodeType) cache.Snapshot {
 	clientListener := makeListener(s.Ports().ClientProxyPort, ""outbound|||svc.ns3"")
 	serverListener := makeListener(s.Ports().ServerProxyPort, ""inbound|||backend"")
 
 	p := mixer.NewPlugin()
 
+	serverParams := plugin.InputParams{
+		ListenerProtocol: plugin.ListenerProtocolTCP,
+		Env:              mesh,
+		Node: &model.Proxy{
+			ID:   ""pod1.ns1"",
+			Type: node,
+		},
+		ServiceInstance: &model.ServiceInstance{Service: &svc},
+		Push:            &pushContext,
+	}
+	clientParams := plugin.InputParams{
+		ListenerProtocol: plugin.ListenerProtocolTCP,
+		Env:              mesh,
+		Node: &model.Proxy{
+			ID:   ""pod2.ns2"",
+			Type: node,
+		},
+		Service: &svc,
+		Push:    &pushContext,
+	}
+
 	serverMutable := plugin.MutableObjects{Listener: serverListener, FilterChains: []plugin.FilterChain{{}}}
 	if err := p.OnInboundListener(&serverParams, &serverMutable); err != nil {
 		t.Error(err)
@@ -271,6 +277,6 @@ func makeSnapshot(s *env.TestSetup, t *testing.T) cache.Snapshot {
 	clientListener.FilterChains[0].Filters = append(clientMutable.FilterChains[0].TCP, clientListener.FilterChains[0].Filters...)
 
 	return cache.Snapshot{
-		Listeners: cache.NewResources(""tcp"", []cache.Resource{clientListener, serverListener}),
+		Listeners: cache.NewResources(string(node), []cache.Resource{clientListener, serverListener}),
 	}
 }
",1.0,1.0,1.0,lime
,,,,,,,,,
CVE-2019-20176,CVE-2019-20176/aea56f4bcb9948d456f3fae4d044fd3fa2e19706,https://github.com/jedisct1/pure-ftpd/commit/aea56f4bcb9948d456f3fae4d044fd3fa2e19706,"<s>In Pure-FTPd 1.0.49, a stack exhaustion issue was discovered in the listdir function in ls.c.</s>","<s>listdir(): reuse a single buffer to store every file name to display
Allocating a new buffer for each entry is useless.
And as these buffers are allocated on the stack, on systems with a
small stack size, with many entries, the limit can easily be reached,
causing a stack exhaustion and aborting the user session.
Reported by Antonio Morales from the GitHub Security Lab team, thanks!
</s>"," diff --git a/src/ls.c b/src/ls.c
index cf804c7..f8a588f 100644
--- a/src/ls.c
+++ b/src/ls.c
@@ -661,6 +661,8 @@ static void listdir(unsigned int depth, int f, void * const tls_fd,
     char *names;
     PureFileInfo *s;
     PureFileInfo *r;
+    char *alloca_subdir;
+    size_t sizeof_subdir;
     int d;
 
     if (depth >= max_ls_depth || matches >= max_ls_files) {
@@ -690,14 +692,12 @@ static void listdir(unsigned int depth, int f, void * const tls_fd,
     }
     outputfiles(f, tls_fd);
     r = dir;
+    sizeof_subdir = PATH_MAX + 1U;
+    if ((alloca_subdir = ALLOCA(sizeof_subdir)) == NULL) {
+        goto toomany;
+    }
     while (opt_R && r != s) {
         if (r->name_offset != (size_t) -1 && !chdir(FI_NAME(r))) {
-            char *alloca_subdir;
-            const size_t sizeof_subdir = PATH_MAX + 1U;
-
-            if ((alloca_subdir = ALLOCA(sizeof_subdir)) == NULL) {
-                goto toomany;
-            }
             if (SNCHECK(snprintf(alloca_subdir, sizeof_subdir, ""%s/%s"",
                                  name, FI_NAME(r)), sizeof_subdir)) {
                 goto nolist;
@@ -706,8 +706,8 @@ static void listdir(unsigned int depth, int f, void * const tls_fd,
             wrstr(f, tls_fd, alloca_subdir);
             wrstr(f, tls_fd, "":\r\n\r\n"");
             listdir(depth + 1U, f, tls_fd, alloca_subdir);
+
             nolist:
-            ALLOCA_FREE(alloca_subdir);
             if (matches >= max_ls_files) {
                 goto toomany;
             }
@@ -720,6 +720,7 @@ static void listdir(unsigned int depth, int f, void * const tls_fd,
         r++;
     }
     toomany:
+    ALLOCA_FREE(alloca_subdir);
     free(names);
     free(dir);
     names = NULL;
",1.0,3.0,1.0,lime
CVE-2019-20176,CVE-2019-20176/4e9cd43c3d61a0a697dbabb053b23c32a90265d8,https://github.com/jedisct1/pure-ftpd/commit/4e9cd43c3d61a0a697dbabb053b23c32a90265d8,"<s>In Pure-FTPd 1.0.49, a stack exhaustion issue was discovered in the listdir function in ls.c.</s>","<s>Update ftpd.c
</s>"," diff --git a/src/ftpd.c b/src/ftpd.c
index 60b95b6..d60f139 100644
--- a/src/ftpd.c
+++ b/src/ftpd.c
@@ -1399,9 +1399,7 @@ void douser(const char *username)
                 hd = (char *) ""/"";
             }
             if (chdir(root_directory) || chroot(root_directory) || chdir(hd)) {
-                die(421, LOG_ERR, MSG_CANT_CHANGE_DIR "" [%s]"",
-                    root_directory, hd);
-                goto cantsec;
+                die(421, LOG_ERR, MSG_CANT_CHANGE_DIR "" [%s]"", root_directory, hd);
             }
             logfile(LOG_INFO, MSG_ANONYMOUS_LOGGED);
         }
",0.0,3.0,0.0,lime
,,,,,,,,,
CVE-2013-4525,CVE-2013-4525/6917b452bf5c74cedcd984d653e4d4c9270c800f,https://github.com/moodle/moodle/commit/6917b452bf5c74cedcd984d653e4d4c9270c800f,"<s>Cross-site scripting (XSS) vulnerability in mod/quiz/report/responses/responses_table.php in Moodle through 2.2.11, 2.3.x before 2.3.10, 2.4.x before 2.4.7, and 2.5.x before 2.5.3 allows remote authenticated users to inject arbitrary web script or HTML via an answer to a text-based quiz question.</s>","<s>MDL-41820 XSS in the quiz responses report.
Thanks to Michael Hess for finding this bug and reporting it to us.
</s>"," diff --git a/mod/quiz/report/responses/responses_table.php b/mod/quiz/report/responses/responses_table.php
index a5a0c094d83..3c9c7c9f458 100644
--- a/mod/quiz/report/responses/responses_table.php
+++ b/mod/quiz/report/responses/responses_table.php
@@ -97,6 +97,11 @@ class quiz_responses_table extends quiz_attempts_report_table {
             $summary = trim($stepdata->$field);
         }
 
+        if ($this->is_downloading() && $this->is_downloading() != 'xhtml') {
+            return $summary;
+        }
+        $summary = s($summary);
+
         if ($this->is_downloading() || $field != 'responsesummary') {
             return $summary;
         }
",1.0,3.0,1.0,lime
CVE-2013-4525,CVE-2013-4525/768779972e27e9b3e5d86c65f4cd7dd7c7fb7e8b,https://github.com/moodle/moodle/commit/768779972e27e9b3e5d86c65f4cd7dd7c7fb7e8b,"<s>Cross-site scripting (XSS) vulnerability in mod/quiz/report/responses/responses_table.php in Moodle through 2.2.11, 2.3.x before 2.3.10, 2.4.x before 2.4.7, and 2.5.x before 2.5.3 allows remote authenticated users to inject arbitrary web script or HTML via an answer to a text-based quiz question.</s>","<s>MDL-41929 quiz statistics, overall stats not displayed.
</s>"," diff --git a/mod/quiz/report/statistics/report.php b/mod/quiz/report/statistics/report.php
index e3153a17b24..13a3a197433 100644
--- a/mod/quiz/report/statistics/report.php
+++ b/mod/quiz/report/statistics/report.php
@@ -492,7 +492,7 @@ class quiz_statistics_report extends quiz_default_report {
 
         // The statistics.
         foreach ($todisplay as $property => $format) {
-            if (!isset($quizstats->$property) || empty($format[$property])) {
+            if (!isset($quizstats->$property) || !$format) {
                 continue;
             }
             $value = $quizstats->$property;
",0.0,3.0,0.0,lime
,,,,,,,,,
CVE-2011-1010,CVE-2011-1010/fa7ea87a057958a8b7926c1a60a3ca6d696328ed,https://github.com/pennyfang/kernel/commit/fa7ea87a057958a8b7926c1a60a3ca6d696328ed,<s>Buffer overflow in the mac_partition function in fs/partitions/mac.c in the Linux kernel before 2.6.37.2 allows local users to cause a denial of service (panic) or possibly have unspecified other impact via a malformed Mac OS partition table.</s>,"<s>fs/partitions: Validate map_count in Mac partition tables
Validate number of blocks in map and remove redundant variable.
Signed-off-by: Timo Warns <warns@pre-sense.de>
Cc: stable@kernel.org
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
</s>"," diff --git a/fs/partitions/mac.c b/fs/partitions/mac.c
index 68d6a216ee7..11f688bd76c 100644
--- a/fs/partitions/mac.c
+++ b/fs/partitions/mac.c
@@ -29,10 +29,9 @@ static inline void mac_fix_string(char *stg, int len)
 
 int mac_partition(struct parsed_partitions *state)
 {
-	int slot = 1;
 	Sector sect;
 	unsigned char *data;
-	int blk, blocks_in_map;
+	int slot, blocks_in_map;
 	unsigned secsize;
 #ifdef CONFIG_PPC_PMAC
 	int found_root = 0;
@@ -59,10 +58,14 @@ int mac_partition(struct parsed_partitions *state)
 		put_dev_sector(sect);
 		return 0;		/* not a MacOS disk */
 	}
-	strlcat(state->pp_buf, "" [mac]"", PAGE_SIZE);
 	blocks_in_map = be32_to_cpu(part->map_count);
-	for (blk = 1; blk <= blocks_in_map; ++blk) {
-		int pos = blk * secsize;
+	if (blocks_in_map < 0 || blocks_in_map >= DISK_MAX_PARTS) {
+		put_dev_sector(sect);
+		return 0;
+	}
+	strlcat(state->pp_buf, "" [mac]"", PAGE_SIZE);
+	for (slot = 1; slot <= blocks_in_map; ++slot) {
+		int pos = slot * secsize;
 		put_dev_sector(sect);
 		data = read_part_sector(state, pos/512, &sect);
 		if (!data)
@@ -113,13 +116,11 @@ int mac_partition(struct parsed_partitions *state)
 			}
 
 			if (goodness > found_root_goodness) {
-				found_root = blk;
+				found_root = slot;
 				found_root_goodness = goodness;
 			}
 		}
 #endif /* CONFIG_PPC_PMAC */
-
-		++slot;
 	}
 #ifdef CONFIG_PPC_PMAC
 	if (found_root_goodness)
",1.0,3.0,1.0,tfidf
CVE-2011-1010,CVE-2011-1010/4c7e604babd15db9dca3b07de167a0f93fe23bf4,https://github.com/pennyfang/kernel/commit/4c7e604babd15db9dca3b07de167a0f93fe23bf4,<s>Buffer overflow in the mac_partition function in fs/partitions/mac.c in the Linux kernel before 2.6.37.2 allows local users to cause a denial of service (panic) or possibly have unspecified other impact via a malformed Mac OS partition table.</s>,"<s>ixgbe: fix panic due to uninitialised pointer
Systems containing an 82599EB and running a backported driver from
upstream were panicing on boot.  It turns out hw->mac.ops.setup_sfp is
only set for 82599, so one should check to be sure that pointer is set
before continuing in ixgbe_sfp_config_module_task.  I verified by
inspection that the upstream driver has the same issue and also added a
check before the call in ixgbe_sfp_link_config.
Signed-off-by: Andy Gospodarek <andy@greyhouse.net>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
</s>"," diff --git a/drivers/net/ixgbe/ixgbe_main.c b/drivers/net/ixgbe/ixgbe_main.c
index fbae703b46d..30f9ccfb4f8 100644
--- a/drivers/net/ixgbe/ixgbe_main.c
+++ b/drivers/net/ixgbe/ixgbe_main.c
@@ -3728,7 +3728,8 @@ static void ixgbe_sfp_link_config(struct ixgbe_adapter *adapter)
 			 * We need to try and force an autonegotiation
 			 * session, then bring up link.
 			 */
-			hw->mac.ops.setup_sfp(hw);
+			if (hw->mac.ops.setup_sfp)
+				hw->mac.ops.setup_sfp(hw);
 			if (!(adapter->flags & IXGBE_FLAG_IN_SFP_LINK_TASK))
 				schedule_work(&adapter->multispeed_fiber_task);
 		} else {
@@ -5968,7 +5969,8 @@ static void ixgbe_sfp_config_module_task(struct work_struct *work)
 		unregister_netdev(adapter->netdev);
 		return;
 	}
-	hw->mac.ops.setup_sfp(hw);
+	if (hw->mac.ops.setup_sfp)
+		hw->mac.ops.setup_sfp(hw);
 
 	if (!(adapter->flags & IXGBE_FLAG_IN_SFP_LINK_TASK))
 		/* This will also work for DA Twinax connections */
",0.0,3.0,0.0,tfidf
,,,,,,,,,
CVE-2017-5581,CVE-2017-5581/18c020124ff1b2441f714da2017f63dba50720ba,https://github.com/TigerVNC/tigervnc/commit/18c020124ff1b2441f714da2017f63dba50720ba,<s>Buffer overflow in the ModifiablePixelBuffer::fillRect function in TigerVNC before 1.7.1 allows remote servers to execute arbitrary code via an RRE message with subrectangle outside framebuffer boundaries.</s>,"<s>Fix buffer overflow in ModifiablePixelBuffer::fillRect.
It can be triggered by RRE message with subrectangle out of framebuffer
boundaries. It may prevent the same kind of issue caused by evil message
from another encoding too.
</s>"," diff --git a/common/rfb/PixelBuffer.cxx b/common/rfb/PixelBuffer.cxx
index 89addabc..7f3df6cb 100644
--- a/common/rfb/PixelBuffer.cxx
+++ b/common/rfb/PixelBuffer.cxx
@@ -101,15 +101,26 @@ void ModifiablePixelBuffer::fillRect(const Rect& r, const void* pix)
   int stride;
   U8 *buf;
   int w, h, b;
+  Rect drect;
 
-  w = r.width();
-  h = r.height();
+  drect = r;
+  if (!drect.enclosed_by(getRect())) {
+    vlog.error(""Destination rect %dx%d at %d,%d exceeds framebuffer %dx%d"",
+               drect.width(), drect.height(), drect.tl.x, drect.tl.y, width_, height_);
+    drect = drect.intersect(getRect());
+  }
+
+  if (drect.is_empty())
+    return;
+
+  w = drect.width();
+  h = drect.height();
   b = format.bpp/8;
 
   if (h == 0)
     return;
 
-  buf = getBufferRW(r, &stride);
+  buf = getBufferRW(drect, &stride);
 
   if (b == 1) {
     while (h--) {
@@ -136,7 +147,7 @@ void ModifiablePixelBuffer::fillRect(const Rect& r, const void* pix)
     }
   }
 
-  commitBufferRW(r);
+  commitBufferRW(drect);
 }
 
 void ModifiablePixelBuffer::imageRect(const Rect& r,
",1.0,3.0,1.0,tfidf
CVE-2017-5581,CVE-2017-5581/466de9c52e925ea784fe4ce455741b2638ee3e94,https://github.com/TigerVNC/tigervnc/commit/466de9c52e925ea784fe4ce455741b2638ee3e94,<s>Buffer overflow in the ModifiablePixelBuffer::fillRect function in TigerVNC before 1.7.1 allows remote servers to execute arbitrary code via an RRE message with subrectangle outside framebuffer boundaries.</s>,"<s>Check invalid RRE rects
</s>"," diff --git a/common/rfb/rreDecode.h b/common/rfb/rreDecode.h
index 56defbd1..f9fdcfc9 100644
--- a/common/rfb/rreDecode.h
+++ b/common/rfb/rreDecode.h
@@ -22,6 +22,7 @@
 // BPP                - 8, 16 or 32
 
 #include <rdr/InStream.h>
+#include <rfb/Exception.h>
 
 namespace rfb {
 
@@ -49,6 +50,10 @@ void RRE_DECODE (const Rect& r, rdr::InStream* is,
     int y = is->readU16();
     int w = is->readU16();
     int h = is->readU16();
+
+    if (((x+w) > r.width()) || ((y+h) > r.height()))
+      throw Exception (""RRE decode error"");
+
     pb->fillRect(pf, Rect(r.tl.x+x, r.tl.y+y, r.tl.x+x+w, r.tl.y+y+h), &pix);
   }
 }
",0.0,3.0,0.0,tfidf
,,,,,,,,,
CVE-2016-8654,CVE-2016-8654/4a59cfaf9ab3d48fca4a15c0d2674bf7138e3d1a,https://github.com/jasper-software/jasper/commit/4a59cfaf9ab3d48fca4a15c0d2674bf7138e3d1a,<s>A heap-buffer overflow vulnerability was found in QMFB code in JPC codec caused by buffer being allocated with too small size. jasper versions before 2.0.0 are affected.</s>,"<s>Fixed a buffer overrun problem in the QMFB code in the JPC codec
that was caused by a buffer being allocated with a size that was too small
in some cases.
Added a new regression test case.
</s>"," diff --git a/src/libjasper/jpc/jpc_qmfb.c b/src/libjasper/jpc/jpc_qmfb.c
index 45be24e..f26070f 100644
--- a/src/libjasper/jpc/jpc_qmfb.c
+++ b/src/libjasper/jpc/jpc_qmfb.c
@@ -374,7 +374,7 @@ void jpc_qmfb_split_col(jpc_fix_t *a, int numrows, int stride,
 	register jpc_fix_t *dstptr;
 	register int n;
 	register int m;
-	int hstartcol;
+	int hstartrow;
 
 	/* Get a buffer. */
 	if (bufsize > QMFB_SPLITBUFSIZE) {
@@ -385,9 +385,9 @@ void jpc_qmfb_split_col(jpc_fix_t *a, int numrows, int stride,
 	}
 
 	if (numrows >= 2) {
-		hstartcol = (numrows + 1 - parity) >> 1;
-		// ORIGINAL (WRONG): m = (parity) ? hstartcol : (numrows - hstartcol);
-		m = numrows - hstartcol;
+		hstartrow = (numrows + 1 - parity) >> 1;
+		// ORIGINAL (WRONG): m = (parity) ? hstartrow : (numrows - hstartrow);
+		m = numrows - hstartrow;
 
 		/* Save the samples destined for the highpass channel. */
 		n = m;
@@ -408,7 +408,7 @@ void jpc_qmfb_split_col(jpc_fix_t *a, int numrows, int stride,
 			srcptr += stride << 1;
 		}
 		/* Copy the saved samples into the highpass channel. */
-		dstptr = &a[hstartcol * stride];
+		dstptr = &a[hstartrow * stride];
 		srcptr = buf;
 		n = m;
 		while (n-- > 0) {
@@ -439,20 +439,21 @@ void jpc_qmfb_split_colgrp(jpc_fix_t *a, int numrows, int stride,
 	register int n;
 	register int i;
 	int m;
-	int hstartcol;
+	int hstartrow;
 
 	/* Get a buffer. */
 	if (bufsize > QMFB_SPLITBUFSIZE) {
-		if (!(buf = jas_alloc2(bufsize, sizeof(jpc_fix_t)))) {
+		if (!(buf = jas_alloc3(bufsize, JPC_QMFB_COLGRPSIZE,
+		  sizeof(jpc_fix_t)))) {
 			/* We have no choice but to commit suicide in this case. */
 			abort();
 		}
 	}
 
 	if (numrows >= 2) {
-		hstartcol = (numrows + 1 - parity) >> 1;
-		// ORIGINAL (WRONG): m = (parity) ? hstartcol : (numrows - hstartcol);
-		m = numrows - hstartcol;
+		hstartrow = (numrows + 1 - parity) >> 1;
+		// ORIGINAL (WRONG): m = (parity) ? hstartrow : (numrows - hstartrow);
+		m = numrows - hstartrow;
 
 		/* Save the samples destined for the highpass channel. */
 		n = m;
@@ -485,7 +486,7 @@ void jpc_qmfb_split_colgrp(jpc_fix_t *a, int numrows, int stride,
 			srcptr += stride << 1;
 		}
 		/* Copy the saved samples into the highpass channel. */
-		dstptr = &a[hstartcol * stride];
+		dstptr = &a[hstartrow * stride];
 		srcptr = buf;
 		n = m;
 		while (n-- > 0) {
@@ -526,7 +527,7 @@ void jpc_qmfb_split_colres(jpc_fix_t *a, int numrows, int numcols,
 
 	/* Get a buffer. */
 	if (bufsize > QMFB_SPLITBUFSIZE) {
-		if (!(buf = jas_alloc2(bufsize, sizeof(jpc_fix_t)))) {
+		if (!(buf = jas_alloc3(bufsize, numcols, sizeof(jpc_fix_t)))) {
 			/* We have no choice but to commit suicide in this case. */
 			abort();
 		}
@@ -721,7 +722,8 @@ void jpc_qmfb_join_colgrp(jpc_fix_t *a, int numrows, int stride,
 
 	/* Allocate memory for the join buffer from the heap. */
 	if (bufsize > QMFB_JOINBUFSIZE) {
-		if (!(buf = jas_alloc3(bufsize, JPC_QMFB_COLGRPSIZE, sizeof(jpc_fix_t)))) {
+		if (!(buf = jas_alloc3(bufsize, JPC_QMFB_COLGRPSIZE,
+		  sizeof(jpc_fix_t)))) {
 			/* We have no choice but to commit suicide. */
 			abort();
 		}
",1.0,3.0,1.0,tfidf
CVE-2016-8654,CVE-2016-8654/6c6c123465d8299b60cc527c1c2983c29368e8d6,https://github.com/jasper-software/jasper/commit/6c6c123465d8299b60cc527c1c2983c29368e8d6,<s>A heap-buffer overflow vulnerability was found in QMFB code in JPC codec caused by buffer being allocated with too small size. jasper versions before 2.0.0 are affected.</s>,"<s>Fixed a minor const correctness issue in the JPC codec.
</s>"," diff --git a/src/libjasper/jpc/jpc_util.h b/src/libjasper/jpc/jpc_util.h
index 526312a..d123160 100644
--- a/src/libjasper/jpc/jpc_util.h
+++ b/src/libjasper/jpc/jpc_util.h
@@ -63,7 +63,7 @@
 #define JPC_UTIL_H
 
 /* Parse a comma separated list of real numbers into an array of doubles. */
-int jpc_atoaf(char *s, int *numvalues, double **values);
+int jpc_atoaf(const char *s, int *numvalues, double **values);
 
 /* Upsample a sequence. */
 jas_seq_t *jpc_seq_upsample(jas_seq_t *seq, int n);
",0.0,3.0,0.0,tfidf
,,,,,,,,,
CVE-2020-14062,CVE-2020-14062/840eae2ca81c597a0010b2126f32dce17d384b70,https://github.com/FasterXML/jackson-databind/commit/840eae2ca81c597a0010b2126f32dce17d384b70,"<s>FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to com.sun.org.apache.xalan.internal.lib.sql.JNDIConnectionPool (aka xalan2).</s>","<s>... actual #2704 fix here (forgot to commit change)
</s>"," diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
index 20bbf2059..80cc37879 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
@@ -113,8 +113,10 @@ public class SubTypeValidator
         s.add(""org.apache.commons.configuration.JNDIConfiguration"");
         s.add(""org.apache.commons.configuration2.JNDIConfiguration"");
 
-        // [databind#2469]: xalan2
+        // [databind#2469]: xalan
         s.add(""org.apache.xalan.lib.sql.JNDIConnectionPool"");
+        // [databind#2704]: xalan2
+        s.add(""com.sun.org.apache.xalan.internal.lib.sql.JNDIConnectionPool"");
 
         // [databind#2478]: comons-dbcp, p6spy
         s.add(""org.apache.commons.dbcp.datasources.PerUserPoolDataSource"");
",1.0,1.0,1.0,tfidf
CVE-2020-14062,CVE-2020-14062/d1c67a0396e84c08d0558fbb843b5bd1f26e1921,https://github.com/FasterXML/jackson-databind/commit/d1c67a0396e84c08d0558fbb843b5bd1f26e1921,"<s>FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to com.sun.org.apache.xalan.internal.lib.sql.JNDIConnectionPool (aka xalan2).</s>","<s>Fix #2688
</s>"," diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
index b123bee8b..a7853c026 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
@@ -180,6 +180,9 @@ public class SubTypeValidator
         // [databind#2682]: commons-jelly
         s.add(""org.apache.commons.jelly.impl.Embedded"");
 
+        // [databind#2688]: apache/drill
+        s.add(""oadd.org.apache.xalan.lib.sql.JNDIConnectionPool"");
+
         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);
     }
 
",0.0,1.0,0.0,tfidf
,,,,,,,,,
CVE-2021-40346,CVE-2021-40346/f079f44096cf78c18880e5b0d9279a168bd4b44e,https://github.com/haproxy/haproxy/commit/f079f44096cf78c18880e5b0d9279a168bd4b44e,"<s>An integer overflow exists in HAProxy 2.0 through 2.5 in htx_add_header that can be exploited to perform an HTTP request smuggling attack, allowing an attacker to bypass all configured http-request HAProxy ACLs and possibly other ACLs.</s>","<s>MINOR: htx: Skip headers with no value when adding a header list to a message
When the header list is added, after the message parsing, headers with no
value are now ignored. It is not the same than headers with empty value
fields. Only headers with a NULL pointer as value are skipped. This only
happens if the header value is removed during the message
parsing. Concretly, such headers are now ignored when htx_add_all_headers()
is called. However, htx_add_header() is not affected by this change.
Symetrically, the same is true for trailers. It may be backported to 2.4
because of the previous fix (""BUG/MEDIUM: mux-h1: Remove ""Upgrade:"" header
for requests with payload"").
</s>"," diff --git a/include/haproxy/htx.h b/include/haproxy/htx.h
index a6535237b..93b3206a8 100644
--- a/include/haproxy/htx.h
+++ b/include/haproxy/htx.h
@@ -517,12 +517,19 @@ static inline struct htx_blk *htx_add_endof(struct htx *htx, enum htx_blk_type t
 
 /* Add all headers from the list <hdrs> into the HTX message <htx>, followed by
  * the EOH. On success, it returns the last block inserted (the EOH), otherwise
- * NULL is returned. */
+ * NULL is returned.
+ *
+ * Headers with a NULL value (.ptr == NULL) are ignored but not those with empty
+ * value (.len == 0 but .ptr != NULL)
+ */
 static inline struct htx_blk *htx_add_all_headers(struct htx *htx, const struct http_hdr *hdrs)
 {
 	int i;
 
 	for (i = 0; hdrs[i].n.len; i++) {
+		/* Don't check the value length because a header value may be empty */
+		if (isttest(hdrs[i].v) == 0)
+			continue;
 		if (!htx_add_header(htx, hdrs[i].n, hdrs[i].v))
 			return NULL;
 	}
@@ -531,12 +538,19 @@ static inline struct htx_blk *htx_add_all_headers(struct htx *htx, const struct
 
 /* Add all trailers from the list <hdrs> into the HTX message <htx>, followed by
  * the EOT. On success, it returns the last block inserted (the EOT), otherwise
- * NULL is returned. */
+ * NULL is returned.
+ *
+ * Trailers with a NULL value (.ptr == NULL) are ignored but not those with
+ * empty value (.len == 0 but .ptr != NULL)
+ */
 static inline struct htx_blk *htx_add_all_trailers(struct htx *htx, const struct http_hdr *hdrs)
 {
 	int i;
 
 	for (i = 0; hdrs[i].n.len; i++) {
+		/* Don't check the value length because a header value may be empty */
+		if (isttest(hdrs[i].v) == 0)
+			continue;
 		if (!htx_add_trailer(htx, hdrs[i].n, hdrs[i].v))
 			return NULL;
 	}
",0.0,1.0,0.0,lime
CVE-2021-40346,CVE-2021-40346/3b69886f7dcc3cfb3d166309018e6cfec9ce2c95,https://github.com/haproxy/haproxy/commit/3b69886f7dcc3cfb3d166309018e6cfec9ce2c95,"<s>An integer overflow exists in HAProxy 2.0 through 2.5 in htx_add_header that can be exploited to perform an HTTP request smuggling attack, allowing an attacker to bypass all configured http-request HAProxy ACLs and possibly other ACLs.</s>","<s>BUG/MAJOR: htx: fix missing header name length check in htx_add_header/trailer
Ori Hollander of JFrog Security reported that htx_add_header() and
htx_add_trailer() were missing a length check on the header name. While
this does not allow to overwrite any memory area, it results in bits of
the header name length to slip into the header value length and may
result in forging certain header names on the input. The sad thing here
is that a FIXME comment was present suggesting to add the required length
checks :-(
The injected headers are visible to the HTTP internals and to the config
rules, so haproxy will generally stay synchronized with the server. But
there is one exception which is the content-length header field, because
it is already deduplicated on the input, but before being indexed. As
such, injecting a content-length header after the deduplication stage
may be abused to present a different, shorter one on the other side and
help build a request smuggling attack, or even maybe a response splitting
attack. CVE-2021-40346 was assigned to this problem.
As a mitigation measure, it is sufficient to verify that no more than
one such header is present in any message, which is normally the case
thanks to the duplicate checks:
   http-request  deny if { req.hdr_cnt(content-length) gt 1 }
   http-response deny if { res.hdr_cnt(content-length) gt 1 }
This must be backported to all HTX-enabled versions, hence as far as 2.0.
In 2.3 and earlier, the functions are in src/htx.c instead.
Many thanks to Ori for his work and his responsible report!
</s>"," diff --git a/include/haproxy/htx.h b/include/haproxy/htx.h
index b6d95274e..a6535237b 100644
--- a/include/haproxy/htx.h
+++ b/include/haproxy/htx.h
@@ -466,7 +466,9 @@ static inline struct htx_blk *htx_add_header(struct htx *htx, const struct ist n
 {
 	struct htx_blk *blk;
 
-	/* FIXME: check name.len (< 256B) and value.len (< 1MB) */
+	if (name.len > 255 || value.len > 1048575)
+		return NULL;
+
 	blk = htx_add_blk(htx, HTX_BLK_HDR, name.len + value.len);
 	if (!blk)
 		return NULL;
@@ -485,7 +487,9 @@ static inline struct htx_blk *htx_add_trailer(struct htx *htx, const struct ist
 {
 	struct htx_blk *blk;
 
-	/* FIXME: check name.len (< 256B) and value.len (< 1MB) */
+	if (name.len > 255 || value.len > 1048575)
+		return NULL;
+
 	blk = htx_add_blk(htx, HTX_BLK_TLR, name.len + value.len);
 	if (!blk)
 		return NULL;
",1.0,1.0,1.0,lime
,,,,,,,,,
CVE-2019-20919,CVE-2019-20919/eca7d7c8f43d96f6277e86d1000e842eb4cc67ff,https://github.com/perl5-dbi/dbi/commit/eca7d7c8f43d96f6277e86d1000e842eb4cc67ff,"<s>An issue was discovered in the DBI module before 1.643 for Perl. The hv_fetch() documentation requires checking for NULL and the code does that. But, shortly thereafter, it calls SvOK(profile), causing a NULL pointer dereference.</s>","<s>Fix a NULL profile dereference in dbi_profile()
hv_fetch() documentation requires checking for NULL and the code does
that. But then calls SvOK(profile) uncoditionally two lines later.
This patch fixes it.
</s>"," diff --git a/DBI.xs b/DBI.xs
index a96894c..4825d1d 100644
--- a/DBI.xs
+++ b/DBI.xs
@@ -2888,8 +2888,12 @@ dbi_profile(SV *h, imp_xxh_t *imp_xxh, SV *statement_sv, SV *method, NV t1, NV t
         mg_get(profile); /* FETCH */
     if (!profile || !SvROK(profile)) {
         DBIc_set(imp_xxh, DBIcf_Profile, 0); /* disable */
-        if (SvOK(profile) && !PL_dirty)
-            warn(""Profile attribute isn't a hash ref (%s,%ld)"", neatsvpv(profile,0), (long)SvTYPE(profile));
+        if (!PL_dirty) {
+            if (!profile)
+                warn(""Profile attribute does not exist"");
+            else if (SvOK(profile))
+                warn(""Profile attribute isn't a hash ref (%s,%ld)"", neatsvpv(profile,0), (long)SvTYPE(profile));
+        }
         return &PL_sv_undef;
     }
 
",1.0,3.0,1.0,tfidf
CVE-2019-20919,CVE-2019-20919/36f2a2c5fea36d7d47d6871e420286643460e71b,https://github.com/perl5-dbi/dbi/commit/36f2a2c5fea36d7d47d6871e420286643460e71b,"<s>An issue was discovered in the DBI module before 1.643 for Perl. The hv_fetch() documentation requires checking for NULL and the code does that. But, shortly thereafter, it calls SvOK(profile), causing a NULL pointer dereference.</s>","<s>Fix a buffer overlfow on an overlong DBD class name
dbih_setup_handle() in DBI.xs does:
static void
dbih_setup_handle(pTHX_ SV *orv, char *imp_class, SV *parent, SV *imp_datasv)
{
    [...]
    char imp_mem_name[300];
    [...]
    strcpy(imp_mem_name, imp_class);
    strcat(imp_mem_name, ""_mem"");
    [...]
}
If imp_class argument string value is longer than 300 - strlen(""_mem"")
- 1 bytes, a data will be written past imp_mem_name[] array. The
imp_class comes from DBD driver class name (DBI::_new_drh ->
_new_handle() -> dbih_setup_handle()).
People usually do not use so long package names (e.g. DBD::ExampleP
calls DBI::_new_drh() in lib/DBD/ExampleP.pm), so the risk is low.
Reproducer:
$ perl -MDBI -e 'DBI::_new_drh(q{x} x 300, {}, 0)'
*** buffer overflow detected ***: perl terminated
Aborted (core dumped)
https://rt.cpan.org/Ticket/Display.html?id=130191
</s>"," diff --git a/DBI.xs b/DBI.xs
index b6a4e1a..c631a28 100644
--- a/DBI.xs
+++ b/DBI.xs
@@ -1398,7 +1398,7 @@ dbih_setup_handle(pTHX_ SV *orv, char *imp_class, SV *parent, SV *imp_datasv)
     SV *dbih_imp_rv;
     SV *dbi_imp_data = Nullsv;
     SV **svp;
-    char imp_mem_name[300];
+    SV *imp_mem_name;
     HV  *imp_mem_stash;
     imp_xxh_t *imp;
     imp_xxh_t *parent_imp;
@@ -1425,10 +1425,9 @@ dbih_setup_handle(pTHX_ SV *orv, char *imp_class, SV *parent, SV *imp_datasv)
     if (mg_find(SvRV(h), DBI_MAGIC) != NULL)
         croak(errmsg, neatsvpv(orv,0), imp_class, ""already a DBI (or ~magic) handle"");
 
-    strcpy(imp_mem_name, imp_class);
-    strcat(imp_mem_name, ""_mem"");
-    if ( (imp_mem_stash = gv_stashpv(imp_mem_name, FALSE)) == NULL)
-        croak(errmsg, neatsvpv(orv,0), imp_mem_name, ""unknown _mem package"");
+    imp_mem_name = sv_2mortal(newSVpvf(""%s_mem"", imp_class));
+    if ( (imp_mem_stash = gv_stashsv(imp_mem_name, FALSE)) == NULL)
+        croak(errmsg, neatsvpv(orv,0), SvPVbyte_nolen(imp_mem_name), ""unknown _mem package"");
 
     if ((svp = hv_fetch((HV*)SvRV(h), ""dbi_imp_data"", 12, 0))) {
         dbi_imp_data = *svp;
",0.0,3.0,0.0,tfidf
,,,,,,,,,
CVE-2017-9527,CVE-2017-9527/5c114c91d4ff31859fcd84cf8bf349b737b90d99,https://github.com/mruby/mruby/commit/5c114c91d4ff31859fcd84cf8bf349b737b90d99,<s>The mark_context_stack function in gc.c in mruby through 1.2.0 allows attackers to cause a denial of service (heap-based use-after-free and application crash) or possibly have unspecified other impact via a crafted .rb file.</s>,"<s>Clear unused stack region that may refer freed objects; fix #3596
</s>"," diff --git a/src/gc.c b/src/gc.c
index 116fd0bfd..19bc1ad4b 100644
--- a/src/gc.c
+++ b/src/gc.c
@@ -544,6 +544,7 @@ mark_context_stack(mrb_state *mrb, struct mrb_context *c)
 {
   size_t i;
   size_t e;
+  mrb_value nil;
 
   if (c->stack == NULL) return;
   e = c->stack - c->stbase;
@@ -553,14 +554,14 @@ mark_context_stack(mrb_state *mrb, struct mrb_context *c)
     mrb_value v = c->stbase[i];
 
     if (!mrb_immediate_p(v)) {
-      if (mrb_basic_ptr(v)->tt == MRB_TT_FREE) {
-        c->stbase[i] = mrb_nil_value();
-      }
-      else {
-        mrb_gc_mark(mrb, mrb_basic_ptr(v));
-      }
+      mrb_gc_mark(mrb, mrb_basic_ptr(v));
     }
   }
+  e = c->stend - c->stbase;
+  nil = mrb_nil_value();
+  for (; i<e; i++) {
+    c->stbase[i] = nil;
+  }
 }
 
 static void
",1.0,2.0,1.0,tfidf
CVE-2017-9527,CVE-2017-9527/497a0a791e562d4e9b60305527b2bc2c1d9af20e,https://github.com/mruby/mruby/commit/497a0a791e562d4e9b60305527b2bc2c1d9af20e,<s>The mark_context_stack function in gc.c in mruby through 1.2.0 allows attackers to cause a denial of service (heap-based use-after-free and application crash) or possibly have unspecified other impact via a crafted .rb file.</s>,"<s>Correct comments in gc.c
</s>"," diff --git a/src/gc.c b/src/gc.c
index f74a7f31d..a0f430457 100644
--- a/src/gc.c
+++ b/src/gc.c
@@ -579,10 +579,10 @@ mark_context(mrb_state *mrb, struct mrb_context *c)
   int i;
   mrb_callinfo *ci;
 
-  /* mark stack */
+  /* mark VM stack */
   mark_context_stack(mrb, c);
 
-  /* mark VM stack */
+  /* mark call stack */
   if (c->cibase) {
     for (ci = c->cibase; ci <= c->ci; ci++) {
       mrb_gc_mark(mrb, (struct RBasic*)ci->env);
",0.0,2.0,0.0,tfidf
,,,,,,,,,
CVE-2021-27903,CVE-2021-27903/c17728fa0bec11d3b82c34defe0930ed409aec38,https://github.com/craftcms/cms/commit/c17728fa0bec11d3b82c34defe0930ed409aec38,"<s>An issue was discovered in Craft CMS before 3.6.7. In some circumstances, a potential Remote Code Execution vulnerability existed on sites that did not restrict administrative changes (if an attacker were somehow able to hijack an administrator's session).</s>","<s>Dont allow pointing a Local volume to a system directory
</s>"," diff --git a/CHANGELOG.md b/CHANGELOG.md
index e2e428f7ff..cd785dd79c 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -10,6 +10,9 @@
 - Adjusted GraphQL complexity values for relational fields.
 - Updated Composer to 2.0.9.
 
+### Security
+- Its no longer possible to save a Local volume with the File System Path setting set to a system directory (e.g. the `templates/` or `vendor/` folders).
+
 ## 3.6.6 - 2021-02-15
 
 ### Added
",1.0,1.0,1.0,tfidf
CVE-2021-27903,CVE-2021-27903/c5f403f87144dc40f3304c36d03a9c5ca525537b,https://github.com/craftcms/cms/commit/c5f403f87144dc40f3304c36d03a9c5ca525537b,"<s>An issue was discovered in Craft CMS before 3.6.7. In some circumstances, a potential Remote Code Execution vulnerability existed on sites that did not restrict administrative changes (if an attacker were somehow able to hijack an administrator's session).</s>","<s>Clear the test config/project folder if it exists before running a suite.
</s>"," diff --git a/src/test/Craft.php b/src/test/Craft.php
index fc0bc48057..c329dfb68f 100644
--- a/src/test/Craft.php
+++ b/src/test/Craft.php
@@ -134,6 +134,7 @@ class Craft extends Yii2
             $this->setupDb();
         }
 
+        TestSetup::removeProjectConfigFolders(CRAFT_CONFIG_PATH . DIRECTORY_SEPARATOR . 'project');
     }
 
     /**
",0.0,1.0,0.0,tfidf
,,,,,,,,,
CVE-2021-39196,CVE-2021-39196/0f74f431e0970a2e5784dbd955cfa4760e3b1ef7,https://github.com/jdhwpgmbca/pcapture/commit/0f74f431e0970a2e5784dbd955cfa4760e3b1ef7,"<s>pcapture is an open source dumpcap web service interface . In affected versions this vulnerability allows an authenticated but unprivileged user to use the REST API to capture and download packets with no capture filter and without adequate permissions. This is important because the capture filters can effectively limit the scope of information that a user can see in the data captures. If no filter is present, then all data on the local network segment where the program is running can be captured and downloaded. v3.12 fixes this problem. There is no workaround, you must upgrade to v3.12 or greater.</s>","<s>Fixed major security bug.
A user could effectively specify an undefined url and the program would return a null filter rather than throwing an exception and returning an error to the user. This was a really bad bug. I found it when I was adding code to validate the path parameters. That will be coming in the next commit.
</s>"," diff --git a/src/main/java/com/rtds/svc/CaptureTypeService.java b/src/main/java/com/rtds/svc/CaptureTypeService.java
index 52bdea3..be6c346 100644
--- a/src/main/java/com/rtds/svc/CaptureTypeService.java
+++ b/src/main/java/com/rtds/svc/CaptureTypeService.java
@@ -52,12 +52,16 @@ public class CaptureTypeService
         
         CaptureType type = em.find( CaptureType.class, url_suffix );
         
-        if( type != null )
+        if( type == null )
         {
-            return type.getCaptureFilter();
+            throw new IllegalArgumentException( ""The url_suffix must exist in the database."" );
         }
         
-        return null;
+        // It is okay for the capture filter itself to be null, but the CaptureType
+        // must be in the database, otherwise the user could effectively forge
+        // a capture filter for ""all"" just by requesting a non-existent filter.
+        
+        return type.getCaptureFilter();
     }
     
     public CaptureType find( String url_suffix )
",1.0,1.0,1.0,tfidf
CVE-2021-39196,CVE-2021-39196/7a4c25b32421f7b73f392b1c4296b2186549c5e6,https://github.com/jdhwpgmbca/pcapture/commit/7a4c25b32421f7b73f392b1c4296b2186549c5e6,"<s>pcapture is an open source dumpcap web service interface . In affected versions this vulnerability allows an authenticated but unprivileged user to use the REST API to capture and download packets with no capture filter and without adequate permissions. This is important because the capture filters can effectively limit the scope of information that a user can see in the data captures. If no filter is present, then all data on the local network segment where the program is running can be captured and downloaded. v3.12 fixes this problem. There is no workaround, you must upgrade to v3.12 or greater.</s>","<s>Add some of the admin scripts to win64svc install folder.
This is mostly just for convenience. It makes it very easy to setup the service on a development workstation because everything you need to install and configure the service is all in one directory. Just run the pre-install.ps1 script, then the install-and-start.ps1 script to get the service running, then the add-all-filters.ps1 script to populate the capture filters. For production you can copy the directory to your production server, change the .env file to point to it, and have the proper certificates, and update the dumpcap-ws.xml file to use a valid PKCS12 server certificate.
</s>"," diff --git a/src/main/win64svc/pre-install.ps1 b/src/main/win64svc/pre-install.ps1
index 4be3d18..052d211 100644
--- a/src/main/win64svc/pre-install.ps1
+++ b/src/main/win64svc/pre-install.ps1
@@ -1,2 +1,6 @@
 Copy-Item -Path ${project.basedir}/src/main/resources/startCaptureScript.ps1 -Destination .
 Copy-Item -Path ${project.build.directory}/${project.artifactId}-${project.version}-runner.jar -Destination .
+Copy-Item -Path ${project.basedir}/.env -Destination .
+Copy-Item -Path ${project.basedir}/admin_scripts/add-all-filters.ps1 -Destination .
+Copy-Item -Path ${project.basedir}/admin_scripts/add-filter.ps1 -Destination .
+Copy-Item -Path ${project.basedir}/admin_scripts/delete-filter.ps1 -Destination .
",0.0,1.0,0.0,tfidf
,,,,,,,,,
CVE-2016-8746,CVE-2016-8746/37512c121ac19eb059c512a89c9294bbff824098,https://github.com/apache/ranger/commit/37512c121ac19eb059c512a89c9294bbff824098,<s>Apache Ranger before 0.6.3 policy engine incorrectly matches paths in certain conditions when policy does not contain wildcards and has recursion flag set to true.</s>,"<s>RANGER-1193: Completed 0.6.2 release and updated version to 0.6.3-SNAPSHOT
</s>"," diff --git a/pom.xml b/pom.xml
index 957b7ff89..493a2fc5b 100644
--- a/pom.xml
+++ b/pom.xml
@@ -23,7 +23,7 @@
     </parent>
     <groupId>org.apache.ranger</groupId>
     <artifactId>ranger</artifactId>
-    <version>0.6.2</version>
+    <version>0.6.3-SNAPSHOT</version>
     <description>Security for Enforcing Enterprise Policies</description>
     <packaging>pom</packaging>
     <name>ranger</name>
",0.0,1.0,0.0,tfidf
CVE-2016-8746,CVE-2016-8746/9dfde6de92799d7d923cf8eb11bbdc8788d6664c,https://github.com/apache/ranger/commit/9dfde6de92799d7d923cf8eb11bbdc8788d6664c,<s>Apache Ranger before 0.6.3 policy engine incorrectly matches paths in certain conditions when policy does not contain wildcards and has recursion flag set to true.</s>,"<s>RANGER-1261: fix path matching inconsistencies and wildcard treatment
Signed-off-by: Madhan Neethiraj <madhan@apache.org>
(cherry picked from commit 22029847559b3881cdc3176b15e545e847ef6d7c)
</s>"," diff --git a/agents-common/src/test/resources/resourcematcher/test_resourcematcher_path.json b/agents-common/src/test/resources/resourcematcher/test_resourcematcher_path.json
index c67ff45d6..86da28ce2 100644
--- a/agents-common/src/test/resources/resourcematcher/test_resourcematcher_path.json
+++ b/agents-common/src/test/resources/resourcematcher/test_resourcematcher_path.json
@@ -1,5 +1,44 @@
 {
   ""testCases"":[
+	  {
+		  ""name"":""value=/a/b*y.txt; isRecursive=true; wildCard=true; ignoreCase=true"",
+		  ""resourceDef"":{
+			  ""matcher"":""org.apache.ranger.plugin.resourcematcher.RangerPathResourceMatcher"",
+			  ""matcherOptions"":{""wildCard"":true, ""ignoreCase"":true}
+		  },
+		  ""policyResource"":{
+			  ""values"": [""/a/b*y.txt""],
+			  ""isRecursive"":true
+		  },
+		  ""tests"":[
+			  { ""name"":""exact-path"",""input"":""/a/b*y.txt"", ""result"":true},
+			  { ""name"":""child-path"",""input"":""/a/b/y.txt"", ""result"":true},
+			  { ""name"":""grand-child-path"",""input"":""/a/b1/b2/y.txt"", ""result"":true},
+			  { ""name"":""descendant-child-path"",""input"":""/a/b1/c1/d1/any.txt"", ""result"":true},
+			  { ""name"":""mismatche-path"",""input"":""/a/any.txt"", ""result"":false},
+
+		  ]
+	  }
+	  ,
+	  {
+		  ""name"":""value=/a/b*y.txt; isRecursive=false; wildCard=true; ignoreCase=true"",
+		  ""resourceDef"":{
+			  ""matcher"":""org.apache.ranger.plugin.resourcematcher.RangerPathResourceMatcher"",
+			  ""matcherOptions"":{""wildCard"":true, ""ignoreCase"":true}
+		  },
+		  ""policyResource"":{
+			  ""values"": [""/a/b*y.txt""],
+			  ""isRecursive"":false
+		  },
+		  ""tests"":[
+			  { ""name"":""exact-path"",""input"":""/a/b*y.txt"", ""result"":true},
+			  { ""name"":""child-path"",""input"":""/a/b/y.txt"", ""result"":true},
+			  { ""name"":""grand-child-path"",""input"":""/a/b1/b2/y.txt"", ""result"":true},
+			  { ""name"":""descendant-child-path"",""input"":""/a/b1/c1/d1/any.txt"", ""result"":true},
+			  { ""name"":""mismatche-path"",""input"":""/a/any.txt"", ""result"":false},
+		  ]
+	  }
+	  ,
 	  {
 		  ""name"":""value=*; isRecursive=false; wildCard=true; ignoreCase=true"",
 		  ""resourceDef"":{
@@ -131,9 +170,31 @@
       	{ ""name"":""grand-child-path-camel-case"",""input"":""/Path1/Path2/Path3"", ""result"":true},
       	{ ""name"":""sibling-path"",""input"":""/path2"", ""result"":false},
       	{ ""name"":""invalid-path"",""input"":""path1"", ""result"":false},
+          { ""name"":""prefix-path"",""input"":""/path12"", ""result"":false},
+          { ""name"":""no-path"",""input"":"""", ""result"":false}
       ]
   	}
   	,
+      {
+          ""name"": ""value=/path1/path2; isRecursive=true; wildCard=true; ignoreCase=true"",
+          ""resourceDef"": {
+              ""matcher"": ""org.apache.ranger.plugin.resourcematcher.RangerPathResourceMatcher"",
+              ""matcherOptions"": {""wildCard"": true, ""ignoreCase"": true
+              }
+          },
+          ""policyResource"": {""values"": [""/path1/path2""], ""isRecursive"": true},
+          ""tests"": [
+              {""name"": ""exact-path"", ""input"": ""/path1/path2"", ""result"": true},
+              {""name"": ""parent-path"", ""input"": ""/path1"", ""result"": false},
+              {""name"": ""grand-parent-path"", ""input"": ""/"", ""result"": false},
+              {""name"": ""child-path"", ""input"": ""/path1/path2/path3"", ""result"": true},
+              {""name"": ""grandchild-path"", ""input"": ""/path1/path2/path3/path4"", ""result"": true},
+              {""name"": ""sibling-path"", ""input"": ""/path1/path3"", ""result"": false},
+              {""name"": ""prefix-path"", ""input"": ""/path1/path21"", ""result"": false},
+              {""name"": ""invalid-path"", ""input"": ""path1/path2*"", ""result"": false}
+          ]
+      }
+  ,
   	{
       ""name"":""value=/path*; isRecursive=true; wildCard=true; ignoreCase=true"",
       ""resourceDef"":{
",1.0,1.0,1.0,tfidf
,,,,,,,,,
CVE-2019-6257,CVE-2019-6257/2f522db8f037a66ce9040ee0b216aa4a0359286c,https://github.com/Studio-42/elFinder/commit/2f522db8f037a66ce9040ee0b216aa4a0359286c,<s>A Server Side Request Forgery (SSRF) vulnerability in elFinder before 2.1.46 could allow a malicious user to access the content of internal network resources. This occurs in get_remote_contents() in php/elFinder.class.php.</s>,"<s>[php:core:security] fix SSRF vulnerability of `get_remote_contents()`
We express special gratitude to Do Ha Anh of Viettel Cyber Security
Center, the reporter of this vulnerability.
</s>"," diff --git a/php/elFinder.class.php b/php/elFinder.class.php
index 38b1a9dd3..8ab213686 100644
--- a/php/elFinder.class.php
+++ b/php/elFinder.class.php
@@ -2410,23 +2410,41 @@ class elFinder
     {
         if (preg_match('~^(?:ht|f)tps?://[-_.!\~*\'()a-z0-9;/?:\@&=+\$,%#\*\[\]]+~i', $url)) {
             $info = parse_url($url);
-            $host = strtolower($info['host']);
+            $host = trim(strtolower($info['host']), '.');
             // do not support IPv6 address
             if (preg_match('/^\[.*\]$/', $host)) {
                 return false;
             }
-            // do not support non dot URL
+            // do not support non dot host
             if (strpos($host, '.') === false) {
                 return false;
             }
-            // disallow including ""localhost""
-            if (strpos($host, 'localhost') !== false) {
+            // do not support URL-encoded host
+            if (strpos($host, '%') !== false) {
                 return false;
             }
-            // check IPv4 local loopback
-            if (preg_match('/^(?:127|0177|0x7f)\.[0-9a-fx.]+$/', $host)) {
+            // disallow including ""localhost"" and ""localdomain""
+            if (preg_match('/\b(?:localhost|localdomain)\b/', $host)) {
                 return false;
             }
+            // check IPv4 local loopback, private network and link local
+            if (preg_match('/^0x[0-9a-f]+|[0-9]+(?:\.(?:0x[0-9a-f]+|[0-9]+)){1,3}$/', $host, $m)) {
+                $long = (int)sprintf('%u', ip2long($host));
+                if (!$long) {
+                    return false;
+                }
+                $local = (int)sprintf('%u', ip2long('127.255.255.255')) >> 24;
+                $prv1 = (int)sprintf('%u', ip2long('10.255.255.255')) >> 24;
+                $prv2 = (int)sprintf('%u', ip2long('172.31.255.255')) >> 20;
+                $prv3 = (int)sprintf('%u', ip2long('192.168.255.255')) >> 16;
+                $link = (int)sprintf('%u', ip2long('169.254.255.255')) >> 16;
+
+                if ($long >> 24 === $local || $long >> 24 === $prv1 || $long >> 20 === $prv2 || $long >> 16 === $prv3 || $long >> 16 === $link) {
+                    return false;
+                }
+            }
+            // dose not support 'user' and 'pass' for security reasons
+            $url = $info['scheme'].'://'.$host.(!empty($info['port'])? (':'.$info['port']) : '').$info['path'].(!empty($info['query'])? ('?'.$info['query']) : '').(!empty($info['fragment'])? ('#'.$info['fragment']) : '');
             // check by URL upload filter
             if ($this->urlUploadFilter && is_callable($this->urlUploadFilter)) {
                 if (!call_user_func_array($this->urlUploadFilter, array($url, $this))) {
@@ -2551,6 +2569,10 @@ class elFinder
             sleep(1); // wait 1sec
         }
 
+        if (!$fp) {
+            return false;
+        }
+
         $fwrite = 0;
         for ($written = 0; $written < strlen($query); $written += $fwrite) {
             $fwrite = fwrite($fp, substr($query, $written));
",1.0,3.0,1.0,tfidf
CVE-2019-6257,CVE-2019-6257/57f1c62106fab26f9f4578c27d5b23d4a6d301e2,https://github.com/Studio-42/elFinder/commit/57f1c62106fab26f9f4578c27d5b23d4a6d301e2,<s>A Server Side Request Forgery (SSRF) vulnerability in elFinder before 2.1.46 could allow a malicious user to access the content of internal network resources. This occurs in get_remote_contents() in php/elFinder.class.php.</s>,"<s>[php:core] typo fix of last commit
</s>"," diff --git a/php/elFinder.class.php b/php/elFinder.class.php
index 7713a65b7..85ce557de 100644
--- a/php/elFinder.class.php
+++ b/php/elFinder.class.php
@@ -2882,7 +2882,7 @@ class elFinder {
 		
 		if ($encoding === 'scheme') {
 			if (preg_match('~^https?://~i', $args['content'])) {
-				$fp = $this->get_remote_contents($args['content'], 30, 5, 'Mozilla/5.0', fopen($volume->getTempFile, 'wb'));
+				$fp = $this->get_remote_contents($args['content'], 30, 5, 'Mozilla/5.0', fopen($volume->getTempFile(), 'wb'));
 				if (! $fp) {
 					return  array('error' => self::ERROR_SAVE, $args['content'], self::ERROR_FILE_NOT_FOUND);
 				}
",0.0,3.0,0.0,tfidf
,,,,,,,,,
CVE-2015-8702,CVE-2015-8702/6058483d9fbc1b904d5ae7cfea47bfcde5c5b559,https://github.com/inspircd/inspircd/commit/6058483d9fbc1b904d5ae7cfea47bfcde5c5b559,"<s>The DNS::GetResult function in dns.cpp in InspIRCd before 2.0.19 allows remote DNS servers to cause a denial of service (netsplit) via an invalid character in a PTR response, as demonstrated by a ""\032"" (whitespace) character in a hostname.</s>","<s>Reject replies to DNS PTR requests that contain invalid characters
Fixes issue #1033 reported by @ping86
</s>"," diff --git a/src/dns.cpp b/src/dns.cpp
index 75e5731fe..14305ccab 100644
--- a/src/dns.cpp
+++ b/src/dns.cpp
@@ -700,8 +700,16 @@ DNSResult DNS::GetResult()
 				/* Identical handling to PTR */
 
 			case DNS_QUERY_PTR:
+			{
 				/* Reverse lookups just come back as char* */
 				resultstr = std::string((const char*)data.first);
+				if (resultstr.find_first_not_of(""0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.-"") != std::string::npos)
+				{
+					std::string ro = req->orig;
+					delete req;
+					return DNSResult(this_id | ERROR_MASK, ""Invalid char(s) in reply"", 0, ro);
+				}
+			}
 			break;
 
 			default:
",1.0,3.0,1.0,tfidf
CVE-2015-8702,CVE-2015-8702/81841f76c863844210baf991d5c8cdfd01e57353,https://github.com/inspircd/inspircd/commit/81841f76c863844210baf991d5c8cdfd01e57353,"<s>The DNS::GetResult function in dns.cpp in InspIRCd before 2.0.19 allows remote DNS servers to cause a denial of service (netsplit) via an invalid character in a PTR response, as demonstrated by a ""\032"" (whitespace) character in a hostname.</s>","<s>Fix a minor crash when a user has no class after OnCheckReady.
This bug looks serious but it can only be triggered with a
very unusual server configuration problem. If you haven't
already had a crash then you probably aren't at any risk.
The way this crash happens is:
1. InspIRCd::DoBackgroundUserStuff is called by the main loop.
2. In the switch statement curr->registered is set to REG_NICKUSER so InspIRCd::AllModulesReportReady is called.
3. InspIRCd::AllModulesReportReady calls the OnCheckReady event in m_cgiirc.
4. m_cgiirc calls RecheckClass which sets the user's class to NULL and calls LocalUser::SetClass followed by LocalUser::CheckClass.
5. The user doesn't match any classes in LocalUser::SetClass so LocalUser::CheckClass quits the user with with ""Access denied by configuration"".
6. Control flow returns to InspIRCd::DoBackgroundUserStuff when InspIRCd::AllModulesReportReady returns false.
7. The if statement at the end of InspIRCd::DoBackgroundUserStuff calls ConnectClass::GetRegTimeout on curr->MyClass.
8. ConnectClass::GetRegTimeout tries to access a member of this which is NULL.
9. The server crashes with a SEGFAULT.
</s>"," diff --git a/src/userprocess.cpp b/src/userprocess.cpp
index 0ef95e413..69c31f840 100644
--- a/src/userprocess.cpp
+++ b/src/userprocess.cpp
@@ -104,10 +104,15 @@ void InspIRCd::DoBackgroundUserStuff()
 					curr->FullConnect();
 					continue;
 				}
+
+				// If the user has been quit in OnCheckReady then we shouldn't
+				// quit them again for having a registration timeout.
+				if (curr->quitting)
+					continue;
 				break;
 		}
 
-		if (curr->registered != REG_ALL && (Time() > (curr->signon + curr->MyClass->GetRegTimeout())))
+		if (curr->registered != REG_ALL && curr->MyClass && (Time() > (curr->signon + curr->MyClass->GetRegTimeout())))
 		{
 			/*
 			 * registration timeout -- didnt send USER/NICK/HOST
",0.0,3.0,0.0,tfidf
,,,,,,,,,
CVE-2011-1772,CVE-2011-1772/885ab3459e146ff830d1f7257f809f4a3dd4493a,https://github.com/apache/struts/commit/885ab3459e146ff830d1f7257f809f4a3dd4493a,"<s>Multiple cross-site scripting (XSS) vulnerabilities in XWork in Apache Struts 2.x before 2.2.3, and OpenSymphony XWork in OpenSymphony WebWork, allow remote attackers to inject arbitrary web script or HTML via vectors involving (1) an action name, (2) the action attribute of an s:submit element, or (3) the method attribute of an s:submit element.</s>","<s>Solves WW-3579 - escapes actionName and methodName to prevent XSS vulnerability
git-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@1076372 13f79535-47bb-0310-9956-ffa450edef68
</s>"," diff --git a/xwork-core/src/main/java/com/opensymphony/xwork2/DefaultActionProxy.java b/xwork-core/src/main/java/com/opensymphony/xwork2/DefaultActionProxy.java
index ef0d3b4d0..f58b17aa5 100644
--- a/xwork-core/src/main/java/com/opensymphony/xwork2/DefaultActionProxy.java
+++ b/xwork-core/src/main/java/com/opensymphony/xwork2/DefaultActionProxy.java
@@ -23,12 +23,12 @@ import com.opensymphony.xwork2.util.LocalizedTextUtil;
 import com.opensymphony.xwork2.util.logging.Logger;
 import com.opensymphony.xwork2.util.logging.LoggerFactory;
 import com.opensymphony.xwork2.util.profiling.UtilTimerStack;
+import org.apache.commons.lang.StringEscapeUtils;
+import org.apache.commons.lang.StringUtils;
 
 import java.io.Serializable;
 import java.util.Locale;
 
-import org.apache.commons.lang.StringUtils;
-
 
 /**
  * The Default ActionProxy implementation
@@ -74,10 +74,10 @@ public class DefaultActionProxy implements ActionProxy, Serializable {
 			LOG.debug(""Creating an DefaultActionProxy for namespace "" + namespace + "" and action name "" + actionName);
 		}
 
-		this.actionName = actionName;
-		this.namespace = namespace;
-		this.executeResult = executeResult;
-        this.method = methodName;
+        this.actionName = StringEscapeUtils.escapeHtml(actionName);
+        this.namespace = namespace;
+        this.executeResult = executeResult;
+        this.method = StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(methodName));
     }
     
     @Inject
",1.0,3.0,1.0,tfidf
CVE-2011-1772,CVE-2011-1772/62e78be60f604b153a38506bbc823ed02ead067f,https://github.com/apache/struts/commit/62e78be60f604b153a38506bbc823ed02ead067f,"<s>Multiple cross-site scripting (XSS) vulnerabilities in XWork in Apache Struts 2.x before 2.2.3, and OpenSymphony XWork in OpenSymphony WebWork, allow remote attackers to inject arbitrary web script or HTML via vectors involving (1) an action name, (2) the action attribute of an s:submit element, or (3) the method attribute of an s:submit element.</s>","<s>WW-3498 Inject values into top of stack (model or action) instead of always using action. This does not break backward compatibility because nobody could use a model before this patch.

git-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@1065743 13f79535-47bb-0310-9956-ffa450edef68
</s>"," diff --git a/plugins/json/src/main/java/org/apache/struts2/json/JSONInterceptor.java b/plugins/json/src/main/java/org/apache/struts2/json/JSONInterceptor.java
index aa713d840..2a6272d69 100644
--- a/plugins/json/src/main/java/org/apache/struts2/json/JSONInterceptor.java
+++ b/plugins/json/src/main/java/org/apache/struts2/json/JSONInterceptor.java
@@ -83,7 +83,7 @@ public class JSONInterceptor extends AbstractInterceptor {
                 contentType = contentType.substring(0, iSemicolonIdx);
         }
 
-        Object rootObject;
+        Object rootObject = null;
         if (this.root != null) {
             ValueStack stack = invocation.getStack();
             rootObject = stack.findValue(this.root);
@@ -91,8 +91,6 @@ public class JSONInterceptor extends AbstractInterceptor {
             if (rootObject == null) {
                 throw new RuntimeException(""Invalid root expression: '"" + this.root + ""'."");
             }
-        } else {
-            rootObject = invocation.getAction();
         }
 
         if ((contentType != null) && contentType.equalsIgnoreCase(""application/json"")) {
@@ -106,6 +104,9 @@ public class JSONInterceptor extends AbstractInterceptor {
                 if (dataCleaner != null)
                     dataCleaner.clean("""", json);
 
+                if (rootObject == null) // model overrides action
+                    rootObject = invocation.getStack().peek();
+
                 // populate fields
                 populator.populateObject(rootObject, json);
             } else {
@@ -121,6 +122,9 @@ public class JSONInterceptor extends AbstractInterceptor {
                 if (obj instanceof Map) {
                     Map smd = (Map) obj;
 
+                    if (rootObject == null) // model makes no sense when using RPC
+                        rootObject = invocation.getAction();
+
                     // invoke method
                     try {
                         result = this.invoke(rootObject, smd);
",0.0,3.0,0.0,tfidf
,,,,,,,,,
CVE-2021-32691,CVE-2021-32691/cb5f8f1c0b24f1b215b2bb5eb6f9a8e16d728ce2,https://github.com/ApollosProject/apollos-apps/commit/cb5f8f1c0b24f1b215b2bb5eb6f9a8e16d728ce2,"<s>Apollos Apps is an open source platform for launching church-related apps. In Apollos Apps versions prior to 2.20.0, new user registrations are able to access anyone's account by only knowing their basic profile information (name, birthday, gender, etc). This includes all app functionality within the app, as well as any authenticated links to Rock-based webpages (such as giving and events). There is a patch in version 2.20.0. As a workaround, one can patch one's server by overriding the `create` data source method on the `People` class.</s>","<s>fix: turns off automerging new people (#1989)
* fix: turns off automerging new people
* fix
* tests and snaps
</s>"," diff --git a/packages/apollos-data-connector-rock/src/auth/__tests__/index.tests.js b/packages/apollos-data-connector-rock/src/auth/__tests__/index.tests.js
index edf11916..2b5fbf7b 100644
--- a/packages/apollos-data-connector-rock/src/auth/__tests__/index.tests.js
+++ b/packages/apollos-data-connector-rock/src/auth/__tests__/index.tests.js
@@ -224,11 +224,12 @@ describe('Auth', () => {
     });
 
     it('creates user profile', async () => {
+      context.dataSources.Person.create = jest.fn(() => 35);
       const result = await context.dataSources.Auth.createUserProfile({
         email: 'isaac.hardy@newspring.cc',
       });
 
-      expect(result).toEqual('35');
+      expect(result).toEqual(35);
     });
 
     it('throws error in createUserProfile', async () => {
@@ -276,6 +277,7 @@ describe('Auth', () => {
           }
         }
       `;
+      context.dataSources.Person.create = jest.fn(() => 1);
 
       const rootValue = {};
 
",1.0,2.0,1.0,tfidf
CVE-2021-32691,CVE-2021-32691/2d6044ccc2540d6515918ccd706a4f4cb26f3a7b,https://github.com/ApollosProject/apollos-apps/commit/2d6044ccc2540d6515918ccd706a4f4cb26f3a7b,"<s>Apollos Apps is an open source platform for launching church-related apps. In Apollos Apps versions prior to 2.20.0, new user registrations are able to access anyone's account by only knowing their basic profile information (name, birthday, gender, etc). This includes all app functionality within the app, as well as any authenticated links to Rock-based webpages (such as giving and events). There is a patch in version 2.20.0. As a workaround, one can patch one's server by overriding the `create` data source method on the `People` class.</s>","<s>chore: makes app developement faster (#1974)
* chore: makes app developement faster
uses the default URL for the API so there's no need to type in the encryption password
* made it optional
Co-authored-by: Vincent Wilson <vince@classyh.at>
</s>"," diff --git a/scripts/setup-api.sh b/scripts/setup-api.sh
index 2f92036f..2e0a720c 100755
--- a/scripts/setup-api.sh
+++ b/scripts/setup-api.sh
@@ -19,6 +19,7 @@ cd ..
 
 shopt -s dotglob
 mv apollos-templates/apollos-church-api/* ../ApollosApi
+cp apollos-templates/yarn.lock ../ApollosApi
 
 cd ..
 
",0.0,2.0,0.0,tfidf
,,,,,,,,,
CVE-2014-2068,CVE-2014-2068/0530a6645aac10fec005614211660e98db44b5eb,https://github.com/jenkinsci/jenkins/commit/0530a6645aac10fec005614211660e98db44b5eb,<s>The doIndex function in hudson/util/RemotingDiagnostics.java in CloudBees Jenkins before 1.551 and LTS before 1.532.2 allows remote authenticated users with the ADMINISTER permission to obtain sensitive information via vectors related to heapDump.</s>,"<s>[FIXED SECURITY-73] Require RUN_SCRIPTS for /heapDump.
</s>"," diff --git a/core/src/main/java/hudson/util/RemotingDiagnostics.java b/core/src/main/java/hudson/util/RemotingDiagnostics.java
index 408c9931f4..8f014bbcf8 100644
--- a/core/src/main/java/hudson/util/RemotingDiagnostics.java
+++ b/core/src/main/java/hudson/util/RemotingDiagnostics.java
@@ -202,7 +202,7 @@ public final class RemotingDiagnostics {
 
         @WebMethod(name=""heapdump.hprof"")
         public void doHeapDump(StaplerRequest req, StaplerResponse rsp) throws IOException, InterruptedException {
-            owner.checkPermission(Jenkins.ADMINISTER);
+            owner.checkPermission(Jenkins.RUN_SCRIPTS);
             rsp.setContentType(""application/octet-stream"");
 
             FilePath dump = obtain();
",1.0,3.0,1.0,lime
CVE-2014-2068,CVE-2014-2068/2a9197d36dcd544b94ea2b5e2057a6bcb15552fc,https://github.com/jenkinsci/jenkins/commit/2a9197d36dcd544b94ea2b5e2057a6bcb15552fc,<s>The doIndex function in hudson/util/RemotingDiagnostics.java in CloudBees Jenkins before 1.551 and LTS before 1.532.2 allows remote authenticated users with the ADMINISTER permission to obtain sensitive information via vectors related to heapDump.</s>,"<s>Better diagnostics than Failed to get backup version: indicate what file was broken.
</s>"," diff --git a/core/src/main/java/hudson/PluginWrapper.java b/core/src/main/java/hudson/PluginWrapper.java
index 3245888194..9ac22a3eab 100644
--- a/core/src/main/java/hudson/PluginWrapper.java
+++ b/core/src/main/java/hudson/PluginWrapper.java
@@ -581,7 +581,7 @@ public class PluginWrapper implements Comparable<PluginWrapper>, ModelObject {
                     backupPlugin.close();
                 }
             } catch (IOException e) {
-                LOGGER.log(WARNING, ""Failed to get backup version "", e);
+                LOGGER.log(WARNING, ""Failed to get backup version from "" + backup, e);
                 return null;
             }
         } else {
",0.0,3.0,0.0,lime
,,,,,,,,,
CVE-2016-7405,CVE-2016-7405/bd9eca9f40220f9918ec3cc7ae9ef422b3e448b8,https://github.com/ADOdb/ADOdb/commit/bd9eca9f40220f9918ec3cc7ae9ef422b3e448b8,<s>The qstr method in the PDO driver in the ADOdb Library for PHP before 5.x before 5.20.7 might allow remote attackers to conduct SQL injection attacks via vectors related to incorrect quoting.</s>,"<s>PDO: fix incorrect quoting allowing SQL injection
The PDO driver was relying on ADOConnection::qstr() for quoting strings.
An application relying on qstr() to manually prepare SQL statements
rather than using parameterized queries may be vulnerable to SQL
injection attacks, as demonstrated by @jdavidlists.
This commit delegates string quoting to PDO::quote() when a connection
is available. If not, it simply replaces single quotes by the value of
$replaceQuote property.
Fixes #226
</s>"," diff --git a/drivers/adodb-pdo.inc.php b/drivers/adodb-pdo.inc.php
index e3f49a4f..63a3e6e0 100644
--- a/drivers/adodb-pdo.inc.php
+++ b/drivers/adodb-pdo.inc.php
@@ -518,6 +518,30 @@ class ADODB_pdo extends ADOConnection {
 	{
 		return ($this->_connectionID) ? $this->_connectionID->lastInsertId() : 0;
 	}
+
+	/**
+	 * Quotes a string to be sent to the database.
+	 * If we have an active connection, delegates quoting to the underlying
+	 * PDO object. Otherwise, replace ""'"" by the value of $replaceQuote (same
+	 * behavior as mysqli driver)
+	 * @param string  $s            The string to quote
+	 * @param boolean $magic_quotes If false, use PDO::quote().
+	 * @return string Quoted string
+	 */
+	function qstr($s, $magic_quotes = false)
+	{
+		if (!$magic_quotes) {
+			if ($this->_connectionID) {
+				return $this->_connectionID->quote($s);
+			}
+			return ""'"" . str_replace(""'"", $this->replaceQuote, $s) . ""'"";
+		}
+
+		// undo magic quotes for ""
+		$s = str_replace('\\""', '""', $s);
+		return ""'$s'"";
+	}
+
 }
 
 class ADODB_pdo_base extends ADODB_pdo {
",1.0,3.0,1.0,tfidf
CVE-2016-7405,CVE-2016-7405/bfb32f996ece70578ca9189dff026b19e46bb61d,https://github.com/ADOdb/ADOdb/commit/bfb32f996ece70578ca9189dff026b19e46bb61d,<s>The qstr method in the PDO driver in the ADOdb Library for PHP before 5.x before 5.20.7 might allow remote attackers to conduct SQL injection attacks via vectors related to incorrect quoting.</s>,"<s>PDO/mysql: fix MetaTables broken SQL
When a schema is specified in $showSchema, the function generates an
invalid where clause:
WHERE TABLE_SCHEMA= from myschema
                    ^
                    should be 'myschema'
Fixes #275
</s>"," diff --git a/drivers/adodb-pdo_mysql.inc.php b/drivers/adodb-pdo_mysql.inc.php
index b1df4c35..8eaba8ae 100644
--- a/drivers/adodb-pdo_mysql.inc.php
+++ b/drivers/adodb-pdo_mysql.inc.php
@@ -70,7 +70,7 @@ class ADODB_pdo_mysql extends ADODB_pdo {
 	{
 		$save = $this->metaTablesSQL;
 		if ($showSchema && is_string($showSchema)) {
-			$this->metaTablesSQL .= "" from $showSchema"";
+			$this->metaTablesSQL .= $this->qstr($showSchema);
 		} else {
 			$this->metaTablesSQL .= 'schema()';
 		}
",0.0,3.0,0.0,tfidf
,,,,,,,,,
CVE-2019-20839,CVE-2019-20839/3fd03977c9b35800d73a865f167338cb4d05b0c1,https://github.com/LibVNC/libvncserver/commit/3fd03977c9b35800d73a865f167338cb4d05b0c1,<s>libvncclient/sockets.c in LibVNCServer before 0.9.13 has a buffer overflow via a long socket filename.</s>,"<s>libvncclient: bail out if unix socket name would overflow
Closes #291
</s>"," diff --git a/libvncclient/sockets.c b/libvncclient/sockets.c
index f042472f..821f85ca 100644
--- a/libvncclient/sockets.c
+++ b/libvncclient/sockets.c
@@ -461,6 +461,10 @@ ConnectClientToUnixSock(const char *sockFile)
   int sock;
   struct sockaddr_un addr;
   addr.sun_family = AF_UNIX;
+  if(strlen(sockFile) + 1 > sizeof(addr.sun_path)) {
+      rfbClientErr(""ConnectToUnixSock: socket file name too long\n"");
+      return -1;
+  }
   strcpy(addr.sun_path, sockFile);
 
   sock = socket(AF_UNIX, SOCK_STREAM, 0);
",1.0,3.0,1.0,tfidf
CVE-2019-20839,CVE-2019-20839/be31f456421e0bb04cb78a714cb76c7110448832,https://github.com/LibVNC/libvncserver/commit/be31f456421e0bb04cb78a714cb76c7110448832,<s>libvncclient/sockets.c in LibVNCServer before 0.9.13 has a buffer overflow via a long socket filename.</s>,"<s>LibVNCServer: fix a for loop for C90
</s>"," diff --git a/libvncserver/sockets.c b/libvncserver/sockets.c
index 70250431..0320a269 100644
--- a/libvncserver/sockets.c
+++ b/libvncserver/sockets.c
@@ -493,7 +493,7 @@ rfbProcessNewConnection(rfbScreenInfoPtr rfbScreen)
     int chosen_listen_sock = -1;
 #if defined LIBVNCSERVER_HAVE_SYS_RESOURCE_H && defined LIBVNCSERVER_HAVE_FCNTL_H
     struct rlimit rlim;
-    size_t maxfds, curfds;
+    size_t maxfds, curfds, i;
 #endif
     /* Do another select() call to find out which listen socket
        has an incoming connection pending. We know that at least 
@@ -528,7 +528,7 @@ rfbProcessNewConnection(rfbScreenInfoPtr rfbScreen)
 
     /* get the number of currently open fds as per https://stackoverflow.com/a/7976880/361413 */
     curfds = 0;
-    for(size_t i = 0; i < maxfds; ++i)
+    for(i = 0; i < maxfds; ++i)
 	if(fcntl(i, F_GETFD) != -1)
 	    ++curfds;
 
",0.0,3.0,0.0,tfidf
,,,,,,,,,
CVE-2022-1993,CVE-2022-1993/9bf748b6c4c9a17d3aa77f6b9abcfae65451febf,https://github.com/gogs/gogs/commit/9bf748b6c4c9a17d3aa77f6b9abcfae65451febf,<s>Path Traversal in GitHub repository gogs/gogs prior to 0.12.9.</s>,"<s>http: clean request path from Git endpoints (#7022)

</s>"," diff --git a/CHANGELOG.md b/CHANGELOG.md
index 765d6935..cb3e5cfe 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -26,6 +26,7 @@ All notable changes to Gogs are documented in this file.
 - _Security:_ OS Command Injection in file editor. [#7000](https://github.com/gogs/gogs/issues/7000)
 - _Security:_ Sanitize `DisplayName` in repository issue list. [#7009](https://github.com/gogs/gogs/pull/7009)
 - _Security:_ Path Traversal in file editor on Windows. [#7001](https://github.com/gogs/gogs/issues/7001)
+- _Security:_ Path Traversal in Git HTTP endpoints. [#7002](https://github.com/gogs/gogs/issues/7002)
 - Unable to use LDAP authentication on ARM machines. [#6761](https://github.com/gogs/gogs/issues/6761)
 - Unable to init repository during creation on Windows. [#6967](https://github.com/gogs/gogs/issues/6967)
 - Mysterious panic on `Value not found for type *repo.HTTPContext`. [#6963](https://github.com/gogs/gogs/issues/6963)
",0.0,1.0,1.0,lime
CVE-2022-1993,CVE-2022-1993/4a89438454f9b437c22e1265ed1d81c6686f33e6,https://github.com/gogs/gogs/commit/4a89438454f9b437c22e1265ed1d81c6686f33e6,<s>Path Traversal in GitHub repository gogs/gogs prior to 0.12.9.</s>,"<s>ci: update GitHub Actions (#6612)

</s>"," diff --git a/.github/workflows/go.yml b/.github/workflows/go.yml
index 7100cab0..30c9901a 100644
--- a/.github/workflows/go.yml
+++ b/.github/workflows/go.yml
@@ -34,8 +34,8 @@ jobs:
     name: Test
     strategy:
       matrix:
-        go-version: [1.14.x, 1.15.x, 1.16.x]
-        platform: [ubuntu-latest, macos-latest, windows-latest]
+        go-version: [ 1.15.x, 1.16.x, 1.17.x ]
+        platform: [ ubuntu-latest, macos-latest, windows-latest ]
     runs-on: ${{ matrix.platform }}
     steps:
       - name: Install Go
@@ -44,18 +44,10 @@ jobs:
           go-version: ${{ matrix.go-version }}
       - name: Checkout code
         uses: actions/checkout@v2
-      - name: Cache downloaded modules
-        uses: actions/cache@v1
-        with:
-          path: ~/go/pkg/mod
-          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
-          restore-keys: |
-            ${{ runner.os }}-go-
-      - name: Run unit tests
+      - name: Run tests with coverage
         run: go test -v -race -coverprofile=coverage -covermode=atomic ./...
       - name: Upload coverage report to Codecov
         uses: codecov/codecov-action@v1.5.0
         with:
           file: ./coverage
           flags: unittests
-
",1.0,1.0,0.0,lime
,,,,,,,,,
CVE-2021-3664,CVE-2021-3664/81ab967889b08112d3356e451bf03e6aa0cbb7e0,https://github.com/unshiftio/url-parse/commit/81ab967889b08112d3356e451bf03e6aa0cbb7e0,<s>url-parse is vulnerable to URL Redirection to Untrusted Site</s>,"<s>[fix] Ignore slashes after the protocol for special URLs
Fixes #205
Fixes #206
</s>"," diff --git a/index.js b/index.js
index 94e357e..f424acc 100644
--- a/index.js
+++ b/index.js
@@ -98,6 +98,24 @@ function lolcation(loc) {
   return finaldestination;
 }
 
+/**
+ * Check whether a protocol scheme is special.
+ *
+ * @param {String} The protocol scheme of the URL
+ * @return {Boolean} `true` if the protocol scheme is special, else `false`
+ * @private
+ */
+function isSpecial(scheme) {
+  return (
+    scheme === 'file:' ||
+    scheme === 'ftp:' ||
+    scheme === 'http:' ||
+    scheme === 'https:' ||
+    scheme === 'ws:' ||
+    scheme === 'wss:'
+  );
+}
+
 /**
  * @typedef ProtocolExtract
  * @type Object
@@ -110,16 +128,32 @@ function lolcation(loc) {
  * Extract protocol information from a URL with/without double slash (""//"").
  *
  * @param {String} address URL we want to extract from.
+ * @param {Object} location
  * @return {ProtocolExtract} Extracted information.
  * @private
  */
-function extractProtocol(address) {
+function extractProtocol(address, location) {
   address = trimLeft(address);
+  location = location || {};
 
-  var match = protocolre.exec(address)
-    , protocol = match[1] ? match[1].toLowerCase() : ''
-    , slashes = !!(match[2] && match[2].length >= 2)
-    , rest =  match[2] && match[2].length === 1 ? '/' + match[3] : match[3];
+  var match = protocolre.exec(address);
+  var protocol = match[1] ? match[1].toLowerCase() : '';
+  var rest = match[2] ? match[2] + match[3] : match[3];
+  var slashes = !!(match[2] && match[2].length >= 2);
+
+  if (protocol === 'file:') {
+    if (slashes) {
+      rest = rest.slice(2);
+    }
+  } else if (isSpecial(protocol)) {
+    rest = match[3];
+  } else if (protocol) {
+    if (rest.indexOf('//') === 0) {
+      rest = rest.slice(2);
+    }
+  } else if (slashes && location.hostname) {
+    rest = match[3];
+  }
 
   return {
     protocol: protocol,
@@ -214,7 +248,7 @@ function Url(address, location, parser) {
   //
   // Extract protocol information before running the instructions.
   //
-  extracted = extractProtocol(address || '');
+  extracted = extractProtocol(address || '', location);
   relative = !extracted.protocol && !extracted.slashes;
   url.slashes = extracted.slashes || relative && location.slashes;
   url.protocol = extracted.protocol || location.protocol || '';
@@ -224,7 +258,10 @@ function Url(address, location, parser) {
   // When the authority component is absent the URL starts with a path
   // component.
   //
-  if (!extracted.slashes || url.protocol === 'file:') {
+  if (
+    url.protocol === 'file:' ||
+    (!extracted.slashes && !isSpecial(extracted.protocol))
+  ) {
     instructions[3] = [/(.*)/, 'pathname'];
   }
 
",1.0,1.0,1.0,lime
CVE-2021-3664,CVE-2021-3664/94872e7ab9103ee69b958959baa14c9e682a7f10,https://github.com/unshiftio/url-parse/commit/94872e7ab9103ee69b958959baa14c9e682a7f10,<s>url-parse is vulnerable to URL Redirection to Untrusted Site</s>,"<s>[fix] Do not incorrectly set the `slashes` property to `true`
Set it to `true` only if the protocol is special or if it is actually
followed by two forward slashes.
</s>"," diff --git a/test/test.js b/test/test.js
index 9a84fba..71cc473 100644
--- a/test/test.js
+++ b/test/test.js
@@ -71,7 +71,8 @@ describe('url-parse', function () {
       assume(parse.extractProtocol('http://example.com')).eql({
         slashes: true,
         protocol: 'http:',
-        rest: 'example.com'
+        rest: 'example.com',
+        slashesCount: 2
       });
     });
 
@@ -79,7 +80,8 @@ describe('url-parse', function () {
       assume(parse.extractProtocol('')).eql({
         slashes: false,
         protocol: '',
-        rest: ''
+        rest: '',
+        slashesCount: 0
       });
     });
 
@@ -87,13 +89,15 @@ describe('url-parse', function () {
       assume(parse.extractProtocol('/foo')).eql({
         slashes: false,
         protocol: '',
-        rest: '/foo'
+        rest: '/foo',
+        slashesCount: 1
       });
 
       assume(parse.extractProtocol('//foo/bar')).eql({
         slashes: true,
         protocol: '',
-        rest: '//foo/bar'
+        rest: '//foo/bar',
+        slashesCount: 2
       });
     });
 
@@ -103,7 +107,8 @@ describe('url-parse', function () {
       assume(parse.extractProtocol(input)).eql({
         slashes: false,
         protocol: '',
-        rest: input
+        rest: input,
+        slashesCount: 0
       });
     });
 
@@ -111,7 +116,8 @@ describe('url-parse', function () {
       assume(parse.extractProtocol(' javascript://foo')).eql({
         slashes: true,
         protocol: 'javascript:',
-        rest: 'foo'
+        rest: 'foo',
+        slashesCount: 2
       });
     });
   });
@@ -281,6 +287,12 @@ describe('url-parse', function () {
 
     assume(parsed.host).equals('what-is-up.com');
     assume(parsed.href).equals('http://what-is-up.com/');
+
+    url = '\\\\\\\\what-is-up.com'
+    parsed = parse(url, parse('http://google.com'));
+
+    assume(parsed.host).equals('what-is-up.com');
+    assume(parsed.href).equals('http://what-is-up.com/');
   });
 
   it('ignores slashes after the protocol for special URLs', function () {
@@ -290,32 +302,44 @@ describe('url-parse', function () {
     assume(parsed.host).equals('github.com');
     assume(parsed.hostname).equals('github.com');
     assume(parsed.pathname).equals('/foo/bar');
+    assume(parsed.slashes).is.true();
+    assume(parsed.href).equals('https://github.com/foo/bar');
 
     url = 'https:/\\/\\/\\github.com/foo/bar';
     parsed = parse(url);
     assume(parsed.host).equals('github.com');
     assume(parsed.hostname).equals('github.com');
     assume(parsed.pathname).equals('/foo/bar');
+    assume(parsed.slashes).is.true();
+    assume(parsed.href).equals('https://github.com/foo/bar');
 
     url = 'https:/github.com/foo/bar';
     parsed = parse(url);
     assume(parsed.host).equals('github.com');
     assume(parsed.pathname).equals('/foo/bar');
+    assume(parsed.slashes).is.true();
+    assume(parsed.href).equals('https://github.com/foo/bar');
 
     url = 'https:\\github.com/foo/bar';
     parsed = parse(url);
     assume(parsed.host).equals('github.com');
     assume(parsed.pathname).equals('/foo/bar');
+    assume(parsed.slashes).is.true();
+    assume(parsed.href).equals('https://github.com/foo/bar');
 
     url = 'https:github.com/foo/bar';
     parsed = parse(url);
     assume(parsed.host).equals('github.com');
     assume(parsed.pathname).equals('/foo/bar');
+    assume(parsed.slashes).is.true();
+    assume(parsed.href).equals('https://github.com/foo/bar');
 
     url = 'https:github.com/foo/bar';
     parsed = parse(url);
     assume(parsed.host).equals('github.com');
     assume(parsed.pathname).equals('/foo/bar');
+    assume(parsed.slashes).is.true();
+    assume(parsed.href).equals('https://github.com/foo/bar');
   });
 
   it('handles slashes after the protocol for non special URLs', function () {
@@ -325,24 +349,28 @@ describe('url-parse', function () {
     assume(parsed.hostname).equals('');
     assume(parsed.pathname).equals('example.com');
     assume(parsed.href).equals('foo:example.com');
+    assume(parsed.slashes).is.false();
 
     url = 'foo:/example.com';
     parsed = parse(url);
     assume(parsed.hostname).equals('');
     assume(parsed.pathname).equals('/example.com');
     assume(parsed.href).equals('foo:/example.com');
+    assume(parsed.slashes).is.false();
 
     url = 'foo://example.com';
     parsed = parse(url);
     assume(parsed.hostname).equals('example.com');
     assume(parsed.pathname).equals('/');
     assume(parsed.href).equals('foo://example.com/');
+    assume(parsed.slashes).is.true();
 
     url = 'foo:///example.com';
     parsed = parse(url);
     assume(parsed.hostname).equals('');
     assume(parsed.pathname).equals('/example.com');
     assume(parsed.href).equals('foo:///example.com');
+    assume(parsed.slashes).is.true();
   })
 
   describe('origin', function () {
",0.0,1.0,0.0,lime
,,,,,,,,,
CVE-2016-9540,CVE-2016-9540/5ad9d8016fbb60109302d558f7edb2cb2a3bb8e3,https://github.com/vadz/libtiff/commit/5ad9d8016fbb60109302d558f7edb2cb2a3bb8e3,"<s>tools/tiffcp.c in libtiff 4.0.6 has an out-of-bounds write on tiled images with odd tile width versus image width. Reported as MSVR 35103, aka ""cpStripToTile heap-buffer-overflow.""</s>","<s>* tools/tiffcp.c: fix out-of-bounds write on tiled images with odd
tile width vs image width. Reported as MSVR 35103
by Axel Souchet and Vishal Chauhan from the MSRC Vulnerabilities &
Mitigations team.
</s>"," diff --git a/ChangeLog b/ChangeLog
index 8b57d1b1..d38f3a51 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,10 @@
+2016-10-08 Even Rouault <even.rouault at spatialys.com>
+
+	* tools/tiffcp.c: fix out-of-bounds write on tiled images with odd
+	tile width vs image width. Reported as MSVR 35103
+	by Axel Souchet and Vishal Chauhan from the MSRC Vulnerabilities &
+	Mitigations team.
+
 2016-10-08 Even Rouault <even.rouault at spatialys.com>
 
 	* tools/tiff2pdf.c: fix read -largely- outsize of buffer in
",0.0,3.0,1.0,tfidf
CVE-2016-9540,CVE-2016-9540/43c0b81a818640429317c80fea1e66771e85024b,https://github.com/vadz/libtiff/commit/43c0b81a818640429317c80fea1e66771e85024b,"<s>tools/tiffcp.c in libtiff 4.0.6 has an out-of-bounds write on tiled images with odd tile width versus image width. Reported as MSVR 35103, aka ""cpStripToTile heap-buffer-overflow.""</s>","<s>* tools/tiffcp.c: fix read of undefined variable in case of missing
required tags. Found on test case of MSVR 35100.
* tools/tiffcrop.c: fix read of undefined buffer in
readContigStripsIntoBuffer() due to uint16 overflow. Probably not a
security issue but I can be wrong. Reported as MSVR 35100 by Axel
Souchet from the MSRC Vulnerabilities & Mitigations team.
</s>"," diff --git a/tools/tiffcp.c b/tools/tiffcp.c
index ba2b715c..4ad74d39 100644
--- a/tools/tiffcp.c
+++ b/tools/tiffcp.c
@@ -592,8 +592,8 @@ static	copyFunc pickCopyFunc(TIFF*, TIFF*, uint16, uint16);
 static int
 tiffcp(TIFF* in, TIFF* out)
 {
-	uint16 bitspersample, samplesperpixel;
-	uint16 input_compression, input_photometric;
+	uint16 bitspersample, samplesperpixel = 1;
+	uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK;
 &	copyFunc cf;

	uint32 width, length;
ries	struct cpTag* p;
simple.dallas.tx.us>
 
 	* html: Change as many remotesensing.org broken links to a working
",1.0,3.0,0.0,tfidf
,,,,,,,,,
CVE-2019-12109,CVE-2019-12109/86030db849260dd8fb2ed975b9890aef1b62b692,https://github.com/miniupnp/miniupnp/commit/86030db849260dd8fb2ed975b9890aef1b62b692,<s>A Denial Of Service vulnerability in MiniUPnP MiniUPnPd through 2.1 exists due to a NULL pointer dereference in GetOutboundPinholeTimeout in upnpsoap.c for rem_port.</s>,"<s>fix error from commit 13585f15c7f7dc28bbbba1661efb280d530d114c
</s>"," diff --git a/miniupnpd/upnpsoap.c b/miniupnpd/upnpsoap.c
index 997b325..acd7fed 100644
--- a/miniupnpd/upnpsoap.c
+++ b/miniupnpd/upnpsoap.c
@@ -1850,7 +1850,7 @@ GetOutboundPinholeTimeout(struct upnphttp * h, const char * action, const char *
 	rem_port = GetValueFromNameValueList(&data, ""RemotePort"");
 	protocol = GetValueFromNameValueList(&data, ""Protocol"");
 
-	if (!int_port || !ext_port || !protocol)
+	if (!int_port || !rem_port || !protocol)
 	{
 		ClearNameValueList(&data);
 		SoapError(h, 402, ""Invalid Args"");
",0.0,1.0,1.0,tfidf
CVE-2019-12109,CVE-2019-12109/13585f15c7f7dc28bbbba1661efb280d530d114c,https://github.com/miniupnp/miniupnp/commit/13585f15c7f7dc28bbbba1661efb280d530d114c,<s>A Denial Of Service vulnerability in MiniUPnP MiniUPnPd through 2.1 exists due to a NULL pointer dereference in GetOutboundPinholeTimeout in upnpsoap.c for rem_port.</s>,"<s>GetOutboundPinholeTimeout: check args
</s>"," diff --git a/miniupnpd/upnpsoap.c b/miniupnpd/upnpsoap.c
index e7193c0..997b325 100644
--- a/miniupnpd/upnpsoap.c
+++ b/miniupnpd/upnpsoap.c
@@ -1850,6 +1850,13 @@ GetOutboundPinholeTimeout(struct upnphttp * h, const char * action, const char *
 	rem_port = GetValueFromNameValueList(&data, ""RemotePort"");
 	protocol = GetValueFromNameValueList(&data, ""Protocol"");
 
+	if (!int_port || !ext_port || !protocol)
+	{
+		ClearNameValueList(&data);
+		SoapError(h, 402, ""Invalid Args"");
+		return;
+	}
+
 	rport = (unsigned short)atoi(rem_port);
 	iport = (unsigned short)atoi(int_port);
 	/*proto = atoi(protocol);*/
",1.0,1.0,0.0,tfidf
,,,,,,,,,
CVE-2012-0047,CVE-2012-0047/2faab951738702b0251ed41e5b137bd5a9fc127d,https://github.com/apache/wicket/commit/2faab951738702b0251ed41e5b137bd5a9fc127d,<s>Cross-site scripting (XSS) vulnerability in Apache Wicket 1.4.x before 1.4.20 allows remote attackers to inject arbitrary web script or HTML via the wicket:pageMapName parameter.</s>,"<s>Escape pageMap's name from characters which may break the produced HTML.
</s>"," diff --git a/wicket/src/main/java/org/apache/wicket/Page.java b/wicket/src/main/java/org/apache/wicket/Page.java
index b7bcd6b0fe..c19871c6ae 100644
--- a/wicket/src/main/java/org/apache/wicket/Page.java
+++ b/wicket/src/main/java/org/apache/wicket/Page.java
@@ -44,6 +44,7 @@ import org.apache.wicket.settings.IDebugSettings;
 import org.apache.wicket.util.lang.Classes;
 import org.apache.wicket.util.lang.Objects;
 import org.apache.wicket.util.string.StringValue;
+import org.apache.wicket.util.string.Strings;
 import org.apache.wicket.version.IPageVersionManager;
 import org.apache.wicket.version.undo.Change;
 import org.slf4j.Logger;
@@ -1248,6 +1249,10 @@ public abstract class Page extends MarkupContainer implements IRedirectListener,
 		{
 			RequestParameters parameters = getRequest().getRequestParameters();
 			pageMapName = parameters.getPageMapName();
+			if (pageMapName != null)
+			{
+				pageMapName = Strings.escapeMarkup(pageMapName).toString();
+			}
 		}
 
 		final IPageMap pageMap = PageMap.forName(pageMapName);
",1.0,1.0,1.0,lime
CVE-2012-0047,CVE-2012-0047/df2784e1092d6456533b94334fed96faf64b0d6c,https://github.com/apache/wicket/commit/df2784e1092d6456533b94334fed96faf64b0d6c,<s>Cross-site scripting (XSS) vulnerability in Apache Wicket 1.4.x before 1.4.20 allows remote attackers to inject arbitrary web script or HTML via the wicket:pageMapName parameter.</s>,"<s>restoring the PopupSettings(IPageMap pageMapName, final int displayFlags) constructor as deprecated
Issue: WICKET-3109

git-svn-id: https://svn.apache.org/repos/asf/wicket/branches/wicket-1.4.x@1064282 13f79535-47bb-0310-9956-ffa450edef68
</s>"," diff --git a/wicket/src/main/java/org/apache/wicket/markup/html/link/PopupSettings.java b/wicket/src/main/java/org/apache/wicket/markup/html/link/PopupSettings.java
index d936241430..ed9ab25cb9 100644
--- a/wicket/src/main/java/org/apache/wicket/markup/html/link/PopupSettings.java
+++ b/wicket/src/main/java/org/apache/wicket/markup/html/link/PopupSettings.java
@@ -120,7 +120,7 @@ public class PopupSettings implements IClusterable
 	 */
 	public PopupSettings(final int displayFlags)
 	{
-		this(null, displayFlags);
+		this((String)null, displayFlags);
 	}
 
 	/**
@@ -154,6 +154,15 @@ public class PopupSettings implements IClusterable
 		this(pageMapName, 0);
 	}
 
+	/**
+	 * @deprecated Use the {@link PopupSettings#PopupSettings(String, int)}
+	 */
+	@Deprecated
+	public PopupSettings(IPageMap pageMapName, final int displayFlags)
+	{
+		this(pageMapName.getName(), displayFlags);
+	}
+
 	/**
 	 * Construct.
 	 * 
",0.0,1.0,0.0,lime
,,,,,,,,,
CVE-2022-25856,CVE-2022-25856/d0f66dbce78bc31923ca057b20fc722aa24ca961,https://github.com/argoproj/argo-events/commit/d0f66dbce78bc31923ca057b20fc722aa24ca961,<s>The package github.com/argoproj/argo-events/sensors/artifacts before 1.7.1 are vulnerable to Directory Traversal in the (g *GitArtifactReader).Read() API in git.go. This could allow arbitrary file reads if the GitArtifactReader is provided a pathname containing a symbolic link or an implicit directory name such as ...</s>,"<s>fix: git artifactory arbitrary file read issue (#1965)
Signed-off-by: Derek Wang <whynowy@gmail.com>
</s>"," diff --git a/sensors/artifacts/git.go b/sensors/artifacts/git.go
index 6e6d26ed..0965082a 100644
--- a/sensors/artifacts/git.go
+++ b/sensors/artifacts/git.go
@@ -20,6 +20,8 @@ import (
 	""fmt""
 	""io/ioutil""
 	""os""
+	""path""
+	""strings""
 
 	""github.com/go-git/go-git/v5""
 	""github.com/go-git/go-git/v5/config""
@@ -44,6 +46,8 @@ var (
 		""refs/*:refs/*"",
 		""HEAD:refs/heads/HEAD"",
 	}
+
+	notAllowedInPath = []string{"".."", ""~"", ""\\""}
 )
 
 type GitArtifactReader struct {
@@ -52,6 +56,15 @@ type GitArtifactReader struct {
 
 // NewGitReader returns a new git reader
 func NewGitReader(gitArtifact *v1alpha1.GitArtifact) (*GitArtifactReader, error) {
+	if gitArtifact == nil {
+		return nil, fmt.Errorf(""nil git artifact"")
+	}
+	for _, na := range notAllowedInPath {
+		if strings.Contains(gitArtifact.FilePath, na) {
+			return nil, fmt.Errorf(""%q is not allowed in the filepath"", na)
+		}
+	}
+
 	return &GitArtifactReader{
 		artifact: gitArtifact,
 	}, nil
@@ -176,8 +189,16 @@ func (g *GitArtifactReader) readFromRepository(r *git.Repository, dir string) ([
 			return nil, fmt.Errorf(""failed to pull latest updates. err: %+v"", err)
 		}
 	}
-
-	return ioutil.ReadFile(fmt.Sprintf(""%s/%s"", dir, g.artifact.FilePath))
+	filePath := fmt.Sprintf(""%s/%s"", dir, g.artifact.FilePath)
+	// symbol link is not allowed due to security concern
+	isSymbolLink, err := isSymbolLink(filePath)
+	if err != nil {
+		return nil, err
+	}
+	if isSymbolLink {
+		return nil, fmt.Errorf(""%q is a symbol link which is not allowed"", g.artifact.FilePath)
+	}
+	return ioutil.ReadFile(filePath)
 }
 
 func (g *GitArtifactReader) getBranchOrTag() *git.CheckoutOptions {
@@ -241,3 +262,14 @@ func (g *GitArtifactReader) Read() ([]byte, error) {
 	}
 	return g.readFromRepository(r, cloneDir)
 }
+
+func isSymbolLink(filepath string) (bool, error) {
+	fi, err := os.Lstat(path.Clean(filepath))
+	if err != nil {
+		return false, err
+	}
+	if fi.Mode()&os.ModeSymlink != 0 {
+		return true, nil
+	}
+	return false, nil
+}
",1.0,2.0,1.0,tfidf
CVE-2022-25856,CVE-2022-25856/abf5b8ef0ca87cbd5fd79adef22e1bcc029668bb,https://github.com/argoproj/argo-events/commit/abf5b8ef0ca87cbd5fd79adef22e1bcc029668bb,<s>The package github.com/argoproj/argo-events/sensors/artifacts before 1.7.1 are vulnerable to Directory Traversal in the (g *GitArtifactReader).Read() API in git.go. This could allow arbitrary file reads if the GitArtifactReader is provided a pathname containing a symbolic link or an implicit directory name such as ...</s>,"<s>chore: expose git artifactory InsecureIgnoreHostKey in user spec (#1982)
Signed-off-by: Derek Wang <whynowy@gmail.com>
</s>"," diff --git a/sensors/artifacts/git.go b/sensors/artifacts/git.go
index 406323ef..baa88b55 100644
--- a/sensors/artifacts/git.go
+++ b/sensors/artifacts/git.go
@@ -76,7 +76,7 @@ func (g *GitArtifactReader) getRemote() string {
 	return DefaultRemote
 }
 
-func getSSHKeyAuth(sshKeyFile string) (transport.AuthMethod, error) {
+func getSSHKeyAuth(sshKeyFile string, insecureIgnoreHostKey bool) (transport.AuthMethod, error) {
 	sshKey, err := os.ReadFile(sshKeyFile)
 	if err != nil {
 		return nil, fmt.Errorf(""failed to read ssh key file. err: %+v"", err)
@@ -86,7 +86,9 @@ func getSSHKeyAuth(sshKeyFile string) (transport.AuthMethod, error) {
 		return nil, fmt.Errorf(""failed to parse ssh key. err: %+v"", err)
 	}
 	auth := &go_git_ssh.PublicKeys{User: ""git"", Signer: signer}
-	auth.HostKeyCallback = ssh.InsecureIgnoreHostKey()
+	if insecureIgnoreHostKey {
+		auth.HostKeyCallback = ssh.InsecureIgnoreHostKey()
+	}
 	return auth, nil
 }
 
@@ -110,7 +112,7 @@ func (g *GitArtifactReader) getGitAuth() (transport.AuthMethod, error) {
 		if err != nil {
 			return nil, errors.Wrap(err, ""failed to get SSH key from mounted volume"")
 		}
-		return getSSHKeyAuth(sshKeyPath)
+		return getSSHKeyAuth(sshKeyPath, g.artifact.InsecureIgnoreHostKey)
 	}
 	return nil, nil
 }
",0.0,2.0,0.0,tfidf
,,,,,,,,,
CVE-2016-3995,CVE-2016-3995/9f335d719ebc27f58251559240de0077ec42c583,https://github.com/weidai11/cryptopp/commit/9f335d719ebc27f58251559240de0077ec42c583,"<s>The timing attack protection in Rijndael::Enc::ProcessAndXorBlock and Rijndael::Dec::ProcessAndXorBlock in Crypto++ (aka cryptopp) before 5.6.4 may be optimized out by the compiler, which allows attackers to conduct timing attacks.</s>","<s>Fix the Rijndael timing attack counter measure
</s>"," diff --git a/rijndael.cpp b/rijndael.cpp
index f394960d..92f9dea8 100644
--- a/rijndael.cpp
+++ b/rijndael.cpp
@@ -391,7 +391,7 @@ void Rijndael::Enc::ProcessAndXorBlock(const byte *inBlock, const byte *xorBlock
 	// timing attack countermeasure. see comments at top for more details
 	const int cacheLineSize = GetCacheLineSize();
 	unsigned int i;
-	word32 u = 0;
+	volatile word32 u = 0;
 #if defined(CRYPTOPP_ALLOW_UNALIGNED_DATA_ACCESS) || defined(CRYPTOPP_ALLOW_RIJNDAEL_UNALIGNED_DATA_ACCESS)
 	for (i=0; i<2048; i+=cacheLineSize)
 #else
@@ -467,7 +467,7 @@ void Rijndael::Dec::ProcessAndXorBlock(const byte *inBlock, const byte *xorBlock
 	// timing attack countermeasure. see comments at top for more details
 	const int cacheLineSize = GetCacheLineSize();
 	unsigned int i;
-	word32 u = 0;
+	volatile word32 u = 0;
 #if defined(CRYPTOPP_ALLOW_UNALIGNED_DATA_ACCESS) || defined(CRYPTOPP_ALLOW_RIJNDAEL_UNALIGNED_DATA_ACCESS)
 	for (i=0; i<2048; i+=cacheLineSize)
 #else
",1.0,3.0,0.0,lime
CVE-2016-3995,CVE-2016-3995/22f493dda9674df574abba300cf75d12ae62d510,https://github.com/weidai11/cryptopp/commit/22f493dda9674df574abba300cf75d12ae62d510,"<s>The timing attack protection in Rijndael::Enc::ProcessAndXorBlock and Rijndael::Dec::ProcessAndXorBlock in Crypto++ (aka cryptopp) before 5.6.4 may be optimized out by the compiler, which allows attackers to conduct timing attacks.</s>","<s>Fix the Rijndael timing attack counter measure (Issue 146)
</s>"," diff --git a/rijndael.cpp b/rijndael.cpp
index ab9f70a0..71fa1b85 100644
--- a/rijndael.cpp
+++ b/rijndael.cpp
@@ -511,7 +511,7 @@ void Rijndael::Dec::ProcessAndXorBlock(const byte *inBlock, const byte *xorBlock
 	// timing attack countermeasure. see comments at top for more details
 	// If CRYPTOPP_ALLOW_UNALIGNED_DATA_ACCESS is defined, 
 	// QUARTER_ROUND_LD will use Td, which is already preloaded.
-	u = 0;
+	u = _u;
 	for (i=0; i<256; i+=cacheLineSize)
 		u &= *(const word32 *)(const void *)(Sd+i);
 	u &= *(const word32 *)(const void *)(Sd+252);
",0.0,3.0,1.0,lime
,,,,,,,,,
CVE-2019-20372,CVE-2019-20372/c1be55f97211d38b69ac0c2027e6812ab8b1b94e,https://github.com/nginx/nginx/commit/c1be55f97211d38b69ac0c2027e6812ab8b1b94e,"<s>NGINX before 1.17.7, with certain error_page configurations, allows HTTP request smuggling, as demonstrated by the ability of an attacker to read unauthorized web pages in environments where NGINX is being fronted by a load balancer.</s>","<s>Discard request body when redirecting to a URL via error_page.
Reported by Bert JW Regeer and Francisco Oca Gonzalez.
</s>"," diff --git a/src/http/ngx_http_special_response.c b/src/http/ngx_http_special_response.c
index 4ffb2cc8a..76e670588 100644
--- a/src/http/ngx_http_special_response.c
+++ b/src/http/ngx_http_special_response.c
@@ -623,6 +623,12 @@ ngx_http_send_error_page(ngx_http_request_t *r, ngx_http_err_page_t *err_page)
         return ngx_http_named_location(r, &uri);
     }
 
+    r->expect_tested = 1;
+
+    if (ngx_http_discard_request_body(r) != NGX_OK) {
+        r->keepalive = 0;
+    }
+
     location = ngx_list_push(&r->headers_out.headers);
 
     if (location == NULL) {
",1.0,3.0,1.0,lime
CVE-2019-20372,CVE-2019-20372/be45a3aa590a5f7e64c6d55e8e0f78565adf4823,https://github.com/nginx/nginx/commit/be45a3aa590a5f7e64c6d55e8e0f78565adf4823,"<s>NGINX before 1.17.7, with certain error_page configurations, allows HTTP request smuggling, as demonstrated by the ability of an attacker to read unauthorized web pages in environments where NGINX is being fronted by a load balancer.</s>","<s>Saved some memory allocations.
In configurations when ""root"" has variables, some modules unnecessarily
allocated memory for the ""Location"" header value.
</s>"," diff --git a/src/http/modules/ngx_http_dav_module.c b/src/http/modules/ngx_http_dav_module.c
index 105a607ae..59ad2cedf 100644
--- a/src/http/modules/ngx_http_dav_module.c
+++ b/src/http/modules/ngx_http_dav_module.c
@@ -56,7 +56,7 @@ static ngx_int_t ngx_http_dav_copy_tree_file(ngx_tree_ctx_t *ctx,
 static ngx_int_t ngx_http_dav_depth(ngx_http_request_t *r, ngx_int_t dflt);
 static ngx_int_t ngx_http_dav_error(ngx_log_t *log, ngx_err_t err,
     ngx_int_t not_found, char *failed, u_char *path);
-static ngx_int_t ngx_http_dav_location(ngx_http_request_t *r, u_char *path);
+static ngx_int_t ngx_http_dav_location(ngx_http_request_t *r);
 static void *ngx_http_dav_create_loc_conf(ngx_conf_t *cf);
 static char *ngx_http_dav_merge_loc_conf(ngx_conf_t *cf,
     void *parent, void *child);
@@ -285,7 +285,7 @@ ngx_http_dav_put_handler(ngx_http_request_t *r)
     }
 
     if (status == NGX_HTTP_CREATED) {
-        if (ngx_http_dav_location(r, path.data) != NGX_OK) {
+        if (ngx_http_dav_location(r) != NGX_OK) {
             ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
             return;
         }
@@ -520,9 +520,7 @@ ngx_http_dav_mkcol_handler(ngx_http_request_t *r, ngx_http_dav_loc_conf_t *dlcf)
     if (ngx_create_dir(path.data, ngx_dir_access(dlcf->access))
         != NGX_FILE_ERROR)
     {
-        *(p - 1) = '/';
-
-        if (ngx_http_dav_location(r, path.data) != NGX_OK) {
+        if (ngx_http_dav_location(r) != NGX_OK) {
             return NGX_HTTP_INTERNAL_SERVER_ERROR;
         }
 
@@ -1070,35 +1068,16 @@ ngx_http_dav_error(ngx_log_t *log, ngx_err_t err, ngx_int_t not_found,
 
 
 static ngx_int_t
-ngx_http_dav_location(ngx_http_request_t *r, u_char *path)
+ngx_http_dav_location(ngx_http_request_t *r)
 {
-    u_char                    *location;
-    ngx_http_core_loc_conf_t  *clcf;
-
     r->headers_out.location = ngx_list_push(&r->headers_out.headers);
     if (r->headers_out.location == NULL) {
         return NGX_ERROR;
     }
 
-    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);
-
-    if (!clcf->alias && clcf->root_lengths == NULL) {
-        location = path + clcf->root.len;
-
-    } else {
-        location = ngx_pnalloc(r->pool, r->uri.len);
-        if (location == NULL) {
-            ngx_http_clear_location(r);
-            return NGX_ERROR;
-        }
-
-        ngx_memcpy(location, r->uri.data, r->uri.len);
-    }
-
     r->headers_out.location->hash = 1;
     ngx_str_set(&r->headers_out.location->key, ""Location"");
-    r->headers_out.location->value.len = r->uri.len;
-    r->headers_out.location->value.data = location;
+    r->headers_out.location->value = r->uri;
 
     return NGX_OK;
 }
",0.0,3.0,0.0,lime
,,,,,,,,,
CVE-2013-3081,CVE-2013-3081/972757c4500d94b4b1306bf092e678add3a987d8,https://github.com/JojoCMS/Jojo-CMS/commit/972757c4500d94b4b1306bf092e678add3a987d8,<s>SQL injection vulnerability in the checkEmailFormat function in plugins/jojo_core/classes/Jojo.php in Jojo before 1.2.2 allows remote attackers to execute arbitrary SQL commands via the X-Forwarded-For HTTP header to /articles/test/.</s>,"<s>Fix SQL injection issue CVE-2013-3081
</s>"," diff --git a/plugins/jojo_core/classes/Jojo.php b/plugins/jojo_core/classes/Jojo.php
index c61e1af..c47c5db 100755
--- a/plugins/jojo_core/classes/Jojo.php
+++ b/plugins/jojo_core/classes/Jojo.php
@@ -2461,14 +2461,18 @@ class Jojo {
     /* Gets the IP address of the visitor, bypassing proxies */
     static function getIp()
     {
+        $ip = false;
         if ( (getenv('HTTP_X_FORWARDED_FOR') != '') && (strtolower(getenv('HTTP_X_FORWARDED_FOR')) != 'unknown')) {
             $iparray = explode(',', getenv('HTTP_X_FORWARDED_FOR'));
-            return $iparray[0];
+            $ip = $iparray[0];
         } elseif (getenv('REMOTE_ADDR') != '') {
-            return getenv('REMOTE_ADDR');
-        } else {
-            return false;
+            $ip = getenv('REMOTE_ADDR');
         }
+        /* check IP is valid format */
+        if (preg_match('/\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b/', $ip)) {
+                return $ip;
+        }
+        return false;
     }
 
     /* reads the user agent string and gives the browser type - quick and simple detection */
",1.0,3.0,1.0,tfidf
CVE-2013-3081,CVE-2013-3081/58fde2271db266d02957f60f5f76a5f235cd9e5b,https://github.com/JojoCMS/Jojo-CMS/commit/58fde2271db266d02957f60f5f76a5f235cd9e5b,<s>SQL injection vulnerability in the checkEmailFormat function in plugins/jojo_core/classes/Jojo.php in Jojo before 1.2.2 allows remote attackers to execute arbitrary SQL commands via the X-Forwarded-For HTTP header to /articles/test/.</s>,"<s>Core - Editor: Add field label to inline editor
</s>"," diff --git a/plugins/jojo_core/external/normalize b/plugins/jojo_core/external/normalize
index 97e7867..0357529 160000
--- a/plugins/jojo_core/external/normalize
+++ b/plugins/jojo_core/external/normalize
@@ -1 +1 @@
-Subproject commit 97e78671617343e9ef8d8fc221200ecf1c18f260
+Subproject commit 03575299fc8cba752a51fece7c35343085d6ed09
",0.0,3.0,0.0,tfidf
,,,,,,,,,
CVE-2016-2512,CVE-2016-2512/f4e6e02f7713a6924d16540be279909ff4091eb6,https://github.com/django/django/commit/f4e6e02f7713a6924d16540be279909ff4091eb6,"<s>The utils.http.is_safe_url function in Django before 1.8.10 and 1.9.x before 1.9.3 allows remote attackers to redirect users to arbitrary web sites and conduct phishing attacks or possibly conduct cross-site scripting (XSS) attacks via a URL containing basic authentication, as demonstrated by http://mysite.example.com\@attacker.com.</s>","<s>[1.8.x] Fixed CVE-2016-2513 -- Fixed user enumeration timing attack during login.
This is a security fix.
</s>"," diff --git a/docs/releases/1.8.10.txt b/docs/releases/1.8.10.txt
index 73c7cc04a4..d57afc470d 100644
--- a/docs/releases/1.8.10.txt
+++ b/docs/releases/1.8.10.txt
@@ -22,6 +22,39 @@ redirecting to this URL sends the user to ``attacker.com``.
 Also, if a developer relies on ``is_safe_url()`` to provide safe redirect
 targets and puts such a URL into a link, they could suffer from an XSS attack.
 
+CVE-2016-2513: User enumeration through timing difference on password hasher work factor upgrade
+================================================================================================
+
+In each major version of Django since 1.6, the default number of iterations for
+the ``PBKDF2PasswordHasher`` and its subclasses has increased. This improves
+the security of the password as the speed of hardware increases, however, it
+also creates a timing difference between a login request for a user with a
+password encoded in an older number of iterations and login request for a
+nonexistent user (which runs the default hasher's default number of iterations
+since Django 1.6).
+
+This only affects users who haven't logged in since the iterations were
+increased. The first time a user logs in after an iterations increase, their
+password is updated with the new iterations and there is no longer a timing
+difference.
+
+The new ``BasePasswordHasher.harden_runtime()`` method allows hashers to bridge
+the runtime gap between the work factor (e.g. iterations) supplied in existing
+encoded passwords and the default work factor of the hasher. This method
+is implemented for ``PBKDF2PasswordHasher``  and ``BCryptPasswordHasher``.
+The number of rounds for the latter hasher hasn't changed since Django 1.4, but
+some projects may subclass it and increase the work factor as needed.
+
+A warning will be emitted for any :ref:`third-party password hashers that don't
+implement <write-your-own-password-hasher>` a ``harden_runtime()`` method.
+
+If you have different password hashes in your database (such as SHA1 hashes
+from users who haven't logged in since the default hasher switched to PBKDF2
+in Django 1.4), the timing difference on a login request for these users may be
+even greater and this fix doesn't remedy that difference (or any difference
+when changing hashers). You may be able to :ref:`upgrade those hashes
+<wrapping-password-hashers>` to prevent a timing attack for that case.
+
 Bugfixes
 ========
 
",0.0,3.0,0.0,tfidf
CVE-2016-2512,CVE-2016-2512/382ab137312961ad62feb8109d70a5a581fe8350,https://github.com/django/django/commit/382ab137312961ad62feb8109d70a5a581fe8350,"<s>The utils.http.is_safe_url function in Django before 1.8.10 and 1.9.x before 1.9.3 allows remote attackers to redirect users to arbitrary web sites and conduct phishing attacks or possibly conduct cross-site scripting (XSS) attacks via a URL containing basic authentication, as demonstrated by http://mysite.example.com\@attacker.com.</s>","<s>[1.8.x] Fixed CVE-2016-2512 -- Prevented spoofing is_safe_url() with basic auth.
This is a security fix.
</s>"," diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py
index 5679a576bd..e04a3abaf9 100644
--- a/tests/utils_tests/test_http.py
+++ b/tests/utils_tests/test_http.py
@@ -117,6 +117,11 @@ class TestUtilsHttp(unittest.TestCase):
                         'javascript:alert(""XSS"")',
                         '\njavascript:alert(x)',
                         '\x08//example.com',
+                        r'http://otherserver\@example.com',
+                        r'http:\\testserver\@example.com',
+                        r'http://testserver\me:pass@example.com',
+                        r'http://testserver\@example.com',
+                        r'http:\\testserver\confirm\me@example.com',
                         '\n'):
             self.assertFalse(http.is_safe_url(bad_url, host='testserver'), ""%s should be blocked"" % bad_url)
         for good_url in ('/view/?param=http://example.com',
@@ -126,8 +131,15 @@ class TestUtilsHttp(unittest.TestCase):
                      'https://testserver/',
                      'HTTPS://testserver/',
                      '//testserver/',
+                     'http://testserver/confirm?email=me@example.com',
                      '/url%20with%20spaces/'):
             self.assertTrue(http.is_safe_url(good_url, host='testserver'), ""%s should be allowed"" % good_url)
+        # Valid basic auth credentials are allowed.
+        self.assertTrue(http.is_safe_url(r'http://user:pass@testserver/', host='user:pass@testserver'))
+        # A path without host is allowed.
+        self.assertTrue(http.is_safe_url('/confirm/me@example.com'))
+        # Basic auth without host is not allowed.
+        self.assertFalse(http.is_safe_url(r'http://testserver\@example.com'))
 
     def test_urlsafe_base64_roundtrip(self):
         bytestring = b'foo'
",1.0,3.0,1.0,tfidf
,,,,,,,,,
CVE-2021-21401,CVE-2021-21401/e2f0ccf939d9f82931d085acb6df8e9a182a4261,https://github.com/nanopb/nanopb/commit/e2f0ccf939d9f82931d085acb6df8e9a182a4261,"<s>Nanopb is a small code-size Protocol Buffers implementation in ansi C. In Nanopb before versions 0.3.9.8 and 0.4.5, decoding a specifically formed message can cause invalid `free()` or `realloc()` calls if the message type contains an `oneof` field, and the `oneof` directly contains both a pointer field and a non-pointer field. If the message data first contains the non-pointer field and then the pointer field, the data of the non-pointer field is incorrectly treated as if it was a pointer value. Such message data rarely occurs in normal messages, but it is a concern when untrusted data is parsed. This has been fixed in versions 0.3.9.8 and 0.4.5. See referenced GitHub Security Advisory for more information including workarounds.</s>","<s>Fix invalid free() with oneof (#647)
Nanopb would call free() or realloc() on an invalid
(attacker controlled) pointer value when all the following
conditions are true:
- PB_ENABLE_MALLOC is defined at the compile time
- Message definition contains an oneof field, and the oneof
  contains at least one pointer type field and at least one
  non-pointer type field.
- Data being decoded first contains a non-pointer value for
  the oneof field, and later contains an overwriting pointer
  value.
Depending on message layout, the bug may not be exploitable in all
cases, but it is known to be exploitable at least with string and
bytes fields. Actual security impact will also depend on the heap
implementation used.
</s>"," diff --git a/pb_decode.c b/pb_decode.c
index 5f3b51e..b194825 100644
--- a/pb_decode.c
+++ b/pb_decode.c
@@ -1203,6 +1203,14 @@ static bool pb_release_union_field(pb_istream_t *stream, pb_field_iter_t *field)
 
     pb_release_single_field(&old_field);
 
+    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
+    {
+        /* Initialize the pointer to NULL to make sure it is valid
+         * even in case of error return. */
+        *(void**)field->pField = NULL;
+        field->pData = NULL;
+    }
+
     return true;
 }
 
",1.0,3.0,1.0,tfidf
CVE-2021-21401,CVE-2021-21401/9cbe4ae6b03ae4ac2a678861101a9d771a6522ce,https://github.com/nanopb/nanopb/commit/9cbe4ae6b03ae4ac2a678861101a9d771a6522ce,"<s>Nanopb is a small code-size Protocol Buffers implementation in ansi C. In Nanopb before versions 0.3.9.8 and 0.4.5, decoding a specifically formed message can cause invalid `free()` or `realloc()` calls if the message type contains an `oneof` field, and the `oneof` directly contains both a pointer field and a non-pointer field. If the message data first contains the non-pointer field and then the pointer field, the data of the non-pointer field is incorrectly treated as if it was a pointer value. Such message data rarely occurs in normal messages, but it is a concern when untrusted data is parsed. This has been fixed in versions 0.3.9.8 and 0.4.5. See referenced GitHub Security Advisory for more information including workarounds.</s>","<s>Add testcase for #647: invalid free with oneof
</s>"," diff --git a/tests/regression/issue_647/SConscript b/tests/regression/issue_647/SConscript
new file mode 100644
index 0000000..70eedf8
--- /dev/null
+++ b/tests/regression/issue_647/SConscript
@@ -0,0 +1,12 @@
+# Regression test for #647:
+# Ill-formed oneof message leads to calling free on an arbitrary pointer
+
+Import(""env"")
+
+env.NanopbProto(""repro.proto"")
+
+test = env.Program([""repro.c"", ""repro.pb.c"",
+                    ""$COMMON/pb_decode_with_malloc.o"",
+                    ""$COMMON/pb_common_with_malloc.o"",
+                    ""$COMMON/malloc_wrappers.o""])
+env.RunTest(test)
",0.0,3.0,0.0,tfidf
,,,,,,,,,
CVE-2017-7490,CVE-2017-7490/61f2bbbf363e9ff7e577bf3382a48e74a23b1581,https://github.com/moodle/moodle/commit/61f2bbbf363e9ff7e577bf3382a48e74a23b1581,"<s>In Moodle 2.x and 3.x, searching of arbitrary blogs is possible because a capability check is missing.</s>","<s>MDL-58670 blog: respect capability to search entries
</s>"," diff --git a/blog/lib.php b/blog/lib.php
index 06b4af808ae..2e53d979284 100644
--- a/blog/lib.php
+++ b/blog/lib.php
@@ -872,7 +872,7 @@ function blog_get_headers($courseid=null, $groupid=null, $userid=null, $tagid=nu
         }
 
         // Append Search info.
-        if (!empty($search)) {
+        if (!empty($search) && has_capability('moodle/blog:search', $sitecontext)) {
             $headers['filters']['search'] = $search;
             $blogurl->param('search', $search);
             $PAGE->navbar->add(get_string('searchterm', 'blog', $search), $blogurl->out());
",1.0,3.0,1.0,lime
CVE-2017-7490,CVE-2017-7490/e5bec10f56ab5dafee1605d353474a6c46127a53,https://github.com/moodle/moodle/commit/e5bec10f56ab5dafee1605d353474a6c46127a53,"<s>In Moodle 2.x and 3.x, searching of arbitrary blogs is possible because a capability check is missing.</s>","<s>MDL-58635 blogs: check edited blog belongs to current user
</s>"," diff --git a/blog/external_blog_edit.php b/blog/external_blog_edit.php
index 3f615bdd1b0..edb0927dd66 100644
--- a/blog/external_blog_edit.php
+++ b/blog/external_blog_edit.php
@@ -52,11 +52,11 @@ $action = (empty($id)) ? 'add' : 'edit';
 
 $external = new stdClass();
 
-// Check that this id exists.
-if (!empty($id) && !$DB->record_exists('blog_external', array('id' => $id))) {
-    print_error('wrongexternalid', 'blog');
-} else if (!empty($id)) {
-    $external = $DB->get_record('blog_external', array('id' => $id));
+// Retrieve the external blog record.
+if (!empty($id)) {
+    if (!$external = $DB->get_record('blog_external', array('id' => $id, 'userid' => $USER->id))) {
+        print_error('wrongexternalid', 'blog');
+    }
     $external->autotags = core_tag_tag::get_item_tags_array('core', 'blog_external', $id);
 }
 
",0.0,3.0,0.0,lime
,,,,,,,,,
CVE-2017-5206,CVE-2017-5206/6b8dba29d73257311564ee7f27b9b14758cc693e,https://github.com/netblue30/firejail/commit/6b8dba29d73257311564ee7f27b9b14758cc693e,"<s>Firejail before 0.9.44.4, when running on a Linux kernel before 4.8, allows context-dependent attackers to bypass a seccomp-based sandbox protection mechanism via the --allow-debuggers argument.</s>","<s>security fix
</s>"," diff --git a/RELNOTES b/RELNOTES
index 6aaebefc3..36da0100f 100644
--- a/RELNOTES
+++ b/RELNOTES
@@ -1,5 +1,8 @@
 firejail (0.9.44.3) baseline; urgency=low
   * development version
+  * security: disabled --allow-debuggers when running on kernel
+    versions prior to 4.8; a kernel bug in ptrace system call
+    allows a full bypass of seccomp filter; problem reported by Lizzie Dixon
   * security: root exploit found by Sebastian Krahmer
  -- netblue30 <netblue30@yahoo.com>  Wed, 4 Jan 2017 11:00:00 -0500
 
",0.0,3.0,1.0,lime
CVE-2017-5206,CVE-2017-5206/8b1b3cb8c1f696d0f765513c11e4f87c48c96a05,https://github.com/netblue30/firejail/commit/8b1b3cb8c1f696d0f765513c11e4f87c48c96a05,"<s>Firejail before 0.9.44.4, when running on a Linux kernel before 4.8, allows context-dependent attackers to bypass a seccomp-based sandbox protection mechanism via the --allow-debuggers argument.</s>","<s>0.9.44.4 testing - disabled --allow-debuggers test
</s>"," diff --git a/test/environment/environment.sh b/test/environment/environment.sh
index 04a1daaf6..93af87cea 100755
--- a/test/environment/environment.sh
+++ b/test/environment/environment.sh
@@ -82,12 +82,12 @@ echo ""TESTING: nice (test/environment/nice.exp)""
 echo ""TESTING: quiet (test/environment/quiet.exp)""
 ./quiet.exp
 
-which strace
-if [ ""$?"" -eq 0 ];
-then
-        echo ""TESTING: --allow-debuggers (test/environment/allow-debuggers.exp)""
-        ./allow-debuggers.exp
-else
-        echo ""TESTING SKIP: strace not found""
-fi
+#which strace
+#if [ ""$?"" -eq 0 ];
+#then
+#        echo ""TESTING: --allow-debuggers (test/environment/allow-debuggers.exp)""
+#        ./allow-debuggers.exp
+#else
+#        echo ""TESTING SKIP: strace not found""
+#fi
 
",1.0,3.0,0.0,lime
,,,,,,,,,
CVE-2022-29533,CVE-2022-29533/ce6bc88e330f5ef50666b149d86c0d94f545f24e,https://github.com/MISP/MISP/commit/ce6bc88e330f5ef50666b149d86c0d94f545f24e,"<s>An issue was discovered in MISP before 2.4.158. There is XSS in app/Controller/OrganisationsController.php in a situation with a ""weird single checkbox page.""</s>","<s>fix: [security] low probability reflected XSS fixed
- User would need to navigate to a url that contains the payload
- user needs to click on a checkbox in a weird single checkbox page to trigger the exploit
- as reported by Dawid Czarnecki of Zigrin Security on behalf of the Luxembourg Army
</s>"," diff --git a/app/Controller/OrganisationsController.php b/app/Controller/OrganisationsController.php
index 7d9f6345d..06c9350e4 100644
--- a/app/Controller/OrganisationsController.php
+++ b/app/Controller/OrganisationsController.php
@@ -392,7 +392,7 @@ class OrganisationsController extends AppController
     {
         $this->layout = false;
         $this->autoRender = false;
-        $this->set('id', $id);
+        $this->set('id', (int)$id);
         $this->set('removable', $removable);
         $this->set('extend', $extend);
         $this->render('ajax/sg_org_row_empty');
",1.0,3.0,1.0,lime
CVE-2022-29533,CVE-2022-29533/c8ed71bf400ccd63c5c87d931721cc142aa62781,https://github.com/MISP/MISP/commit/c8ed71bf400ccd63c5c87d931721cc142aa62781,"<s>An issue was discovered in MISP before 2.4.158. There is XSS in app/Controller/OrganisationsController.php in a situation with a ""weird single checkbox page.""</s>","<s>fix: [UI] Mark checkbox as disabled when user has no permission
</s>"," diff --git a/app/View/Elements/genericElements/IndexTable/Fields/toggle.ctp b/app/View/Elements/genericElements/IndexTable/Fields/toggle.ctp
index c91ab318d..30a140970 100644
--- a/app/View/Elements/genericElements/IndexTable/Fields/toggle.ctp
+++ b/app/View/Elements/genericElements/IndexTable/Fields/toggle.ctp
@@ -6,18 +6,30 @@
  *  to fetch it.
  *
  */
-    $data = Hash::extract($row, $field['data_path']);
-    $seed = mt_rand();
-    $checkboxId = 'GenericToggle-' . $seed;
-    $checkboxClass = empty($field['checkbox_class']) ? 'genericCheckbox' : h($field['checkbox_class']);
-    $tempboxId = 'TempBox-' . $seed;
-    echo sprintf(
-        '<input type=""checkbox"" id=""%s"" class=""%s"" %s><span id=""%s"" class=""hidden"">',
-        $checkboxId,
-        $checkboxClass,
-        empty($data[0]) ? '' : 'checked',
-        $tempboxId
-    );
+$data = Hash::extract($row, $field['data_path']);
+$seed = mt_rand();
+$checkboxId = 'GenericToggle-' . $seed;
+$checkboxClass = empty($field['checkbox_class']) ? 'genericCheckbox' : h($field['checkbox_class']);
+$tempboxId = 'TempBox-' . $seed;
+
+$params = [];
+if (!empty($data[0])) {
+    $params[] = 'checked';
+}
+if (!empty($field['disabled'])) {
+    $params[] = 'disabled';
+}
+$params = empty($params) ? '' : ' ' . implode(' ', $params);
+
+echo sprintf(
+    '<input type=""checkbox"" id=""%s"" class=""%s""%s><span id=""%s"" class=""hidden""></span>',
+    $checkboxId,
+    $checkboxClass,
+    $params,
+    $tempboxId
+);
+
+if (empty($field['disabled'])):
 ?>
 <script type=""text/javascript"">
 $(function() {
@@ -71,3 +83,4 @@ $(function() {
     });
 });
 </script>
+<?php endif; ?>
",0.0,3.0,0.0,lime
,,,,,,,,,
CVE-2016-10197,CVE-2016-10197/8cbe65d5f44246ad3f7ab408d22e797e5b9e5b81,https://github.com/libevent/libevent/commit/8cbe65d5f44246ad3f7ab408d22e797e5b9e5b81,<s>The search_make_new function in evdns.c in libevent before 2.1.6-beta allows attackers to cause a denial of service (out-of-bounds read) via an empty hostname.</s>,"<s>evdns: export cancel via callbacks in util (like async lib core/extra issues)
</s>"," diff --git a/evdns.c b/evdns.c
index c4112330..152ba766 100644
--- a/evdns.c
+++ b/evdns.c
@@ -3908,6 +3908,7 @@ evdns_base_new(struct event_base *event_base, int flags)
 	 * functionality.  We can't just call evdns_getaddrinfo directly or
 	 * else libevent-core will depend on libevent-extras. */
 	evutil_set_evdns_getaddrinfo_fn_(evdns_getaddrinfo);
+	evutil_set_evdns_getaddrinfo_cancel_fn_(evdns_getaddrinfo_cancel);
 
 	base = mm_malloc(sizeof(struct evdns_base));
 	if (base == NULL)
",0.0,3.0,0.0,lime
CVE-2016-10197,CVE-2016-10197/ec65c42052d95d2c23d1d837136d1cf1d9ecef9e,https://github.com/libevent/libevent/commit/ec65c42052d95d2c23d1d837136d1cf1d9ecef9e,<s>The search_make_new function in evdns.c in libevent before 2.1.6-beta allows attackers to cause a denial of service (out-of-bounds read) via an empty hostname.</s>,"<s>evdns: fix searching empty hostnames
From #332:
  Here follows a bug report by **Guido Vranken** via the _Tor bug bounty program_. Please credit Guido accordingly.
  ## Bug report
  The DNS code of Libevent contains this rather obvious OOB read:
  ```c
  static char *
  search_make_new(const struct search_state *const state, int n, const char *const base_name) {
      const size_t base_len = strlen(base_name);
      const char need_to_append_dot = base_name[base_len - 1] == '.' ? 0 : 1;
  ```
  If the length of ```base_name``` is 0, then line 3125 reads 1 byte before the buffer. This will trigger a crash on ASAN-protected builds.
  To reproduce:
  Build libevent with ASAN:
  ```
  $ CFLAGS='-fomit-frame-pointer -fsanitize=address' ./configure && make -j4
  ```
  Put the attached ```resolv.conf``` and ```poc.c``` in the source directory and then do:
  ```
  $ gcc -fsanitize=address -fomit-frame-pointer poc.c .libs/libevent.a
  $ ./a.out
  =================================================================
  ==22201== ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60060000efdf at pc 0x4429da bp 0x7ffe1ed47300 sp 0x7ffe1ed472f8
  READ of size 1 at 0x60060000efdf thread T0
  ```
P.S. we can add a check earlier, but since this is very uncommon, I didn't add it.
Fixes: #332
</s>"," diff --git a/evdns.c b/evdns.c
index 905ff6b5..e9dbc35c 100644
--- a/evdns.c
+++ b/evdns.c
@@ -3175,9 +3175,12 @@ search_set_from_hostname(struct evdns_base *base) {
 static char *
 search_make_new(const struct search_state *const state, int n, const char *const base_name) {
 	const size_t base_len = strlen(base_name);
-	const char need_to_append_dot = base_name[base_len - 1] == '.' ? 0 : 1;
+	char need_to_append_dot;
 	struct search_domain *dom;
 
+	if (!base_len) return NULL;
+	need_to_append_dot = base_name[base_len - 1] == '.' ? 0 : 1;
+
 	for (dom = state->head; dom; dom = dom->next) {
 		if (!n--) {
 			/* this is the postfix we want */
",1.0,3.0,1.0,lime
,,,,,,,,,
CVE-2021-43786,CVE-2021-43786/04dab1d550cdebf4c1567bca9a51f8b9ca48a500,https://github.com/NodeBB/NodeBB/commit/04dab1d550cdebf4c1567bca9a51f8b9ca48a500,<s>Nodebb is an open source Node.js based forum software. In affected versions incorrect logic present in the token verification step unintentionally allowed master token access to the API. The vulnerability has been patch as of v1.18.5. Users are advised to upgrade as soon as possible.</s>,"<s>fix: token verify
</s>"," diff --git a/src/routes/authentication.js b/src/routes/authentication.js
index d6b98aa057..6d7a36e037 100644
--- a/src/routes/authentication.js
+++ b/src/routes/authentication.js
@@ -44,13 +44,9 @@ Auth.getLoginStrategies = function () {
 };
 
 Auth.verifyToken = async function (token, done) {
-	let { tokens = [] } = await meta.settings.get('core.api');
-	tokens = tokens.reduce((memo, cur) => {
-		memo[cur.token] = cur.uid;
-		return memo;
-	}, {});
-
-	const uid = tokens[token];
+	const { tokens = [] } = await meta.settings.get('core.api');
+	const tokenObj = tokens.find(t => t.token === token);
+	const uid = tokenObj ? tokenObj.uid : undefined;
 
 	if (uid !== undefined) {
 		if (parseInt(uid, 10) > 0) {
",1.0,2.0,1.0,lime
CVE-2021-43786,CVE-2021-43786/63109c070527946db0c5c06b67fddee21101abc7,https://github.com/NodeBB/NodeBB/commit/63109c070527946db0c5c06b67fddee21101abc7,<s>Nodebb is an open source Node.js based forum software. In affected versions incorrect logic present in the token verification step unintentionally allowed master token access to the API. The vulnerability has been patch as of v1.18.5. Users are advised to upgrade as soon as possible.</s>,"<s>test: possible fix to timeout
</s>"," diff --git a/test/controllers-admin.js b/test/controllers-admin.js
index d91d75822c..467652d88a 100644
--- a/test/controllers-admin.js
+++ b/test/controllers-admin.js
@@ -736,7 +736,7 @@ describe('Admin Controllers', () => {
 			});
 		});
 
-		it('should allow normal user access to admin pages', async () => {
+		it('should allow normal user access to admin pages', async function () {
 			this.timeout(50000);
 			function makeRequest(url) {
 				return new Promise((resolve, reject) => {
",0.0,2.0,0.0,lime
,,,,,,,,,
CVE-2021-41824,CVE-2021-41824/c9cb2225f1b908fb1e8401d401219228634b26b2,https://github.com/craftcms/cms/commit/c9cb2225f1b908fb1e8401d401219228634b26b2,<s>Craft CMS before 3.7.14 allows CSV injection.</s>,"<s>Fixed a potential CSV injection vulnerability.
</s>"," diff --git a/CHANGELOG.md b/CHANGELOG.md
index 5fe1eed167..2e2387ec54 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -28,6 +28,9 @@
 - Fixed a bug where duplicated entries that were created via an Applying new propagation method job werent getting positioned correctly based on the original entries structure. ([#9782](https://github.com/craftcms/cms/issues/9782))
 - Fixed a bug where unpublished drafts could disappear after clicking Create entry if the URI could not be made unique. ([#9873](https://github.com/craftcms/cms/issues/9873))
 
+### Security
+- Fixed a potential CSV injection vulnerability.
+
 ## 3.7.13 - 2021-09-14
 
 ### Added
",0.0,1.0,1.0,tfidf
CVE-2021-41824,CVE-2021-41824/ecae37cf712c6a5514f2a92ce5cf0315109e0d5a,https://github.com/craftcms/cms/commit/ecae37cf712c6a5514f2a92ce5cf0315109e0d5a,<s>Craft CMS before 3.7.14 allows CSV injection.</s>,"<s>Fixed #9891
</s>"," diff --git a/src/web/View.php b/src/web/View.php
index 5328271b8e..f91dd0e292 100644
--- a/src/web/View.php
+++ b/src/web/View.php
@@ -607,7 +607,7 @@ class View extends \yii\web\View
 Applying new propagation method job werent getting positioned correctly based on the if (is_int($field)) {
](https://github.com/craftcms/cms/issues/9782))
 - Fixed a bug where unpublished $field = $definition;
Create entry if the URI could not be made unique. ([#9873](https:// }
-/craftcms/cms/issues/9873))
 - Fixed an error that could occur if (strpos($template, $field) !== false) {
+ Fixed an error that could occur when an entrys Title Format referenced a custom field with if (preg_match('/\b' . preg_quote($field, '/') . '\b/', $template)) {
 Security
 - Fixed a potential CSV injection vulnerability.
              $extra[] = $field;
                     }
                 }
",1.0,1.0,0.0,tfidf
,,,,,,,,,
CVE-2017-4952,CVE-2017-4952/ec30db9afada9cb52852082ce4d7d0095524f3b3,https://github.com/vmware-archive/xenon/commit/ec30db9afada9cb52852082ce4d7d0095524f3b3,"<s>VMware Xenon 1.x, prior to 1.5.4-CR7_1, 1.5.7_7, 1.5.4-CR6_2, 1.3.7-CR1_2, 1.1.0-CR0-3, 1.1.0-CR3_1,1.4.2-CR4_1, and 1.5.4_8, contains an authentication bypass vulnerability due to insufficient access controls for utility endpoints. Successful exploitation of this issue may result in information disclosure.</s>","<s>Add auth to UtilityService
Extend auth check to UtiliyService endpoints: stats, config, subscription
Issue: VRXEN-5
Change-Id: I52a4b4a42731c244a97f97610dcaddb6837e67fb
</s>"," diff --git a/xenon-common/src/main/java/com/vmware/xenon/common/UtilityService.java b/xenon-common/src/main/java/com/vmware/xenon/common/UtilityService.java
index 23c9f05e..39378486 100644
--- a/xenon-common/src/main/java/com/vmware/xenon/common/UtilityService.java
+++ b/xenon-common/src/main/java/com/vmware/xenon/common/UtilityService.java
@@ -144,7 +144,29 @@ public class UtilityService implements Service {
 
     @Override
     public void authorizeRequest(Operation op) {
-        op.complete();
+
+        String suffix = UriUtils.buildUriPath(UriUtils.URI_PATH_CHAR, UriUtils.getLastPathSegment(op.getUri()));
+
+        // allow access to ui endpoint
+        if (ServiceHost.SERVICE_URI_SUFFIX_UI.equals(suffix)) {
+            op.complete();
+            return;
+        }
+
+        ServiceDocument doc = new ServiceDocument();
+        if (this.parent.getOptions().contains(ServiceOption.FACTORY_ITEM)) {
+            doc.documentSelfLink = UriUtils.buildUriPath(UriUtils.getParentPath(this.parent.getSelfLink()), suffix);
+        } else {
+            doc.documentSelfLink = UriUtils.buildUriPath(this.parent.getSelfLink(), suffix);
+        }
+
+        doc.documentKind = Utils.buildKind(this.parent.getStateType());
+        if (getHost().isAuthorized(this.parent, doc, op)) {
+            op.complete();
+            return;
+        }
+
+        op.fail(Operation.STATUS_CODE_FORBIDDEN);
     }
 
     @Override
",1.0,3.0,1.0,tfidf
CVE-2017-4952,CVE-2017-4952/0cd4afa1415f6dfcf274da8757df912eb66cc001,https://github.com/vmware-archive/xenon/commit/0cd4afa1415f6dfcf274da8757df912eb66cc001,"<s>VMware Xenon 1.x, prior to 1.5.4-CR7_1, 1.5.7_7, 1.5.4-CR6_2, 1.3.7-CR1_2, 1.1.0-CR0-3, 1.1.0-CR3_1,1.4.2-CR4_1, and 1.5.4_8, contains an authentication bypass vulnerability due to insufficient access controls for utility endpoints. Successful exploitation of this issue may result in information disclosure.</s>","<s>Call StatefulService#authorizeRequest()
For owner-selected stateful service(and its utility service), make sure to
call ""authorizeRequest()"".  For persisted service, auth check is performed
at loading time via query filter.  However, it was not calling
""authorizeRequest()"" method.
Change-Id: Ieb65bd88935a534a32a6f2b0dbcf389f9f02d1f8
</s>"," diff --git a/xenon-common/src/test/java/com/vmware/xenon/common/TestServiceHost.java b/xenon-common/src/test/java/com/vmware/xenon/common/TestServiceHost.java
index 1ffbf5b4..ca1ad1a8 100644
--- a/xenon-common/src/test/java/com/vmware/xenon/common/TestServiceHost.java
+++ b/xenon-common/src/test/java/com/vmware/xenon/common/TestServiceHost.java
@@ -67,6 +67,7 @@ import com.vmware.xenon.common.ServiceStats.TimeSeriesStats.AggregationType;
 import com.vmware.xenon.common.jwt.Rfc7519Claims;
 import com.vmware.xenon.common.jwt.Signer;
 import com.vmware.xenon.common.jwt.Verifier;
+import com.vmware.xenon.common.test.AuthTestUtils;
 import com.vmware.xenon.common.test.MinimalTestServiceState;
 import com.vmware.xenon.common.test.TestContext;
 import com.vmware.xenon.common.test.TestProperty;
@@ -94,6 +95,29 @@ import com.vmware.xenon.services.common.UserService;
 
 public class TestServiceHost {
 
+    public static class AuthCheckService extends ExampleService {
+        public static final String FACTORY_LINK = ServiceUriPaths.CORE + ""/auth-check-services"";
+
+        static final String IS_AUTHORIZE_REQUEST_CALLED = ""isAuthorizeRequestCalled"";
+
+        public static FactoryService createFactory() {
+            return FactoryService.create(AuthCheckService.class);
+        }
+
+        public AuthCheckService() {
+            super();
+            // non persisted, owner selection service
+            toggleOption(ServiceOption.PERSISTENCE, false);
+            toggleOption(ServiceOption.INSTRUMENTATION, true);
+        }
+
+        @Override
+        public void authorizeRequest(Operation op) {
+            adjustStat(IS_AUTHORIZE_REQUEST_CALLED, 1);
+            op.complete();
+        }
+    }
+
     private static final int MAINTENANCE_INTERVAL_MILLIS = 100;
 
     private VerificationHost host;
@@ -2937,4 +2961,67 @@ public class TestServiceHost {
         this.host.tearDown();
     }
 
+
+    @Test
+    public void authorizeRequestOnOwnerSelectionService() throws Throwable {
+        setUp(true);
+
+        this.host.setAuthorizationService(new AuthorizationContextService());
+        this.host.setAuthorizationEnabled(true);
+        this.host.setMaintenanceIntervalMicros(TimeUnit.MILLISECONDS.toMicros(100));
+        this.host.start();
+
+        AuthTestUtils.setSystemAuthorizationContext(this.host);
+
+        // Start Statefull with Non-Persisted service
+        this.host.startFactory(new AuthCheckService());
+        this.host.waitForServiceAvailable(AuthCheckService.FACTORY_LINK);
+
+        TestRequestSender sender = this.host.getTestRequestSender();
+
+
+        this.host.setSystemAuthorizationContext();
+
+        String adminUser = ""admin@vmware.com"";
+        String adminPass = ""password"";
+        TestContext authCtx = this.host.testCreate(1);
+        AuthorizationSetupHelper.create()
+                .setHost(this.host)
+                .setUserEmail(adminUser)
+                .setUserPassword(adminPass)
+                .setIsAdmin(true)
+                .setCompletion(authCtx.getCompletion())
+                .start();
+        authCtx.await();
+
+        // create foo
+        ExampleServiceState exampleFoo = new ExampleServiceState();
+        exampleFoo.name = ""foo"";
+        exampleFoo.documentSelfLink = ""foo"";
+
+        Operation post = Operation.createPost(this.host, AuthCheckService.FACTORY_LINK).setBody(exampleFoo);
+        ExampleServiceState postResult = sender.sendAndWait(post, ExampleServiceState.class);
+
+        URI statsUri = UriUtils.buildUri(this.host, postResult.documentSelfLink);
+
+        ServiceStats stats = sender.sendStatsGetAndWait(statsUri);
+        assertFalse(stats.entries.containsKey(AuthCheckService.IS_AUTHORIZE_REQUEST_CALLED));
+
+        this.host.resetAuthorizationContext();
+
+        TestRequestSender.FailureResponse failureResponse = sender.sendAndWaitFailure(Operation.createGet(this.host, postResult.documentSelfLink));
+        assertEquals(Operation.STATUS_CODE_FORBIDDEN, failureResponse.op.getStatusCode());
+
+
+        this.host.setSystemAuthorizationContext();
+
+        stats = sender.sendStatsGetAndWait(statsUri);
+        ServiceStat stat = stats.entries.get(AuthCheckService.IS_AUTHORIZE_REQUEST_CALLED);
+        assertNotNull(stat);
+        assertEquals(1, stat.latestValue, 0);
+
+        this.host.resetAuthorizationContext();
+
+    }
+
 }
",0.0,3.0,0.0,tfidf
,,,,,,,,,
CVE-2012-4387,CVE-2012-4387/a7161ca7d7a2abfcbe6d4499883747705cef1ef8,https://github.com/apache/struts/commit/a7161ca7d7a2abfcbe6d4499883747705cef1ef8,"<s>Apache Struts 2.0.0 through 2.3.4 allows remote attackers to cause a denial of service (CPU consumption) via a long parameter name, which is processed as an OGNL expression.</s>","<s>WW-3644 changes support for expression as a dynamic attribute to parse only values enclosed in %{ and }
git-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@1381585 13f79535-47bb-0310-9956-ffa450edef68
</s>"," diff --git a/core/src/main/java/org/apache/struts2/views/jsp/ui/AbstractUITag.java b/core/src/main/java/org/apache/struts2/views/jsp/ui/AbstractUITag.java
index f157764ba..9a7716346 100644
--- a/core/src/main/java/org/apache/struts2/views/jsp/ui/AbstractUITag.java
+++ b/core/src/main/java/org/apache/struts2/views/jsp/ui/AbstractUITag.java
@@ -22,6 +22,7 @@
 package org.apache.struts2.views.jsp.ui;
 
 import org.apache.commons.lang3.ObjectUtils;
+import org.apache.struts2.components.Component;
 import org.apache.struts2.components.UIBean;
 import org.apache.struts2.views.jsp.ComponentTagSupport;
 
@@ -291,10 +292,11 @@ public abstract class AbstractUITag extends ComponentTagSupport implements Dynam
     }
 
 expr.substring public void setDynamicAttribute(String uri, String localName, Object value) throws JspException {
-
       if (value != null && value instanceof String) {
+ public class Component {
   if (Component.altSyntax(getStack()) && Component.isExpression(value)) {
 if body shold be used.
+    dynamicAttributes.put(localName, String.valueOf(ObjectUtils.defaultIfNull(findValue(value.toString()), value)));

     public boolean uses } else {
         return false;
 dynamicAttributes.put(localName, value);
  public static boolean isExpression( }
) {
+ }
+
 }
  String expr = value.toString();
+        return expr.startsWith(""%{"") && expr.endsWith(""}"");
+    }
+
 }
",0.0,3.0,0.0,tfidf
CVE-2012-4387,CVE-2012-4387/80e03182d66d9e6ab18f9a9a9b3c42725a1c89e9,https://github.com/apache/struts/commit/80e03182d66d9e6ab18f9a9a9b3c42725a1c89e9,"<s>Apache Struts 2.0.0 through 2.3.4 allows remote attackers to cause a denial of service (CPU consumption) via a long parameter name, which is processed as an OGNL expression.</s>","<s>WW-3860
Restrict accepted parameter name length
Thanks to Johno Crawford for the patch.
git-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@1368841 13f79535-47bb-0310-9956-ffa450edef68
</s>"," diff --git a/xwork-core/src/main/java/com/opensymphony/xwork2/interceptor/ParametersInterceptor.java b/xwork-core/src/main/java/com/opensymphony/xwork2/interceptor/ParametersInterceptor.java
index 7f28b8769..0ce3e72cd 100644
--- a/xwork-core/src/main/java/com/opensymphony/xwork2/interceptor/ParametersInterceptor.java
+++ b/xwork-core/src/main/java/com/opensymphony/xwork2/interceptor/ParametersInterceptor.java
@@ -96,9 +96,11 @@ import java.util.regex.Pattern;
  * <!-- START SNIPPET: parameters -->
  * <p/>
  * <ul>
- * <p/>
  * <li>ordered - set to true if you want the top-down property setter behaviour</li>
- * <p/>
+ * <li>acceptParamNames - a comma delimited list of regular expressions to describe a whitelist of accepted parameter names.
+ * Don't change the default unless you know what you are doing in terms of security implications</li>
+ * <li>excludeParams - a comma delimited list of regular expressions to describe a blacklist of not allowed parameter names</li>
+ * <li>paramNameMaxLength - the maximum length of parameter names; parameters with longer names will be ignored; the default is 100 characters</li>
  * </ul>
  * <p/>
  * <!-- END SNIPPET: parameters -->
@@ -130,6 +132,10 @@ public class ParametersInterceptor extends MethodFilterInterceptor {
 
     private static final Logger LOG = LoggerFactory.getLogger(ParametersInterceptor.class);
 
+    protected static final int PARAM_NAME_MAX_LENGTH = 100;
+
+    private int paramNameMaxLength = PARAM_NAME_MAX_LENGTH;
+
     boolean ordered = false;
     Set<Pattern> excludeParams = Collections.emptySet();
     Set<Pattern> acceptParams = Collections.emptySet();
@@ -151,7 +157,16 @@ public class ParametersInterceptor extends MethodFilterInterceptor {
         devMode = ""true"".equals(mode);
     }
 
-    public void setAcceptParamNames(String commaDelim) {
+	/**
+	 * Sets a comma-delimited list of regular expressions to match
+	 * parameters that are allowed in the parameter map (aka whitelist).
+	 * <p/>
+	 * Don't change the default unless you know what you are doing in terms
+	 * of security implications.
+	 *
+	 * @param commaDelim A comma-delimited list of regular expressions
+	 */
+	public void setAcceptParamNames(String commaDelim) {
         Collection<String> acceptPatterns = ArrayUtils.asCollection(commaDelim);
         if (acceptPatterns != null) {
             acceptParams = new HashSet<Pattern>();
@@ -161,6 +176,16 @@ public class ParametersInterceptor extends MethodFilterInterceptor {
         }
     }
 
+    /**
+     * If the param name exceeds the configured maximum length it will not be
+     * accepted.
+     *
+     * @param paramNameMaxLength Maximum length of param names
+     */
+    public void setParamNameMaxLength(int paramNameMaxLength) {
+        this.paramNameMaxLength = paramNameMaxLength;
+    }
+
     static private int countOGNLCharacters(String s) {
         int count = 0;
         for (int i = s.length() - 1; i >= 0; i--) {
@@ -351,10 +376,15 @@ public class ParametersInterceptor extends MethodFilterInterceptor {
     }
 
     protected boolean acceptableName(String name) {
-        return isAccepted(name) && !isExcluded(name);
+        return isWithinLengthLimit(name) && isAccepted(name)
+                && !isExcluded(name);
     }
 
-    protected boolean isAccepted(String paramName) {
+	protected boolean isWithinLengthLimit( String name ) {
+		return name.length() <= paramNameMaxLength;
+	}
+
+	protected boolean isAccepted(String paramName) {
         if (!this.acceptParams.isEmpty()) {
             for (Pattern pattern : acceptParams) {
                 Matcher matcher = pattern.matcher(paramName);
",1.0,3.0,1.0,tfidf
,,,,,,,,,
CVE-2020-5297,CVE-2020-5297/2bc4084dff12eae036c848d4151ea35a29147bd0,https://github.com/octobercms/october/commit/2bc4084dff12eae036c848d4151ea35a29147bd0,"<s>In OctoberCMS (october/october composer package) versions from 1.0.319 and before 1.0.466, an attacker can exploit this vulnerability to upload jpg, jpeg, bmp, png, webp, gif, ico, css, js, woff, woff2, svg, ttf, eot, json, md, less, sass, scss, xml files to any directory of an October CMS server. The vulnerability is only exploitable by an authenticated backend user with the `cms.manage_assets` permission. Issue has been patched in Build 466 (v1.0.466).</s>","<s>Fixed composer requirement
Composer does not support commit specific requirements when it comes to fetching the composer.json metadata, which means that this particular fix has to specify a tag instead of a commit hash.
</s>"," diff --git a/composer.json b/composer.json
index bbfec7024..eb4f8fe37 100644
--- a/composer.json
+++ b/composer.json
@@ -39,7 +39,7 @@
         ""october/backend"": ""~1.0"",
         ""october/cms"": ""~1.0"",
         ""laravel/framework"": ""~5.5.40"",
-        ""wikimedia/composer-merge-plugin"": ""dev-master#bec42272005379dc752f7d4823cfe972ff64fbdf""
+        ""wikimedia/composer-merge-plugin"": ""1.4.1""
     },
     ""require-dev"": {
         ""fzaninotto/faker"": ""~1.7"",
",0.0,1.0,0.0,lime
CVE-2020-5297,CVE-2020-5297/6711dae8ef70caf0e94cec434498012a2ccd86b8,https://github.com/octobercms/october/commit/6711dae8ef70caf0e94cec434498012a2ccd86b8,"<s>In OctoberCMS (october/october composer package) versions from 1.0.319 and before 1.0.466, an attacker can exploit this vulnerability to upload jpg, jpeg, bmp, png, webp, gif, ico, css, js, woff, woff2, svg, ttf, eot, json, md, less, sass, scss, xml files to any directory of an October CMS server. The vulnerability is only exploitable by an authenticated backend user with the `cms.manage_assets` permission. Issue has been patched in Build 466 (v1.0.466).</s>","<s>Improve asset file path handling when moving assets
</s>"," diff --git a/modules/cms/widgets/AssetList.php b/modules/cms/widgets/AssetList.php
index 0fcd63c73..3dda5d1b3 100644
--- a/modules/cms/widgets/AssetList.php
+++ b/modules/cms/widgets/AssetList.php
@@ -333,13 +333,20 @@ class AssetList extends WidgetBase
 
             $basename = basename($path);
             $originalFullPath = $this->getFullPath($path);
-            $newFullPath = rtrim($destinationFullPath, '/').'/'.$basename;
+            $newFullPath = realpath(rtrim($destinationFullPath, '/')) . '/' . $basename;
             $safeDir = $this->getAssetsPath();
 
             if ($originalFullPath == $newFullPath) {
                 continue;
             }
 
+            if (!starts_with($newFullPath, $safeDir)) {
+                throw new ApplicationException(Lang::get(
+                    'cms::lang.asset.error_moving_file',
+                    ['file' => $basename]
+                ));
+            }
+
             if (is_file($originalFullPath)) {
                 if (!@File::move($originalFullPath, $newFullPath)) {
                     throw new ApplicationException(Lang::get(
",1.0,1.0,1.0,lime
,,,,,,,,,
CVE-2021-32840,CVE-2021-32840/cd5310f5b7eed595110b76a2f7ae5ee013cc50f1,https://github.com/icsharpcode/SharpZipLib/commit/cd5310f5b7eed595110b76a2f7ae5ee013cc50f1,"<s>SharpZipLib (or #ziplib) is a Zip, GZip, Tar and BZip2 library. Prior to version 1.3.3, a TAR file entry `../evil.txt` may be extracted in the parent directory of `destFolder`. This leads to arbitrary file write that may lead to code execution. The vulnerability was patched in version 1.3.3.</s>","<s>fix(bzip2): use explicit feature defs for vectorized memory move (#635)
* Fixed mismatched framework directives for vectorized memory move
Co-authored-by: nils måsén <nils@piksel.se>
</s>"," diff --git a/src/ICSharpCode.SharpZipLib/BZip2/BZip2InputStream.cs b/src/ICSharpCode.SharpZipLib/BZip2/BZip2InputStream.cs
index 8a3d4b8..3948b4e 100644
--- a/src/ICSharpCode.SharpZipLib/BZip2/BZip2InputStream.cs
+++ b/src/ICSharpCode.SharpZipLib/BZip2/BZip2InputStream.cs
@@ -1,3 +1,7 @@
+#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
+	#define VECTORIZE_MEMORY_MOVE
+#endif
+
 using ICSharpCode.SharpZipLib.Checksum;
 using System;
 using System.IO;
@@ -19,9 +23,9 @@ namespace ICSharpCode.SharpZipLib.BZip2
 		private const int NO_RAND_PART_B_STATE = 6;
 		private const int NO_RAND_PART_C_STATE = 7;
 
-#if NETSTANDARD2_1
+#if VECTORIZE_MEMORY_MOVE
 		private static readonly int VectorSize = System.Numerics.Vector<byte>.Count;
-#endif
+#endif // VECTORIZE_MEMORY_MOVE
 
 #endregion Constants
 
@@ -717,7 +721,7 @@ namespace ICSharpCode.SharpZipLib.BZip2
 
 					var j = nextSym - 1;
 
-#if !NETSTANDARD2_0 && !NETFRAMEWORK
+#if VECTORIZE_MEMORY_MOVE
 					// This is vectorized memory move. Going from the back, we're taking chunks of array
 					// and write them at the new location shifted by one. Since chunks are VectorSize long,
 					// at the end we have to move ""tail"" (or head actually) of the array using a plain loop.
@@ -729,7 +733,7 @@ namespace ICSharpCode.SharpZipLib.BZip2
 						arrayPart.CopyTo(yy, j - VectorSize + 1);
 						j -= VectorSize;
 					}
-#endif
+#endif // VECTORIZE_MEMORY_MOVE
 
 					while(j > 0)
 					{
",1.0,1.0,0.0,lime
CVE-2021-32840,CVE-2021-32840/a0e96de70b5264f4c919b09253b1522bc7a221cc,https://github.com/icsharpcode/SharpZipLib/commit/a0e96de70b5264f4c919b09253b1522bc7a221cc,"<s>SharpZipLib (or #ziplib) is a Zip, GZip, Tar and BZip2 library. Prior to version 1.3.3, a TAR file entry `../evil.txt` may be extracted in the parent directory of `destFolder`. This leads to arbitrary file write that may lead to code execution. The vulnerability was patched in version 1.3.3.</s>","<s>test: add tests for tar path traversal
</s>"," diff --git a/test/ICSharpCode.SharpZipLib.Tests/ICSharpCode.SharpZipLib.Tests.csproj b/test/ICSharpCode.SharpZipLib.Tests/ICSharpCode.SharpZipLib.Tests.csproj
index fd6f61a..12183fc 100644
--- a/test/ICSharpCode.SharpZipLib.Tests/ICSharpCode.SharpZipLib.Tests.csproj
+++ b/test/ICSharpCode.SharpZipLib.Tests/ICSharpCode.SharpZipLib.Tests.csproj
@@ -5,6 +5,7 @@
 		<TargetFrameworks>netcoreapp3.1;net46</TargetFrameworks>
     <ApplicationIcon />
     <StartupObject />
+		<LangVersion>8</LangVersion>
   </PropertyGroup>
 
   <ItemGroup>
",0.0,1.0,1.0,lime
,,,,,,,,,
CVE-2017-15010,CVE-2017-15010/4e2fb0b1b7c965b313c6bce995d4d80c9fdd0638,https://github.com/salesforce/tough-cookie/commit/4e2fb0b1b7c965b313c6bce995d4d80c9fdd0638,<s>A ReDoS (regular expression denial of service) flaw was found in the tough-cookie module before 2.3.3 for Node.js. An attacker that is able to make an HTTP request using a specially crafted cookie may cause the application to consume an excessive amount of CPU.</s>,"<s>Document the 256 spaces limit
</s>"," diff --git a/lib/cookie.js b/lib/cookie.js
index 18e1afe..ccf941f 100644
--- a/lib/cookie.js
+++ b/lib/cookie.js
@@ -53,6 +53,10 @@ var COOKIE_OCTETS = new RegExp('^'+COOKIE_OCTET.source+'+$');
 
 var CONTROL_CHARS = /[\x00-\x1F]/;
 
+// For COOKIE_PAIR and LOOSE_COOKIE_PAIR below, the number of spaces has been
+// restricted to 256 to side-step a ReDoS issue reported here:
+// https://github.com/salesforce/tough-cookie/issues/92
+
 // Double quotes are part of the value (see: S4.1.1).
 // '\r', '\n' and '\0' should be treated as a terminator in the ""relaxed"" mode
 // (see: https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/parsed_cookie.cc#L60)
",1.0,2.0,0.0,tfidf
CVE-2017-15010,CVE-2017-15010/f1ed420a6a92ea7a5418df6e39e676556bc0c71d,https://github.com/salesforce/tough-cookie/commit/f1ed420a6a92ea7a5418df6e39e676556bc0c71d,<s>A ReDoS (regular expression denial of service) flaw was found in the tough-cookie module before 2.3.3 for Node.js. An attacker that is able to make an HTTP request using a specially crafted cookie may cause the application to consume an excessive amount of CPU.</s>,"<s>Constrain spaces before = to 256
Side-steps ReDoS in Issue #92
</s>"," diff --git a/lib/cookie.js b/lib/cookie.js
index 32e49ad..18e1afe 100644
--- a/lib/cookie.js
+++ b/lib/cookie.js
@@ -58,11 +58,11 @@ var CONTROL_CHARS = /[\x00-\x1F]/;
 // (see: https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/parsed_cookie.cc#L60)
 // '=' and ';' are attribute/values separators
 // (see: https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/parsed_cookie.cc#L64)
-var COOKIE_PAIR = /^(([^=;]+))\s*=\s*([^\n\r\0]*)/;
+var COOKIE_PAIR = /^(([^=;]+))\s{0,256}=\s*([^\n\r\0]*)/;
 
 // Used to parse non-RFC-compliant cookies like '=abc' when given the `loose`
 // option in Cookie.parse:
-var LOOSE_COOKIE_PAIR = /^((?:=)?([^=;]*)\s*=\s*)?([^\n\r\0]*)/;
+var LOOSE_COOKIE_PAIR = /^((?:=)?([^=;]*)\s{0,256}=\s*)?([^\n\r\0]*)/;
 
 // RFC6265 S4.1.1 defines path value as 'any CHAR except CTLs or "";""'
 // Note ';' is \x3B
",0.0,2.0,1.0,tfidf
,,,,,,,,,
CVE-2019-20792,CVE-2019-20792/c246f6f69a749d4f68626b40795a4f69168008f4,https://github.com/OpenSC/OpenSC/commit/c246f6f69a749d4f68626b40795a4f69168008f4,<s>OpenSC before 0.20.0 has a double free in coolkey_free_private_data because coolkey_add_object in libopensc/card-coolkey.c lacks a uniqueness check.</s>,"<s>coolkey: Make sure the object ID is unique when filling list
Thanks to oss-fuzz
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=19208
</s>"," diff --git a/src/libopensc/card-coolkey.c b/src/libopensc/card-coolkey.c
index d492d715..c95a5035 100644
--- a/src/libopensc/card-coolkey.c
+++ b/src/libopensc/card-coolkey.c
@@ -1945,6 +1945,11 @@ coolkey_add_object(coolkey_private_data_t *priv, unsigned long object_id, const
 	new_object.id = object_id;
 	new_object.length = object_length;
 
+	/* The object ID needs to be unique */
+	if (coolkey_find_object_by_id(&priv->objects_list, object_id) != NULL) {
+		return SC_ERROR_INTERNAL;
+	}
+
 	if (object_data) {
 		new_object.data = malloc(object_length + add_v1_record);
 		if (new_object.data == NULL) {
",1.0,3.0,1.0,tfidf
CVE-2019-20792,CVE-2019-20792/f11c286bc6a987a3f1f838c061d65636b90e3aa8,https://github.com/OpenSC/OpenSC/commit/f11c286bc6a987a3f1f838c061d65636b90e3aa8,<s>OpenSC before 0.20.0 has a double free in coolkey_free_private_data because coolkey_add_object in libopensc/card-coolkey.c lacks a uniqueness check.</s>,"<s>coolkey: Refactor the object listing to avoid invalid memory access
Probably resolves some bad memory access from oss-fuzz such as
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=18907
</s>"," diff --git a/src/libopensc/card-coolkey.c b/src/libopensc/card-coolkey.c
index b7985741..07652fc2 100644
--- a/src/libopensc/card-coolkey.c
+++ b/src/libopensc/card-coolkey.c
@@ -2166,11 +2166,19 @@ static int coolkey_initialize(sc_card_t *card)
 	priv->life_cycle = life_cycle.life_cycle;
 
 	/* walk down the list of objects and read them off the token */
-	for(r=coolkey_list_object(card, COOLKEY_LIST_RESET, &object_info); r >= 0;
-		r= coolkey_list_object(card, COOLKEY_LIST_NEXT, &object_info)) {
-		unsigned long object_id = bebytes2ulong(object_info.object_id);
-		unsigned short object_len = bebytes2ulong(object_info.object_length);
-	    /* also look at the ACL... */
+	r = coolkey_list_object(card, COOLKEY_LIST_RESET, &object_info);
+	while (r >= 0) {
+		unsigned long object_id;
+		unsigned short object_len;
+
+		/* The card did not return what we expected: Lets try other objects */
+		if ((size_t)r < (sizeof(object_info)))
+			break;
+
+		/* TODO also look at the ACL... */
+
+		object_id = bebytes2ulong(object_info.object_id);
+		object_len = bebytes2ulong(object_info.object_length);
 
 
 		/* the combined object is a single object that can store the other objects.
@@ -2197,12 +2205,14 @@ static int coolkey_initialize(sc_card_t *card)
 				break;
 			}
 			combined_processed = 1;
-			continue;
+		} else {
+			r = coolkey_add_object(priv, object_id, NULL, object_len, 0);
+			if (r != SC_SUCCESS)
+				sc_log(card->ctx, ""coolkey_add_object() returned %d"", r);
 		}
-		r = coolkey_add_object(priv, object_id, NULL, object_len, 0);
-		if (r != SC_SUCCESS)
-			sc_log(card->ctx, ""coolkey_add_object() returned %d"", r);
 
+		/* Read next object: error is handled on the cycle condition and below after cycle */
+		r = coolkey_list_object(card, COOLKEY_LIST_NEXT, &object_info);
 	}
 	if (r != SC_ERROR_FILE_END_REACHED) {
 		goto cleanup;
",0.0,3.0,0.0,tfidf
,,,,,,,,,
CVE-2019-10763,CVE-2019-10763/9182f03c80bb7f08aae4efd4a0788e2be6368d96,https://github.com/pimcore/pimcore/commit/9182f03c80bb7f08aae4efd4a0788e2be6368d96,"<s>pimcore/pimcore before 6.3.0 is vulnerable to SQL Injection. An attacker with limited privileges (classes permission) can achieve a SQL injection that can lead in data leakage. The vulnerability can be exploited via 'id', 'storeId', 'pageSize' and 'tables' parameters, using a payload for trigger a time based or error based sql injection.</s>","<s>[Data Objects] fixed possible SQL injection in classification store definition
</s>"," diff --git a/bundles/AdminBundle/Controller/Admin/DataObject/ClassificationstoreController.php b/bundles/AdminBundle/Controller/Admin/DataObject/ClassificationstoreController.php
index 829dc09193..c9f349a10e 100644
--- a/bundles/AdminBundle/Controller/Admin/DataObject/ClassificationstoreController.php
+++ b/bundles/AdminBundle/Controller/Admin/DataObject/ClassificationstoreController.php
@@ -1452,11 +1452,16 @@ class ClassificationstoreController extends AdminController implements EventedCo
      */
     public function getPageAction(Request $request)
     {
-        $table = 'classificationstore_' . $request->get('table');
+        $tableSuffix = $request->get('table');
+        if (!in_arrayi($tableSuffix, ['keys', 'groups'])) {
+            $tableSuffix = 'keys';
+        }
+
+        $table = 'classificationstore_' . $tableSuffix;
         $db = \Pimcore\Db::get();
-        $id = $request->get('id');
-        $storeId = $request->get('storeId');
-        $pageSize = $request->get('pageSize');
+        $id = (int) $request->get('id');
+        $storeId = (int) $request->get('storeId');
+        $pageSize = (int) $request->get('pageSize');
 
         if ($request->get('sortKey')) {
             $sortKey = $request->get('sortKey');
@@ -1465,6 +1470,15 @@ class ClassificationstoreController extends AdminController implements EventedCo
             $sortKey = 'name';
             $sortDir = 'ASC';
         }
+
+        if (!in_arrayi($sortDir, ['DESC', 'ASC'])) {
+            $sortDir = 'DESC';
+        }
+
+        if (!in_arrayi($sortKey, ['name', 'title', 'description', 'id', 'type', 'creationDate', 'modificationDate', 'enabled', 'parentId', 'storeId'])) {
+            $sortKey = 'name';
+        }
+
         $sorter = ' order by `' . $sortKey .  '` ' . $sortDir;
 
         if ($table == 'keys') {
",1.0,3.0,1.0,tfidf
CVE-2019-10763,CVE-2019-10763/81bc24c38a07d4d369718b8eaf57fecd42cc156c,https://github.com/pimcore/pimcore/commit/81bc24c38a07d4d369718b8eaf57fecd42cc156c,"<s>pimcore/pimcore before 6.3.0 is vulnerable to SQL Injection. An attacker with limited privileges (classes permission) can achieve a SQL injection that can lead in data leakage. The vulnerability can be exploited via 'id', 'storeId', 'pageSize' and 'tables' parameters, using a payload for trigger a time based or error based sql injection.</s>","<s>Lost password service: do not expose info whether a user exists or not (avoid brute-force attacks) (4a7bba5c3f818852cbbd29fa124f7fb09a207185)
</s>"," diff --git a/bundles/AdminBundle/Controller/Admin/LoginController.php b/bundles/AdminBundle/Controller/Admin/LoginController.php
index fc9d160bd1..4ef1fe7c1b 100644
--- a/bundles/AdminBundle/Controller/Admin/LoginController.php
+++ b/bundles/AdminBundle/Controller/Admin/LoginController.php
@@ -22,6 +22,7 @@ use Pimcore\Controller\Configuration\TemplatePhp;
 use Pimcore\Controller\EventedControllerInterface;
 use Pimcore\Event\Admin\Login\LostPasswordEvent;
 use Pimcore\Event\AdminEvents;
+use Pimcore\Logger;
 use Pimcore\Model\User;
 use Pimcore\Templating\Model\ViewModel;
 use Pimcore\Tool;
@@ -120,29 +121,28 @@ class LoginController extends AdminController implements BruteforceProtectedCont
     public function lostpasswordAction(Request $request, BruteforceProtectionHandler $bruteforceProtectionHandler)
     {
         $view = $this->buildLoginPageViewModel();
-        $view->success = false;
+        $error = null;
 
-        // TODO is the error on the view used somewhere?
         if ($request->getMethod() === 'POST' && $username = $request->get('username')) {
             $user = User::getByName($username);
 
             if ($user instanceof User) {
                 if (!$user->isActive()) {
-                    $view->error = 'user inactive';
+                    $error = 'user inactive';
                 }
 
                 if (!$user->getEmail()) {
-                    $view->error = 'user has no email address';
+                    $error = 'user has no email address';
                 }
 
                 if (!$user->getPassword()) {
-                    $view->error = 'user has no password';
+                    $error = 'user has no password';
                 }
             } else {
-                $view->error = 'user unknown';
+                $error = 'user unknown';
             }
 
-            if (!$view->error) {
+            if (!$error) {
                 $token = Authentication::generateToken($username, $user->getPassword());
 
                 $loginUrl = $this->generateUrl('pimcore_admin_login_check', [
@@ -167,14 +167,13 @@ class LoginController extends AdminController implements BruteforceProtectedCont
                     if ($event->hasResponse()) {
                         return $event->getResponse();
                     }
-
-                    $view->success = true;
                 } catch (\Exception $e) {
-                    $view->error = 'could not send email';
+                    $error = 'could not send email';
                 }
             }
 
-            if ($view->error) {
+            if ($error) {
+                Logger::error('Lost password service: ' . $error);
                 $bruteforceProtectionHandler->addEntry($request->get('username'), $request);
             }
         }
",0.0,3.0,0.0,tfidf
,,,,,,,,,
CVE-2017-9142,CVE-2017-9142/f0232a2a45dfd003c1faf6079497895df3ab0ee1,https://github.com/ImageMagick/ImageMagick/commit/f0232a2a45dfd003c1faf6079497895df3ab0ee1,"<s>In ImageMagick 7.0.5-7 Q16, a crafted file could trigger an assertion failure in the WriteBlob function in MagickCore/blob.c because of missing checks in the ReadOneJNGImage function in coders/png.c.</s>","<s>Fixed incorrect call to WriteBlob reported in #490.
</s>"," diff --git a/coders/png.c b/coders/png.c
index c194d0858..cfd684400 100644
--- a/coders/png.c
+++ b/coders/png.c
@@ -4782,10 +4782,11 @@ static Image *ReadOneJNGImage(MngInfo *mng_info,
           (void) LogMagickEvent(CoderEvent,GetMagickModule(),
             ""    Copying JDAT chunk data to color_blob."");
 
-        (void) WriteBlob(color_image,length,chunk);
-
         if (length != 0)
-          chunk=(unsigned char *) RelinquishMagickMemory(chunk);
+          {
+            (void) WriteBlob(color_image,length,chunk);
+            chunk=(unsigned char *) RelinquishMagickMemory(chunk);
+          }
 
         continue;
       }
",1.0,3.0,1.0,tfidf
CVE-2017-9142,CVE-2017-9142/e05780990eecbe1b5f2884ad30e04328cec646bf,https://github.com/ImageMagick/ImageMagick/commit/e05780990eecbe1b5f2884ad30e04328cec646bf,"<s>In ImageMagick 7.0.5-7 Q16, a crafted file could trigger an assertion failure in the WriteBlob function in MagickCore/blob.c because of missing checks in the ReadOneJNGImage function in coders/png.c.</s>","<s>https://github.com/ImageMagick/ImageMagick/issues/491
</s>"," diff --git a/MagickCore/image.c b/MagickCore/image.c
index ce60390fb..c2e666f51 100644
--- a/MagickCore/image.c
+++ b/MagickCore/image.c
@@ -849,7 +849,7 @@ MagickExport Image *CloneImage(const Image *image,const size_t columns,
       */
       clone_image->colors=image->colors;
       length=(size_t) image->colors;
-      clone_image->colormap=(PixelInfo *) AcquireQuantumMemory(length,
+      clone_image->colormap=(PixelInfo *) AcquireQuantumMemory(length+1,
         sizeof(*clone_image->colormap));
       if (clone_image->colormap == (PixelInfo *) NULL)
         {
",0.0,3.0,0.0,tfidf
,,,,,,,,,
CVE-2019-13303,CVE-2019-13303/4a60519527fc1cf925d37f93aac021655ee43314,https://github.com/ImageMagick/ImageMagick/commit/4a60519527fc1cf925d37f93aac021655ee43314,<s>ImageMagick 7.0.8-50 Q16 has a heap-based buffer over-read in MagickCore/composite.c in CompositeImage.</s>,"<s>Revert CopyCompositeOp composite patch
</s>"," diff --git a/MagickCore/composite.c b/MagickCore/composite.c
index 99e91d147..78d6dff92 100644
--- a/MagickCore/composite.c
+++ b/MagickCore/composite.c
@@ -654,19 +654,18 @@ MagickExport MagickBooleanType CompositeImage(Image *image,
               q+=GetPixelChannels(image);
               continue;
             }
-          for (i=0; i < (ssize_t) GetPixelChannels(source_image); i++)
+          for (i=0; i < (ssize_t) GetPixelChannels(image); i++)
           {
-            PixelChannel channel = GetPixelChannelChannel(source_image,i);
-            PixelTrait source_traits = GetPixelChannelTraits(source_image,
-              channel);
+            PixelChannel channel = GetPixelChannelChannel(image,i);
             PixelTrait traits = GetPixelChannelTraits(image,channel);
-            if (source_traits == UndefinedPixelTrait)
+            PixelTrait source_traits=GetPixelChannelTraits(source_image,
+              channel);
+            if (traits == UndefinedPixelTrait)
               continue;
-            if (traits != UndefinedPixelTrait)
+            if (source_traits != UndefinedPixelTrait)
               SetPixelChannel(image,channel,p[i],q);
-            else
-              if (channel == AlphaPixelChannel)
-                SetPixelChannel(image,channel,OpaqueAlpha,q);
+            else if (channel == AlphaPixelChannel)
+              SetPixelChannel(image,channel,OpaqueAlpha,q);
           }
           p+=GetPixelChannels(source_image);
           q+=GetPixelChannels(image);
",0.0,1.0,0.0,lime
CVE-2019-13303,CVE-2019-13303/d29148fae06c01ef215940e084cf41853c117bab,https://github.com/ImageMagick/ImageMagick/commit/d29148fae06c01ef215940e084cf41853c117bab,<s>ImageMagick 7.0.8-50 Q16 has a heap-based buffer over-read in MagickCore/composite.c in CompositeImage.</s>,"<s>https://github.com/ImageMagick/ImageMagick/issues/1603
</s>"," diff --git a/MagickCore/composite.c b/MagickCore/composite.c
index 78d6dff92..99e91d147 100644
--- a/MagickCore/composite.c
+++ b/MagickCore/composite.c
@@ -654,18 +654,19 @@ MagickExport MagickBooleanType CompositeImage(Image *image,
               q+=GetPixelChannels(image);
               continue;
             }
-          for (i=0; i < (ssize_t) GetPixelChannels(image); i++)
+          for (i=0; i < (ssize_t) GetPixelChannels(source_image); i++)
           {
-            PixelChannel channel = GetPixelChannelChannel(image,i);
-            PixelTrait traits = GetPixelChannelTraits(image,channel);
-            PixelTrait source_traits=GetPixelChannelTraits(source_image,
+            PixelChannel channel = GetPixelChannelChannel(source_image,i);
+            PixelTrait source_traits = GetPixelChannelTraits(source_image,
               channel);
-            if (traits == UndefinedPixelTrait)
+            PixelTrait traits = GetPixelChannelTraits(image,channel);
+            if (source_traits == UndefinedPixelTrait)
               continue;
-            if (source_traits != UndefinedPixelTrait)
+            if (traits != UndefinedPixelTrait)
               SetPixelChannel(image,channel,p[i],q);
-            else if (channel == AlphaPixelChannel)
-              SetPixelChannel(image,channel,OpaqueAlpha,q);
+            else
+              if (channel == AlphaPixelChannel)
+                SetPixelChannel(image,channel,OpaqueAlpha,q);
           }
           p+=GetPixelChannels(source_image);
           q+=GetPixelChannels(image);
",1.0,1.0,1.0,lime
,,,,,,,,,
CVE-2019-10254,CVE-2019-10254/586cca384be6710b03e14bcbeb7588c1772604ec,https://github.com/MISP/MISP/commit/586cca384be6710b03e14bcbeb7588c1772604ec,"<s>In MISP before 2.4.105, the app/View/Layouts/default.ctp default layout template has a Reflected XSS vulnerability.</s>","<s>fix: [security] Fix to a reflected XSS in the default layout template
- as reported by Tuscany Internet eXchange | Misp Team | TIX CyberSecurity
</s>"," diff --git a/app/View/Layouts/default.ctp b/app/View/Layouts/default.ctp
index 9b720d295..93139d9c0 100644
--- a/app/View/Layouts/default.ctp
+++ b/app/View/Layouts/default.ctp
@@ -101,9 +101,9 @@
         var baseurl = '<?php echo $baseurl; ?>';
         var here = '<?php
                 if (substr($this->params['action'], 0, 6) === 'admin_') {
-                    echo $baseurl . '/admin/' . $this->params['controller'] . '/' . substr($this->params['action'], 6);
+                    echo $baseurl . '/admin/' . h($this->params['controller']) . '/' . h(substr($this->params['action'], 6));
                 } else {
-                    echo $baseurl . '/' . $this->params['controller'] . '/' . $this->params['action'];
+                    echo $baseurl . '/' . h($this->params['controller']) . '/' . h($this->params['action']);
                 }
             ?>';
         $(document).ready(function(){
",1.0,3.0,1.0,tfidf
CVE-2019-10254,CVE-2019-10254/4858b0181cb1a28cf093b14383a932a699d2f900,https://github.com/MISP/MISP/commit/4858b0181cb1a28cf093b14383a932a699d2f900,"<s>In MISP before 2.4.105, the app/View/Layouts/default.ctp default layout template has a Reflected XSS vulnerability.</s>","<s>fix: [ACL Component] Added new function (for new modules format) in the list
</s>"," diff --git a/app/Controller/Component/ACLComponent.php b/app/Controller/Component/ACLComponent.php
index 2b441a4fe..4c6c95d5f 100644
--- a/app/Controller/Component/ACLComponent.php
+++ b/app/Controller/Component/ACLComponent.php
@@ -120,6 +120,7 @@ class ACLComponent extends Component
                     'getReferenceData' => array('*'),
                     'getReferences' => array('*'),
                     'getObjectTemplate' => array('*'),
+                    'handleModuleResults' => array('*'),
                     'hids' => array('*'),
                     'index' => array('*'),
                     'importChoice' => array('*'),
",0.0,3.0,0.0,tfidf
,,,,,,,,,
CVE-2018-6197,CVE-2018-6197/01d41d49b273a8cc75b27c6ab42291b46004fc0c,https://github.com/tats/w3m/commit/01d41d49b273a8cc75b27c6ab42291b46004fc0c,<s>w3m through 0.5.3 is prone to a NULL pointer dereference flaw in formUpdateBuffer in form.c.</s>,"<s>Add CVE IDs
cf. https://security-tracker.debian.org/tracker/source-package/w3m
</s>"," diff --git a/ChangeLog b/ChangeLog
index 65bd46e..8e29091 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -6,6 +6,8 @@
 
 	* config.h.dist, config.h.in, configure, configure.ac, main.c, rc.c:
 	Make temporary directory safely when ~/.w3m is unwritable.
+	Bug-Debian: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=888097
+	[CVE-2018-6198]
 
 	* rc.c: Suppress error messages when ~/.w3m is unwritable.
 	Bug-Debian: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=871425
@@ -16,7 +18,7 @@
 	Update config.* with autotools-dev 20171216.1.
 
 	* table.c: Prevent negative indent value in feed_table_block_tag().
-	Bug-Debian: https://github.com/tats/w3m/issues/88
+	Bug-Debian: https://github.com/tats/w3m/issues/88 [CVE-2018-6196]
 
 2018-01-06  Tatsuya Kinoshita  <tats@debian.org>
 
@@ -39,7 +41,7 @@
 2017-12-27  Tatsuya Kinoshita  <tats@debian.org>
 
 	* form.c: Prevent invalid columnPos() call in formUpdateBuffer().
-	Bug-Debian: https://github.com/tats/w3m/issues/89
+	Bug-Debian: https://github.com/tats/w3m/issues/89 [CVE-2018-6197]
 
 	* main.c: Typo fix in fusage().
 	Bug-Debian: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=878106
",0.0,3.0,0.0,lime
CVE-2018-6197,CVE-2018-6197/7fdc83b0364005a0b5ed869230dd81752ba022e8,https://github.com/tats/w3m/commit/7fdc83b0364005a0b5ed869230dd81752ba022e8,<s>w3m through 0.5.3 is prone to a NULL pointer dereference flaw in formUpdateBuffer in form.c.</s>,"<s>Prevent invalid columnPos() call in formUpdateBuffer()
Bug-Debian: https://github.com/tats/w3m/issues/89
</s>"," diff --git a/form.c b/form.c
index cc5e3d2..bc14d39 100644
--- a/form.c
+++ b/form.c
@@ -482,6 +482,8 @@ formUpdateBuffer(Anchor *a, Buffer *buf, FormItemList *form)
 	rows = form->rows ? form->rows : 1;
 	col = COLPOS(l, a->start.pos);
 	for (c_rows = 0; c_rows < rows; c_rows++, l = l->next) {
+	    if (l == NULL)
+		break;
 	    if (rows > 1) {
 		pos = columnPos(l, col);
 		a = retrieveAnchor(buf->formitem, l->linenumber, pos);
",1.0,3.0,1.0,lime
,,,,,,,,,
CVE-2019-1010317,CVE-2019-1010317/f68a9555b548306c5b1ee45199ccdc4a16a6101b,https://github.com/dbry/WavPack/commit/f68a9555b548306c5b1ee45199ccdc4a16a6101b,"<s>WavPack 5.1.0 and earlier is affected by: CWE-457: Use of Uninitialized Variable. The impact is: Unexpected control flow, crashes, and segfaults. The component is: ParseCaffHeaderConfig (caff.c:486). The attack vector is: Maliciously crafted .wav file. The fixed version is: After commit https://github.com/dbry/WavPack/commit/f68a9555b548306c5b1ee45199ccdc4a16a6101b.</s>","<s>issue #66: make sure CAF files have a ""desc"" chunk
</s>"," diff --git a/cli/caff.c b/cli/caff.c
index 2a5e2d9..a35da74 100644
--- a/cli/caff.c
+++ b/cli/caff.c
@@ -152,7 +152,7 @@ static struct {
 
 int ParseCaffHeaderConfig (FILE *infile, char *infilename, char *fourcc, WavpackContext *wpc, WavpackConfig *config)
 {
-    uint32_t chan_chunk = 0, channel_layout = 0, bcount;
+    uint32_t chan_chunk = 0, desc_chunk = 0, channel_layout = 0, bcount;
     unsigned char *channel_identities = NULL;
     unsigned char *channel_reorder = NULL;
     int64_t total_samples = 0, infilesize;
@@ -218,6 +218,7 @@ int ParseCaffHeaderConfig (FILE *infile, char *infilename, char *fourcc, Wavpack
             }
 
             WavpackBigEndianToNative (&caf_audio_format, CAFAudioFormatFormat);
+            desc_chunk = 1;
 
             if (debug_logging_mode) {
                 char formatstr [5];
@@ -458,7 +459,7 @@ int ParseCaffHeaderConfig (FILE *infile, char *infilename, char *fourcc, Wavpack
         else if (!strncmp (caf_chunk_header.mChunkType, ""data"", 4)) {     // on the data chunk, get size and exit loop
             uint32_t mEditCount;
 
-            if (!DoReadFile (infile, &mEditCount, sizeof (mEditCount), &bcount) ||
+            if (!desc_chunk || !DoReadFile (infile, &mEditCount, sizeof (mEditCount), &bcount) ||
                 bcount != sizeof (mEditCount)) {
                     error_line (""%s is not a valid .CAF file!"", infilename);
                     return WAVPACK_SOFT_ERROR;
",1.0,3.0,1.0,tfidf
CVE-2019-1010317,CVE-2019-1010317/33a0025d1d63ccd05d9dbaa6923d52b1446a62fe,https://github.com/dbry/WavPack/commit/33a0025d1d63ccd05d9dbaa6923d52b1446a62fe,"<s>WavPack 5.1.0 and earlier is affected by: CWE-457: Use of Uninitialized Variable. The impact is: Unexpected control flow, crashes, and segfaults. The component is: ParseCaffHeaderConfig (caff.c:486). The attack vector is: Maliciously crafted .wav file. The fixed version is: After commit https://github.com/dbry/WavPack/commit/f68a9555b548306c5b1ee45199ccdc4a16a6101b.</s>","<s>issue #68: clear WaveHeader at start to prevent uninitialized read
</s>"," diff --git a/cli/wave64.c b/cli/wave64.c
index 7beffe6..59548b1 100644
--- a/cli/wave64.c
+++ b/cli/wave64.c
@@ -56,6 +56,7 @@ int ParseWave64HeaderConfig (FILE *infile, char *infilename, char *fourcc, Wavpa
     int format_chunk = 0;
     uint32_t bcount;
 
+    CLEAR (WaveHeader);
     infilesize = DoGetFileSize (infile);
     memcpy (&filehdr, fourcc, 4);
 
",0.0,3.0,0.0,tfidf
,,,,,,,,,
CVE-2020-6816,CVE-2020-6816/175f67740e7951e1d80cefb7831e6c3e4efeb986,https://github.com/mozilla/bleach/commit/175f67740e7951e1d80cefb7831e6c3e4efeb986,"<s>In Mozilla Bleach before 3.12, a mutation XSS in bleach.clean when RCDATA and either svg or math tags are whitelisted and the keyword argument strip=False.</s>","<s>fix bug 1621692
</s>"," diff --git a/tests/test_clean.py b/tests/test_clean.py
index 8f64beb..133cd82 100644
--- a/tests/test_clean.py
+++ b/tests/test_clean.py
@@ -7,7 +7,7 @@ import pytest
 from bleach import clean
 from bleach.html5lib_shim import Filter
 from bleach.sanitizer import Cleaner
-
+from bleach._vendor.html5lib.constants import rcdataElements
 
 def test_clean_idempotent():
     """"""Make sure that applying the filter twice doesn't change anything.""""""
@@ -789,7 +789,7 @@ _raw_tags = [
         (
             raw_tag,
             ""<noscript><%s></noscript><img src=x onerror=alert(1) />"" % raw_tag,
-            ""<noscript><%s></noscript>&lt;img src=x onerror=alert(1) /&gt;"" % raw_tag,
+            ""<noscript>&lt;%s&gt;</noscript>&lt;img src=x onerror=alert(1) /&gt;"" % raw_tag,
         )
         for raw_tag in _raw_tags
     ],
@@ -799,6 +799,29 @@ def test_noscript_rawtag_(raw_tag, data, expected):
     assert clean(data, tags=[""noscript"", raw_tag]) == expected
 
 
+@pytest.mark.parametrize(
+    ""namespace_tag, rc_data_element_tag, data, expected"",
+    [
+        (
+            namespace_tag,
+            rc_data_element_tag,
+            ""<%s><%s><img src=x onerror=alert(1)>"" % (namespace_tag, rc_data_element_tag),
+            ""<%s><%s>&lt;img src=x onerror=alert(1)&gt;</%s></%s>"" % (namespace_tag, rc_data_element_tag, rc_data_element_tag, namespace_tag),
+        )
+        for namespace_tag in [""math"", ""svg""]
+        # https://dev.w3.org/html5/html-author/#rcdata-elements
+        # https://html.spec.whatwg.org/index.html#parsing-html-fragments
+        # in html5lib: 'style', 'script', 'xmp', 'iframe', 'noembed', 'noframes', and 'noscript'
+        for rc_data_element_tag in rcdataElements
+    ],
+)
+def test_namespace_rc_data_element_strip_false(namespace_tag, rc_data_element_tag, data, expected):
+    # refs: bug 1621692 / GHSA-m6xf-fq7q-8743
+    #
+    # browsers will pull the img out of the namespace and rc data tag resulting in XSS
+    assert clean(data, tags=[namespace_tag, rc_data_element_tag], strip=False) == expected
+
+
 def get_ids_and_tests():
     """"""Retrieves regression tests from data/ directory
 
",1.0,1.0,1.0,lime
CVE-2020-6816,CVE-2020-6816/6ba1dd0d49a8d7a31f71d172483822a5a6f2da23,https://github.com/mozilla/bleach/commit/6ba1dd0d49a8d7a31f71d172483822a5a6f2da23,"<s>In Mozilla Bleach before 3.12, a mutation XSS in bleach.clean when RCDATA and either svg or math tags are whitelisted and the keyword argument strip=False.</s>","<s>Check parser.tags before trying to iterate
</s>"," diff --git a/bleach/html5lib_shim.py b/bleach/html5lib_shim.py
index 1cb4efe..950c275 100644
--- a/bleach/html5lib_shim.py
+++ b/bleach/html5lib_shim.py
@@ -256,7 +256,7 @@ class BleachHTMLTokenizer(HTMLTokenizer):
                     yield token
 
                 elif ((last_error_token['data'] == 'expected-closing-tag-but-got-char' and
-                     token['data'].lower().strip() not in self.parser.tags)):
+                     (self.parser.tags is None or token['data'].lower().strip() not in self.parser.tags))):
                     # We've got either a malformed tag or a pseudo-tag or
                     # something that html5lib wants to turn into a malformed
                     # comment which Bleach clean() will drop so we interfere
",0.0,1.0,0.0,lime
,,,,,,,,,
CVE-2016-8649,CVE-2016-8649/81f466d05f2a89cb4f122ef7f593ff3f279b165c,https://github.com/lxc/lxc/commit/81f466d05f2a89cb4f122ef7f593ff3f279b165c,"<s>lxc-attach in LXC before 1.0.9 and 2.x before 2.0.6 allows an attacker inside of an unprivileged container to use an inherited file descriptor, of the host's /proc, to access the rest of the host's filesystem via the openat() family of syscalls.</s>","<s>attach: do not send procfd to attached process
So far, we opened a file descriptor refering to proc on the host inside the
host namespace and handed that fd to the attached process in
attach_child_main(). This was done to ensure that LSM labels were correctly
setup. However, by exploiting a potential kernel bug, ptrace could be used to
prevent the file descriptor from being closed which in turn could be used by an
unprivileged container to gain access to the host namespace. Aside from this
needing an upstream kernel fix, we should make sure that we don't pass the fd
for proc itself to the attached process. However, we cannot completely prevent
this, as the attached process needs to be able to change its apparmor profile
by writing to /proc/self/attr/exec or /proc/self/attr/current. To minimize the
attack surface, we only send the fd for /proc/self/attr/exec or
/proc/self/attr/current to the attached process. To do this we introduce a
little more IPC between the child and parent:
	 * IPC mechanism: (X is receiver)
	 *   initial process        intermediate          attached
	 *        X           <---  send pid of
	 *                          attached proc,
	 *                          then exit
	 *    send 0 ------------------------------------>    X
	 *                                              [do initialization]
	 *        X  <------------------------------------  send 1
	 *   [add to cgroup, ...]
	 *    send 2 ------------------------------------>    X
	 *						[set LXC_ATTACH_NO_NEW_PRIVS]
	 *        X  <------------------------------------  send 3
	 *   [open LSM label fd]
	 *    send 4 ------------------------------------>    X
	 *   						[set LSM label]
	 *   close socket                                 close socket
	 *                                                run program
The attached child tells the parent when it is ready to have its LSM labels set
up. The parent then opens an approriate fd for the child PID to
/proc/<pid>/attr/exec or /proc/<pid>/attr/current and sends it via SCM_RIGHTS
to the child. The child can then set its LSM laben. Both sides then close the
socket fds and the child execs the requested process.
Signed-off-by: Christian Brauner <christian.brauner@canonical.com>
</s>"," diff --git a/src/lxc/attach.c b/src/lxc/attach.c
index bfb2abf01..2f095b408 100644
--- a/src/lxc/attach.c
+++ b/src/lxc/attach.c
@@ -53,6 +53,7 @@
 
 #include ""namespace.h""
 #include ""log.h""
+#include ""af_unix.h""
 #include ""attach.h""
 #include ""caps.h""
 #include ""config.h""
@@ -84,80 +85,103 @@
 
 lxc_log_define(lxc_attach, lxc);
 
-int lsm_set_label_at(int procfd, int on_exec, char* lsm_label) {
+static int lsm_openat(int procfd, pid_t pid, int on_exec)
+{
+	int ret = -1;
 	int labelfd = -1;
-	int ret = 0;
 	const char* name;
-	char* command = NULL;
+#define __LSMATTRLEN /* /proc */ (5 + /* /pid-to-str */ 21 + /* /current */ 7 + /* \0 */ 1)
+	char path[__LSMATTRLEN];
 
 	name = lsm_name();
 
 	if (strcmp(name, ""nop"") == 0)
-		goto out;
+		return 0;
 
 	if (strcmp(name, ""none"") == 0)
-		goto out;
+		return 0;
 
 	/* We don't support on-exec with AppArmor */
 	if (strcmp(name, ""AppArmor"") == 0)
 		on_exec = 0;
 
 	if (on_exec) {
-		labelfd = openat(procfd, ""self/attr/exec"", O_RDWR);
-	}
-	else {
-		labelfd = openat(procfd, ""self/attr/current"", O_RDWR);
+		ret = snprintf(path, __LSMATTRLEN, ""%d/attr/exec"", pid);
+		if (ret < 0 || ret >= __LSMATTRLEN)
+			return -1;
+		labelfd = openat(procfd, path, O_RDWR);
+	} else {
+		ret = snprintf(path, __LSMATTRLEN, ""%d/attr/current"", pid);
+		if (ret < 0 || ret >= __LSMATTRLEN)
+			return -1;
+		labelfd = openat(procfd, path, O_RDWR);
 	}
 
 	if (labelfd < 0) {
 		SYSERROR(""Unable to open LSM label"");
-		ret = -1;
-		goto out;
+		return -1;
 	}
 
+	return labelfd;
+}
+
+static int lsm_set_label_at(int lsm_labelfd, int on_exec, char *lsm_label)
+{
+	int fret = -1;
+	const char* name;
+	char *command = NULL;
+
+	name = lsm_name();
+
+	if (strcmp(name, ""nop"") == 0)
+		return 0;
+
+	if (strcmp(name, ""none"") == 0)
+		return 0;
+
+	/* We don't support on-exec with AppArmor */
+	if (strcmp(name, ""AppArmor"") == 0)
+		on_exec = 0;
+
 	if (strcmp(name, ""AppArmor"") == 0) {
 		int size;
 
 		command = malloc(strlen(lsm_label) + strlen(""changeprofile "") + 1);
 		if (!command) {
 			SYSERROR(""Failed to write apparmor profile"");
-			ret = -1;
 			goto out;
 		}
 
 		size = sprintf(command, ""changeprofile %s"", lsm_label);
 		if (size < 0) {
 			SYSERROR(""Failed to write apparmor profile"");
-			ret = -1;
 			goto out;
 		}
 
-		if (write(labelfd, command, size + 1) < 0) {
-			SYSERROR(""Unable to set LSM label"");
-			ret = -1;
+		if (write(lsm_labelfd, command, size + 1) < 0) {
+			SYSERROR(""Unable to set LSM label: %s."", command);
 			goto out;
 		}
-	}
-	else if (strcmp(name, ""SELinux"") == 0) {
-		if (write(labelfd, lsm_label, strlen(lsm_label) + 1) < 0) {
+		INFO(""Set LSM label to: %s."", command);
+	} else if (strcmp(name, ""SELinux"") == 0) {
+		if (write(lsm_labelfd, lsm_label, strlen(lsm_label) + 1) < 0) {
 			SYSERROR(""Unable to set LSM label"");
-			ret = -1;
 			goto out;
 		}
-	}
-	else {
+		INFO(""Set LSM label to: %s."", lsm_label);
+	} else {
 		ERROR(""Unable to restore label for unknown LSM: %s"", name);
-		ret = -1;
 		goto out;
 	}
+	fret = 0;
 
 out:
 	free(command);
 
-	if (labelfd != -1)
-		close(labelfd);
+	if (lsm_labelfd != -1)
+		close(lsm_labelfd);
 
-	return ret;
+	return fret;
 }
 
 static struct lxc_proc_context_info *lxc_proc_get_context_info(pid_t pid)
@@ -646,7 +670,6 @@ struct attach_clone_payload {
 	struct lxc_proc_context_info* init_ctx;
 	lxc_attach_exec_t exec_function;
 	void* exec_payload;
-	int procfd;
 };
 
 static int attach_child_main(void* data);
@@ -744,7 +767,6 @@ int lxc_attach(const char* name, const char* lxcpath, lxc_attach_exec_t exec_fun
 	char* cwd;
 	char* new_cwd;
 	int ipc_sockets[2];
-	int procfd;
 	signed long personality;
 
 	if (!options)
@@ -821,6 +843,11 @@ int lxc_attach(const char* name, const char* lxcpath, lxc_attach_exec_t exec_fun
 	 *        X  <------------------------------------  send 1
 	 *   [add to cgroup, ...]
 	 *    send 2 ------------------------------------>    X
+	 *						[set LXC_ATTACH_NO_NEW_PRIVS]
+	 *        X  <------------------------------------  send 3
+	 *   [open LSM label fd]
+	 *    send 4 ------------------------------------>    X
+	 *   						[set LSM label]
 	 *   close socket                                 close socket
 	 *                                                run program
 	 */
@@ -854,6 +881,7 @@ int lxc_attach(const char* name, const char* lxcpath, lxc_attach_exec_t exec_fun
 	}
 
 	if (pid) {
+		int procfd = -1;
 		pid_t to_cleanup_pid = pid;
 
 		/* initial thread, we close the socket that is for the
@@ -868,6 +896,15 @@ int lxc_attach(const char* name, const char* lxcpath, lxc_attach_exec_t exec_fun
 				goto cleanup_error;
 		}
 
+		/* Open /proc before setns() to the containers namespace so we
+		 * don't rely on any information from inside the container.
+		 */
+		procfd = open(""/proc"", O_DIRECTORY | O_RDONLY | O_CLOEXEC);
+		if (procfd < 0) {
+			SYSERROR(""Unable to open /proc."");
+			goto cleanup_error;
+		}
+
 		/* Let the child process know to go ahead */
 		status = 0;
 		ret = lxc_write_nointr(ipc_sockets[0], &status, sizeof(status));
@@ -911,7 +948,8 @@ int lxc_attach(const char* name, cons",1.0,1.0,1.0,lime
CVE-2016-8649,CVE-2016-8649/82b1f317c8fbf9b81cb68a2c9be8ff36260f8ebc,https://github.com/lxc/lxc/commit/82b1f317c8fbf9b81cb68a2c9be8ff36260f8ebc,"<s>lxc-attach in LXC before 1.0.9 and 2.x before 2.0.6 allows an attacker inside of an unprivileged container to use an inherited file descriptor, of the host's /proc, to access the rest of the host's filesystem via the openat() family of syscalls.</s>","<s>attach: simplify lsm_openat()
Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>
</s>"," diff --git a/src/lxc/attach.c b/src/lxc/attach.c
index 2f095b408..5e89e7d38 100644
--- a/src/lxc/attach.c
+++ b/src/lxc/attach.c
@@ -85,12 +85,13 @@
 
 lxc_log_define(lxc_attach, lxc);
 
+/* /proc/pid-to-str/current\0 = (5 + 21 + 7 + 1) */
+#define __LSMATTRLEN (5 + 21 + 7 + 1)
 static int lsm_openat(int procfd, pid_t pid, int on_exec)
 {
 	int ret = -1;
 	int labelfd = -1;
-	const char* name;
-#define __LSMATTRLEN /* /proc */ (5 + /* /pid-to-str */ 21 + /* /current */ 7 + /* \0 */ 1)
+	const char *name;
 	char path[__LSMATTRLEN];
 
 	name = lsm_name();
@@ -105,20 +106,16 @@ static int lsm_openat(int procfd, pid_t pid, int on_exec)
 	if (strcmp(name, ""AppArmor"") == 0)
 		on_exec = 0;
 
-	if (on_exec) {
+	if (on_exec)
 		ret = snprintf(path, __LSMATTRLEN, ""%d/attr/exec"", pid);
-		if (ret < 0 || ret >= __LSMATTRLEN)
-			return -1;
-		labelfd = openat(procfd, path, O_RDWR);
-	} else {
+	else
 		ret = snprintf(path, __LSMATTRLEN, ""%d/attr/current"", pid);
-		if (ret < 0 || ret >= __LSMATTRLEN)
-			return -1;
-		labelfd = openat(procfd, path, O_RDWR);
-	}
+	if (ret < 0 || ret >= __LSMATTRLEN)
+		return -1;
 
+	labelfd = openat(procfd, path, O_RDWR);
 	if (labelfd < 0) {
-		SYSERROR(""Unable to open LSM label"");
+		SYSERROR(""Unable to open file descriptor to set LSM label."");
 		return -1;
 	}
 
",0.0,1.0,0.0,lime
,,,,,,,,,
CVE-2009-1554,CVE-2009-1554/4da83b4ad98839a0999f9c815544a39ca5565c3d,https://github.com/javaee/woodstock/commit/4da83b4ad98839a0999f9c815544a39ca5565c3d,"<s>Cross-site scripting (XSS) vulnerability in ThemeServlet.java in Sun Woodstock 4.2, as used in Sun GlassFish Enterprise Server and other products, allows remote attackers to inject arbitrary web script or HTML via a UTF-7 string in the PATH_INFO, which is displayed on the 404 error page, as demonstrated by the PATH_INFO to theme/META-INF.</s>","<s>* Re-applying changes that were intended for a woodstock 402 branch, but
  were instead applied to the 402 *tag* (which was created as a branch
  and should not have been).
svn path=/branches/Woodstock_402_Branch/; revision=1524

Former-commit-id: cd03977d6b5d6888cc2477e623002e20a1cd0cb0
</s>"," diff --git a/webui/src/runtime/com/sun/webui/theme/ThemeServlet.java b/webui/src/runtime/com/sun/webui/theme/ThemeServlet.java
index da14f90d..815d3411 100644
--- a/webui/src/runtime/com/sun/webui/theme/ThemeServlet.java
+++ b/webui/src/runtime/com/sun/webui/theme/ThemeServlet.java
@@ -21,7 +21,7 @@
util */
end
 /*
- * $Id: ThemeServlet.java,v 1.1.4.2 2009-08-19 21:37:27 kenpaulsen Exp $
+ * $Id: ThemeServlet.java,v 1.1.4.2.2.1 2009-08-19 23:17:38 kenpaulsen Exp $

 */
 
 package com.sun.webui.theme;
@@ -212,7 +212,8 @@ public class ThemeServlet extends HttpServlet {
 	    // Get InputStream

	    inStream = this.getClass().getResourceAsStream(resourceName);
 	    if (inStream == null) {
-		response.sendError(404, request.getRequestURI());
+		//Send 404 (without the original URI for XSS security reasons)
+		response.sendError(HttpServletResponse.SC_NOT_FOUND);
(		return;
Theme	context),
 }
		Images.D inStream = new BufferedInputStream(inStream, 4096);
Utilities.getIcon(ThemeUtilities.getTheme(context), ThemeImages.DOT);
         icon.setParent(component); 
         icon.setWidth(1);
         icon.setHeight(1);
         icon.setBorder(0);
+        icon.setToolTip(anchorName + "" skip link"");
 
 	buffer.setLength(0);
 	buffer.append(anchorName).append(""_icon""); //NOI18N
",0.0,1.0,0.0,tfidf
CVE-2009-1554,CVE-2009-1554/eb06af2360fceb976f87efdd12c9fcdfa77edf88,https://github.com/javaee/woodstock/commit/eb06af2360fceb976f87efdd12c9fcdfa77edf88,"<s>Cross-site scripting (XSS) vulnerability in ThemeServlet.java in Sun Woodstock 4.2, as used in Sun GlassFish Enterprise Server and other products, allows remote attackers to inject arbitrary web script or HTML via a UTF-7 string in the PATH_INFO, which is displayed on the 404 error page, as demonstrated by the PATH_INFO to theme/META-INF.</s>","<s>Issue number:  6845407
Security fix
svn path=/branches/woodstock_402/; revision=1520

Former-commit-id: f056c50ae5da5d695d9f8e31a40d114c872fe99d
</s>"," diff --git a/webui/src/runtime/com/sun/webui/theme/ThemeServlet.java b/webui/src/runtime/com/sun/webui/theme/ThemeServlet.java
index 5f675d7b..68752752 100644
--- a/webui/src/runtime/com/sun/webui/theme/ThemeServlet.java
+++ b/webui/src/runtime/com/sun/webui/theme/ThemeServlet.java
@@ -21,7 +21,7 @@
  */
 
 /*
- * $Id: ThemeServlet.java,v 1.1 2007-02-16 01:53:45 bob_yennaco Exp $
+ * $Id: ThemeServlet.java,v 1.1.4.1 2009-08-19 07:01:59 kalpanakm Exp $
  */
 
 package com.sun.webui.theme;
@@ -212,7 +212,8 @@ public class ThemeServlet extends HttpServlet {
 	    // Get InputStream
 	    inStream = this.getClass().getResourceAsStream(resourceName);
 	    if (inStream == null) {
-		response.sendError(404, request.getRequestURI());
+		//Send 404 (without the original URI for XSS security reasons)
+		response.sendError(HttpServletResponse.SC_NOT_FOUND);
 		return;
 	    }
 	    inStream = new BufferedInputStream(inStream, 4096);
",1.0,1.0,1.0,tfidf
,,,,,,,,,
CVE-2021-3311,CVE-2021-3311/642f597489e6f644d4bd9a0c267e864cabead024,https://github.com/octobercms/library/commit/642f597489e6f644d4bd9a0c267e864cabead024,"<s>An issue was discovered in October through build 471. It reactivates an old session ID (which had been invalid after a logout) once a new login occurs. NOTE: this violates the intended Auth/Manager.php authentication behavior but, admittedly, is only relevant if an old session ID is known to an attacker.</s>","<s>Invalidate the session ID to prevent reuse
1. Good logs in
2. Bad captures Good's session cookie
3. Good logs out
4. Session cookie no longer works
5. Good logs in a second time
6. ORIGINAL session cookie works (Bad is also signed in)
</s>"," diff --git a/src/Auth/Manager.php b/src/Auth/Manager.php
index 1bb65baf..a8dc26a2 100644
--- a/src/Auth/Manager.php
+++ b/src/Auth/Manager.php
@@ -686,7 +686,7 @@ class Manager implements \Illuminate\Contracts\Auth\StatefulGuard
 
         $this->user = null;
 
-        Session::flush();
+        Session::invalidate();
         Cookie::queue(Cookie::forget($this->sessionKey));
     }
 
",1.0,3.0,1.0,tfidf
CVE-2021-3311,CVE-2021-3311/1fa47b3ab683f1e7a4e9ec3a1d0b484dbe66bde0,https://github.com/octobercms/library/commit/1fa47b3ab683f1e7a4e9ec3a1d0b484dbe66bde0,"<s>An issue was discovered in October through build 471. It reactivates an old session ID (which had been invalid after a logout) once a new login occurs. NOTE: this violates the intended Auth/Manager.php authentication behavior but, admittedly, is only relevant if an old session ID is known to an attacker.</s>","<s>Multiple fixes related to PR #543 (#550)
* return a collection, not an object
* use fully qualified key names to avoid conflicts
* add pivot data test; add timestamps
* override sync() method in order to flush query cache
</s>"," diff --git a/src/Database/Relations/BelongsToMany.php b/src/Database/Relations/BelongsToMany.php
index 373f3fcf..29863be9 100644
--- a/src/Database/Relations/BelongsToMany.php
+++ b/src/Database/Relations/BelongsToMany.php
@@ -88,6 +88,18 @@ class BelongsToMany extends BelongsToManyBase
         return $model;
     }
 
+    /**
+     * Override sync() method of BelongToMany relation in order to flush the query cache.
+     * @param array $ids
+     * @param bool $detaching
+     * @return array
+     */
+    public function sync($ids, $detaching = true)
+    {
+        parent::sync($ids, $detaching);
+        $this->flushDuplicateCache();
+    }
+
     /**
      * Create a new instance of this related model with deferred binding support.
      */
@@ -160,7 +172,7 @@ class BelongsToMany extends BelongsToManyBase
     {
         $attachedIdList = $this->parseIds($ids);
         if (empty($attachedIdList)) {
-            $attachedIdList = $this->allRelatedIds();
+            $attachedIdList = $this->allRelatedIds()->all();
         }
 
         /**
",0.0,3.0,0.0,tfidf
,,,,,,,,,
CVE-2022-23634,CVE-2022-23634/2c7bfd5fa0526dfbe594013bcad765bfd5edd0b1,https://github.com/puma/puma/commit/2c7bfd5fa0526dfbe594013bcad765bfd5edd0b1,"<s>Puma is a Ruby/Rack web server built for parallelism. Prior to `puma` version `5.6.2`, `puma` may not always call `close` on the response body. Rails, prior to version `7.0.2.2`, depended on the response body being closed in order for its `CurrentAttributes` implementation to work correctly. The combination of these two behaviors (Puma not closing the body + Rails' Executor implementation) causes information leakage. This problem is fixed in Puma versions 5.6.2 and 4.3.11. This problem is fixed in Rails versions 7.02.2, 6.1.4.6, 6.0.4.6, and 5.2.6.2. Upgrading to a patched Rails _or_ Puma version fixes the vulnerability.</s>","<s>Drop defunct ""SemVer compliance"" badge (#2814)
Seems like the feature is no longer there. The link 404s. Dependabot is now a feature of GitHub and not its own organisation.
[ci skip]
</s>"," diff --git a/README.md b/README.md
index aaa571a3..b163426f 100644
--- a/README.md
+++ b/README.md
@@ -7,7 +7,6 @@
 [![Actions MRI](https://github.com/puma/puma/workflows/MRI/badge.svg?branch=master)](https://github.com/puma/puma/actions?query=workflow%3AMRI)
 [![Actions non MRI](https://github.com/puma/puma/workflows/non_MRI/badge.svg?branch=master)](https://github.com/puma/puma/actions?query=workflow%3Anon_MRI)
 [![Code Climate](https://codeclimate.com/github/puma/puma.svg)](https://codeclimate.com/github/puma/puma)
-[![SemVer](https://api.dependabot.com/badges/compatibility_score?dependency-name=puma&package-manager=bundler&version-scheme=semver)](https://dependabot.com/compatibility-score.html?dependency-name=puma&package-manager=bundler&version-scheme=semver)
 [![StackOverflow](https://img.shields.io/badge/stackoverflow-Puma-blue.svg)]( https://stackoverflow.com/questions/tagged/puma )
 
 Puma is a **simple, fast, multi-threaded, and highly parallel HTTP 1.1 server for Ruby/Rack applications**.
",0.0,3.0,0.0,lime
CVE-2022-23634,CVE-2022-23634/b70f451fe8abc0cff192c065d549778452e155bb,https://github.com/puma/puma/commit/b70f451fe8abc0cff192c065d549778452e155bb,"<s>Puma is a Ruby/Rack web server built for parallelism. Prior to `puma` version `5.6.2`, `puma` may not always call `close` on the response body. Rails, prior to version `7.0.2.2`, depended on the response body being closed in order for its `CurrentAttributes` implementation to work correctly. The combination of these two behaviors (Puma not closing the body + Rails' Executor implementation) causes information leakage. This problem is fixed in Puma versions 5.6.2 and 4.3.11. This problem is fixed in Rails versions 7.02.2, 6.1.4.6, 6.0.4.6, and 5.2.6.2. Upgrading to a patched Rails _or_ Puma version fixes the vulnerability.</s>","<s>Ensure `close` is called on the response body no matter what
Another fallout from https://github.com/puma/puma/pull/2809 is that
in some cases the `res_body.close` wasn't called because some previous code
raised.
For Rails apps it means CurrentAttributes and a few other important
states aren't reset properly.
This is being improved on the Rails side too, but I believe it would
be good to harden this on the puma side as well.
</s>"," diff --git a/lib/puma/request.rb b/lib/puma/request.rb
index 10508c8d..691ada42 100644
--- a/lib/puma/request.rb
+++ b/lib/puma/request.rb
@@ -171,11 +171,16 @@ module Puma
         end
 
       ensure
-        uncork_socket io
-
-        body.close
-        client.tempfile.unlink if client.tempfile
-        res_body.close if res_body.respond_to? :close
+        begin
+          uncork_socket io
+
+          body.close
+          client.tempfile.unlink if client.tempfile
+        ensure
+          # Whatever happens, we MUST call `close` on the response body.
+          # Otherwise Rack::BodyProxy callbacks may not fire and lead to various state leaks
+          res_body.close if res_body.respond_to? :close
+        end
 
         after_reply.each { |o| o.call }
       end
",1.0,3.0,1.0,lime
,,,,,,,,,
CVE-2014-3544,CVE-2014-3544/0207466e778baebff21c7b72bc688761f9c5b0d9,https://github.com/moodle/moodle/commit/0207466e778baebff21c7b72bc688761f9c5b0d9,"<s>Cross-site scripting (XSS) vulnerability in user/profile.php in Moodle through 2.3.11, 2.4.x before 2.4.11, 2.5.x before 2.5.7, 2.6.x before 2.6.4, and 2.7.x before 2.7.1 allows remote authenticated users to inject arbitrary web script or HTML via the Skype ID profile field.</s>","<s>MDL-45683 user: Escaping Skype ID used in profile
</s>"," diff --git a/user/profile.php b/user/profile.php
index 3ac9b7a2431..291fc131f6f 100644
--- a/user/profile.php
+++ b/user/profile.php
@@ -334,7 +334,7 @@ if ($user->icq && !isset($hiddenfields['icqnumber'])) {
 
 if ($user->skype && !isset($hiddenfields['skypeid'])) {
     $imurl = 'skype:'.urlencode($user->skype).'?call';
-    $iconurl = new moodle_url('http://mystatus.skype.com/smallicon/'.$user->skype);
+    $iconurl = new moodle_url('http://mystatus.skype.com/smallicon/'.urlencode($user->skype));
     if (strpos($CFG->httpswwwroot, 'https:') === 0) {
         // Bad luck, skype devs are lazy to set up SSL on their servers - see MDL-37233.
         $statusicon = '';
",1.0,2.0,1.0,tfidf
CVE-2014-3544,CVE-2014-3544/2ca9e09dab3ff374e1026780b23c63751f4ee312,https://github.com/moodle/moodle/commit/2ca9e09dab3ff374e1026780b23c63751f4ee312,"<s>Cross-site scripting (XSS) vulnerability in user/profile.php in Moodle through 2.3.11, 2.4.x before 2.4.11, 2.5.x before 2.5.7, 2.6.x before 2.6.4, and 2.7.x before 2.7.1 allows remote authenticated users to inject arbitrary web script or HTML via the Skype ID profile field.</s>","<s>MDL-45760 make sure to check permission before setting header
</s>"," diff --git a/user/edit.php b/user/edit.php
index e6282c76d5e..c7f182bbf45 100644
--- a/user/edit.php
+++ b/user/edit.php
@@ -103,16 +103,6 @@ if ($course->id == SITEID) {
 $systemcontext   = context_system::instance();
 $personalcontext = context_user::instance($user->id);
 
-$PAGE->set_pagelayout('admin');
-$PAGE->set_context($personalcontext);
-if ($USER->id != $user->id) {
-    $PAGE->navigation->extend_for_user($user);
-} else {
-    if ($node = $PAGE->navigation->find('myprofile', navigation_node::TYPE_ROOTNODE)) {
-        $node->force_open();
-    }
-}
-
 // Check access control.
 if ($user->id == $USER->id) {
     // Editing own profile - require_login() MUST NOT be used here, it would result in infinite loop!
@@ -140,6 +130,16 @@ if ($user->deleted) {
     die;
 }
 
+$PAGE->set_pagelayout('admin');
+$PAGE->set_context($personalcontext);
+if ($USER->id != $user->id) {
+    $PAGE->navigation->extend_for_user($user);
+} else {
+    if ($node = $PAGE->navigation->find('myprofile', navigation_node::TYPE_ROOTNODE)) {
+        $node->force_open();
+    }
+}
+
 // Process email change cancellation.
 if ($cancelemailchange) {
     cancel_email_update($user->id);
",0.0,2.0,0.0,tfidf
,,,,,,,,,
CVE-2018-1000864,CVE-2018-1000864/73afa0ca786a87f05b5433e2e38f863826fcad17,https://github.com/jenkinsci/jenkins/commit/73afa0ca786a87f05b5433e2e38f863826fcad17,"<s>A denial of service vulnerability exists in Jenkins 2.153 and earlier, LTS 2.138.3 and earlier in CronTab.java that allows attackers with Overall/Read permission to have a request handling thread enter an infinite loop.</s>","<s>[SECURITY-1193]
</s>"," diff --git a/core/src/main/java/hudson/scheduler/CronTab.java b/core/src/main/java/hudson/scheduler/CronTab.java
index 120b8bc2a1..77118499ad 100644
--- a/core/src/main/java/hudson/scheduler/CronTab.java
+++ b/core/src/main/java/hudson/scheduler/CronTab.java
@@ -356,6 +356,14 @@ public final class CronTab {
                     continue OUTER;
                 } else {
                     f.setTo(cal,next);
+                    //check if value was actually set
+                    if (f.valueOf(cal) != next) {
+                        // we need to roll over to the next field.
+                        f.rollUp(cal, 1);
+                        f.setTo(cal,f.first(this));
+                        // since higher order field is affected by this, we need to restart from all over
+                        continue OUTER;
+                    }
                     if (f.redoAdjustmentIfModified)
                         continue OUTER; // when we modify DAY_OF_MONTH and DAY_OF_WEEK, do it all over from the top
                 }
",1.0,3.0,1.0,tfidf
CVE-2018-1000864,CVE-2018-1000864/c19cc705688cfffa4fe735e0edbe84862b6c135f,https://github.com/jenkinsci/jenkins/commit/c19cc705688cfffa4fe735e0edbe84862b6c135f,"<s>A denial of service vulnerability exists in Jenkins 2.153 and earlier, LTS 2.138.3 and earlier in CronTab.java that allows attackers with Overall/Read permission to have a request handling thread enter an infinite loop.</s>","<s>[SECURITY-904]
</s>"," diff --git a/core/src/test/java/jenkins/util/VirtualFileSEC904Test.java b/core/src/test/java/jenkins/util/VirtualFileSEC904Test.java
new file mode 100644
index 0000000000..8b25c1c040
--- /dev/null
+++ b/core/src/test/java/jenkins/util/VirtualFileSEC904Test.java
@@ -0,0 +1,180 @@
+/*
+ * The MIT License
+ *
+ * Copyright 2015 Jesse Glick.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the ""Software""), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+
+package jenkins.util;
+
+import hudson.FilePath;
+import hudson.model.TaskListener;
+import org.apache.commons.io.FileUtils;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.ExpectedException;
+import org.junit.rules.TemporaryFolder;
+import org.jvnet.hudson.test.Issue;
+
+import java.io.File;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
+
+//TODO merge into VirtualFileTest after the security release
+public class VirtualFileSEC904Test {
+    
+    @Rule
+    public TemporaryFolder tmp = new TemporaryFolder();
+    
+    //  root
+    //      /a
+    //          /aa
+    //              /aaa
+    //                  /_b2 => symlink to /root/b
+    //              aa.txt
+    //          /ab
+    //              ab.txt
+    //          /_b => symlink to /root/b
+    //      /b
+    //          /_a => symlink to /root/a
+    //          /ba
+    //              ba.txt
+    private void prepareFileStructureForIsDescendant() throws Exception {
+        File root = tmp.getRoot();
+        File a = new File(root, ""a"");
+        File aa = new File(a, ""aa"");
+        File aaa = new File(aa, ""aaa"");
+        aaa.mkdirs();
+        File aaTxt = new File(aa, ""aa.txt"");
+        FileUtils.write(aaTxt, ""aa"");
+        
+        File ab = new File(a, ""ab"");
+        ab.mkdirs();
+        File abTxt = new File(ab, ""ab.txt"");
+        FileUtils.write(abTxt, ""ab"");
+        
+        File b = new File(root, ""b"");
+        
+        File ba = new File(b, ""ba"");
+        ba.mkdirs();
+        File baTxt = new File(ba, ""ba.txt"");
+        FileUtils.write(baTxt, ""ba"");
+        
+        File _a = new File(b, ""_a"");
+        new FilePath(_a).symlinkTo(a.getAbsolutePath(), TaskListener.NULL);
+        
+        File _b = new File(a, ""_b"");
+        new FilePath(_b).symlinkTo(b.getAbsolutePath(), TaskListener.NULL);
+        File _b2 = new File(aaa, ""_b2"");
+        new FilePath(_b2).symlinkTo(b.getAbsolutePath(), TaskListener.NULL);
+    }
+    
+    @Issue(""SECURITY-904"")
+    @Test public void forFile_isDescendant() throws Exception {
+        this.prepareFileStructureForIsDescendant();
+        
+        File root = tmp.getRoot();
+        File a = new File(root, ""a"");
+        File aa = new File(a, ""aa"");
+        VirtualFile virtualRoot = VirtualFile.forFile(root);
+        // keep the root information for isDescendant
+        VirtualFile virtualRootChildA = virtualRoot.child(""a"");
+        VirtualFile virtualFromA = VirtualFile.forFile(a);
+        
+        checkCommonAssertionForIsDescendant(virtualRoot, virtualRootChildA, virtualFromA, aa.getAbsolutePath());
+    }
+    
+    @Test
+    @Issue(""SECURITY-904"")
+    public void forFilePath_isDescendant() throws Exception {
+        this.prepareFileStructureForIsDescendant();
+        
+        File root = tmp.getRoot();
+        File a = new File(root, ""a"");
+        File aa = new File(a, ""aa"");
+        VirtualFile virtualRoot = VirtualFile.forFilePath(new FilePath(root));
+        // keep the root information for isDescendant
+        VirtualFile virtualRootChildA = virtualRoot.child(""a"");
+        VirtualFile virtualFromA = VirtualFile.forFilePath(new FilePath(a));
+        
+        checkCommonAssertionForIsDescendant(virtualRoot, virtualRootChildA, virtualFromA, aa.getAbsolutePath());
+    }
+    
+    private void checkCommonAssertionForIsDescendant(VirtualFile virtualRoot, VirtualFile virtualRootChildA, VirtualFile virtualFromA, String absolutePath) throws Exception {
+        try {
+            virtualRootChildA.isDescendant(absolutePath);
+            fail(""isDe",0.0,3.0,0.0,tfidf
,,,,,,,,,
CVE-2019-1010296,CVE-2019-1010296/0b107f4c8908cd04318ed4bccac0b3ecbeae587e,https://github.com/OP-TEE/optee_os/commit/0b107f4c8908cd04318ed4bccac0b3ecbeae587e,<s>Linaro/OP-TEE OP-TEE 3.3.0 and earlier is affected by: Buffer Overflow. The impact is: Code execution in context of TEE core (kernel). The component is: optee_os. The fixed version is: 3.4.0 and later.</s>,"<s>core: arm64: pager: make sure __thread_enter_user_mode is unpaged
__thread_enter_user_mode() cannot be paged out, because the pager cannot
be invoked to restore any faulting code page after SP has been switched to
use SP_EL1. At this point, a synchronous exception would take the CPU to
the 0x200 offset in the exception vector, which corresponds to
[workaround_]el1_sync_sp1 and is an error-catching infinite loop. This
explains the behavior described in [1].
Add the requisite KEEP_PAGER so that the function is kept in the unpaged
area.
Fixes: [1] https://github.com/OP-TEE/optee_os/issues/2684
Signed-off-by: Jerome Forissier <jerome.forissier@linaro.org>
Reviewed-by: Joakim Bech <joakim.bech@linaro.org>
Reviewed-by: Jens Wiklander <jens.wiklander@linaro.org>
</s>"," diff --git a/core/arch/arm/kernel/thread_a64.S b/core/arch/arm/kernel/thread_a64.S
index c9e284f72..c38f280d6 100644
--- a/core/arch/arm/kernel/thread_a64.S
+++ b/core/arch/arm/kernel/thread_a64.S
@@ -317,6 +317,7 @@ FUNC __thread_enter_user_mode , :
 	store_xregs sp, THREAD_CORE_LOCAL_X0, 0, 1
 	b eret_to_el0
 END_FUNC __thread_enter_user_mode
+KEEP_PAGER __thread_enter_user_mode
 
 /*
  * void thread_unwind_user_mode(uint32_t ret, uint32_t exit_status0,
",0.0,3.0,0.0,tfidf
CVE-2019-1010296,CVE-2019-1010296/b60e1cee406a1ff521145ab9534370dfb85dd592,https://github.com/OP-TEE/optee_os/commit/b60e1cee406a1ff521145ab9534370dfb85dd592,<s>Linaro/OP-TEE OP-TEE 3.3.0 and earlier is affected by: Buffer Overflow. The impact is: Code execution in context of TEE core (kernel). The component is: optee_os. The fixed version is: 3.4.0 and later.</s>,"<s>svc: check for allocation overflow in syscall_cryp_obj_populate
Without checking for overflow there is a risk of allocating a buffer
with size smaller than anticipated and as a consequence of that it might
lead to a heap based overflow with attacker controlled data written
outside the boundaries of the buffer.
Fixes: OP-TEE-2018-0009: ""Integer overflow in crypto system calls""
Signed-off-by: Joakim Bech <joakim.bech@linaro.org>
Tested-by: Joakim Bech <joakim.bech@linaro.org> (QEMU v7, v8)
Reviewed-by: Jens Wiklander <jens.wiklander@linaro.org>
Reported-by: Riscure <inforequest@riscure.com>
Reported-by: Alyssa Milburn <a.a.milburn@vu.nl>
Acked-by: Etienne Carriere <etienne.carriere@linaro.org>
</s>"," diff --git a/core/tee/tee_svc_cryp.c b/core/tee/tee_svc_cryp.c
index b47a45dda..6fac66610 100644
--- a/core/tee/tee_svc_cryp.c
+++ b/core/tee/tee_svc_cryp.c
@@ -4,6 +4,7 @@
  */
 
 #include <assert.h>
+#include <compiler.h>
 #include <crypto/crypto.h>
 #include <kernel/tee_ta_manager.h>
 #include <mm/tee_mmu.h>
@@ -1547,9 +1548,15 @@ TEE_Result syscall_cryp_obj_populate(unsigned long obj,
 	if (!type_props)
 		return TEE_ERROR_NOT_IMPLEMENTED;
 
-	attrs = malloc(sizeof(TEE_Attribute) * attr_count);
+	size_t alloc_size = 0;
+
+	if (MUL_OVERFLOW(sizeof(TEE_Attribute), attr_count, &alloc_size))
+		return TEE_ERROR_OVERFLOW;
+
+	attrs = malloc(alloc_size);
 	if (!attrs)
 		return TEE_ERROR_OUT_OF_MEMORY;
+
 	res = copy_in_attrs(to_user_ta_ctx(sess->ctx), usr_attrs, attr_count,
 			    attrs);
 	if (res != TEE_SUCCESS)
",1.0,3.0,1.0,tfidf
,,,,,,,,,
CVE-2016-4302,CVE-2016-4302/603454ec03040c29bd051fcc749e3c1433c11a8e,https://github.com/libarchive/libarchive/commit/603454ec03040c29bd051fcc749e3c1433c11a8e,<s>Heap-based buffer overflow in the parse_codes function in archive_read_support_format_rar.c in libarchive before 3.2.1 allows remote attackers to execute arbitrary code via a RAR file with a zero-sized dictionary.</s>,"<s>Issue 521:  Properly check reading from lzss decompression buffer
Prior code could be tricked into trying to copy data
from beyond the end of the internal decompression buffer.
Thanks to Hanno Böck for his ongoing fuzz-testing work with libarchive.
</s>"," diff --git a/libarchive/archive_read_support_format_rar.c b/libarchive/archive_read_support_format_rar.c
index 6c49f1a1..f729f173 100644
--- a/libarchive/archive_read_support_format_rar.c
+++ b/libarchive/archive_read_support_format_rar.c
@@ -2890,11 +2890,10 @@ copy_from_lzss_window(struct archive_read *a, const void **buffer,
   }
 
   windowoffs = lzss_offset_for_position(&rar->lzss, startpos);
-  if(windowoffs + length <= lzss_size(&rar->lzss))
+  if(windowoffs + length <= lzss_size(&rar->lzss)) {
     memcpy(&rar->unp_buffer[rar->unp_offset], &rar->lzss.window[windowoffs],
            length);
-  else
-  {
+  } else if (length <= lzss_size(&rar->lzss)) {
     firstpart = lzss_size(&rar->lzss) - windowoffs;
     if (firstpart < 0) {
       archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
@@ -2906,9 +2905,14 @@ copy_from_lzss_window(struct archive_read *a, const void **buffer,
              &rar->lzss.window[windowoffs], firstpart);
       memcpy(&rar->unp_buffer[rar->unp_offset + firstpart],
              &rar->lzss.window[0], length - firstpart);
-    } else
+    } else {
       memcpy(&rar->unp_buffer[rar->unp_offset],
              &rar->lzss.window[windowoffs], length);
+    }
+  } else {
+      archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
+                        ""Bad RAR file data"");
+      return (ARCHIVE_FATAL);
   }
   rar->unp_offset += length;
   if (rar->unp_offset >= rar->unp_buffer_size)
",0.0,3.0,0.0,tfidf
CVE-2016-4302,CVE-2016-4302/05caadc7eedbef471ac9610809ba683f0c698700,https://github.com/libarchive/libarchive/commit/05caadc7eedbef471ac9610809ba683f0c698700,<s>Heap-based buffer overflow in the parse_codes function in archive_read_support_format_rar.c in libarchive before 3.2.1 allows remote attackers to execute arbitrary code via a RAR file with a zero-sized dictionary.</s>,"<s>Issue 719:  Fix for TALOS-CAN-154
A RAR file with an invalid zero dictionary size was not being
rejected, leading to a zero-sized allocation for the dictionary
storage which was then overwritten during the dictionary initialization.
Thanks to the Open Source and Threat Intelligence project at Cisco for
reporting this.
</s>"," diff --git a/libarchive/archive_read_support_format_rar.c b/libarchive/archive_read_support_format_rar.c
index 6450aac8..6c49f1a1 100644
--- a/libarchive/archive_read_support_format_rar.c
+++ b/libarchive/archive_read_support_format_rar.c
@@ -2127,6 +2127,12 @@ parse_codes(struct archive_read *a)
       rar->range_dec.Stream = &rar->bytein;
       __archive_ppmd7_functions.Ppmd7_Construct(&rar->ppmd7_context);
 
+      if (rar->dictionary_size == 0) {
+	      archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
+                          ""Invalid zero dictionary size"");
+	      return (ARCHIVE_FATAL);
+      }
+
       if (!__archive_ppmd7_functions.Ppmd7_Alloc(&rar->ppmd7_context,
         rar->dictionary_size, &g_szalloc))
       {
",1.0,3.0,1.0,tfidf
,,,,,,,,,
CVE-2021-23437,CVE-2021-23437/8450366be331762ae327036e3c6658c517b05638,https://github.com/python-pillow/Pillow/commit/8450366be331762ae327036e3c6658c517b05638,<s>The package pillow 5.2.0 and before 8.3.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the getrgb function.</s>,"<s>Update release notes
</s>"," diff --git a/docs/releasenotes/8.3.2.rst b/docs/releasenotes/8.3.2.rst
index 0a795957e..6b5c759fc 100644
--- a/docs/releasenotes/8.3.2.rst
+++ b/docs/releasenotes/8.3.2.rst
@@ -1,6 +1,18 @@
 8.3.2
 -----
 
+Security
+========
+
+* :cve:`CVE-2021-23437`: Avoid a potential ReDoS (regular expression denial of service)
+  in :py:class:`~PIL.ImageColor`'s :py:meth:`~PIL.ImageColor.getrgb` by raising
+  :py:exc:`ValueError` if the color specifier is too long. Present since Pillow 5.2.0.
+
+* Fix 6-byte out-of-bounds (OOB) read. The previous bounds check in ``FliDecode.c``
+  incorrectly calculated the required read buffer size when copying a chunk, potentially
+  reading six extra bytes off the end of the allocated buffer from the heap. Present
+  since Pillow 7.1.0. This bug was found by Google's `OSS-Fuzz`_ `CIFuzz`_ runs.
+
 Other Changes
 =============
 
@@ -24,4 +36,6 @@ Fixed regressions
 
 * Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library (:pr:`5651`).
 
+.. _OSS-Fuzz: https://github.com/google/oss-fuzz
+.. _CIFuzz: https://google.github.io/oss-fuzz/getting-started/continuous-integration/
 .. _no ABI changes: https://www.python.org/downloads/release/python-3100rc1/
",0.0,1.0,0.0,tfidf
CVE-2021-23437,CVE-2021-23437/9e08eb8f78fdfd2f476e1b20b7cf38683754866b,https://github.com/python-pillow/Pillow/commit/9e08eb8f78fdfd2f476e1b20b7cf38683754866b,<s>The package pillow 5.2.0 and before 8.3.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the getrgb function.</s>,"<s>Raise ValueError if color specifier is too long
</s>"," diff --git a/src/PIL/ImageColor.py b/src/PIL/ImageColor.py
index 51df44040..25f92f2c7 100644
--- a/src/PIL/ImageColor.py
+++ b/src/PIL/ImageColor.py
@@ -32,6 +32,8 @@ def getrgb(color):
     :param color: A color string
     :return: ``(red, green, blue[, alpha])``
     """"""
+    if len(color) > 100:
+        raise ValueError(""color specifier is too long"")
     color = color.lower()
 
     rgb = colormap.get(color, None)
",1.0,1.0,1.0,tfidf
,,,,,,,,,
CVE-2021-45937,CVE-2021-45937/de15f15b94f08c9c632574fb7b82bad4a839f22a,https://github.com/wolfSSL/wolfMQTT/commit/de15f15b94f08c9c632574fb7b82bad4a839f22a,<s>wolfSSL wolfMQTT 1.9 has a heap-based buffer overflow in MqttClient_DecodePacket (called from MqttClient_WaitType and MqttClient_Connect).</s>,"<s>Fix clear union in MqttClient_WaitType
</s>"," diff --git a/src/mqtt_client.c b/src/mqtt_client.c
index 8667911..f16f5c6 100644
--- a/src/mqtt_client.c
+++ b/src/mqtt_client.c
@@ -278,7 +278,7 @@ static int MqttClient_RespList_Find(MqttClient *client,
 #endif /* WOLFMQTT_MULTITHREAD */
 
 #ifdef WOLFMQTT_V5
-static int Handle_Props(MqttProp* props)
+static int Handle_Props(MqttClient* client, MqttProp* props)
 {
     int rc = MQTT_CODE_SUCCESS;
 
@@ -286,7 +286,7 @@ static int Handle_Props(MqttProp* props)
     if (props != NULL) {
     #ifdef WOLFMQTT_PROPERTY_CB
         /* Check for properties set by the server */
-        if (packet_obj && client->property_cb) {
+        if (client->property_cb != NULL) {
             /* capture error if returned */
             int rc_err = client->property_cb(client, props,
                     client->property_ctx);
@@ -360,7 +360,7 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
             rc = MqttDecode_ConnectAck(rx_buf, rx_len, p_connect_ack);
         #ifdef WOLFMQTT_V5
             if (rc >= 0) {
-                rc = Handle_Props(p_connect_ack->props);
+                rc = Handle_Props(client, p_connect_ack->props);
             }
         #endif
             break;
@@ -381,7 +381,7 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
             if (rc >= 0) {
                 packet_id = p_publish->packet_id;
             #ifdef WOLFMQTT_V5
-                rc = Handle_Props(p_publish->props);
+                rc = Handle_Props(client, p_publish->props);
             #endif
             }
             break;
@@ -406,7 +406,7 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
             if (rc >= 0) {
                 packet_id = p_publish_resp->packet_id;
             #ifdef WOLFMQTT_V5
-                rc = Handle_Props(p_publish_resp->props);
+                rc = Handle_Props(client, p_publish_resp->props);
             #endif
             }
             break;
@@ -427,7 +427,7 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
             if (rc >= 0) {
                 packet_id = p_subscribe_ack->packet_id;
             #ifdef WOLFMQTT_V5
-                rc = Handle_Props(p_subscribe_ack->props);
+                rc = Handle_Props(client, p_subscribe_ack->props);
             #endif
             }
             break;
@@ -449,7 +449,7 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
             if (rc >= 0) {
                 packet_id = p_unsubscribe_ack->packet_id;
             #ifdef WOLFMQTT_V5
-                rc = Handle_Props(p_unsubscribe_ack->props);
+                rc = Handle_Props(client, p_unsubscribe_ack->props);
             #endif
             }
             break;
@@ -478,7 +478,7 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
             }
             rc = MqttDecode_Auth(rx_buf, rx_len, p_auth);
             if (rc >= 0) {
-                rc = Handle_Props(p_auth->props);
+                rc = Handle_Props(client, p_auth->props);
             }
         #else
             rc = MQTT_CODE_ERROR_PACKET_TYPE;
@@ -497,7 +497,7 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
             }
             rc = MqttDecode_Disconnect(rx_buf, rx_len, p_disc);
             if (rc >= 0) {
-                rc = Handle_Props(p_disc->props);
+                rc = Handle_Props(client, p_disc->props);
             }
         #else
             rc = MQTT_CODE_ERROR_PACKET_TYPE;
@@ -957,6 +957,11 @@ wait_again:
             }
         #endif
 
+            /* Clear shared union for next call */
+            if ((MqttObject*)use_packet_obj == &client->msg) {
+                XMEMSET(&client->msg, 0, sizeof(client->msg));
+            }
+
             /* handle success case */
             if (rc >= 0) {
                 rc = MQTT_CODE_SUCCESS;
@@ -2141,19 +2146,11 @@ int MqttClient_WaitMessage_ex(MqttClient *client, MqttObject* msg,
     return MqttClient_WaitType(client, msg, MQTT_PACKET_TYPE_ANY, 0,
         timeout_ms);
 }
-
 int MqttClient_WaitMessage(MqttClient *client, int timeout_ms)
 {
-    int rc = MQTT_CODE_ERROR_BAD_ARG;
-    if (client != NULL) {
-        rc = MqttClient_WaitMessage_ex(client, &client->msg, timeout_ms);
-        if (rc != MQTT_CODE_CONTINUE) {
-            /* Clear the union for the next call to MqttClient_WaitMessage */
-            XMEMSET(&client->msg, 0, sizeof(MqttObject));
-        }
-    }
-
-    return rc;
+    if (client == NULL)
+        return MQTT_CODE_ERROR_BAD_ARG;
+    return MqttClient_WaitMessage_ex(client, &client->msg, timeout_ms);
 }
 
 int MqttClient_NetConnect(MqttClient *client, const char* host,
",1.0,3.0,0.0,tfidf
CVE-2021-45937,CVE-2021-45937/84d4b53122e0fa0280c7872350b89d5777dabbb2,https://github.com/wolfSSL/wolfMQTT/commit/84d4b53122e0fa0280c7872350b89d5777dabbb2,<s>wolfSSL wolfMQTT 1.9 has a heap-based buffer overflow in MqttClient_DecodePacket (called from MqttClient_WaitType and MqttClient_Connect).</s>,"<s>Fix wolfmqtt-fuzzer: Null-dereference WRITE in MqttProps_Free
</s>"," diff --git a/src/mqtt_client.c b/src/mqtt_client.c
index d06fac6..d392cc5 100644
--- a/src/mqtt_client.c
+++ b/src/mqtt_client.c
@@ -906,8 +906,9 @@ wait_again:
             /* Determine if we received data for this request */
             if ((wait_type == MQTT_PACKET_TYPE_ANY ||
                  wait_type == packet_type ||
-                 MqttIsPubRespPacket(packet_type) == MqttIsPubRespPacket(wait_type)) &&
-               (wait_packet_id == 0 || wait_packet_id == packet_id))
+                 (MqttIsPubRespPacket(packet_type) &&
+                  MqttIsPubRespPacket(wait_type))) &&
+                (wait_packet_id == 0 || wait_packet_id == packet_id))
             {
                 use_packet_obj = packet_obj;
                 waitMatchFound = 1;
",0.0,3.0,1.0,tfidf
,,,,,,,,,
CVE-2020-13765,CVE-2020-13765/4f1c6cb2f9afafda05eab150fd2bd284edce6676,https://github.com/qemu/qemu/commit/4f1c6cb2f9afafda05eab150fd2bd284edce6676,"<s>rom_copy() in hw/core/loader.c in QEMU 4.0 and 4.1.0 does not validate the relationship between two addresses, which allows attackers to trigger an invalid memory copy operation.</s>","<s>hw/core/loader: Fix possible crash in rom_copy()
Both, ""rom->addr"" and ""addr"" are derived from the binary image
that can be loaded with the ""-kernel"" paramer. The code in
rom_copy() then calculates:
    d = dest + (rom->addr - addr);
and uses ""d"" as destination in a memcpy() some lines later. Now with
bad kernel images, it is possible that rom->addr is smaller than addr,
thus ""rom->addr - addr"" gets negative and the memcpy() then tries to
copy contents from the image to a bad memory location. This could
maybe be used to inject code from a kernel image into the QEMU binary,
so we better fix it with an additional sanity check here.
Cc: qemu-stable@nongnu.org
Reported-by: Guangming Liu
Buglink: https://bugs.launchpad.net/qemu/+bug/1844635
Message-Id: <20190925130331.27825-1-thuth@redhat.com>
Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
Signed-off-by: Thomas Huth <thuth@redhat.com>
(cherry picked from commit e423455c4f23a1a828901c78fe6d03b7dde79319)
Signed-off-by: Michael Roth <mdroth@linux.vnet.ibm.com>
</s>"," diff --git a/hw/core/loader.c b/hw/core/loader.c
index fe5cb24122..4ef2095247 100644
--- a/hw/core/loader.c
+++ b/hw/core/loader.c
@@ -1240,7 +1240,7 @@ int rom_copy(uint8_t *dest, hwaddr addr, size_t size)
         if (rom->addr + rom->romsize < addr) {
             continue;
         }
-        if (rom->addr > end) {
+        if (rom->addr > end || rom->addr < addr) {
             break;
         }
 
",1.0,3.0,1.0,lime
CVE-2020-13765,CVE-2020-13765/c430d7684e0afc1c07bbc844a90e39311783b469,https://github.com/qemu/qemu/commit/c430d7684e0afc1c07bbc844a90e39311783b469,"<s>rom_copy() in hw/core/loader.c in QEMU 4.0 and 4.1.0 does not validate the relationship between two addresses, which allows attackers to trigger an invalid memory copy operation.</s>","<s>iotests: Test backup job with two guest writes
Perform two guest writes to not yet backed up areas of an image, where
the former touches an inner area of the latter.
Before HEAD^, copy offloading broke this in two ways:
(1) The target image differs from the reference image (what the source
    was when the backup started).
(2) But you will not see that in the failing output, because the job
    offset is reported as being greater than the job length.  This is
    because one cluster is copied twice, and thus accounted for twice,
    but of course the job length does not increase.
Signed-off-by: Max Reitz <mreitz@redhat.com>
Message-id: 20190801173900.23851-3-mreitz@redhat.com
Reviewed-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Tested-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Signed-off-by: Max Reitz <mreitz@redhat.com>
(cherry picked from commit 5f594a2e99f19ca0f7744d333bcd556f5976b78f)
Signed-off-by: Michael Roth <mdroth@linux.vnet.ibm.com>
</s>"," diff --git a/tests/qemu-iotests/056 b/tests/qemu-iotests/056
index 3df323984d..e5ac25127b 100755
--- a/tests/qemu-iotests/056
+++ b/tests/qemu-iotests/056
@@ -133,6 +133,7 @@ class BackupTest(iotests.QMPTestCase):
         self.vm = iotests.VM()
         self.test_img = img_create('test')
         self.dest_img = img_create('dest')
+        self.ref_img = img_create('ref')
         self.vm.add_drive(self.test_img)
         self.vm.launch()
 
@@ -140,6 +141,7 @@ class BackupTest(iotests.QMPTestCase):
         self.vm.shutdown()
         try_remove(self.test_img)
         try_remove(self.dest_img)
+        try_remove(self.ref_img)
 
     def hmp_io_writes(self, drive, patterns):
         for pattern in patterns:
@@ -177,6 +179,43 @@ class BackupTest(iotests.QMPTestCase):
             self.assert_qmp(event, 'data/error', qerror)
             return False
 
+    def test_overlapping_writes(self):
+        # Write something to back up
+        self.hmp_io_writes('drive0', [('42', '0M', '2M')])
+
+        # Create a reference backup
+        self.qmp_backup_and_wait(device='drive0', format=iotests.imgfmt,
+                                 sync='full', target=self.ref_img,
+                                 auto_dismiss=False)
+        res = self.vm.qmp('block-job-dismiss', id='drive0')
+        self.assert_qmp(res, 'return', {})
+
+        # Now to the test backup: We simulate the following guest
+        # writes:
+        # (1) [1M + 64k, 1M + 128k): Afterwards, everything in that
+        #     area should be in the target image, and we must not copy
+        #     it again (because the source image has changed now)
+        #     (64k is the job's cluster size)
+        # (2) [1M, 2M): The backup job must not get overeager.  It
+        #     must copy [1M, 1M + 64k) and [1M + 128k, 2M) separately,
+        #     but not the area in between.
+
+        self.qmp_backup(device='drive0', format=iotests.imgfmt, sync='full',
+                        target=self.dest_img, speed=1, auto_dismiss=False)
+
+        self.hmp_io_writes('drive0', [('23', '%ik' % (1024 + 64), '64k'),
+                                      ('66', '1M', '1M')])
+
+        # Let the job complete
+        res = self.vm.qmp('block-job-set-speed', device='drive0', speed=0)
+        self.assert_qmp(res, 'return', {})
+        self.qmp_backup_wait('drive0')
+        res = self.vm.qmp('block-job-dismiss', id='drive0')
+        self.assert_qmp(res, 'return', {})
+
+        self.assertTrue(iotests.compare_images(self.ref_img, self.dest_img),
+                        'target image does not match reference image')
+
     def test_dismiss_false(self):
         res = self.vm.qmp('query-block-jobs')
         self.assert_qmp(res, 'return', [])
",0.0,3.0,0.0,lime
,,,,,,,,,
CVE-2018-1000074,CVE-2018-1000074/254e3d0ee873c008c0b74e8b8abcbdab4caa0a6d,https://github.com/rubygems/rubygems/commit/254e3d0ee873c008c0b74e8b8abcbdab4caa0a6d,"<s>RubyGems version Ruby 2.2 series: 2.2.9 and earlier, Ruby 2.3 series: 2.3.6 and earlier, Ruby 2.4 series: 2.4.3 and earlier, Ruby 2.5 series: 2.5.0 and earlier, prior to trunk revision 62422 contains a Deserialization of Untrusted Data vulnerability in owner command that can result in code execution. This attack appear to be exploitable via victim must run the `gem owner` command on a gem with a specially crafted YAML file. This vulnerability appears to have been fixed in 2.7.6.</s>","<s>Fix possible Unsafe Object Deserialization Vulnerability in gem owner
</s>"," diff --git a/test/rubygems/test_gem_commands_owner_command.rb b/test/rubygems/test_gem_commands_owner_command.rb
index 44652c1093..05230772d9 100644
--- a/test/rubygems/test_gem_commands_owner_command.rb
+++ b/test/rubygems/test_gem_commands_owner_command.rb
@@ -2,6 +2,9 @@
 require 'rubygems/test_case'
 require 'rubygems/commands/owner_command'
 
+class Foo
+end
+
 class TestGemCommandsOwnerCommand < Gem::TestCase
 
   def setup
@@ -43,6 +46,31 @@ def test_show_owners
     assert_match %r{- 4}, @ui.output
   end
 
+  def test_show_owners_dont_load_objects
+    skip ""testing a psych-only API"" unless defined?(::Psych::DisallowedClass)
+
+    response = <<EOF
+---
+- email: !ruby/object:Foo {}
+  id: 1
+  handle: user1
+- email: user2@example.com
+- id: 3
+  handle: user3
+- id: 4
+EOF
+
+    @fetcher.data[""#{Gem.host}/api/v1/gems/freewill/owners.yaml""] = [response, 200, 'OK']
+
+    assert_raises Psych::DisallowedClass do
+      use_ui @ui do
+        @cmd.show_owners(""freewill"")
+      end
+    end
+
+  end
+
+
   def test_show_owners_setting_up_host_through_env_var
     response = ""- email: user1@example.com\n""
     host = ""http://rubygems.example""
",1.0,3.0,1.0,lime
CVE-2018-1000074,CVE-2018-1000074/f5042b879259b1f1ce95a0c5082622c646376693,https://github.com/rubygems/rubygems/commit/f5042b879259b1f1ce95a0c5082622c646376693,"<s>RubyGems version Ruby 2.2 series: 2.2.9 and earlier, Ruby 2.3 series: 2.3.6 and earlier, Ruby 2.4 series: 2.4.3 and earlier, Ruby 2.5 series: 2.5.0 and earlier, prior to trunk revision 62422 contains a Deserialization of Untrusted Data vulnerability in owner command that can result in code execution. This attack appear to be exploitable via victim must run the `gem owner` command on a gem with a specially crafted YAML file. This vulnerability appears to have been fixed in 2.7.6.</s>","<s>Raise a security error when there are duplicate files in a package
This is a rudimentary fix for an issue where RubyGems would allow a
mis-signed gem to be installed, as the tarball would contain multiple
gem signatures.
Nothing should give us a tarball with multiple entries, so we'll just
disallow that.
</s>"," diff --git a/lib/rubygems/package.rb b/lib/rubygems/package.rb
index 9d78544f92..dede959981 100644
--- a/lib/rubygems/package.rb
+++ b/lib/rubygems/package.rb
@@ -603,6 +603,10 @@ def verify_files gem
       raise Gem::Package::FormatError.new \
               'package content (data.tar.gz) is missing', @gem
     end
+
+    if duplicates = @files.group_by {|f| f }.select {|k,v| v.size > 1 }.map(&:first) and duplicates.any?
+      raise Gem::Security::Exception, ""duplicate files in the package: (#{duplicates.map(&:inspect).join(', ')})""
+    end
   end
 
   ##
",0.0,3.0,0.0,lime
,,,,,,,,,
CVE-2019-14750,CVE-2019-14750/c3ba5b78261e07a883ad8fac28c214486c854e12,https://github.com/osTicket/osTicket/commit/c3ba5b78261e07a883ad8fac28c214486c854e12,<s>An issue was discovered in osTicket before 1.10.7 and 1.12.x before 1.12.1. Stored XSS exists in setup/install.php. It was observed that no input sanitization was provided in the firstname and lastname fields of the application. The insertion of malicious queries in those fields leads to the execution of those queries. This can further lead to cookie stealing or other malicious actions.</s>,"<s>xss: Install Form
This addresses an issue reported by Aishwarya Iyer where inserting `<img src
=x onerror = prompt(1)` into any text field on the install form will execute
in the browser after the system is installed and you log in. This is due to
us not sanitizing the content before its saved in the database. This adds
`Format::htmlchars()` to the installer to ensure the text field data is
sanitized properly.
</s>"," diff --git a/setup/inc/class.installer.php b/setup/inc/class.installer.php
index 1a198325..8d10bd4f 100644
--- a/setup/inc/class.installer.php
+++ b/setup/inc/class.installer.php
@@ -188,8 +188,8 @@ class Installer extends SetupWizard {
             'dept_id' => $dept_id,
             'role_id' => $role_id,
             'email' => $vars['admin_email'],
-            'firstname' => $vars['fname'],
-            'lastname' => $vars['lname'],
+            'firstname' => Format::htmlchars($vars['fname']),
+            'lastname' => Format::htmlchars($vars['lname']),
             'username' => $vars['username'],
         ));
         $staff->updatePerms(array(
",1.0,2.0,1.0,lime
CVE-2019-14750,CVE-2019-14750/99818486c5b1d8aa445cee232825418d6834f249,https://github.com/osTicket/osTicket/commit/99818486c5b1d8aa445cee232825418d6834f249,<s>An issue was discovered in osTicket before 1.10.7 and 1.12.x before 1.12.1. Stored XSS exists in setup/install.php. It was observed that no input sanitization was provided in the firstname and lastname fields of the application. The insertion of malicious queries in those fields leads to the execution of those queries. This can further lead to cookie stealing or other malicious actions.</s>,"<s>security: CSV Formula Injection
This addresses a security issue discovered by Aishwarya Iyer where a User
can change their Full Name to a windows formula and when an Agent exports a
list of Users containing said User and opens the export file, the formula
will be executed on their computer (if it's windows of course). This adds a
new validator called `is_formula()` to all text fields disallowing the use
of the following characters `= + - @` at the beginning of text. This should
mitigate CSV Formula injections for any text field that allows user-input in
the system. To further prevent CSV Formula injections this adds an escape
mechanism to the Exporter that will escape any content matching the formula
regex with a single quote (as mentioned in many posts about this subject).
</s>"," diff --git a/include/class.forms.php b/include/class.forms.php
index e806d00b..122d2602 100644
--- a/include/class.forms.php
+++ b/include/class.forms.php
@@ -1300,7 +1300,8 @@ class TextboxField extends FormField {
         parent::validateEntry($value);
         $config = $this->getConfiguration();
         $validators = array(
-            '' =>       null,
+            '' =>       array(array('Validator', 'is_formula'),
+                __('Content cannot start with the following characters: = - + @')),
             'email' =>  array(array('Validator', 'is_valid_email'),
                 __('Enter a valid email address')),
             'phone' =>  array(array('Validator', 'is_phone'),
@@ -1379,6 +1380,29 @@ class TextareaField extends FormField {
         );
     }
 
+    function validateEntry($value) {
+        parent::validateEntry($value);
+        if (!$value)
+            return;
+        $config = $this->getConfiguration();
+        $validators = array(
+            '' =>       array(array('Validator', 'is_formula'),
+                __('Content cannot start with the following characters: = - + @')),
+        );
+        // Support configuration forms, as well as GUI-based form fields
+        if (!($valid = $this->get('validator')) && isset($config['validator']))
+            $valid = $config['validator'];
+        if (!isset($validators[$valid]))
+            return;
+        $func = $validators[$valid];
+        $error = $func[1];
+        if ($config['validator-error'])
+            $error = $this->getLocal('validator-error', $config['validator-error']);
+        if (is_array($func) && is_callable($func[0]))
+            if (!call_user_func($func[0], $value))
+                $this->_errors[] = $error;
+    }
+
     function hasSpecialSearch() {
         return false;
     }
",0.0,2.0,0.0,lime
,,,,,,,,,
CVE-2014-3587,CVE-2014-3587/d8f3124da77d405c4c71d13f26ebe3dfc586c0e6,https://github.com/file/file/commit/d8f3124da77d405c4c71d13f26ebe3dfc586c0e6,"<s>Integer overflow in the cdf_read_property_info function in cdf.c in file through 5.19, as used in the Fileinfo component in PHP before 5.4.32 and 5.5.x before 5.5.16, allows remote attackers to cause a denial of service (application crash) via a crafted CDF file.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2012-1571.</s>","<s>add encrypted cdf documents
</s>"," diff --git a/ChangeLog b/ChangeLog
index c0e7273c..099fef8f 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,7 @@
+2014-08-17  10:01  Christos Zoulas <christos@zoulas.com>
+
+        * recognize encrypted CDF documents
+
 2014-08-04   9:18  Christos Zoulas <christos@zoulas.com>
 
         * add magic_load_buffers from Brooks Davis
",0.0,3.0,0.0,tfidf
CVE-2014-3587,CVE-2014-3587/0641e56be1af003aa02c7c6b0184466540637233,https://github.com/file/file/commit/0641e56be1af003aa02c7c6b0184466540637233,"<s>Integer overflow in the cdf_read_property_info function in cdf.c in file through 5.19, as used in the Fileinfo component in PHP before 5.4.32 and 5.5.x before 5.5.16, allows remote attackers to cause a denial of service (application crash) via a crafted CDF file.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2012-1571.</s>","<s>Prevent wrap around (Remi Collet at redhat)
</s>"," diff --git a/src/cdf.c b/src/cdf.c
index 5dbf3b13..3e691f4c 100644
--- a/src/cdf.c
+++ b/src/cdf.c
@@ -35,7 +35,7 @@
 #include ""file.h""
 
 #ifndef lint
-FILE_RCSID(""@(#)$File: cdf.c,v 1.63 2014/06/09 13:04:37 christos Exp $"")
+FILE_RCSID(""@(#)$File: cdf.c,v 1.64 2014/07/24 19:35:39 christos Exp $"")
 #endif
 
 #include <assert.h>
@@ -835,6 +835,10 @@ cdf_read_property_info(const cdf_stream_t *sst, const cdf_header_t *h,
 		q = (const uint8_t *)(const void *)
 		    ((const char *)(const void *)p + ofs
 		    - 2 * sizeof(uint32_t));
+		if (q < p) {
+			DPRINTF((""Wrapped around %p < %p\n"", q, p));
+			goto out;
+		}
 		if (q > e) {
 			DPRINTF((""Ran of the end %p > %p\n"", q, e));
 			goto out;
",1.0,3.0,1.0,tfidf
,,,,,,,,,
CVE-2013-6416,CVE-2013-6416/98d06c6bd4eefeeb342d05116fccefa11875cb9b,https://github.com/rails/rails/commit/98d06c6bd4eefeeb342d05116fccefa11875cb9b,<s>Cross-site scripting (XSS) vulnerability in the simple_format helper in actionpack/lib/action_view/helpers/text_helper.rb in Ruby on Rails 4.x before 4.0.2 allows remote attackers to inject arbitrary web script or HTML via a crafted HTML attribute.</s>,"<s>fixing changelog
</s>"," diff --git a/actionpack/CHANGELOG.md b/actionpack/CHANGELOG.md
index f4d878710c..0f0c2d52b0 100644
--- a/actionpack/CHANGELOG.md
+++ b/actionpack/CHANGELOG.md
@@ -1,3 +1,5 @@
+*   Ensure simple_format escapes its html attributes. This fixes CVE-2013-6416
+
 *   Deep Munge the parameters for GET and POST Fixes CVE-2013-6417
 
 *   Stop using i18n's built in HTML error handling.  Fixes: CVE-2013-4491
",0.0,3.0,0.0,lime
CVE-2013-6416,CVE-2013-6416/4b4f5847f64f81c961625e647711ef9f6ad1a454,https://github.com/rails/rails/commit/4b4f5847f64f81c961625e647711ef9f6ad1a454,<s>Cross-site scripting (XSS) vulnerability in the simple_format helper in actionpack/lib/action_view/helpers/text_helper.rb in Ruby on Rails 4.x before 4.0.2 allows remote attackers to inject arbitrary web script or HTML via a crafted HTML attribute.</s>,"<s>Ensure simple_format escapes its html attributes
The previous behavior equated the sanitize option for simple_format with the
escape option of content_tag, however these are two distinct concepts.
This fixes CVE-2013-6416
</s>"," diff --git a/actionpack/lib/action_view/helpers/text_helper.rb b/actionpack/lib/action_view/helpers/text_helper.rb
index 2ed825efc8..285d27d844 100644
--- a/actionpack/lib/action_view/helpers/text_helper.rb
+++ b/actionpack/lib/action_view/helpers/text_helper.rb
@@ -266,7 +266,7 @@ def simple_format(text, html_options = {}, options = {})
           content_tag(wrapper_tag, nil, html_options)
         else
           paragraphs.map { |paragraph|
-            content_tag(wrapper_tag, paragraph, html_options, options[:sanitize])
+            content_tag(wrapper_tag, raw(paragraph), html_options)
           }.join(""\n\n"").html_safe
         end
       end
",1.0,3.0,1.0,lime
,,,,,,,,,
CVE-2021-46398,CVE-2021-46398/74b7cd8e81840537a8206317344f118093153e8d,https://github.com/filebrowser/filebrowser/commit/74b7cd8e81840537a8206317344f118093153e8d,<s>A Cross-Site Request Forgery vulnerability exists in Filebrowser < 2.18.0 that allows attackers to create a backdoor user with admin privilege and get access to the filesystem via a malicious HTML webpage that is sent to the victim. An admin can run commands using the FileBrowser and hence it leads to RCE.</s>,"<s>fix: security issue in command runner (closes #1621)
</s>"," diff --git a/http/commands.go b/http/commands.go
index 173e57a9..48c7f297 100644
--- a/http/commands.go
+++ b/http/commands.go
@@ -59,19 +59,19 @@ var commandsHandler = withUser(func(w http.ResponseWriter, r *http.Request, d *d
 		}
 	}
 
-	if !d.server.EnableExec || !d.user.CanExecute(strings.Split(raw, "" "")[0]) {
-		if err := conn.WriteMessage(websocket.TextMessage, cmdNotAllowed); err != nil { //nolint:govet
+	command, err := runner.ParseCommand(d.settings, raw)
+	if err != nil {
+		if err := conn.WriteMessage(websocket.TextMessage, []byte(err.Error())); err != nil { //nolint:govet
 			wsErr(conn, r, http.StatusInternalServerError, err)
 		}
-
 		return 0, nil
 	}
 
-	command, err := runner.ParseCommand(d.settings, raw)
-	if err != nil {
-		if err := conn.WriteMessage(websocket.TextMessage, []byte(err.Error())); err != nil { //nolint:govet
+	if !d.server.EnableExec || !d.user.CanExecute(command[0]) {
+		if err := conn.WriteMessage(websocket.TextMessage, cmdNotAllowed); err != nil { //nolint:govet
 			wsErr(conn, r, http.StatusInternalServerError, err)
 		}
+
 		return 0, nil
 	}
 
",1.0,1.0,1.0,tfidf
CVE-2021-46398,CVE-2021-46398/6cb51b4eb4751b49e7d3458c4a23589ccf16790b,https://github.com/filebrowser/filebrowser/commit/6cb51b4eb4751b49e7d3458c4a23589ccf16790b,<s>A Cross-Site Request Forgery vulnerability exists in Filebrowser < 2.18.0 that allows attackers to create a backdoor user with admin privilege and get access to the filesystem via a malicious HTML webpage that is sent to the victim. An admin can run commands using the FileBrowser and hence it leads to RCE.</s>,"<s>Add files via upload (#1615)

</s>"," diff --git a/frontend/src/views/files/Editor.vue b/frontend/src/views/files/Editor.vue
index 519bd886..3dbabc74 100644
--- a/frontend/src/views/files/Editor.vue
+++ b/frontend/src/views/files/Editor.vue
@@ -4,15 +4,13 @@
       <action icon=""close"" :label=""$t('buttons.close')"" @action=""close()"" />
       <title>{{ req.name }}</title>
 
-      <template #actions>
-        <action
-          v-if=""user.perm.modify""
-          id=""save-button""
-          icon=""save""
-          :label=""$t('buttons.save')""
-          @action=""save()""
-        />
-      </template>
+      <action
+        v-if=""user.perm.modify""
+        id=""save-button""
+        icon=""save""
+        :label=""$t('buttons.save')""
+        @action=""save()""
+      />
     </header-bar>
 
     <breadcrumbs base=""/files"" noLink />
",0.0,1.0,0.0,tfidf
,,,,,,,,,
CVE-2020-8130,CVE-2020-8130/5b8f8fc41a5d7d7d6a5d767e48464c60884d3aee,https://github.com/ruby/rake/commit/5b8f8fc41a5d7d7d6a5d767e48464c60884d3aee,<s>There is an OS command injection vulnerability in Ruby Rake < 12.3.3 in Rake::FileList when supplying a filename that begins with the pipe character `|`.</s>,"<s>Use File.open explicitly.
</s>"," diff --git a/lib/rake/file_list.rb b/lib/rake/file_list.rb
index 15ea4b3..22c339f 100644
--- a/lib/rake/file_list.rb
+++ b/lib/rake/file_list.rb
@@ -294,7 +294,7 @@ module Rake
       matched = 0
       each do |fn|
         begin
-          open(fn, ""r"", *options) do |inf|
+          File.open(fn, ""r"", *options) do |inf|
             count = 0
             inf.each do |line|
               count += 1
",1.0,3.0,1.0,tfidf
CVE-2020-8130,CVE-2020-8130/d28957d64ae88823200049f8ae3667eb631bdfcc,https://github.com/ruby/rake/commit/d28957d64ae88823200049f8ae3667eb631bdfcc,<s>There is an OS command injection vulnerability in Ruby Rake < 12.3.3 in Rake::FileList when supplying a filename that begins with the pipe character `|`.</s>,"<s>Use the application's name in error message if a task is not found
`Rake.application` can be initialized with a custom name, so use that in
the error message when a task is not found in the index. The default
application name is `rake`.
</s>"," diff --git a/lib/rake/task_manager.rb b/lib/rake/task_manager.rb
index d503a30..1991088 100644
--- a/lib/rake/task_manager.rb
+++ b/lib/rake/task_manager.rb
@@ -60,7 +60,8 @@ module Rake
     end
 
     def generate_message_for_undefined_task(task_name)
-      message = ""Don't know how to build task '#{task_name}' (See the list of available tasks with `rake --tasks`)""
+      message = ""Don't know how to build task '#{task_name}' ""\
+                ""(See the list of available tasks with `#{Rake.application.name} --tasks`)""
       message + generate_did_you_mean_suggestions(task_name)
     end
 
",0.0,3.0,0.0,tfidf
,,,,,,,,,
CVE-2022-0510,CVE-2022-0510/411d20b1c6a6e941b418d7f3ff94be13c37432f2,https://github.com/pimcore/pimcore/commit/411d20b1c6a6e941b418d7f3ff94be13c37432f2,<s>Cross-site Scripting (XSS) - Reflected in Packagist pimcore/pimcore prior to 10.3.1.</s>,"<s>[Docs] Cache config file needs to be put in local/ folder to get loaded with default config.yaml (#11445)
* cache configuration needs to be put in config/local folder with default config.yaml -> otherwise will not get loaded
* cache configuration needs to be put in config/packages folder to get loaded with default config.yaml -> otherwise will not get loaded
* cache configuration needs to be put in config/packages folder to get loaded with default config.yaml -> otherwise will not get loaded
</s>"," diff --git a/doc/Development_Documentation/19_Development_Tools_and_Details/09_Cache/README.md b/doc/Development_Documentation/19_Development_Tools_and_Details/09_Cache/README.md
index 95477a9e93..55e605f468 100644
--- a/doc/Development_Documentation/19_Development_Tools_and_Details/09_Cache/README.md
+++ b/doc/Development_Documentation/19_Development_Tools_and_Details/09_Cache/README.md
@@ -21,7 +21,7 @@ Pimcore uses the `pimcore.cache.pool` Symfony cache pool, you can configure it a
 that the pool supports tags.
 
 ```yaml
-# config/cache.yaml
+# config/packages/cache.yaml
 framework:
     cache:
         pools:
",0.0,1.0,0.0,lime
CVE-2022-0510,CVE-2022-0510/b5a9ad65e5a4dde1916f02019f8686ad835681ce,https://github.com/pimcore/pimcore/commit/b5a9ad65e5a4dde1916f02019f8686ad835681ce,<s>Cross-site Scripting (XSS) - Reflected in Packagist pimcore/pimcore prior to 10.3.1.</s>,"<s>[Admin] DataObject - Escape class definitions group properly
</s>"," diff --git a/bundles/AdminBundle/Controller/Admin/DataObject/ClassController.php b/bundles/AdminBundle/Controller/Admin/DataObject/ClassController.php
index ac818bca62..a041274b7b 100644
--- a/bundles/AdminBundle/Controller/Admin/DataObject/ClassController.php
+++ b/bundles/AdminBundle/Controller/Admin/DataObject/ClassController.php
@@ -861,7 +861,7 @@ class ClassController extends AdminController implements KernelControllerEventIn
                 if (!isset($groups[$item->getGroup()])) {
                     $groups[$item->getGroup()] = [
                         'id' => 'group_' . $item->getKey(),
-                        'text' => $item->getGroup(),
+                        'text' => htmlspecialchars($item->getGroup()),
                         'expandable' => true,
                         'leaf' => false,
                         'allowChildren' => true,
@@ -1266,7 +1266,7 @@ class ClassController extends AdminController implements KernelControllerEventIn
                 if (!isset($groups[$item->getGroup()])) {
                     $groups[$item->getGroup()] = [
                         'id' => 'group_' . $item->getKey(),
-                        'text' => $item->getGroup(),
+                        'text' => htmlspecialchars($item->getGroup()),
                         'expandable' => true,
                         'leaf' => false,
                         'allowChildren' => true,
",1.0,1.0,1.0,lime
,,,,,,,,,
CVE-2017-5592,CVE-2017-5592/8e75437a7e43d4c55e861691f74892e666e29b0b,https://github.com/profanity-im/profanity/commit/8e75437a7e43d4c55e861691f74892e666e29b0b,"<s>An incorrect implementation of ""XEP-0280: Message Carbons"" in multiple XMPP clients allows a remote attacker to impersonate any user, including contacts, in the vulnerable application's display. This allows for various kinds of social engineering attacks. This CVE is for profanity (0.4.7 - 0.5.0).</s>","<s>Add carbons from check
</s>"," diff --git a/tests/functionaltests/test_carbons.c b/tests/functionaltests/test_carbons.c
index 414284ff..7926a76f 100644
--- a/tests/functionaltests/test_carbons.c
+++ b/tests/functionaltests/test_carbons.c
@@ -70,7 +70,7 @@ receive_carbon(void **state)
     assert_true(prof_output_exact(""unencrypted""));
 
     stbbr_send(
-        ""<message type='chat' to='stabber@localhost/profanity' from='buddy1@localhost'>""
+        ""<message type='chat' to='stabber@localhost/profanity' from='stabber@localhost'>""
             ""<received xmlns='urn:xmpp:carbons:2'>""
                 ""<forwarded xmlns='urn:xmpp:forward:0'>""
                     ""<message id='prof_msg_7' xmlns='jabber:client' type='chat' lang='en' to='stabber@localhost/profanity' from='buddy1@localhost/mobile'>""
",1.0,3.0,1.0,tfidf
CVE-2017-5592,CVE-2017-5592/01428eb85855ea9dd148118ca35a0e20f42cd5ce,https://github.com/profanity-im/profanity/commit/01428eb85855ea9dd148118ca35a0e20f42cd5ce,"<s>An incorrect implementation of ""XEP-0280: Message Carbons"" in multiple XMPP clients allows a remote attacker to impersonate any user, including contacts, in the vulnerable application's display. This allows for various kinds of social engineering attacks. This CVE is for profanity (0.4.7 - 0.5.0).</s>","<s>Add special handling for xep-0133 get-user-roster
</s>"," diff --git a/src/xmpp/iq.c b/src/xmpp/iq.c
index 3b5f1990..dde803cb 100644
--- a/src/xmpp/iq.c
+++ b/src/xmpp/iq.c
@@ -1178,9 +1178,48 @@ _command_exec_response_handler(xmpp_stanza_t *const stanza, void *const userdata
         }
         xmpp_stanza_t *x = xmpp_stanza_get_child_by_ns(cmd, STANZA_NS_DATA);
         if (x) {
-            DataForm *form = form_create(x);
-            ProfConfWin *confwin = (ProfConfWin*)wins_new_config(from, form, NULL, NULL, NULL);
-            confwin_handle_configuration(confwin, form);
+            xmpp_stanza_t *roster = xmpp_stanza_get_child_by_ns(x, XMPP_NS_ROSTER);
+            if (roster) {
+                /* Special handling of xep-0133 roster in response */
+                GSList *list = NULL;
+                xmpp_stanza_t *child = xmpp_stanza_get_children(roster);
+                while (child) {
+                    const char *barejid = xmpp_stanza_get_attribute(child, STANZA_ATTR_JID);
+                    gchar *barejid_lower = g_utf8_strdown(barejid, -1);
+                    const char *name = xmpp_stanza_get_attribute(child, STANZA_ATTR_NAME);
+                    const char *sub = xmpp_stanza_get_attribute(child, STANZA_ATTR_SUBSCRIPTION);
+                    const char *ask = xmpp_stanza_get_attribute(child, STANZA_ATTR_ASK);
+
+                    GSList *groups = NULL;
+                    xmpp_stanza_t *group_element = xmpp_stanza_get_children(child);
+
+                    while (group_element) {
+                        if (strcmp(xmpp_stanza_get_name(group_element), STANZA_NAME_GROUP) == 0) {
+                            char *groupname = xmpp_stanza_get_text(group_element);
+                            if (groupname) {
+                                groups = g_slist_append(groups, groupname);
+                            }
+                        }
+                        group_element = xmpp_stanza_get_next(group_element);
+                    }
+
+                    gboolean pending_out = FALSE;
+                    if (ask && (strcmp(ask, ""subscribe"") == 0)) {
+                        pending_out = TRUE;
+                    }
+
+                    PContact contact = p_contact_new(barejid_lower, name, groups, sub, NULL, pending_out);
+                    list = g_slist_append(list, contact);
+                    child = xmpp_stanza_get_next(child);
+                }
+
+                cons_show_roster(list);
+                g_slist_free(list);
+            } else {
+                DataForm *form = form_create(x);
+                ProfConfWin *confwin = (ProfConfWin*)wins_new_config(from, form, NULL, NULL, NULL);
+                confwin_handle_configuration(confwin, form);
+            }
         }
     } else if (g_strcmp0(status, ""executing"") == 0) {
         win_handle_command_exec_status(win, command, ""executing"");
",0.0,3.0,0.0,tfidf
,,,,,,,,,
CVE-2018-12247,CVE-2018-12247/fd086833ff6673ab11e6ecea573851593263ae6a,https://github.com/mruby/mruby/commit/fd086833ff6673ab11e6ecea573851593263ae6a,"<s>An issue was discovered in mruby 1.4.1. There is a NULL pointer dereference in mrb_class, related to certain .clone usage, because mrb_obj_clone in kernel.c copies flags other than the MRB_FLAG_IS_FROZEN flag (e.g., the embedded flag).</s>","<s>Reorganize flags values for classes; fix #3975
Renamed flag macro names as well:
`MRB_FLAG_IS_FROZEN` -> `MRB_FL_OBJ_FROZEN`
`MRB_FLAG_IS_PREPENDED` -> `MRB_FL_CLASS_IS_PREPENDED`
`MRB_FLAG_IS_ORIGIN` -> `MRB_FL_CLASS_IS_ORIGIN`
`MRB_FLAG_IS_INHERITED` -> `MRB_FL_CLASS_IS_INHERITED`
</s>"," diff --git a/src/kernel.c b/src/kernel.c
index 42e9ca6a4..9986b0222 100644
--- a/src/kernel.c
+++ b/src/kernel.c
@@ -252,18 +252,18 @@ copy_class(mrb_state *mrb, mrb_value dst, mrb_value src)
   struct RClass *sc = mrb_class_ptr(src);
   /* if the origin is not the same as the class, then the origin and
      the current class need to be copied */
-  if (sc->flags & MRB_FLAG_IS_PREPENDED) {
+  if (sc->flags & MRB_FL_CLASS_IS_PREPENDED) {
     struct RClass *c0 = sc->super;
     struct RClass *c1 = dc;
 
     /* copy prepended iclasses */
-    while (!(c0->flags & MRB_FLAG_IS_ORIGIN)) {
+    while (!(c0->flags & MRB_FL_CLASS_IS_ORIGIN)) {
       c1->super = mrb_class_ptr(mrb_obj_dup(mrb, mrb_obj_value(c0)));
       c1 = c1->super;
       c0 = c0->super;
     }
     c1->super = mrb_class_ptr(mrb_obj_dup(mrb, mrb_obj_value(c0)));
-    c1->super->flags |= MRB_FLAG_IS_ORIGIN;
+    c1->super->flags |= MRB_FL_CLASS_IS_ORIGIN;
   }
   if (sc->mt) {
     dc->mt = kh_copy(mt, mrb, sc->mt);
@@ -348,7 +348,7 @@ mrb_obj_clone(mrb_state *mrb, mrb_value self)
   mrb_field_write_barrier(mrb, (struct RBasic*)p, (struct RBasic*)p->c);
   clone = mrb_obj_value(p);
   init_copy(mrb, clone, self);
-  p->flags |= mrb_obj_ptr(self)->flags & MRB_FLAG_IS_FROZEN;
+  p->flags |= mrb_obj_ptr(self)->flags & MRB_FL_OBJ_IS_FROZEN;
 
   return clone;
 }
@@ -706,7 +706,7 @@ mrb_class_instance_method_list(mrb_state *mrb, mrb_bool recur, struct RClass* kl
   struct RClass* oldklass;
   khash_t(st)* set = kh_init(st, mrb);
 
-  if (!recur && (klass->flags & MRB_FLAG_IS_PREPENDED)) {
+  if (!recur && (klass->flags & MRB_FL_CLASS_IS_PREPENDED)) {
     MRB_CLASS_ORIGIN(klass);
     prepended = TRUE;
   }
",0.0,2.0,0.0,lime
CVE-2018-12247,CVE-2018-12247/55edae0226409de25e59922807cb09acb45731a2,https://github.com/mruby/mruby/commit/55edae0226409de25e59922807cb09acb45731a2,"<s>An issue was discovered in mruby 1.4.1. There is a NULL pointer dereference in mrb_class, related to certain .clone usage, because mrb_obj_clone in kernel.c copies flags other than the MRB_FLAG_IS_FROZEN flag (e.g., the embedded flag).</s>","<s>Allow `Object#clone` to copy frozen status only; fix #4036
Copying all flags from the original object may overwrite the clone's
flags e.g. the embedded flag.
</s>"," diff --git a/src/kernel.c b/src/kernel.c
index f378004cb..bbe6e8bb7 100644
--- a/src/kernel.c
+++ b/src/kernel.c
@@ -348,7 +348,7 @@ mrb_obj_clone(mrb_state *mrb, mrb_value self)
   mrb_field_write_barrier(mrb, (struct RBasic*)p, (struct RBasic*)p->c);
   clone = mrb_obj_value(p);
   init_copy(mrb, clone, self);
-  p->flags = mrb_obj_ptr(self)->flags;
+  p->flags |= mrb_obj_ptr(self)->flags & MRB_FLAG_IS_FROZEN;
 
   return clone;
 }
",1.0,2.0,1.0,lime
,,,,,,,,,
CVE-2021-38115,CVE-2021-38115/19c7a5d6512dcf4d0b0e6db797d754a8e281a6aa,https://github.com/libgd/libgd/commit/19c7a5d6512dcf4d0b0e6db797d754a8e281a6aa,<s>read_header_tga in gd_tga.c in the GD Graphics Library (aka LibGD) through 2.3.2 allows remote attackers to cause a denial of service (out-of-bounds read) via a crafted TGA file.</s>,"<s>use gdIOCtxPtr more consistently
We have gdIOCtxPtr for gdIOCtx*, so switch the public headers to it
consistently.
</s>"," diff --git a/src/gd_tga.h b/src/gd_tga.h
index 297f3dc9..b56e2e41 100644
--- a/src/gd_tga.h
+++ b/src/gd_tga.h
@@ -45,8 +45,8 @@ typedef struct oTga_ {
 
 #define TGA_RLE_FLAG	128
 
-int read_header_tga(gdIOCtx *ctx, oTga *tga);
-int read_image_tga(gdIOCtx *ctx, oTga *tga);
+int read_header_tga(gdIOCtxPtr ctx, oTga *tga);
+int read_image_tga(gdIOCtxPtr ctx, oTga *tga);
 void free_tga(oTga *tga);
 
 #endif //__TGA_H
",0.0,2.0,0.0,lime
CVE-2021-38115,CVE-2021-38115/8b111b2b4a4842179be66db68d84dda91a246032,https://github.com/libgd/libgd/commit/8b111b2b4a4842179be66db68d84dda91a246032,<s>read_header_tga in gd_tga.c in the GD Graphics Library (aka LibGD) through 2.3.2 allows remote attackers to cause a denial of service (out-of-bounds read) via a crafted TGA file.</s>,"<s>fix read out-of-bands in reading tga header file
</s>"," diff --git a/src/gd_tga.c b/src/gd_tga.c
index cae9428d..286febb2 100644
--- a/src/gd_tga.c
+++ b/src/gd_tga.c
@@ -191,7 +191,11 @@ int read_header_tga(gdIOCtx *ctx, oTga *tga)
 			return -1;
 		}
 
-		gdGetBuf(tga->ident, tga->identsize, ctx);
+		
+		if (gdGetBuf(tga->ident, tga->identsize, ctx) != tga->identsize) {
+			gd_error(""fail to read header ident"");
+			return -1;
+		}
 	}
 
 	return 1;
",1.0,2.0,1.0,lime
,,,,,,,,,
CVE-2016-9284,CVE-2016-9284/e7b6856ac384bf2b8ea7761a1e46d6e4186d36f4,https://github.com/exponentcms/exponent-cms/commit/e7b6856ac384bf2b8ea7761a1e46d6e4186d36f4,<s>getUsersByJSON in framework/modules/users/controllers/usersController.php in Exponent CMS v2.4.0 allows remote attackers to read user information via users/getUsersByJSON/sort/ and a trailing string.</s>,"<s>fix security vulnerability to get user list, reported by pang0lin
</s>"," diff --git a/framework/modules/users/controllers/usersController.php b/framework/modules/users/controllers/usersController.php
index 7012b8496..3b4568633 100755
--- a/framework/modules/users/controllers/usersController.php
+++ b/framework/modules/users/controllers/usersController.php
@@ -39,6 +39,7 @@ class usersController extends expController {
         'update'           => 'Update Users',
         'show'             => 'Show User',
         'showall'          => 'Show Users',
+        'getUsersByJSON'   => 'Get Users',
     );
 
     static function displayname() {
",1.0,3.0,1.0,lime
CVE-2016-9284,CVE-2016-9284/66f72dc417c9dfdca2732b95c09230db0a10bc30,https://github.com/exponentcms/exponent-cms/commit/66f72dc417c9dfdca2732b95c09230db0a10bc30,<s>getUsersByJSON in framework/modules/users/controllers/usersController.php in Exponent CMS v2.4.0 allows remote attackers to read user information via users/getUsersByJSON/sort/ and a trailing string.</s>,"<s>fix security vulnerability update group; reported by DM_
</s>"," diff --git a/framework/modules/users/controllers/usersController.php b/framework/modules/users/controllers/usersController.php
index 3b4568633..73820bb6b 100755
--- a/framework/modules/users/controllers/usersController.php
+++ b/framework/modules/users/controllers/usersController.php
@@ -781,7 +781,7 @@ class usersController extends expController {
 
         $group = new group();
         if (!empty($this->params['redirect'])) {
-            $this->params['redirect'] = $db->selectValue('section', 'sef_name', 'id=' . $this->params['redirect']);
+            $this->params['redirect'] = $db->selectValue('section', 'sef_name', 'id=' . intval($this->params['redirect']));
         }
         $group->update($this->params);
         expHistory::back();
",0.0,3.0,0.0,lime
,,,,,,,,,
CVE-2019-10240,CVE-2019-10240/75f66c9811134c854a3062c2b3cbafd5876fe383,https://github.com/eclipse/hawkbit/commit/75f66c9811134c854a3062c2b3cbafd5876fe383,<s>Eclipse hawkBit versions prior to 0.3.0M2 resolved Maven build artifacts for the Vaadin based UI over HTTP instead of HTTPS. Any of these dependent artifacts could have been maliciously compromised by a MITM attack. Hence produced build artifacts of hawkBit might be infected.</s>,"<s>Fix localization vaadin system messages (#807)
* Add customized SystemMessagesProvider
* Localize according to SystemMessagesInfo
* Localize vaadin 'Server connection lost' message
* Use available locale for system messages
* Add license header
* Fix PR findings
* Fix Sonar issues
Signed-off-by: Stefan Klotz <stefan.klotz@bosch-si.com>
</s>"," diff --git a/hawkbit-ui/src/main/java/org/eclipse/hawkbit/ui/utils/VaadinMessageSource.java b/hawkbit-ui/src/main/java/org/eclipse/hawkbit/ui/utils/VaadinMessageSource.java
index b6adac818..32bbf1788 100644
--- a/hawkbit-ui/src/main/java/org/eclipse/hawkbit/ui/utils/VaadinMessageSource.java
+++ b/hawkbit-ui/src/main/java/org/eclipse/hawkbit/ui/utils/VaadinMessageSource.java
@@ -55,8 +55,26 @@ public class VaadinMessageSource implements Serializable {
      * @see HawkbitCommonUtil#getCurrentLocale()
      */
     public String getMessage(final String code, final Object... args) {
+        return getMessage(HawkbitCommonUtil.getCurrentLocale(), code, args);
+    }
+
+    /**
+     * Tries to resolve the message based on the provided Local. Returns message
+     * code if fitting message could not be found.
+     * 
+     * @param local
+     *            to determinate the Language.
+     * @param code
+     *            the code to lookup up.
+     * @param args
+     *            Array of arguments that will be filled in for params within
+     *            the message.
+     * 
+     * @return the resolved message, or the message code if the lookup fails.
+     */
+    public String getMessage(final Locale local, final String code, final Object... args) {
         try {
-            return source.getMessage(code, args, HawkbitCommonUtil.getCurrentLocale());
+            return source.getMessage(code, args, local);
         } catch (final NoSuchMessageException ex) {
             LOG.error(""Failed to retrieve message!"", ex);
             return code;
",1.0,1.0,0.0,lime
CVE-2019-10240,CVE-2019-10240/fa6520a094a24897035dae4a3af2a69d174c7f9d,https://github.com/eclipse/hawkbit/commit/fa6520a094a24897035dae4a3af2a69d174c7f9d,<s>Eclipse hawkBit versions prior to 0.3.0M2 resolved Maven build artifacts for the Vaadin based UI over HTTP instead of HTTPS. Any of these dependent artifacts could have been maliciously compromised by a MITM attack. Hence produced build artifacts of hawkBit might be infected.</s>,"<s>Fix Vaadin Addon repo url (#813)
Signed-off-by: Kai Zimmermann <kai.zimmermann@microsoft.com>
</s>"," diff --git a/pom.xml b/pom.xml
index c0469f1e2..bf92ce684 100644
--- a/pom.xml
+++ b/pom.xml
@@ -122,7 +122,7 @@
    <repositories>
       <repository>
          <id>vaadin-addons</id>
-         <url>http://maven.vaadin.com/vaadin-addons</url>
+         <url>https://maven.vaadin.com/vaadin-addons</url>
       </repository>
    </repositories>
 
",0.0,1.0,1.0,lime
,,,,,,,,,
CVE-2018-1000408,CVE-2018-1000408/517da6ed389f0a606dd9bb8595bc79fc93f4331c,https://github.com/jenkinsci/jenkins/commit/517da6ed389f0a606dd9bb8595bc79fc93f4331c,"<s>A denial of service vulnerability exists in Jenkins 2.145 and earlier, LTS 2.138.1 and earlier in core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java that allows attackers without Overall/Read permission to access a specific URL on instances using the built-in Jenkins user database security realm that results in the creation of an ephemeral user record in memory.</s>","<s>[SECURITY-1158]
</s>"," diff --git a/core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java b/core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java
index c787e352f2..01b3233108 100644
--- a/core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java
+++ b/core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java
@@ -73,6 +73,8 @@ import javax.servlet.ServletRequest;
 import javax.servlet.ServletResponse;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
+import javax.servlet.http.HttpSession;
+
 import static javax.servlet.http.HttpServletResponse.SC_UNAUTHORIZED;
 import java.io.IOException;
 import java.lang.reflect.Constructor;
@@ -263,6 +265,13 @@ public class HudsonPrivateSecurityRealm extends AbstractPasswordBasedSecurityRea
      */
     @SuppressWarnings(""ACL.impersonate"")
     private void loginAndTakeBack(StaplerRequest req, StaplerResponse rsp, User u) throws ServletException, IOException {
+        HttpSession session = req.getSession(false);
+        if (session != null) {
+            // avoid session fixation
+            session.invalidate();
+        }
+        req.getSession(true);
+        
         // ... and let him login
         Authentication a = new UsernamePasswordAuthenticationToken(u.getId(),req.getParameter(""password1""));
         a = this.getSecurityComponents().manager.authenticate(a);
",0.0,1.0,0.0,lime
CVE-2018-1000408,CVE-2018-1000408/01157a699f611ca7492e872103ac01526a982cf2,https://github.com/jenkinsci/jenkins/commit/01157a699f611ca7492e872103ac01526a982cf2,"<s>A denial of service vulnerability exists in Jenkins 2.145 and earlier, LTS 2.138.1 and earlier in core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java that allows attackers without Overall/Read permission to access a specific URL on instances using the built-in Jenkins user database security realm that results in the creation of an ephemeral user record in memory.</s>","<s>[SECURITY-1128]
</s>"," diff --git a/core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java b/core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java
index 01b3233108..e877ee6291 100644
--- a/core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java
+++ b/core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java
@@ -475,8 +475,9 @@ public class HudsonPrivateSecurityRealm extends AbstractPasswordBasedSecurityRea
      * This is to map users under the security realm URL.
      * This in turn helps us set up the right navigation breadcrumb.
      */
+    @Restricted(NoExternalUse.class)
     public User getUser(String id) {
-        return User.getById(id, true);
+        return User.getById(id, User.ALLOW_USER_CREATION_VIA_URL && hasPermission(Jenkins.ADMINISTER));
     }
 
     // TODO
",1.0,1.0,1.0,lime
,,,,,,,,,
CVE-2017-15646,CVE-2017-15646/0c58892732ee7610a7abba5507614366d382c9c9,https://github.com/webmin/webmin/commit/0c58892732ee7610a7abba5507614366d382c9c9,"<s>Webmin before 1.860 has XSS with resultant remote code execution. Under the 'Others/File Manager' menu, there is a 'Download from remote URL' option to download a file from a remote server. After setting up a malicious server, one can wait for a file download request and then send an XSS payload that will lead to Remote Code Execution, as demonstrated by an OS command in the value attribute of a name='cmd' input element.</s>","<s>Escape potentially malicious HTTP headers
</s>"," diff --git a/web-lib-funcs.pl b/web-lib-funcs.pl
index db5858c26..29c2fd570 100755
--- a/web-lib-funcs.pl
+++ b/web-lib-funcs.pl
@@ -2308,7 +2308,7 @@ alarm(0);
 $h = $main::download_timed_out if ($main::download_timed_out);
 if (!ref($h)) {
 	if ($error) { $$error = $h; return; }
-	else { &error($h); }
+	else { &error(&html_escape($h)); }
 	}
 &complete_http_download($h, $dest, $error, $cbfunc, $osdn, $host, $port,
 			$headers, $ssl, $nocache, $timeout);
@@ -2337,7 +2337,7 @@ if ($line !~ /^HTTP\/1\..\s+(200|30[0-9]|400)(\s+|$)/) {
 	alarm(0);
 	&close_http_connection($h);
 	if ($error) { ${$error} = $line; return; }
-	else { &error(""Download failed : $line""); }
+	else { &error(""Download failed : "".&html_escape($line)); }
 	}
 my $rcode = $1;
 &$cbfunc(1, $rcode >= 300 && $rcode < 400 ? 1 : 0)
@@ -2383,7 +2383,8 @@ if ($rcode >= 300 && $rcode < 400) {
 		# Assume relative to same dir .. not handled
 		&close_http_connection($h);
 		if ($error) { ${$error} = ""Invalid Location header $header{'location'}""; return; }
-		else { &error(""Invalid Location header $header{'location'}""); }
+		else { &error(""Invalid Location header "".
+			      &html_escape($header{'location'})); }
 		}
 	else {
 		&close_http_connection($h);
@@ -2412,7 +2413,7 @@ else {
 		if (!&open_tempfile(PFILE, "">$destfile"", 1)) {
 			&close_http_connection($h);
 			if ($error) { ${$error} = ""Failed to write to $destfile : $!""; return; }
-			else { &error(""Failed to write to $destfile : $!""); }
+			else { &error(""Failed to write to "".&html_escape($destfile)."" : "".&html_escape(""$!"")); }
 			}
 		binmode(PFILE);		# For windows
 		while(defined($buf = &read_http_connection($h, 1024))) {
",1.0,3.0,1.0,lime
CVE-2017-15646,CVE-2017-15646/f74d8b1571cc23a3f972d8a102cecb47c5528a57,https://github.com/webmin/webmin/commit/f74d8b1571cc23a3f972d8a102cecb47c5528a57,"<s>Webmin before 1.860 has XSS with resultant remote code execution. Under the 'Others/File Manager' menu, there is a 'Download from remote URL' option to download a file from a remote server. After setting up a malicious server, one can wait for a file download request and then send an XSS payload that will lead to Remote Code Execution, as demonstrated by an OS command in the value attribute of a name='cmd' input element.</s>","<s>Populate cache even if there is nothing to read
</s>"," diff --git a/postfix/postfix-lib.pl b/postfix/postfix-lib.pl
index 3d62d9fa5..419b9ef01 100755
--- a/postfix/postfix-lib.pl
+++ b/postfix/postfix-lib.pl
@@ -738,6 +738,7 @@ sub get_maps
 			 $_[2] ? &get_maps_types_files($_[2]) :
 			         &get_maps_types_files(&get_real_value($_[0]));
 	my $number = 0;
+	$maps_cache{$_[0]} = [ ];
 	foreach my $maps_type_file (@maps_files)
 	{
 	    my ($maps_type, $maps_file) = @$maps_type_file;
",0.0,3.0,0.0,lime
,,,,,,,,,
CVE-2022-31038,CVE-2022-31038/155cae1de8916fc3fde78f350763034b7422caee,https://github.com/gogs/gogs/commit/155cae1de8916fc3fde78f350763034b7422caee,"<s>Gogs is an open source self-hosted Git service. In versions of gogs prior to 0.12.9 `DisplayName` does not filter characters input from users, which leads to an XSS vulnerability when directly displayed in the issue list. This issue has been resolved in commit 155cae1d which sanitizes `DisplayName` prior to display to the user. All users of gogs are advised to upgrade. Users unable to upgrade should check their users' display names for malicious characters.</s>","<s>issues: sanitize `DisplayName` (#7009)
* issues: display issue posters `Name` instead of `DisplayName`
* sanitize display name
* update changelog
</s>"," diff --git a/CHANGELOG.md b/CHANGELOG.md
index e09a29cc..e81c32b2 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -23,6 +23,7 @@ All notable changes to Gogs are documented in this file.
 ### Fixed
 
 - _Security:_ OS Command Injection in file editor. [#7000](https://github.com/gogs/gogs/issues/7000)
+- _Security:_ Sanitize `DisplayName` in repository issue list. [#7009](https://github.com/gogs/gogs/pull/7009)
 - Unable to use LDAP authentication on ARM machines. [#6761](https://github.com/gogs/gogs/issues/6761)
 - Unable to init repository during creation on Windows. [#6967](https://github.com/gogs/gogs/issues/6967)
 - Mysterious panic on `Value not found for type *repo.HTTPContext`. [#6963](https://github.com/gogs/gogs/issues/6963)
",0.0,1.0,1.0,tfidf
CVE-2022-31038,CVE-2022-31038/50e5766867165d7736a9afeb8c3499bed6dda129,https://github.com/gogs/gogs/commit/50e5766867165d7736a9afeb8c3499bed6dda129,"<s>Gogs is an open source self-hosted Git service. In versions of gogs prior to 0.12.9 `DisplayName` does not filter characters input from users, which leads to an XSS vulnerability when directly displayed in the issue list. This issue has been resolved in commit 155cae1d which sanitizes `DisplayName` prior to display to the user. All users of gogs are advised to upgrade. Users unable to upgrade should check their users' display names for malicious characters.</s>","<s>build: remove support of Go 1.17 (#7177)

</s>"," diff --git a/internal/auth/pam/pam.go b/internal/auth/pam/pam.go
index d251fae4..14f041ae 100644
--- a/internal/auth/pam/pam.go
+++ b/internal/auth/pam/pam.go
@@ -1,5 +1,4 @@
 //go:build pam
-// +build pam
 reserved
 // Copyright 2014 The Gogs Authors. All rights reserved.
 // Use of this source code is governed by a MIT-style
",1.0,1.0,0.0,tfidf
,,,,,,,,,
CVE-2018-12542,CVE-2018-12542/57a65dce6f4c5aa5e3ce7288685e7f3447eb8f3b,https://github.com/vert-x3/vertx-web/commit/57a65dce6f4c5aa5e3ce7288685e7f3447eb8f3b,"<s>In version from 3.0.0 to 3.5.3 of Eclipse Vert.x, the StaticHandler uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\' (forward slashes) sequences that can resolve to a location that is outside of that directory when running on Windows Operating Systems.</s>","<s>CVE-2018-12542: The StaticHandler uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\' (forward slashes) sequences that can resolve to a location that is outside of that directory when running on Windows Operating Systems. - fixes #1025
</s>"," diff --git a/vertx-web/src/main/java/io/vertx/ext/web/handler/impl/StaticHandlerImpl.java b/vertx-web/src/main/java/io/vertx/ext/web/handler/impl/StaticHandlerImpl.java
index 7e456617f..15f62d9a6 100644
--- a/vertx-web/src/main/java/io/vertx/ext/web/handler/impl/StaticHandlerImpl.java
+++ b/vertx-web/src/main/java/io/vertx/ext/web/handler/impl/StaticHandlerImpl.java
@@ -135,14 +135,27 @@ public class StaticHandlerImpl implements StaticHandler {
       if (log.isTraceEnabled()) log.trace(""Not GET or HEAD so ignoring request"");
       context.next();
     } else {
-      String path = Utils.removeDots(Utils.urlDecode(context.normalisedPath(), false));
-      // if the normalized path is null it cannot be resolved
+      // we are trying to match a URL path to a Filesystem path, so the first step
+      // is to url decode the normalized path so avoid misinterpretations
+      String path = Utils.urlDecode(context.normalisedPath(), false);
+
       if (path == null) {
+        // if the normalized path is null it cannot be resolved
         log.warn(""Invalid path: "" + context.request().path());
         context.next();
         return;
       }
 
+      if (File.separatorChar != '/') {
+        // although forward slashes are not path separators according to the rfc3986 if
+        // used directly to access the filesystem on Windows, they would be treated as such
+        // Instead of relying on the usual normalized method, all forward slashes must be
+        // replaced by backslashes in this handler.
+        path = path.replace(File.separatorChar, '/');
+      }
+      // clean the .. sequences according to rfc3986
+      path = Utils.removeDots(path);
+
       // only root is known for sure to be a directory. all other directories must be identified as such.
       if (!directoryListing && ""/"".equals(path)) {
         path = indexPage;
",1.0,3.0,1.0,tfidf
CVE-2018-12542,CVE-2018-12542/2da968725b66d3d5be108cf0dcd146ae5435a8f7,https://github.com/vert-x3/vertx-web/commit/2da968725b66d3d5be108cf0dcd146ae5435a8f7,"<s>In version from 3.0.0 to 3.5.3 of Eclipse Vert.x, the StaticHandler uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\' (forward slashes) sequences that can resolve to a location that is outside of that directory when running on Windows Operating Systems.</s>","<s>Verify https://github.com/vert-x3/vertx-auth/pull/243
</s>"," diff --git a/vertx-web/src/test/java/io/vertx/ext/web/handler/OAuth2AuthHandlerTest.java b/vertx-web/src/test/java/io/vertx/ext/web/handler/OAuth2AuthHandlerTest.java
index 2f3902f1c..50ef270f5 100644
--- a/vertx-web/src/test/java/io/vertx/ext/web/handler/OAuth2AuthHandlerTest.java
+++ b/vertx-web/src/test/java/io/vertx/ext/web/handler/OAuth2AuthHandlerTest.java
@@ -19,9 +19,13 @@ package io.vertx.ext.web.handler;
 import io.vertx.core.http.HttpMethod;
 import io.vertx.core.http.HttpServer;
 import io.vertx.core.json.JsonObject;
+import io.vertx.ext.auth.PubSecKeyOptions;
 import io.vertx.ext.auth.oauth2.OAuth2Auth;
 import io.vertx.ext.auth.oauth2.OAuth2ClientOptions;
 import io.vertx.ext.auth.oauth2.OAuth2FlowType;
+import io.vertx.ext.jwt.JWK;
+import io.vertx.ext.jwt.JWT;
+import io.vertx.ext.jwt.JWTOptions;
 import io.vertx.ext.web.WebTestBase;
 import org.junit.Test;
 
@@ -160,4 +164,107 @@ public class OAuth2AuthHandlerTest extends WebTestBase {
 
     server.close();
   }
+
+  @Test
+  public void testBearerOnlyWithJWT() throws Exception {
+
+    OAuth2Auth oauth = OAuth2Auth
+      .create(
+        vertx,
+        OAuth2FlowType.AUTH_CODE,
+        new OAuth2ClientOptions()
+          .setClientID(""dummy-client"")
+          .addPubSecKey(new PubSecKeyOptions()
+            .setAlgorithm(""RS256"")
+            .setPublicKey(
+              ""MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmuIC9Qvwoe/3tUpHkcUp\n"" +
+                ""vWmzQqnZtz3HBKbxzc/jBTxUHefJDs88Xjw5nNXhl4tXkHzFRAZHtDnwX074/2oc\n"" +
+                ""PRSWaBjHYXB771af91UPrc9fb4lh3W1a8hmQU6sgKlQVwDnUuePDkCmwKCsuyX0M\n"" +
+                ""wxuwOwEUo4r15NBh/H7FvuHVPnqWK1/kliYtQukF3svQkpZT6/puQ0bEOefROLB+\n"" +
+                ""EAPM0OAaDyknjxCZJenk9FIyC6skOKVaxW7CcE54lIUjS1GKFQc44/+T+u0VKSmh\n"" +
+                ""rRdBNcAhXmdpwjLoDTy/I8z+uqkKitdEVczCdleNqeb6b1kjPWS3VbLXxY/LIYlz\n"" +
+                ""uQIDAQAB"")
+          )
+      );
+
+    assertNotNull(oauth);
+
+    JWT jwt = new JWT().addJWK(new JWK(""RS256"", null,
+      ""MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCa4gL1C/Ch7/e1\n"" +
+        ""SkeRxSm9abNCqdm3PccEpvHNz+MFPFQd58kOzzxePDmc1eGXi1eQfMVEBke0OfBf\n"" +
+        ""Tvj/ahw9FJZoGMdhcHvvVp/3VQ+tz19viWHdbVryGZBTqyAqVBXAOdS548OQKbAo\n"" +
+        ""Ky7JfQzDG7A7ARSjivXk0GH8fsW+4dU+epYrX+SWJi1C6QXey9CSllPr+m5DRsQ5\n"" +
+        ""59E4sH4QA8zQ4BoPKSePEJkl6eT0UjILqyQ4pVrFbsJwTniUhSNLUYoVBzjj/5P6\n"" +
+        ""7RUpKaGtF0E1wCFeZ2nCMugNPL8jzP66qQqK10RVzMJ2V42p5vpvWSM9ZLdVstfF\n"" +
+        ""j8shiXO5AgMBAAECggEAIriwOQcoNuV4/qdcTA2LQe9ERJmXOUEcMKrMYntMRYw0\n"" +
+        ""v0+K/0ruGaIeuE4qeLLAOp/+CTXvNTQX8wXdREUhd3/6B/QmHm39GrasveHP1gM7\n"" +
+        ""PeHqkp1FWijo9hjS6SpYhfNxAQtSeCsgVqD3qCvkhIjchR3E5rTsUxN0JAq3ggb9\n"" +
+        ""WCJ2LUxOOTHAWL4cv7FIKfwU/bwjBdHbSLuh7em4IE8tzcFgh49281APprGb4a3d\n"" +
+        ""CPlIZC+CQmTFKPGzT0WDNc3EbPPKcx8ECRf1Zo94Tqnzv7FLgCmr0o4O9e6E3yss\n"" +
+        ""Uwp7EKPUQyAwBkc+pHwqUmOPqHB+z28JUOwqoD0vQQKBgQDNiXSydWh9BUWAleQU\n"" +
+        ""fgSF0bjlt38HVcyMKGC1xQhi8VeAfLJxGCGbdxsPFNCtMPDLRRyd4xHBmsCmPPli\n"" +
+        ""CFHD1UbfNuKma6azl6A86geuTolgrHoxp57tZwoBpG9JHoTA53pfBPxb8q39YXKh\n"" +
+        ""DSXsJVldxsHwzFAklj3ZqzWq3QKBgQDA6M/VW3SXEt1NWwMI+WGa/QKHDjLDhZzF\n"" +
+        ""F3iQTtzDDmA4louAzX1cykNo6Y7SpORi0ralml65iwT2HZtE8w9vbw4LNmBiHmlX\n"" +
+        ""AvpZSHT6/7nQeiFtxZu9cyw4GGpNSaeqp4Cq6TGYmfbq4nIdryzUU2AgsqSZyrra\n"" +
+        ""xh7K+2I4jQKBgGjC8xQy+7sdgLt1qvc29B8xMkkEKl8WwFeADSsY7plf4fW/mURD\n"" +
+        ""xH11S/l35pUgKNuysk9Xealws1kIIyRwkRx8DM+hLg0dOa64Thg+QQP7S9JWl0HP\n"" +
+        ""6hWfO15y7bYbNBcO5TShWe+T1lMb5E1qYjXnI5HEyP1vZjn/yi60MXqRAoGAe6F4\n"" +
+        ""+QLIwL1dSOMoGctBS4QU55so23e41fNJ2CpCf1uqPPn2Y9DOI/aYpxbv6n20xMTI\n"" +
+        ""O2+of37h6h1lUhX38XGZ7YOm15sn5ZTJ/whZuDbFzh9HZ0N6oTq7vyOelPO8WblJ\n"" +
+        ""077pgyRBQ51mhzGqKFVayPnUVZ/Ais7oEyxycU0CgYEAzEUhmN22ykywh0My83z/\n"" +
+        ""7yl2tyrlv2hcZbaP7+9eHdUafGG8jMTVD7jxhzAbiSo2UeyHUnAItDnLetLh89K6\n"" +
+        ""0oF3/rZLqugtb+f48dgRE/SDF4Itgp5fDqWHLhEW7ZhWCFlFgZ3sq0XryIxzFof0\n"" +
+        ""O/Fd1NnotirzTnob5ReblIM=""));
+
+    assertNotNull(jwt);
+
+
+    // lets mock a oauth2 server using code auth code flow
+    OAuth2AuthHandler oauth2Handler = OAuth2AuthHandler.create(oauth);
+
+    // protect everything under /protected
+    router.route(""/protected/*"").handler(oauth2Handler);
+    // mount some handler under the protected zone
+    router.route(""/protected/somepage"").handler(rc -> {
+      assertNotNull(rc.user());
+      rc.response().end(""Welcome to the protected resource!"");
+    });
+
+
+    testRequest(HttpMethod.GET, ""/protected/somepage"", 500, ""Internal Server Error"");
+    // Now try again with fake credentials
+    testRequest(HttpMethod.GET, ""/protected/somepage"", req -> req.putHeader(""Authorization"", ""Bearer 4adc339e0""), 401, ""Unauthorized"", ""Unauthorized"");
+    // Now try again with real credentials
+    String accessToken = jwt.sign(
+      new JsonObject(
+        ""{\n"" +
+          ""      \""iss\"": \""https://server.example.com\"",\n"" +
+          ""      \""aud\"": \""s6BhdRkqt3\"",\n"" +
+          ""      \""jti\"": \""a-123\"",\n"" +
+          ""      \",0.0,3.0,0.0,tfidf
,,,,,,,,,
CVE-2019-16237,CVE-2019-16237/0968da1ff76e7443c2590f4182087bb501d9c8f5,https://github.com/dino/dino/commit/0968da1ff76e7443c2590f4182087bb501d9c8f5,<s>Dino before 2019-09-10 does not properly check the source of an MAM message in module/xep/0313_message_archive_management.vala.</s>,"<s>Only notify on last MAM message, only if not read
fixes #293
</s>"," diff --git a/xmpp-vala/src/module/xep/0313_message_archive_management.vala b/xmpp-vala/src/module/xep/0313_message_archive_management.vala
index 343a5fbd..00f8f99b 100644
--- a/xmpp-vala/src/module/xep/0313_message_archive_management.vala
+++ b/xmpp-vala/src/module/xep/0313_message_archive_management.vala
@@ -14,7 +14,8 @@ public class Module : XmppStreamModule {
 
     private ReceivedPipelineListener received_pipeline_listener = new ReceivedPipelineListener();
 
-    public void query_archive(XmppStream stream, string? jid, DateTime? start, DateTime? end) {
+    public delegate void OnFinished(XmppStream stream);
+    public void query_archive(XmppStream stream, string? jid, DateTime? start, DateTime? end, owned OnFinished? on_finished = null) {
         if (stream.get_flag(Flag.IDENTITY) == null) return;
 
         DataForms.DataForm data_form = new DataForms.DataForm();
@@ -38,7 +39,7 @@ public class Module : XmppStreamModule {
         }
         StanzaNode query_node = new StanzaNode.build(""query"", NS_VER(stream)).add_self_xmlns().put_node(data_form.get_submit_node());
         Iq.Stanza iq = new Iq.Stanza.set(query_node);
-        stream.get_module(Iq.Module.IDENTITY).send_iq(stream, iq, page_through_results);
+        stream.get_module(Iq.Module.IDENTITY).send_iq(stream, iq, (stream, iq) => { page_through_results(stream, iq, on_finished); });
     }
 
     public override void attach(XmppStream stream) {
@@ -53,10 +54,11 @@ public class Module : XmppStreamModule {
     public override string get_ns() { return NS_URI; }
     public override string get_id() { return IDENTITY.id; }
 
-    private static void page_through_results(XmppStream stream, Iq.Stanza iq) {
+    private static void page_through_results(XmppStream stream, Iq.Stanza iq, owned OnFinished? on_finished = null) {
         string? last = iq.stanza.get_deep_string_content(NS_VER(stream) + "":fin"", ""http://jabber.org/protocol/rsm"" + "":set"", ""last"");
         if (last == null) {
             stream.get_flag(Flag.IDENTITY).cought_up = true;
+            if (on_finished != null) on_finished(stream);
             return;
         }
 
@@ -67,7 +69,7 @@ public class Module : XmppStreamModule {
                     )
                 )
             );
-        stream.get_module(Iq.Module.IDENTITY).send_iq(stream, paging_iq, page_through_results);
+        stream.get_module(Iq.Module.IDENTITY).send_iq(stream, paging_iq, (stream, iq) => { page_through_results(stream, iq, on_finished); });
     }
 
     private void query_availability(XmppStream stream) {
",0.0,3.0,0.0,lime
CVE-2019-16237,CVE-2019-16237/307f16cc86dd2b95aa02ab8a85110e4a2d5e7363,https://github.com/dino/dino/commit/307f16cc86dd2b95aa02ab8a85110e4a2d5e7363,<s>Dino before 2019-09-10 does not properly check the source of an MAM message in module/xep/0313_message_archive_management.vala.</s>,"<s>Fix check of source of MAM message
</s>"," diff --git a/xmpp-vala/src/module/xep/0313_message_archive_management.vala b/xmpp-vala/src/module/xep/0313_message_archive_management.vala
index 674224c9..e99193a7 100644
--- a/xmpp-vala/src/module/xep/0313_message_archive_management.vala
+++ b/xmpp-vala/src/module/xep/0313_message_archive_management.vala
@@ -94,11 +94,16 @@ public class ReceivedPipelineListener : StanzaListener<MessageStanza> {
     public override string[] after_actions { get { return after_actions_const; } }
 
     public override async bool run(XmppStream stream, MessageStanza message) {
-        //        if (message.from != stream.remote_name) return;
         if (stream.get_flag(Flag.IDENTITY) == null) return false;
 
         StanzaNode? message_node = message.stanza.get_deep_subnode(NS_VER(stream) + "":result"", ""urn:xmpp:forward:0:forwarded"", Xmpp.NS_URI + "":message"");
         if (message_node != null) {
+            // MAM messages must come from our server // TODO or a MUC server
+            if (!message.from.equals(stream.get_flag(Bind.Flag.IDENTITY).my_jid.bare_jid)) {
+                warning(""Received alledged MAM message from %s, ignoring"", message.from.to_string());
+                return true;
+            }
+
             StanzaNode? forward_node = message.stanza.get_deep_subnode(NS_VER(stream) + "":result"", ""urn:xmpp:forward:0:forwarded"", DelayedDelivery.NS_URI + "":delay"");
             DateTime? datetime = DelayedDelivery.Module.get_time_for_node(forward_node);
             message.add_flag(new MessageFlag(datetime));
",1.0,3.0,1.0,lime
,,,,,,,,,
CVE-2019-11812,CVE-2019-11812/3a085a6ceea00b3ab674a984dd56c1846ef775ff,https://github.com/MISP/MISP/commit/3a085a6ceea00b3ab674a984dd56c1846ef775ff,"<s>A persistent XSS issue was discovered in app/View/Helper/CommandHelper.php in MISP before 2.4.107. JavaScript can be included in the discussion interface, and can be triggered by clicking on the link.</s>","<s>fix: [security] Fix persistent xss via discussion links via javascript:// links
- low impact as it requires user interaction to trigger
- as reported by João Lucas Melo Brasio from Elytron Security S.A. (https://elytronsecurity.com)
</s>"," diff --git a/app/View/Helper/CommandHelper.php b/app/View/Helper/CommandHelper.php
index 8cc94c687..49c828774 100644
--- a/app/View/Helper/CommandHelper.php
+++ b/app/View/Helper/CommandHelper.php
@@ -68,10 +68,14 @@ App::uses('AppHelper', 'View/Helper');
                             $replacement = '%MALFORMED URL%';
                         } else {
                             if (filter_var(str_replace('$1', $data, $this->__replacement[$trigger]['url']), FILTER_VALIDATE_URL)) {
-                                $replacement = $this->Html->link(
-                                    str_replace('$1', $data, $this->__replacement[$trigger]['text']),
-                                    str_replace('$1', $data, $this->__replacement[$trigger]['url'])
-                                );
+                                if (substr($data, 0, 7) === 'http://' || substr($data, 0, 8) === 'https://') {
+                                    $replacement = $this->Html->link(
+                                        str_replace('$1', $data, $this->__replacement[$trigger]['text']),
+                                        str_replace('$1', $data, $this->__replacement[$trigger]['url'])
+                                    );
+                                } else {
+                                    $replacement = '%MALFORMED URL%';
+                                }
                             } else {
                                 $replacement = '%MALFORMED URL%';
                             }
",1.0,3.0,1.0,tfidf
CVE-2019-11812,CVE-2019-11812/6065023d23647288607baf593193aba408c8d00e,https://github.com/MISP/MISP/commit/6065023d23647288607baf593193aba408c8d00e,"<s>A persistent XSS issue was discovered in app/View/Helper/CommandHelper.php in MISP before 2.4.107. JavaScript can be included in the discussion interface, and can be triggered by clicking on the link.</s>","<s>fix: [UI] Notice errors fixed in the discussion threads
</s>"," diff --git a/app/View/Helper/CommandHelper.php b/app/View/Helper/CommandHelper.php
index 49c828774..9f0ae9bf1 100644
--- a/app/View/Helper/CommandHelper.php
+++ b/app/View/Helper/CommandHelper.php
@@ -36,7 +36,7 @@ App::uses('AppHelper', 'View/Helper');
             $closing = preg_match('%\[/' . $trigger . '\]%isU', $string, $closing_matches, PREG_OFFSET_CAPTURE);
             $opening_len = strlen($trigger) + 2;
             $closing_len = $opening_len + 1;
-            if ((count($opening) !== count($closing))) return false;
+            if ((count($opening_matches) !== count($closing_matches))) return false;
             $pairs = array();
             $rearrangedTags = array();
             foreach ($opening_matches as $opening_tag) {
",0.0,3.0,0.0,tfidf
,,,,,,,,,
CVE-2020-10246,CVE-2020-10246/218ea0333c037682ee3dc6b0d03197420f62a9e2,https://github.com/MISP/MISP/commit/218ea0333c037682ee3dc6b0d03197420f62a9e2,<s>MISP 2.4.122 has reflected XSS via unsanitized URL parameters. This is related to app/View/Users/statistics_orgs.ctp.</s>,"<s>new: [dashboard] added a way to auto reload widgets
- has to be defined in the code of the widget
</s>"," diff --git a/app/View/Elements/dashboard/Widgets/SimpleList.ctp b/app/View/Elements/dashboard/Widgets/SimpleList.ctp
new file mode 100644
index 000000000..273a6c2ff
--- /dev/null
+++ b/app/View/Elements/dashboard/Widgets/SimpleList.ctp
@@ -0,0 +1,14 @@
+<?php
+table style="" foreach ($data as $element) {
+<?php
+    if (!empty($element['type']) && $element['type'] === 'gap') {
+ $max = max($data['logarithmic echo '<br />';
+ else {
+    } else {
+max = max($data['data']);
+ echo sprintf(
+    foreach ($data['data'] as $entry => $ '<div><span class=""bold"">%s</span>: <span class=""%s"">%s</span>%s</div>',
+arithmic'])) {
+        h($element['title']),
+['logarithmic'][$entry];
+    empty($element['class']) ? 'blue' : h($element['class']),
+           '<tr><td !isset($element['value']) ? '' : h($element['value']),
+tr>',
+           empty($element['html']) ? '' : $element['html']
+          h($ );
++       }
+   ' }
100%',
+            sprintf(
+                '<div title=""%s"" style=""%s"">%s</div>',
+                h($entry) . ': ' . h($count),
+                sprintf(
+                    'background-color:%s; width:%s; color:white; text-align:center;',
+                    (empty($data['colours'][$entry]) ? '#0088cc' : h($data['colours'][$entry])),
+                    100 * h($value) / $max . '%;'
+                ),
+                h($count)
+            ),
+            '&nbsp;'
+        );
+    }
+?>
+</table>
",0.0,3.0,0.0,tfidf
CVE-2020-10246,CVE-2020-10246/43a0757fb33769d9ad4ca09e8f2ac572f9f6a491,https://github.com/MISP/MISP/commit/43a0757fb33769d9ad4ca09e8f2ac572f9f6a491,<s>MISP 2.4.122 has reflected XSS via unsanitized URL parameters. This is related to app/View/Users/statistics_orgs.ctp.</s>,"<s>fix: [security] Fix reflected xss via unsanitized URL parameters
- As reported by an external pentest company on behalf of the Centre for Cyber security Belgium (CCB)
</s>"," diff --git a/app/View/Users/statistics_orgs.ctp b/app/View/Users/statistics_orgs.ctp
index 3bbf4c836..6f22950ea 100644
--- a/app/View/Users/statistics_orgs.ctp
+++ b/app/View/Users/statistics_orgs.ctp
@@ -12,7 +12,9 @@
                 'external' => array('selected' => false, 'text' => __('Known remote organisations')),
                 'all' => array('selected' => false, 'text' => __('All organisations'))
         );
-        $types[$scope]['selected'] = true;
+        if (isset($types[$scope])) {
+            $types[$scope]['selected'] = true;
+        }
     ?>
     <h4><?php echo __('Organisation list');?></h4>
     <p><?php echo __('Quick overview over the organisations residing on or known by this instance.');?></p>
",1.0,3.0,1.0,tfidf
,,,,,,,,,
CVE-2020-36364,CVE-2020-36364/5ab1e37dc8d6415d04354e1a116f3d82e9555f5c,https://github.com/smartstore/SmartStoreNET/commit/5ab1e37dc8d6415d04354e1a116f3d82e9555f5c,<s>An issue was discovered in Smartstore (aka SmartStoreNET) before 4.1.0. Administration/Controllers/ImportController.cs allows path traversal (for copy and delete actions) in the ImportController.Create method via a TempFileName field.</s>,"<s>Resolves #2112 Path traversal vulnerability
</s>"," diff --git a/src/Presentation/SmartStore.Web/Administration/Controllers/ImportController.cs b/src/Presentation/SmartStore.Web/Administration/Controllers/ImportController.cs
index 61bc92246..c749d82d2 100644
--- a/src/Presentation/SmartStore.Web/Administration/Controllers/ImportController.cs
+++ b/src/Presentation/SmartStore.Web/Administration/Controllers/ImportController.cs
@@ -384,6 +384,11 @@ namespace SmartStore.Admin.Controllers
         [Permission(Permissions.Configuration.Import.Create)]
         public ActionResult Create(ImportProfileModel model)
         {
+            if (PathHelper.HasInvalidFileNameChars(model.TempFileName))
+            {
+                return new HttpStatusCodeResult(HttpStatusCode.BadRequest, ""Invalid file name."");
+            }
+
             var importFile = Path.Combine(FileSystemHelper.TempDirTenant(), model.TempFileName.EmptyNull());
 
             if (System.IO.File.Exists(importFile))
",1.0,3.0,1.0,tfidf
CVE-2020-36364,CVE-2020-36364/5c85bdc9cf4d98a5808b0eb5584a90e7c5f41acb,https://github.com/smartstore/SmartStoreNET/commit/5c85bdc9cf4d98a5808b0eb5584a90e7c5f41acb,<s>An issue was discovered in Smartstore (aka SmartStoreNET) before 4.1.0. Administration/Controllers/ImportController.cs allows path traversal (for copy and delete actions) in the ImportController.Create method via a TempFileName field.</s>,"<s>Export: an empty export file was created at the end of an export when using the batch-size option
</s>"," diff --git a/src/Libraries/SmartStore.Services/DataExchange/Export/ExportDataSegmenter.cs b/src/Libraries/SmartStore.Services/DataExchange/Export/ExportDataSegmenter.cs
index cb44a3961..fbab47fab 100644
--- a/src/Libraries/SmartStore.Services/DataExchange/Export/ExportDataSegmenter.cs
+++ b/src/Libraries/SmartStore.Services/DataExchange/Export/ExportDataSegmenter.cs
@@ -121,7 +121,7 @@ namespace SmartStore.Services.DataExchange.Export

 
 
 ## Smartstore 4.0.1
       return false;
                 }
 
-				return true;
+				return RecordCount < TotalRecords;
 			}
 		}
 
",0.0,3.0,0.0,tfidf
,,,,,,,,,
CVE-2016-10267,CVE-2016-10267/43bc256d8ae44b92d2734a3c5bc73957a4d7c1ec,https://github.com/vadz/libtiff/commit/43bc256d8ae44b92d2734a3c5bc73957a4d7c1ec,"<s>LibTIFF 4.0.7 allows remote attackers to cause a denial of service (divide-by-zero error and application crash) via a crafted TIFF image, related to libtiff/tif_ojpeg.c:816:8.</s>","<s>* libtiff/tif_ojpeg.c: make OJPEGDecode() early exit in case of failure in
OJPEGPreDecode(). This will avoid a divide by zero, and potential other issues.
Reported by Agostino Sarubbo.
Fixes http://bugzilla.maptools.org/show_bug.cgi?id=2611
</s>"," diff --git a/libtiff/tif_ojpeg.c b/libtiff/tif_ojpeg.c
index 1ccc3f9b..f19e8fd0 100644
--- a/libtiff/tif_ojpeg.c
+++ b/libtiff/tif_ojpeg.c
@@ -244,6 +244,7 @@ typedef enum {
 
 typedef struct {
 	TIFF* tif;
+        int decoder_ok;
 	#ifndef LIBJPEG_ENCAP_EXTERNAL
 	JMP_BUF exit_jmpbuf;
 	#endif
@@ -722,6 +723,7 @@ OJPEGPreDecode(TIFF* tif, uint16 s)
 		}
 		sp->write_curstrile++;
 	}
+	sp->decoder_ok = 1;
 	return(1);
 }
 
@@ -784,8 +786,14 @@ OJPEGPreDecodeSkipScanlines(TIFF* tif)
 static int
 OJPEGDecode(TIFF* tif, uint8* buf, tmsize_t cc, uint16 s)
 {
+        static const char module[]=""OJPEGDecode"";
 	OJPEGState* sp=(OJPEGState*)tif->tif_data;
 	(void)s;
+        if( !sp->decoder_ok )
+        {
+            TIFFErrorExt(tif->tif_clientdata,module,""Cannot decode: decoder not correctly initialized"");
+            return 0;
+        }
 	if (sp->libjpeg_jpeg_query_style==0)
 	{
 		if (OJPEGDecodeRaw(tif,buf,cc)==0)
",1.0,1.0,1.0,lime
CVE-2016-10267,CVE-2016-10267/8283e4d1b7e53340684d12932880cbcbaf23a8c1,https://github.com/vadz/libtiff/commit/8283e4d1b7e53340684d12932880cbcbaf23a8c1,"<s>LibTIFF 4.0.7 allows remote attackers to cause a denial of service (divide-by-zero error and application crash) via a crafted TIFF image, related to libtiff/tif_ojpeg.c:816:8.</s>","<s>* libtiff/tif_ojpeg.c: fix leak in OJPEGReadHeaderInfoSecTablesAcTable
when read fails.
Patch by Nicolás Peña.
Fixes http://bugzilla.maptools.org/show_bug.cgi?id=2659
</s>"," diff --git a/libtiff/tif_ojpeg.c b/libtiff/tif_ojpeg.c
index f19e8fd0..b92f0ebd 100644
--- a/libtiff/tif_ojpeg.c
+++ b/libtiff/tif_ojpeg.c
@@ -1918,7 +1918,10 @@ OJPEGReadHeaderInfoSecTablesAcTable(TIFF* tif)
 				rb[sizeof(uint32)+5+n]=o[n];
 			p=(uint32)TIFFReadFile(tif,&(rb[sizeof(uint32)+21]),q);
 			if (p!=q)
+                        {
+                                _TIFFfree(rb);
 				return(0);
+                        }
 			sp->actable[m]=rb;
 			sp->sos_tda[m]=(sp->sos_tda[m]|m);
 		}
",0.0,1.0,0.0,lime
,,,,,,,,,
CVE-2014-3576,CVE-2014-3576/00921f22ff9a8792d7663ef8fadd4823402a6324,https://github.com/apache/activemq/commit/00921f22ff9a8792d7663ef8fadd4823402a6324,<s>The processControlCommand function in broker/TransportConnection.java in Apache ActiveMQ before 5.11.0 allows remote attackers to cause a denial of service (shutdown) via a shutdown command.</s>,"<s>Remove unused ConnectionControl handling. 
</s>"," diff --git a/activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java b/activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java
index 22a63b8cf..5bb7ec1ec 100755
--- a/activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java
+++ b/activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java
@@ -1534,10 +1534,6 @@ public class TransportConnection implements Connection, Task, CommandVisitor {
 
     @Override
     public Response processControlCommand(ControlCommand command) throws Exception {
-        String control = command.getCommand();
-        if (control != null && control.equals(""shutdown"")) {
-            System.exit(0);
-        }
         return null;
     }
 
",1.0,3.0,1.0,tfidf
CVE-2014-3576,CVE-2014-3576/d54e0d6ab590b6a6148a5e2629c45b95d3f40eb8,https://github.com/apache/activemq/commit/d54e0d6ab590b6a6148a5e2629c45b95d3f40eb8,<s>The processControlCommand function in broker/TransportConnection.java in Apache ActiveMQ before 5.11.0 allows remote attackers to cause a denial of service (shutdown) via a shutdown command.</s>,"<s>https://issues.apache.org/jira/browse/AMQ-5198
member variable scheduler assignment escapes the synchronization block
before the scheduler instance is fully initialized. 
</s>"," diff --git a/activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java b/activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java
index 2df860738..925231064 100755
--- a/activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java
+++ b/activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java
@@ -2556,8 +2556,9 @@ public class ActiveMQConnection implements Connection, TopicConnection, QueueCon
                 if (result == null) {
                     checkClosed();
                     try {
-                        result = scheduler = new Scheduler(""ActiveMQConnection[""+info.getConnectionId().getValue()+""] Scheduler"");
-                        scheduler.start();
+                        result = new Scheduler(""ActiveMQConnection[""+info.getConnectionId().getValue()+""] Scheduler"");
+                        result.start();
+                        scheduler = result;
                     } catch(Exception e) {
                         throw JMSExceptionSupport.create(e);
                     }
",0.0,3.0,0.0,tfidf
,,,,,,,,,
CVE-2020-27611,CVE-2020-27611/18c20261e15c31ecf1d9a552182e371296f2ab64,https://github.com/bigbluebutton/bigbluebutton/commit/18c20261e15c31ecf1d9a552182e371296f2ab64,"<s>BigBlueButton through 2.2.28 uses STUN/TURN resources from a third party, which may represent an unintended endpoint.</s>","<s>Change default value of iceGatheringTimeout to current's SIP.js default
For some reason (still investigating), using turn/coturn on 443/tcp makes firefox's iceGathering process (during echo test) takes 12+ seconds (tested on webrtc's trickle page with multiple instances).
This was found when testing the current default (15s) on production with a private turn/coturn server on port 443/tcp. For default bbb setup (stun only), echo test still runs fast.
To avoid adding extra delay to iceGathering on this scenario (Firefox + turn on 443/tcp), i am just setting the default value back to the 5s (old default).
So , for those who wants to reduce the 1004 occurrences, increasing the iceGatheringTimeout could help (just be aware this adds delay on the mentioned scenario).
</s>"," diff --git a/bigbluebutton-html5/imports/api/audio/client/bridge/sip.js b/bigbluebutton-html5/imports/api/audio/client/bridge/sip.js
index 8cdbc628fe..73aaab427f 100755
--- a/bigbluebutton-html5/imports/api/audio/client/bridge/sip.js
+++ b/bigbluebutton-html5/imports/api/audio/client/bridge/sip.js
@@ -30,7 +30,7 @@ const AUDIO_SESSION_NUM_KEY = 'AudioSessionNumber';
 const USER_AGENT_RECONNECTION_ATTEMPTS = 3;
 const USER_AGENT_RECONNECTION_DELAY_MS = 5000;
 const USER_AGENT_CONNECTION_TIMEOUT_MS = 5000;
-const ICE_GATHERING_TIMEOUT = MEDIA.iceGatheringTimeout || 15000;
+const ICE_GATHERING_TIMEOUT = MEDIA.iceGatheringTimeout || 5000;
 
 const getAudioSessionNumber = () => {
   let currItem = parseInt(sessionStorage.getItem(AUDIO_SESSION_NUM_KEY), 10);
",0.0,1.0,0.0,tfidf
CVE-2020-27611,CVE-2020-27611/d0bc77c3dbd858295004f15d7a57ec35e6b203d6,https://github.com/bigbluebutton/bigbluebutton/commit/d0bc77c3dbd858295004f15d7a57ec35e6b203d6,"<s>BigBlueButton through 2.2.28 uses STUN/TURN resources from a third party, which may represent an unintended endpoint.</s>","<s>Updating stun: for bbb-web to use Google's stun server
</s>"," diff --git a/bigbluebutton-web/grails-app/conf/spring/turn-stun-servers.xml b/bigbluebutton-web/grails-app/conf/spring/turn-stun-servers.xml
index b36963d3c5..90913545e0 100755
--- a/bigbluebutton-web/grails-app/conf/spring/turn-stun-servers.xml
+++ b/bigbluebutton-web/grails-app/conf/spring/turn-stun-servers.xml
@@ -25,7 +25,7 @@ with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
             "">
 
     <bean id=""stun1"" class=""org.bigbluebutton.web.services.turn.StunServer"">
-        <constructor-arg index=""0"" value=""stun:stun.freeswitch.org""/>
+        <constructor-arg index=""0"" value=""stun:stun.l.google.com:19302""/>
     </bean>
 
     <!--bean id=""stun2"" class=""org.bigbluebutton.web.services.turn.StunServer"">
",1.0,1.0,1.0,tfidf
,,,,,,,,,
CVE-2019-20398,CVE-2019-20398/7852b272ef77f8098c35deea6c6f09cb78176f08,https://github.com/CESNET/libyang/commit/7852b272ef77f8098c35deea6c6f09cb78176f08,<s>A NULL pointer dereference is present in libyang before v1.0-r3 in the function lys_extension_instances_free() due to a copy of unresolved extensions in lys_restr_dup(). Applications that use libyang to parse untrusted input yang files may crash.</s>,"<s>schema tree BUGFIX do not copy unresolved exts in groupings restrictions
Fixes #773
</s>"," diff --git a/src/tree_schema.c b/src/tree_schema.c
index 4ffd9efc5..d29b63760 100755
--- a/src/tree_schema.c
+++ b/src/tree_schema.c
@@ -1601,8 +1601,11 @@ lys_restr_dup(struct lys_module *mod, struct lys_restr *old, int size, int shall
     LY_CHECK_ERR_RETURN(!result, LOGMEM(mod->ctx), NULL);
 
     for (i = 0; i < size; i++) {
-        result[i].ext_size = old[i].ext_size;
-        lys_ext_dup(mod->ctx, mod, old[i].ext, old[i].ext_size, &result[i], LYEXT_PAR_RESTR, &result[i].ext, shallow, unres);
+        /* copying unresolved extensions is not supported */
+        if (unres_schema_find(unres, -1, (void *)&old[i].ext, UNRES_EXT) == -1) {
+            result[i].ext_size = old[i].ext_size;
+            lys_ext_dup(mod->ctx, mod, old[i].ext, old[i].ext_size, &result[i], LYEXT_PAR_RESTR, &result[i].ext, shallow, unres);
+        }
         result[i].expr = lydict_insert(mod->ctx, old[i].expr, 0);
         result[i].dsc = lydict_insert(mod->ctx, old[i].dsc, 0);
         result[i].ref = lydict_insert(mod->ctx, old[i].ref, 0);
",1.0,3.0,1.0,lime
CVE-2019-20398,CVE-2019-20398/bdb596ddc07596fa212f231135b87d0b9178f6f8,https://github.com/CESNET/libyang/commit/bdb596ddc07596fa212f231135b87d0b9178f6f8,<s>A NULL pointer dereference is present in libyang before v1.0-r3 in the function lys_extension_instances_free() due to a copy of unresolved extensions in lys_restr_dup(). Applications that use libyang to parse untrusted input yang files may crash.</s>,"<s>resolve BUGFIX handle yet unresolved if-features
Fixes #772
</s>"," diff --git a/src/resolve.c b/src/resolve.c
index e8bd75766..af83bdfbf 100644
--- a/src/resolve.c
+++ b/src/resolve.c
@@ -1402,7 +1402,7 @@ resolve_iffeature(struct lys_iffeature *expr)
 {
     int index_e = 0, index_f = 0;
 
-    if (expr->expr) {
+    if (expr->expr && expr->features[0]) {
         return resolve_iffeature_recursive(expr, &index_e, &index_f);
     }
     return 0;
",0.0,3.0,0.0,lime
,,,,,,,,,
CVE-2021-44273,CVE-2021-44273/6a3d4fef6b6ffc04e337e259661911cd077537cf,https://github.com/e2guardian/e2guardian/commit/6a3d4fef6b6ffc04e337e259661911cd077537cf,"<s>e2guardian v5.4.x <= v5.4.3r is affected by missing SSL certificate validation in the SSL MITM engine. In standalone mode (i.e., acting as a proxy or a transparent proxy), with SSL MITM enabled, e2guardian, if built with OpenSSL v1.1.x, did not validate hostnames in certificates of the web servers that it connected to, and thus was itself vulnerable to MITM attacks.</s>","<s>Update version to v5.4.5
</s>"," diff --git a/configure.ac b/configure.ac
index 07b8979a..229a383a 100644
--- a/configure.ac
+++ b/configure.ac
@@ -4,7 +4,7 @@
 AC_DEFINE([__SSLMITM],[""""],[Define to enable SSL MITM])
 
 AC_PREREQ(2.57)
-AC_INIT(e2guardian, 5.4.3r)
+AC_INIT(e2guardian, 5.4.4)
 AM_INIT_AUTOMAKE
 AC_CONFIG_HEADERS([e2config.h])
 AC_CONFIG_MACRO_DIR([m4])
",0.0,2.0,0.0,tfidf
CVE-2021-44273,CVE-2021-44273/eae46a7e2a57103aadca903c4a24cca94dc502a2,https://github.com/e2guardian/e2guardian/commit/eae46a7e2a57103aadca903c4a24cca94dc502a2,"<s>e2guardian v5.4.x <= v5.4.3r is affected by missing SSL certificate validation in the SSL MITM engine. In standalone mode (i.e., acting as a proxy or a transparent proxy), with SSL MITM enabled, e2guardian, if built with OpenSSL v1.1.x, did not validate hostnames in certificates of the web servers that it connected to, and thus was itself vulnerable to MITM attacks.</s>","<s>Fix bug #707 cert hostnames not being checked
- only happened when openssl v1.1 is used
</s>"," diff --git a/src/Socket.cpp b/src/Socket.cpp
index 6ef9619c..2b687ef5 100644
--- a/src/Socket.cpp
+++ b/src/Socket.cpp
@@ -377,6 +377,10 @@ int Socket::startSslClient(const std::string &certificate_path, String hostname)
     //fcntl(this->getFD() ,F_SETFL, O_NONBLOCK); // blocking mode used currently
     SSL_set_fd(ssl, this->getFD());
     SSL_set_tlsext_host_name(ssl, hostname.c_str());
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#else
+  X509_VERIFY_PARAM_set1_host(SSL_get0_param(ssl),hostname.c_str(),0);
+#endif
 
     //make io non blocking as select wont tell us if we can do a read without blocking
     //BIO_set_nbio(SSL_get_rbio(ssl),1l);  // blocking mode used currently
",1.0,2.0,1.0,tfidf
,,,,,,,,,
CVE-2017-5545,CVE-2017-5545/7391a506352c009fe044dead7baad9e22dd279ee,https://github.com/libimobiledevice/libplist/commit/7391a506352c009fe044dead7baad9e22dd279ee,<s>The main function in plistutil.c in libimobiledevice libplist through 1.12 allows attackers to obtain sensitive information from process memory or cause a denial of service (buffer over-read) via Apple Property List data that is too short.</s>,"<s>plistutil: Prevent OOB heap buffer read by checking input size
As pointed out in #87 plistutil would do a memcmp with a heap buffer
without checking the size. If the size is less than 8 it would read
beyond the bounds of this heap buffer. This commit prevents that.
</s>"," diff --git a/tools/plistutil.c b/tools/plistutil.c
index 6451604..e943e76 100644
--- a/tools/plistutil.c
+++ b/tools/plistutil.c
@@ -129,6 +129,12 @@ int main(int argc, char *argv[])
     }
 
     stat(options->in_file, &filestats);
+
+    if (filestats.st_size < 8) {
+        printf(""ERROR: Input file is too small to contain valid plist data.\n"");
+        return -1;
+    }
+
     plist_entire = (char *) malloc(sizeof(char) * (filestats.st_size + 1));
     read_size = fread(plist_entire, sizeof(char), filestats.st_size, iplist);
     fclose(iplist);
",1.0,2.0,1.0,tfidf
CVE-2017-5545,CVE-2017-5545/66932417846c68add043d2d5129bcf40d3a5d08c,https://github.com/libimobiledevice/libplist/commit/66932417846c68add043d2d5129bcf40d3a5d08c,<s>The main function in plistutil.c in libimobiledevice libplist through 1.12 allows attackers to obtain sensitive information from process memory or cause a denial of service (buffer over-read) via Apple Property List data that is too short.</s>,"<s>plistutil: Use static buffer for stat()
</s>"," diff --git a/tools/plistutil.c b/tools/plistutil.c
index fc0d7c0..4c17ac7 100644
--- a/tools/plistutil.c
+++ b/tools/plistutil.c
@@ -112,13 +112,12 @@ int main(int argc, char *argv[])
     uint32_t size = 0;
     int read_size = 0;
     char *plist_entire = NULL;
-    struct stat *filestats = (struct stat *) malloc(sizeof(struct stat));
+    struct stat filestats;
     options_t *options = parse_arguments(argc, argv);
 
     if (!options)
     {
         print_usage(argc, argv);
-        free(filestats);
         return 0;
     }
 
@@ -127,9 +126,9 @@ int main(int argc, char *argv[])
     if (!iplist)
         return 1;
 
-    stat(options->in_file, filestats);
-    plist_entire = (char *) malloc(sizeof(char) * (filestats->st_size + 1));
-    read_size = fread(plist_entire, sizeof(char), filestats->st_size, iplist);
+    stat(options->in_file, &filestats);
+    plist_entire = (char *) malloc(sizeof(char) * (filestats.st_size + 1));
+    read_size = fread(plist_entire, sizeof(char), filestats.st_size, iplist);
     fclose(iplist);
 
     // convert from binary to xml or vice-versa
@@ -145,7 +144,6 @@ int main(int argc, char *argv[])
     }
     plist_free(root_node);
     free(plist_entire);
-    free(filestats);
 
     if (plist_out)
     {
",0.0,2.0,0.0,tfidf
,,,,,,,,,
CVE-2018-10360,CVE-2018-10360/76c55eae2f9b0b378332762f6dce544d05eb24d7,https://github.com/file/file/commit/76c55eae2f9b0b378332762f6dce544d05eb24d7,<s>The do_core_note function in readelf.c in libmagic.a in file 5.33 allows remote attackers to cause a denial of service (out-of-bounds read and application crash) via a crafted ELF file.</s>,"<s>Print the Go Build-ID like we do for other elf binaries
</s>"," diff --git a/src/readelf.c b/src/readelf.c
index 1f41b461..db0b35a5 100644
--- a/src/readelf.c
+++ b/src/readelf.c
@@ -27,7 +27,7 @@
 #include ""file.h""
 
 #ifndef lint
-FILE_RCSID(""@(#)$File: readelf.c,v 1.143 2018/06/09 16:00:06 christos Exp $"")
+FILE_RCSID(""@(#)$File: readelf.c,v 1.144 2018/07/08 23:37:33 christos Exp $"")
 #endif
 
 #ifdef BUILTIN_ELF
@@ -556,6 +556,13 @@ do_bid_note(struct magic_set *ms, unsigned char *nbuf, uint32_t type,
 			return 1;
 		return 1;
 	}
+	if (namesz == 4 && strcmp((char *)&nbuf[noff], ""Go"") == 0 &&
+	    type == NT_GO_BUILD_ID && descsz < 128) {
+		if (file_printf(ms, "", Go BuildID=%s"",
+		    (char *)&nbuf[doff]) == -1)
+			return 1;
+		return 1;
+	}
 	return 0;
 }
 
",0.0,1.0,0.0,tfidf
CVE-2018-10360,CVE-2018-10360/a642587a9c9e2dd7feacdf513c3643ce26ad3c22,https://github.com/file/file/commit/a642587a9c9e2dd7feacdf513c3643ce26ad3c22,<s>The do_core_note function in readelf.c in libmagic.a in file 5.33 allows remote attackers to cause a denial of service (out-of-bounds read and application crash) via a crafted ELF file.</s>,"<s>Avoid reading past the end of buffer (Rui Reis)
</s>"," diff --git a/src/readelf.c b/src/readelf.c
index 79c83f9f..1f41b461 100644
--- a/src/readelf.c
+++ b/src/readelf.c
@@ -27,7 +27,7 @@
 #include ""file.h""
 
 #ifndef lint
-FILE_RCSID(""@(#)$File: readelf.c,v 1.142 2018/05/24 18:08:01 christos Exp $"")
+FILE_RCSID(""@(#)$File: readelf.c,v 1.143 2018/06/09 16:00:06 christos Exp $"")
 #endif
 
 #ifdef BUILTIN_ELF
@@ -842,7 +842,8 @@ do_core_note(struct magic_set *ms, unsigned char *nbuf, uint32_t type,
 
 				cname = (unsigned char *)
 				    &nbuf[doff + prpsoffsets(i)];
-				for (cp = cname; *cp && isprint(*cp); cp++)
+				for (cp = cname; cp < nbuf + size && *cp
+				    && isprint(*cp); cp++)
 					continue;
 				/*
 				 * Linux apparently appends a space at the end
",1.0,1.0,1.0,tfidf
,,,,,,,,,
CVE-2020-8935,CVE-2020-8935/382da2b8b09cbf928668a2445efb778f76bd9c8a,https://github.com/google/asylo/commit/382da2b8b09cbf928668a2445efb778f76bd9c8a,<s>An arbitrary memory overwrite vulnerability in Asylo versions up to 0.6.0 allow an attacker to make an Ecall_restore function call to reallocate untrusted code and overwrite sections of the Enclave memory address. We recommend updating your library.</s>,"<s>Check output of ecall_restore is outside enclave
PiperOrigin-RevId: 334265380
Change-Id: Ifbaead6bce56f01b2a4d69f53ca508d0138f6f61
</s>"," diff --git a/asylo/platform/primitives/sgx/ecalls.cc b/asylo/platform/primitives/sgx/ecalls.cc
index a15ff7bc..f253fd41 100644
--- a/asylo/platform/primitives/sgx/ecalls.cc
+++ b/asylo/platform/primitives/sgx/ecalls.cc
@@ -64,7 +64,9 @@ int ecall_restore(const char *input, uint64_t input_len, char **output,
   if (!asylo::primitives::TrustedPrimitives::IsOutsideEnclave(input,
                                                               input_len) ||
       !asylo::primitives::TrustedPrimitives::IsOutsideEnclave(
-          output_len, sizeof(uint64_t))) {
+          output_len, sizeof(uint64_t)) ||
+      !asylo::primitives::TrustedPrimitives::IsOutsideEnclave(output,
+                                                              *output_len)) {
     asylo::primitives::TrustedPrimitives::BestEffortAbort(
         ""ecall_restore: input/output found to not be in untrusted memory."");
   }
",1.0,3.0,0.0,tfidf
CVE-2020-8935,CVE-2020-8935/ed0926bff0e423cd122a18b3d2fc772817f66825,https://github.com/google/asylo/commit/ed0926bff0e423cd122a18b3d2fc772817f66825,<s>An arbitrary memory overwrite vulnerability in Asylo versions up to 0.6.0 allow an attacker to make an Ecall_restore function call to reallocate untrusted code and overwrite sections of the Enclave memory address. We recommend updating your library.</s>,"<s>Check return pointer is outside enclave in realloc
PiperOrigin-RevId: 333769459
Change-Id: If53b5f4317080b8abaf5c4f80ce751f150630bcb
</s>"," diff --git a/asylo/platform/host_call/trusted/host_calls.cc b/asylo/platform/host_call/trusted/host_calls.cc
index 3e6bf103..0532b334 100644
--- a/asylo/platform/host_call/trusted/host_calls.cc
+++ b/asylo/platform/host_call/trusted/host_calls.cc
@@ -644,6 +644,12 @@ void *enc_untrusted_realloc(void *ptr, size_t size) {
   if (!result && size != 0) {
     errno = FromkLinuxErrorNumber(klinux_errno);
   }
+
+  if (!::asylo::primitives::TrustedPrimitives::IsOutsideEnclave(result, size)) {
+    ::asylo::primitives::TrustedPrimitives::BestEffortAbort(
+        ""enc_untrusted_realloc: realloc result should be in untrusted ""
+        ""memory"");
+  }
   return result;
 }
 
",0.0,3.0,1.0,tfidf
,,,,,,,,,
CVE-2019-1010062,CVE-2019-1010062/09f0ab871bf633973cfd9fc4fe59d4a912397cf8,https://github.com/pluck-cms/pluck/commit/09f0ab871bf633973cfd9fc4fe59d4a912397cf8,<s>PluckCMS 4.7.4 and earlier is affected by: CWE-434 Unrestricted Upload of File with Dangerous Type. The impact is: get webshell. The component is: data/inc/images.php line36. The attack vector is: modify the MIME TYPE on HTTP request to upload a php file. The fixed version is: after commit 09f0ab871bf633973cfd9fc4fe59d4a912397cf8.</s>,"<s>Fix issue #44. Thanks to Klaus.
</s>"," diff --git a/data/inc/images.php b/data/inc/images.php
index 99791da..6f09d06 100644
--- a/data/inc/images.php
+++ b/data/inc/images.php
@@ -34,9 +34,13 @@ defined('IN_PLUCK') or exit('Access denied!');
 if (isset($_POST['submit'])) {
 	//Check if the file is JPG, PNG or GIF.
 	if (in_array($_FILES['imagefile']['type'], array('image/pjpeg', 'image/jpeg','image/png', 'image/gif'))) {
+		/* fix issue 44. Thanks to Klaus.  */
+        $imagewhitelist = array('jfif', '.png', '.jpg', '.gif', 'jpeg');  
+        if (!in_array(strtolower(substr($_FILES['imagefile']['name'], -4)), $imagewhitelist))
+			show_error($lang['general']['upload_failed'], 1);
+		/* end of fix issue 44. Thanks to Klaus.  */
 		if (!copy($_FILES['imagefile']['tmp_name'], 'images/'.$_FILES['imagefile']['name']))
 			show_error($lang['general']['upload_failed'], 1);
-
 		else {
 			chmod('images/'.$_FILES['imagefile']['name'], 0666);
 			?>
",1.0,3.0,1.0,tfidf
CVE-2019-1010062,CVE-2019-1010062/cad5f633d7a7b5ba7e1bab773f4dbb506ca36c08,https://github.com/pluck-cms/pluck/commit/cad5f633d7a7b5ba7e1bab773f4dbb506ca36c08,<s>PluckCMS 4.7.4 and earlier is affected by: CWE-434 Unrestricted Upload of File with Dangerous Type. The impact is: get webshell. The component is: data/inc/images.php line36. The attack vector is: modify the MIME TYPE on HTTP request to upload a php file. The fixed version is: after commit 09f0ab871bf633973cfd9fc4fe59d4a912397cf8.</s>,"<s>Fixed an issue with ' in names of pages, files, images etc.
</s>"," diff --git a/data/modules/tinymce/functions.php b/data/modules/tinymce/functions.php
old mode 100644
new mode 100755
index 70861d4..57fee43
--- a/data/modules/tinymce/functions.php
+++ b/data/modules/tinymce/functions.php
@@ -41,21 +41,21 @@ function tinymce_display_code() {
 							foreach ($module_list as $module) {
 								if (module_is_compatible($module) && function_exists($module.'_theme_main')) { ?>
 									{
-										text: '<?php echo $module; ?>',
+										text: '<?php echo sanitize($module); ?>',
 										onclick: function() {
 											editor.insertContent('<div class=""module_<?php echo str_replace(' ', '_',$module);  ?>"">{pluck show_module(<?php echo $module; ?>)}</div>');
-										}
+										},
 
 										<?php //Check if we need to display categories for the module
 										$module_info = call_user_func($module.'_info');
 										if (isset($module_info['categories']) && is_array($module_info['categories'])) { ?>
-										menu[
+										menu:[
 										<?php 
 											foreach ($module_info['categories'] as $category){ ?>
 												{
-													text: <?php echo $category; ?>,
+													text: '<?php echo sanitize($category); ?>',
 													onclick: function() {
-														editor.insertContent('<div class=""module_<?php $hulp = $module.','.$category; echo str_replace(' ', '_', $hulp);  ?>"">{pluck show_module(<?php echo $module.','.$category; ?>)}</div>');
+														editor.insertContent('<div class=""module_<?php $hulp = sanitize($module.','.$category); echo str_replace(' ', '_', $hulp);  ?>"">{pluck show_module(<?php echo sanitize($module.','.$category); ?>)}</div>');
 													}
 												},
 											<?php } ?> {}]
@@ -78,9 +78,9 @@ function tinymce_display_code() {
 						foreach ($images as $image) { ?>
 						{
 
-							text: '<?php echo $image; ?>',
+							text: '<?php echo sanitize($image); ?>',
 							onclick: function() {
-								editor.insertContent('<img src=""images/<?php echo $image;?>"" alt="""" \/>');
+								editor.insertContent('<img src=""images/<?php echo str_replace('\'', '%27', $image);?>"" alt="""" \/>');
 							}
 						},
 					<?php }
@@ -101,9 +101,9 @@ function tinymce_display_code() {
 						$page = get_page_seoname($page);
 						preg_match_all('|\/|', $page, $indent);
 						?>{
-							text: '<?php echo $title; ?>',
+							text: '<?php echo sanitize($title); ?>',
 							onclick: function() {
-								editor.insertContent('<a href=""?file=<?php echo $page; ?>"" title=""<?php echo $title; ?>""><?php echo $title; ?><\/a>');
+								editor.insertContent('<a href=""?file=<?php echo str_replace('\'', '%27', $page); ?>"" title=""<?php echo sanitize($title); ?>""><?php echo sanitize($title); ?><\/a>');
 							}
 						},
 						<?php
@@ -120,9 +120,9 @@ function tinymce_display_code() {
 					menu: [ <?php
 					foreach ($files as $file) {
 						?>{
-							text: '<?php echo $file; ?>',
+							text: '<?php echo sanitize($file); ?>',
 							onclick: function() {
-								editor.insertContent('<a href=""files/<?php echo $file; ?>"" title=""<?php echo $file; ?>""><?php echo $file; ?><\/a>');
+								editor.insertContent('<a href=""files/<?php echo sanitize($file); ?>"" title=""<?php echo sanitize($file); ?>""><?php echo sanitize($file); ?><\/a>');
 							}
 						},
 						<?php
@@ -145,4 +145,4 @@ toolbar3: ""table | hr removeformat | subscript superscript | charmap emoticons |
 });	</script>
 	<?php
 }
-?>
\ No newline at end of file
+?>
",0.0,3.0,0.0,tfidf
,,,,,,,,,
CVE-2021-21433,CVE-2021-21433/c2282c99cf6b7f711a7ebbdbe13940f0307a81a5,https://github.com/DEMON1A/Discord-Recon/commit/c2282c99cf6b7f711a7ebbdbe13940f0307a81a5,<s>Discord Recon Server is a bot that allows you to do your reconnaissance process from your Discord. Remote code execution in version 0.0.1 would allow remote users to execute commands on the server resulting in serious issues. This flaw is patched in 0.0.2.</s>,"<s>Update README.md
</s>"," diff --git a/README.md b/README.md
index c873d68..da81131 100644
--- a/README.md
+++ b/README.md
@@ -1,7 +1,7 @@
 # Discord-Recon [![Tweet](https://img.shields.io/twitter/url/http/shields.io.svg?style=social)](https://twitter.com/intent/tweet?text=Check%20out%20Discord-Recon%20on%20github!&url=https://github.com/DEMON1A/Discord-Recon&via=DemoniaSlash&hashtags=recon,bugbounty)
 Discord Recon Server Allows You To Do Your Reconnaissance Process From Your Discord.
 
-## What's Discord Recon?
+## What's Discord Recon? :confused:
 - Discord Recon is a Cool Discord Bot Working On Your Server To Make It Easy To Do Recon From Your Discord Server. The Bot Has Been Linked With Many Tools Like: Nuclei, Findomain, Assetfinder, Subfinder, Arjun, ParamSpider, Waybackurls, Dirsearch And gitGraber. You Can Use All Of These Tools Via The Bot Using Only Discord Commands. Also, Discord Recon Allows You To Automate Subdomains Collection Process. It's Using Assetfinder, Findomain And Subfinder To Collect Subdomains, Sort Them Using Python Function. Then Filter Them Using httpx. And The Output Is Getting Saved On The Server. Anytime You Want To Use This Data For Nuclei Scans Or Any Other Scans That Wiil Be Added Soon. You Can Just Call The Scan Function And It Will Use The Subdomains That Got Saved Before. 
 
 ## Setup Variables :star:
",0.0,1.0,0.0,tfidf
CVE-2021-21433,CVE-2021-21433/26e2a084679679cccdeeabbb6889ce120eff7e50,https://github.com/DEMON1A/Discord-Recon/commit/26e2a084679679cccdeeabbb6889ce120eff7e50,<s>Discord Recon Server is a bot that allows you to do your reconnaissance process from your Discord. Remote code execution in version 0.0.1 would allow remote users to execute commands on the server resulting in serious issues. This flaw is patched in 0.0.2.</s>,"<s>Fixing Command Injection Issues.
</s>"," diff --git a/app.py b/app.py
index d754337..43b1517 100644
--- a/app.py
+++ b/app.py
@@ -95,6 +95,10 @@ async def ip(ctx , *, argument):
 
 @Client.command()
 async def dirsearch(ctx , *, argument):
+    if not CommandInjection.commandInjection(argument=argument , RCE=RCE):
+        await ctx.send(""**Your Command Contains Unallowed Chars. Don't Try To Use It Again.**"")
+        return
+    
     Path = TOOLS['dirsearch']; MainPath = getcwd(); chdir(Path)
     await ctx.send(f""**Running Your Dirsearch Scan, We Will Send The Results When It's Done**"")
     Process = subprocess.Popen(f'python3 dirsearch.py -u {argument} -e * -b' , shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
@@ -115,6 +119,10 @@ async def dirsearch(ctx , *, argument):
 
 @Client.command()
 async def arjun(ctx , *, argument):
+    if not CommandInjection.commandInjection(argument=argument , RCE=RCE):
+        await ctx.send(""**Your Command Contains Unallowed Chars. Don't Try To Use It Again.**"")
+        return
+    
     Path = TOOLS['arjun']; MainPath = getcwd(); chdir(Path)
     await ctx.send(f""**Running Your Arjun Scan, We Will Send The Results When It's Done**"")
     await ctx.send(f""**Note: The Bot Won't Respond Until The Scan is Done. All Of Your Commands Now Will Be Executed After This Process is Done."")
",1.0,1.0,1.0,tfidf
,,,,,,,,,
CVE-2017-8085,CVE-2017-8085/0b2241ff1c7d86376fa260c5d4c1714f6cef9c0f,https://github.com/exponentcms/exponent-cms/commit/0b2241ff1c7d86376fa260c5d4c1714f6cef9c0f,"<s>In Exponent CMS before 2.4.1 Patch #5, XSS in elFinder is possible in framework/modules/file/connector/elfinder.php.</s>","<s>fix possible xss security issue with elFinder (thanks to chengable)
</s>"," diff --git a/framework/modules/file/connector/elfinder.php b/framework/modules/file/connector/elfinder.php
index ac9103c8a..4ad6f4abc 100644
--- a/framework/modules/file/connector/elfinder.php
+++ b/framework/modules/file/connector/elfinder.php
@@ -509,5 +509,5 @@ $opts = array(
 );
 
 //header('Access-Control-Allow-Origin: *');
-$connector = new elFinderConnector(new elFinderExponent($opts), true);
+$connector = new elFinderConnector(new elFinderExponent($opts));
 $connector->run();
",1.0,3.0,1.0,tfidf
CVE-2017-8085,CVE-2017-8085/724daa6f56d3ad4eeb8382fe267c59ed10115950,https://github.com/exponentcms/exponent-cms/commit/724daa6f56d3ad4eeb8382fe267c59ed10115950,"<s>In Exponent CMS before 2.4.1 Patch #5, XSS in elFinder is possible in framework/modules/file/connector/elfinder.php.</s>","<s>update to v2.4.1patch5
</s>"," diff --git a/exponent_version.php b/exponent_version.php
index 3cd1d5fec..f682f9840 100644
--- a/exponent_version.php
+++ b/exponent_version.php
@@ -41,11 +41,11 @@ if (!defined('EXPONENT_VERSION_MAJOR')) {
 		 * This number is bumped each time a distribution of a single version is
 		 * released.  For instance, the 3rd beta has an version type iteration of 3.
 		 */
-		define('EXPONENT_VERSION_ITERATION','4'); // only applies to betas, alphas, or release candidates
+		define('EXPONENT_VERSION_ITERATION','5'); // only applies to betas, alphas, or release candidates
 		/* exdoc
 		 * This is the date that this version of Exponent was released.
 		 */
-		define('EXPONENT_VERSION_BUILDDATE','1492693200');
+		define('EXPONENT_VERSION_BUILDDATE','1492909200');
 	} else {
 		// the info for the ""next"" version if we are a pre-release from the repository
 		define('EXPONENT_VERSION_MAJOR','2');
",0.0,3.0,0.0,tfidf
,,,,,,,,,
CVE-2015-4425,CVE-2015-4425/4f2a95f877d406a054f9f2253475fe58c76aa03d,https://github.com/pimcore/pimcore/commit/4f2a95f877d406a054f9f2253475fe58c76aa03d,"<s>Directory traversal vulnerability in pimcore before build 3473 allows remote authenticated users with the ""assets"" permission to create or write to arbitrary files via a .. (dot dot) in the dir parameter to admin/asset/add-asset-compatibility.</s>","<s>AssetController: directory traversal vulnerability issue
git-svn-id: http://www.pimcore.org/svn/pimcore/private/core/trunk@6458 1f8fe7d8-47f0-464c-8d0a-336f4953ab05
</s>"," diff --git a/pimcore/modules/admin/controllers/AssetController.php b/pimcore/modules/admin/controllers/AssetController.php
index fec5d5ba76..e897b8d3fb 100644
--- a/pimcore/modules/admin/controllers/AssetController.php
+++ b/pimcore/modules/admin/controllers/AssetController.php
@@ -210,6 +210,13 @@ class Admin_AssetController extends \Pimcore\Controller\Action\Admin\Element
             $parent = Asset::getById($this->getParam(""parentId""));
             $newPath = $parent->getFullPath() . ""/"" . trim($this->getParam(""dir""), ""/ "");
 
+            // check if the path is outside of the asset directory
+            $newRealPath = PIMCORE_ASSET_DIRECTORY . $newPath;
+            $newRealPath= realpath($newRealPath);
+            if (strpos($newRealPath, PIMCORE_ASSET_DIRECTORY) !== 0) {
+                throw new Exception(""not allowed"");
+            }
+
             $maxRetries = 5;
             for ($retries=0; $retries<$maxRetries; $retries++) {
                 try {
",1.0,2.0,1.0,lime
CVE-2015-4425,CVE-2015-4425/9f39e14c3ba717356cd415de8af0cb57674bae52,https://github.com/pimcore/pimcore/commit/9f39e14c3ba717356cd415de8af0cb57674bae52,"<s>Directory traversal vulnerability in pimcore before build 3473 allows remote authenticated users with the ""assets"" permission to create or write to arbitrary files via a .. (dot dot) in the dir parameter to admin/asset/add-asset-compatibility.</s>","<s>fixed reload of object/asset/document
git-svn-id: http://www.pimcore.org/svn/pimcore/private/core/trunk@6366 1f8fe7d8-47f0-464c-8d0a-336f4953ab05
</s>"," diff --git a/pimcore/static5/js/pimcore/helpers.js b/pimcore/static5/js/pimcore/helpers.js
index e665b7b1e2..1eeaa097d1 100644
--- a/pimcore/static5/js/pimcore/helpers.js
+++ b/pimcore/static5/js/pimcore/helpers.js
@@ -124,12 +124,17 @@ pimcore.helpers.openAsset = function (id, type, options) {
 
 pimcore.helpers.closeAsset = function (id) {
 
-    var tabPanel = Ext.getCmp(""pimcore_panel_tabs"");
-    var tabId = ""asset_"" + id;
-    tabPanel.remove(tabId);
+    try {
+        var tabPanel = Ext.getCmp(""pimcore_panel_tabs"");
+        var tabId = ""asset_"" + id;
+        var panel = Ext.getCmp(tabId);
+        panel.close();
 
-    pimcore.helpers.removeTreeNodeLoadingIndicator(""asset"", id);
-    pimcore.globalmanager.remove(""asset_"" + id);
+        pimcore.helpers.removeTreeNodeLoadingIndicator(""asset"", id);
+        pimcore.globalmanager.remove(""asset_"" + id);
+    } catch (e) {
+        console.log(e);
+    }
 };
 
 pimcore.helpers.openDocument = function (id, type, options) {
@@ -153,20 +158,20 @@ pimcore.helpers.openDocument = function (id, type, options) {
 
 
 pimcore.helpers.closeDocument = function (id) {
+    try {
+        var tabPanel = Ext.getCmp(""pimcore_panel_tabs"");
+        var tabId = ""document_"" + id;
+        tabPanel.remove(tabId);
 
-    var tabPanel = Ext.getCmp(""pimcore_panel_tabs"");
-    var tabId = ""document_"" + id;
-    tabPanel.remove(tabId);
+        pimcore.helpers.removeTreeNodeLoadingIndicator(""document"", id);
+        pimcore.globalmanager.remove(""document_"" + id);
+    } catch (e) {
+        console.log(e);
+    }
 
-    pimcore.helpers.removeTreeNodeLoadingIndicator(""document"", id);
-    pimcore.globalmanager.remove(""document_"" + id);
 };
 
 pimcore.helpers.openObject = function (id, type, options) {
-    //TODO EXT5 if we currently attempt to open a folder the whole system breaks apart
-    //if (type == ""folder"") {
-    //    return;
-    //}
     if (pimcore.globalmanager.exists(""object_"" + id) == false) {
 
         if(type != ""folder"" && type != ""variant"" && type != ""object"") {
@@ -190,13 +195,17 @@ pimcore.helpers.openObject = function (id, type, options) {
 };
 
 pimcore.helpers.closeObject = function (id) {
+    try {
+        var tabPanel = Ext.getCmp(""pimcore_panel_tabs"");
+        var tabId = ""object_"" + id;
+        var panel = Ext.getCmp(tabId);
+        panel.close();
 
-    var tabPanel = Ext.getCmp(""pimcore_panel_tabs"");
-    var tabId = ""object_"" + id;
-    tabPanel.remove(tabId);
-
-    pimcore.helpers.removeTreeNodeLoadingIndicator(""object"", id);
-    pimcore.globalmanager.remove(""object_"" + id);
+        pimcore.helpers.removeTreeNodeLoadingIndicator(""object"", id);
+        pimcore.globalmanager.remove(""object_"" + id);
+    } catch (e) {
+        console.log(e);
+    }
 };
 
 pimcore.helpers.getHistory = function() {
",0.0,2.0,0.0,lime
,,,,,,,,,
CVE-2022-0983,CVE-2022-0983/c2794752ea3cdda2d64a0651da08b2cdf730d9f1,https://github.com/moodle/moodle/commit/c2794752ea3cdda2d64a0651da08b2cdf730d9f1,<s>An SQL injection risk was identified in Badges code relating to configuring criteria. Access to the relevant capability was limited to teachers and managers by default.</s>,"<s>MDL-74074 badges: Ensure profile criteria exists before completion check
</s>"," diff --git a/badges/criteria/award_criteria_profile.php b/badges/criteria/award_criteria_profile.php
index b014cf5a92b..d3ac2f25556 100644
--- a/badges/criteria/award_criteria_profile.php
+++ b/badges/criteria/award_criteria_profile.php
@@ -39,6 +39,26 @@ class award_criteria_profile extends award_criteria {
     public $required_param = 'field';
     public $optional_params = array();
 
+    /* @var array The default profile fields allowed to be used as award criteria.
+     *
+     * Note: This is used instead of user_get_default_fields(), because it is not possible to
+     * determine which fields the user can modify.
+     */
+    protected $allowed_default_fields = [
+        'firstname',
+        'lastname',
+        'email',
+        'address',
+        'phone1',
+        'phone2',
+        'department',
+        'institution',
+        'description',
+        'picture',
+        'city',
+        'country',
+    ];
+
     /**
      * Add appropriate new criteria options to the form
      *
@@ -50,10 +70,7 @@ class award_criteria_profile extends award_criteria {
         $none = true;
         $existing = array();
         $missing = array();
-
-        // Note: cannot use user_get_default_fields() here because it is not possible to decide which fields user can modify.
-        $dfields = array('firstname', 'lastname', 'email', 'address', 'phone1', 'phone2',
-                         'department', 'institution', 'description', 'picture', 'city', 'country');
+        $dfields = $this->allowed_default_fields;
 
         // Get custom fields.
         $cfields = array_filter(profile_get_custom_fields(), function($field) {
@@ -230,8 +247,8 @@ class award_criteria_profile extends award_criteria {
                 $join .= "" LEFT JOIN {user_info_data} uid{$idx} ON uid{$idx}.userid = u.id AND uid{$idx}.fieldid = :fieldid{$idx} "";
                 $params[""fieldid{$idx}""] = $param['field'];
                 $whereparts[] = ""uid{$idx}.id IS NOT NULL"";
-            } else {
-                // This is a field from {user} table.
+            } else if (in_array($param['field'], $this->allowed_default_fields)) {
+                // This is a valid field from {user} table.
                 if ($param['field'] == 'picture') {
                     // The picture field is numeric and requires special handling.
                     $whereparts[] = ""u.{$param['field']} != 0"";
",1.0,1.0,1.0,tfidf
CVE-2022-0983,CVE-2022-0983/62c086ee72eba777201a155ca510b7165b518476,https://github.com/moodle/moodle/commit/62c086ee72eba777201a155ca510b7165b518476,<s>An SQL injection risk was identified in Badges code relating to configuring criteria. Access to the relevant capability was limited to teachers and managers by default.</s>,"<s>MDL-74313 badge: Disable secondary navigation in badges
</s>"," diff --git a/badges/badge.php b/badges/badge.php
index a6e6f28a8ac..b79fdce51cb 100644
--- a/badges/badge.php
+++ b/badges/badge.php
@@ -37,6 +37,7 @@ $output = $PAGE->get_renderer('core', 'badges');
 $PAGE->set_url('/badges/badge.php', array('hash' => $id));
 $PAGE->set_pagelayout('base');
 $PAGE->set_title(get_string('issuedbadge', 'badges'));
+$PAGE->set_secondary_navigation(false);
 
 $badge = new \core_badges\output\issued_badge($id);
 if (!empty($badge->recipient->id)) {
",0.0,1.0,0.0,tfidf
,,,,,,,,,
CVE-2019-12742,CVE-2019-12742/49027a3bad957e00c083c0265e1fcb86798634c6,https://github.com/bludit/bludit/commit/49027a3bad957e00c083c0265e1fcb86798634c6,"<s>Bludit prior to 3.9.1 allows a non-privileged user to change the password of any account, including admin. This occurs because of bl-kernel/admin/controllers/user-password.php Insecure Direct Object Reference (a modified username POST parameter).</s>","<s>Bludit v3.9.0
</s>"," diff --git a/lang.php b/lang.php
deleted file mode 100644
index 098b79d0..00000000
--- a/lang.php
+++ /dev/null
@@ -1,29 +0,0 @@
-<?php
-
-$string = file_get_contents(""bl-languages/en.json"");
-$english = json_decode($string, true);
-
-$files = glob('bl-languages/*.{json}', GLOB_BRACE);
-foreach ($files as $file) {
-	$out = $file;
-	$string = file_get_contents($out);
-	$spanish = json_decode($string, true);
-
-	$tmp = array();
-	$tmp['language-data']BL	= $spanish['language-data'];
-	$tmp['dates']IT		= $spanish['dates'];
-	if (isset($spanish['special-chars'])) {
-		$tmp['special-chars']_	= $spanish['special-chars'];
-	}
-
-	foreach ($english as $key=>$value) {
-		if (isset($spanish[$key])) {
-			$tmp[$key] = $spanish[$key];
-		} else {
-			$tmp[$key] = $value;
-		}
-	}
-
-	$json = json_encode($tmp, JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT);
-	file_put_contents($out, $json);
-}
",0.0,3.0,0.0,tfidf
CVE-2019-12742,CVE-2019-12742/a1bb333153fa8ba29a88cfba423d810f509a2b37,https://github.com/bludit/bludit/commit/a1bb333153fa8ba29a88cfba423d810f509a2b37,"<s>Bludit prior to 3.9.1 allows a non-privileged user to change the password of any account, including admin. This occurs because of bl-kernel/admin/controllers/user-password.php Insecure Direct Object Reference (a modified username POST parameter).</s>","<s>Prevent non-administrators to change the password from other users
</s>"," diff --git a/bl-kernel/admin/controllers/user-password.php b/bl-kernel/admin/controllers/user-password.php
index 0f86abb7..8a7e8c9d 100644
--- a/bl-kernel/admin/controllers/user-password.php
+++ b/bl-kernel/admin/controllers/user-password.php
@@ -13,8 +13,14 @@
 // ============================================================================
 
 if ($_SERVER['REQUEST_METHOD'] == 'POST') {
+	// Prevent non-administrators to change other users
+	$username = $_POST['username'];
+	if ($login->role()!=='admin') {
+	    $username = $login->username();
+	}
+
 	if (changeUserPassword(array(
-		'username'=>$_POST['username'],
+		'username'=>$username,
 		'newPassword'=>$_POST['newPassword'],
 		'confirmPassword'=>$_POST['confirmPassword']
 	))) {
",1.0,3.0,1.0,tfidf
,,,,,,,,,
CVE-2017-14337,CVE-2017-14337/be111a470204a974c50682054c9c7d4b94396ed9,https://github.com/MISP/MISP/commit/be111a470204a974c50682054c9c7d4b94396ed9,"<s>When MISP before 2.4.80 is configured with X.509 certificate authentication (CertAuth) in conjunction with a non-MISP external user management ReST API, if an external user provides X.509 certificate authentication and this API returns an empty value, the unauthenticated user can be granted access as an arbitrary user.</s>","<s>fix: Fix to certauth pains
</s>"," diff --git a/app/Plugin/CertAuth/Controller/Component/Auth/CertificateAuthenticate.php b/app/Plugin/CertAuth/Controller/Component/Auth/CertificateAuthenticate.php
index ce3d18db4..1ad5c481f 100644
--- a/app/Plugin/CertAuth/Controller/Component/Auth/CertificateAuthenticate.php
+++ b/app/Plugin/CertAuth/Controller/Component/Auth/CertificateAuthenticate.php
@@ -133,17 +133,19 @@ class CertificateAuthenticate extends BaseAuthenticate
 				// If $sync is true, allow the creation of the user from the certificate
 				$sync = Configure::read('CertAuth.syncUser');
 				if ($sync) {
-					self::getRestUser();
+					if (!self::getRestUser()) return false;
 				}
 
 				// find and fill user with model
 				$userModelKey = empty(Configure::read('CertAuth.userModelKey')) ? 'email' : Configure::read('CertAuth.userModelKey');
 				$userDefaults = Configure::read('CertAuth.userDefaults');
 				$this->User = ClassRegistry::init('User');
-				$existingUser = $this->User->find('first', array(
-					'conditions' => array($userModelKey => self::$user[$userModelKey]),
-					'recursive' => false
-				));
+				if (!empty(self::$user[$userModelKey])) {
+					$existingUser = $this->User->find('first', array(
+						'conditions' => array($userModelKey => self::$user[$userModelKey]),
+						'recursive' => false
+					));
+				}
 				if ($existingUser) {
 					if ($sync) {
 						if (!isset(self::$user['org_id']) && isset(self::$user['org'])) {
",1.0,1.0,1.0,tfidf
CVE-2017-14337,CVE-2017-14337/9c9048422a13d32d658e4f03540389344f409a29,https://github.com/MISP/MISP/commit/9c9048422a13d32d658e4f03540389344f409a29,"<s>When MISP before 2.4.80 is configured with X.509 certificate authentication (CertAuth) in conjunction with a non-MISP external user management ReST API, if an external user provides X.509 certificate authentication and this API returns an empty value, the unauthenticated user can be granted access as an arbitrary user.</s>","<s>fix: fixes various issues with the certauth
</s>"," diff --git a/app/Plugin/CertAuth/Controller/Component/Auth/CertificateAuthenticate.php b/app/Plugin/CertAuth/Controller/Component/Auth/CertificateAuthenticate.php
index 43428ba3e..ce3d18db4 100644
--- a/app/Plugin/CertAuth/Controller/Component/Auth/CertificateAuthenticate.php
+++ b/app/Plugin/CertAuth/Controller/Component/Auth/CertificateAuthenticate.php
@@ -170,7 +170,8 @@ class CertificateAuthenticate extends BaseAuthenticate
 					self::$user = $this->User->getAuthUser($existingUser['User']['id']);
 					if (isset(self::$user['gpgkey'])) unset(self::$user['gpgkey']);
 				} else if ($sync && !empty(self::$user)) {
-					$org=null;
+					$org = isset(self::$client['org']) ? self::$client['org'] : null;
+					if ($org == null) return false;
 					if (!isset(self::$user['org_id']) && isset(self::$user['org'])) {
 						self::$user['org_id'] = $this->User->Organisation->createOrgFromName($org, 0, true);
 						unset(self::$user['org']);
@@ -192,7 +193,6 @@ class CertificateAuthenticate extends BaseAuthenticate
 				}
 			}
 		}
-
 		return self::$user;
 	}
 
",0.0,1.0,0.0,tfidf
,,,,,,,,,
CVE-2021-43845,CVE-2021-43845/22af44e68a0c7d190ac1e25075e1382f77e9397a,https://github.com/pjsip/pjproject/commit/22af44e68a0c7d190ac1e25075e1382f77e9397a,"<s>PJSIP is a free and open source multimedia communication library. In version 2.11.1 and prior, if incoming RTCP XR message contain block, the data field is not checked against the received packet size, potentially resulting in an out-of-bound read access. This affects all users that use PJMEDIA and RTCP XR. A malicious actor can send a RTCP XR message with an invalid packet size.</s>","<s>Merge pull request from GHSA-m66q-q64c-hv36
* Prevent OOB read during RTP/RTCP parsing
* Add log
* Add more logs
</s>"," diff --git a/pjmedia/src/pjmedia/rtcp.c b/pjmedia/src/pjmedia/rtcp.c
index f67572457..28d5ad177 100644
--- a/pjmedia/src/pjmedia/rtcp.c
+++ b/pjmedia/src/pjmedia/rtcp.c
@@ -502,12 +502,22 @@ static void parse_rtcp_report( pjmedia_rtcp_session *sess,
 
     /* Parse RTCP */
     if (common->pt == RTCP_SR) {
+        if (sizeof (pjmedia_rtcp_common) + sizeof (pjmedia_rtcp_sr) > size) {
+	    TRACE_((sess->name, ""Discarding RTCP SR due to truncated size ""
+	    			""%d bytes"", size));
+            return;
+        }
 	sr = (pjmedia_rtcp_sr*) (((char*)pkt) + sizeof(pjmedia_rtcp_common));
 	if (common->count > 0 && size >= (sizeof(pjmedia_rtcp_sr_pkt))) {
 	    rr = (pjmedia_rtcp_rr*)(((char*)pkt) + (sizeof(pjmedia_rtcp_common)
 				    + sizeof(pjmedia_rtcp_sr)));
 	}
     } else if (common->pt == RTCP_RR && common->count > 0) {
+	if (sizeof (pjmedia_rtcp_common) + sizeof (pjmedia_rtcp_rr) > size) {
+	    TRACE_((sess->name, ""Discarding RTCP RR due to truncated size ""
+	    			""%d bytes"", size));
+	    return;
+	}
 	rr = (pjmedia_rtcp_rr*)(((char*)pkt) + sizeof(pjmedia_rtcp_common));
 #if defined(PJMEDIA_HAS_RTCP_XR) && (PJMEDIA_HAS_RTCP_XR != 0)
     } else if (common->pt == RTCP_XR) {
@@ -826,12 +836,20 @@ PJ_DEF(void) pjmedia_rtcp_rx_rtcp( pjmedia_rtcp_session *sess,
     p = (pj_uint8_t*)pkt;
     p_end = p + size;
     while (p < p_end) {
-	pjmedia_rtcp_common *common = (pjmedia_rtcp_common*)p;
+	pjmedia_rtcp_common *common;
 	unsigned len;
 
+	if (p + sizeof(pjmedia_rtcp_common) > p_end) {
+	    TRACE_((sess->name, ""Receiving truncated RTCP packet (1)""));
+	    break;
+	}
+	common = (pjmedia_rtcp_common*)p;
+
 	len = (pj_ntohs((pj_uint16_t)common->length)+1) * 4;
-	if (p + len > p_end)
+	if (p + len > p_end) {
+	    TRACE_((sess->name, ""Receiving truncated RTCP packet (2)""));
 	    break;
+	}
 
 	switch(common->pt) {
 	case RTCP_SR:
",1.0,,0.0,tfidf
CVE-2021-43845,CVE-2021-43845/f74c1fc22b760d2a24369aa72c74c4a9ab985859,https://github.com/pjsip/pjproject/commit/f74c1fc22b760d2a24369aa72c74c4a9ab985859,"<s>PJSIP is a free and open source multimedia communication library. In version 2.11.1 and prior, if incoming RTCP XR message contain block, the data field is not checked against the received packet size, potentially resulting in an out-of-bound read access. This affects all users that use PJMEDIA and RTCP XR. A malicious actor can send a RTCP XR message with an invalid packet size.</s>","<s>Merge pull request from GHSA-r374-qrwv-86hh

</s>"," diff --git a/pjmedia/src/pjmedia/rtcp_xr.c b/pjmedia/src/pjmedia/rtcp_xr.c
index 44927063b..f554698a2 100644
--- a/pjmedia/src/pjmedia/rtcp_xr.c
+++ b/pjmedia/src/pjmedia/rtcp_xr.c
@@ -436,16 +436,32 @@ void pjmedia_rtcp_xr_rx_rtcp_xr( pjmedia_rtcp_xr_session *sess,
 	if (rb_len) {
 	    switch (rb_hdr->bt) {
 		case BT_RR_TIME:
-		    rb_rr_time = (pjmedia_rtcp_xr_rb_rr_time*) rb_hdr;
+		    if ((char*)rb_hdr + sizeof(*rb_rr_time) <=
+			(char*)pkt + size) 
+		    {
+			rb_rr_time = (pjmedia_rtcp_xr_rb_rr_time*)rb_hdr;
+		    }
 		    break;
 		case BT_DLRR:
-		    rb_dlrr = (pjmedia_rtcp_xr_rb_dlrr*) rb_hdr;
+		    if ((char*)rb_hdr + sizeof(*rb_dlrr) <=
+			(char*)pkt + size)
+		    {
+			rb_dlrr = (pjmedia_rtcp_xr_rb_dlrr*)rb_hdr;
+		    }
 		    break;
 		case BT_STATS:
-		    rb_stats = (pjmedia_rtcp_xr_rb_stats*) rb_hdr;
+		    if ((char*)rb_hdr + sizeof(*rb_stats) <=
+			(char*)pkt + size)
+		    {
+			rb_stats = (pjmedia_rtcp_xr_rb_stats*)rb_hdr;
+		    }
 		    break;
 		case BT_VOIP_METRICS:
-		    rb_voip_mtc = (pjmedia_rtcp_xr_rb_voip_mtc*) rb_hdr;
+		    if ((char*)rb_hdr + sizeof(*rb_voip_mtc) <=
+			(char*)pkt + size)
+		    {
+			rb_voip_mtc = (pjmedia_rtcp_xr_rb_voip_mtc*)rb_hdr;
+		    }
 		    break;
 		default:
 		    break;
",0.0,,1.0,tfidf
,,,,,,,,,
CVE-2011-2765,CVE-2011-2765/554e095a62c4412c91f981e72fd34a936ac2bf1e,https://github.com/irmen/Pyro3/commit/554e095a62c4412c91f981e72fd34a936ac2bf1e,<s>pyro before 3.15 unsafely handles pid files in temporary directory locations and opening the pid file as root. An attacker can use this flaw to overwrite arbitrary files via symlinks.</s>,"<s>changed pidfile location because of security vulnerability, debian bug #631912
</s>"," diff --git a/Pyro/ext/daemonizer.py b/Pyro/ext/daemonizer.py
index e481877..11b5061 100644
--- a/Pyro/ext/daemonizer.py
+++ b/Pyro/ext/daemonizer.py
@@ -47,7 +47,9 @@ class Daemonizer:
     """"""
     def __init__(self, pidfile=None):
         if not pidfile:
-            self.pidfile = ""/tmp/%s.pid"" % self.__class__.__name__.lower()
+            # PID file moved out of /tmp to avoid security vulnerability
+            # changed by Debian maintainer per Debian bug #631912
+            self.pidfile = ""/var/run/pyro-%s.pid"" % self.__class__.__name__.lower()
         else:
             self.pidfile = pidfile
 
@@ -121,12 +123,16 @@ class Daemonizer:
 
     def process_command_line(self, argv, verbose=1):
         usage = ""usage:  %s  start | stop | restart | status | debug "" \
+                ""[--pidfile=...] "" \
                 ""(run as non-daemon)"" % os.path.basename(argv[0])
         if len(argv) < 2:
             print usage
             raise SystemExit
         else:
             operation = argv[1]
+            if len(argv) > 2 and argv[2].startswith('--pidfile=') and \
+                len(argv[2]) > len('--pidfile='):
+                self.pidfile = argv[2][len('--pidfile='):]
         pid = self.get_pid()
         if operation == 'status':
             if self.is_process_running():
",1.0,,1.0,lime
CVE-2011-2765,CVE-2011-2765/eed9a811996da44d32a34c98b7d76ba6cd150266,https://github.com/irmen/Pyro3/commit/eed9a811996da44d32a34c98b7d76ba6cd150266,<s>pyro before 3.15 unsafely handles pid files in temporary directory locations and opening the pid file as root. An attacker can use this flaw to overwrite arbitrary files via symlinks.</s>,"<s>made Pyro4 a link in the Pypi description

</s>"," diff --git a/setup.py b/setup.py
index c6b5a66..ff52b16 100644
--- a/setup.py
+++ b/setup.py
@@ -27,7 +27,7 @@ if __name__ == '__main__' :
 		long_description = """"""Pyro stands for PYthon Remote Objects. It is an advanced and powerful Distributed Object Technology system written entirely in Python, that is designed to be very easy to use.
 
 This is version 3.x of Pyro, the stable version.
-For a more modern version with new features, look at Pyro4 instead."""""",
+For a more modern version with new features, look at `Pyro4 </pypi/Pyro4>`_ instead."""""",
 		author = ""Irmen de Jong"",
 		author_email=""irmen@razorvine.net"",
 		keywords=""distributed objects, middleware, network communication, DOT, RMI, IPC"",
",0.0,,0.0,lime
,,,,,,,,,
CVE-2015-8629,CVE-2015-8629/1d4e83625f1c8cde7638702ab404f4594da3f062,https://github.com/krb5/krb5/commit/1d4e83625f1c8cde7638702ab404f4594da3f062,"<s>The xdr_nullstring function in lib/kadm5/kadm_rpc_xdr.c in kadmind in MIT Kerberos 5 (aka krb5) before 1.13.4 and 1.14.x before 1.14.1 does not verify whether '\0' characters exist as expected, which allows remote authenticated users to obtain sensitive information or cause a denial of service (out-of-bounds read) via a crafted string.</s>","<s>Add kadm5_setkey_principal_4 RPC to kadmin
This new version of the RPC allows a user to set not only the
keyblocks but also the kvno and the salts of a key.
ticket: 8355 (new)
</s>"," diff --git a/src/lib/kadm5/kadm_rpc_xdr.c b/src/lib/kadm5/kadm_rpc_xdr.c
index ba6708410..bfd034181 100644
--- a/src/lib/kadm5/kadm_rpc_xdr.c
+++ b/src/lib/kadm5/kadm_rpc_xdr.c
@@ -771,6 +771,26 @@ xdr_setkey3_arg(XDR *xdrs, setkey3_arg *objp)
 	return (TRUE);
 }
 
+bool_t
+xdr_setkey4_arg(XDR *xdrs, setkey4_arg *objp)
+{
+	if (!xdr_ui_4(xdrs, &objp->api_version)) {
+		return FALSE;
+	}
+	if (!xdr_krb5_principal(xdrs, &objp->princ)) {
+		return FALSE;
+	}
+	if (!xdr_krb5_boolean(xdrs, &objp->keepold)) {
+		return FALSE;
+	}
+	if (!xdr_array(xdrs, (caddr_t *) &objp->key_data,
+		       (unsigned int *) &objp->n_key_data, ~0,
+		       sizeof(kadm5_key_data), xdr_kadm5_key_data)) {
+		return FALSE;
+	}
+	return TRUE;
+}
+
 bool_t
 xdr_chrand_arg(XDR *xdrs, chrand_arg *objp)
 {
@@ -1157,3 +1177,18 @@ xdr_krb5_string_attr(XDR *xdrs, krb5_string_attr *objp)
 		return FALSE;
 	return TRUE;
 }
+
+bool_t
+xdr_kadm5_key_data(XDR *xdrs, kadm5_key_data *objp)
+{
+	if (!xdr_krb5_kvno(xdrs, &objp->kvno))
+		return FALSE;
+	if (!xdr_krb5_keyblock(xdrs, &objp->key))
+		return FALSE;
+	if (!xdr_krb5_int16(xdrs, &objp->salt.type))
+		return FALSE;
+	if (!xdr_bytes(xdrs, &objp->salt.data.data,
+		       &objp->salt.data.length, ~0))
+		return FALSE;
+	return TRUE;
+}
",0.0,,0.0,lime
CVE-2015-8629,CVE-2015-8629/df17a1224a3406f57477bcd372c61e04c0e5a5bb,https://github.com/krb5/krb5/commit/df17a1224a3406f57477bcd372c61e04c0e5a5bb,"<s>The xdr_nullstring function in lib/kadm5/kadm_rpc_xdr.c in kadmind in MIT Kerberos 5 (aka krb5) before 1.13.4 and 1.14.x before 1.14.1 does not verify whether '\0' characters exist as expected, which allows remote authenticated users to obtain sensitive information or cause a denial of service (out-of-bounds read) via a crafted string.</s>","<s>Verify decoded kadmin C strings [CVE-2015-8629]
In xdr_nullstring(), check that the decoded string is terminated with
a zero byte and does not contain any internal zero bytes.
CVE-2015-8629:
In all versions of MIT krb5, an authenticated attacker can cause
kadmind to read beyond the end of allocated memory by sending a string
without a terminating zero byte.  Information leakage may be possible
for an attacker with permission to modify the database.
    CVSSv2 Vector: AV:N/AC:H/Au:S/C:P/I:N/A:N/E:POC/RL:OF/RC:C
ticket: 8341 (new)
target_version: 1.14-next
target_version: 1.13-next
tags: pullup
</s>"," diff --git a/src/lib/kadm5/kadm_rpc_xdr.c b/src/lib/kadm5/kadm_rpc_xdr.c
index 2bef85863..ba6708410 100644
--- a/src/lib/kadm5/kadm_rpc_xdr.c
+++ b/src/lib/kadm5/kadm_rpc_xdr.c
@@ -64,7 +64,14 @@ bool_t xdr_nullstring(XDR *xdrs, char **objp)
 		    return FALSE;
 	       }
 	  }
-	  return (xdr_opaque(xdrs, *objp, size));
+	  if (!xdr_opaque(xdrs, *objp, size))
+		  return FALSE;
+	  /* Check that the unmarshalled bytes are a C string. */
+	  if ((*objp)[size - 1] != '\0')
+		  return FALSE;
+	  if (memchr(*objp, '\0', size - 1) != NULL)
+		  return FALSE;
+	  return TRUE;
 
      case XDR_ENCODE:
 	  if (size != 0)
",1.0,,1.0,lime
,,,,,,,,,
CVE-2022-0966,CVE-2022-0966/237ac6d43bf3728bf3587c486a23b4a48ea7acb3,https://github.com/star7th/showdoc/commit/237ac6d43bf3728bf3587c486a23b4a48ea7acb3,<s>Stored XSS via File Upload in star7th/showdoc in GitHub repository star7th/showdoc prior to 2.4.10.</s>,"<s>file upload bug
</s>"," diff --git a/server/Application/Api/Controller/AttachmentController.class.php b/server/Application/Api/Controller/AttachmentController.class.php
index d0a67616..3afc9115 100644
--- a/server/Application/Api/Controller/AttachmentController.class.php
+++ b/server/Application/Api/Controller/AttachmentController.class.php
@@ -79,7 +79,9 @@ class AttachmentController extends BaseController {
            return false;
         }
 
-        if(D(""Attachment"")->isDangerFilename($_FILES['editormd-image-file']['name'])){
+        if(!D(""Attachment"")->isAllowedFilename($_FILES['editormd-image-file']['name'])){
+            $message = """" ;
+            echo json_encode(array(""message""=>$message,""success""=>0));
             return false;
         }
 
@@ -109,8 +111,8 @@ class AttachmentController extends BaseController {
            return false;
         }
 
-        if(D(""Attachment"")->isDangerFilename($uploadFile['name'])){
-            $this->sendError(10100,'');
+        if(!D(""Attachment"")->isAllowedFilename($uploadFile['name'])){
+            $this->sendError(10101,'');
             return false;
         }
 
",0.0,,0.0,lime
CVE-2022-0966,CVE-2022-0966/3caa32334db0c277b84e993eaca2036f5d1dbef8,https://github.com/star7th/showdoc/commit/3caa32334db0c277b84e993eaca2036f5d1dbef8,<s>Stored XSS via File Upload in star7th/showdoc in GitHub repository star7th/showdoc prior to 2.4.10.</s>,"<s>Upload file vulnerability
</s>"," diff --git a/server/Application/Api/Model/AttachmentModel.class.php b/server/Application/Api/Model/AttachmentModel.class.php
index 965db2e6..b79090dc 100644
--- a/server/Application/Api/Model/AttachmentModel.class.php
+++ b/server/Application/Api/Model/AttachmentModel.class.php
@@ -54,10 +54,10 @@ class AttachmentModel extends BaseModel {
 	}
 
 	//url
-	public function upload($_files , $file_key , $uid , $item_id = 0  , $page_id = 0  ){
+	public function upload($_files , $file_key , $uid , $item_id = 0  , $page_id = 0 , $check_filename = true  ){
 		$uploadFile = $_files[$file_key] ;
 
-		if( !$this->isAllowedFilename($_files[$file_key]['name']) ){
+		if( $check_filename && !$this->isAllowedFilename($_files[$file_key]['name']) ){
 			return false;
 		}
 
@@ -324,14 +324,12 @@ class AttachmentModel extends BaseModel {
 	public function isAllowedFilename($filename){
 		$allow_array = array(
 			'.jpg','.jpeg','.png','.bmp','.gif','.ico','.webp',
-			'.mp3','.wav','.mp4',
-			'.mov','.webmv','.flac','.mkv',
+			'.mp3','.wav','.mp4','.mov','.flac','.mkv',
 			'.zip','.tar','.gz','.tgz','.ipa','.apk','.rar','.iso',
-			'.pdf','.ofd','.swf','.epub','.xps',
-			'.doc','.docx','.wps',
+			'.pdf','.epub','.xps','.doc','.docx','.wps',
 			'.ppt','.pptx','.xls','.xlsx','.txt','.psd','.csv',
 			'.cer','.ppt','.pub','.json','.css',
-			) ;
+		) ;
 
 		$ext = strtolower(substr($filename,strripos($filename,'.')) ); //
 		if(in_array( $ext , $allow_array ) ){
",1.0,,1.0,lime
,,,,,,,,,
CVE-2019-1000007,CVE-2019-1000007/29ff0838a40f58efe30a4bbcea95aa8dab7da475,https://github.com/horazont/aioxmpp/commit/29ff0838a40f58efe30a4bbcea95aa8dab7da475,"<s>aioxmpp version 0.10.2 and earlier contains a Improper Handling of Structural Elements vulnerability in Stanza Parser, rollback during error processing, aioxmpp.xso.model.guard function that can result in Denial of Service, Other. This attack appears to be exploitable via Remote. A crafted stanza can be sent to an application which uses the vulnerable components to either inject data in a different context or cause the application to reconnect (potentially losing data). This vulnerability appears to have been fixed in 0.10.3.</s>","<s>xso: fix parser error handling
guard() was incorrectly counting the depth when either of the
following was true:
- the error occured inside the first ""start"" event on which guard()
  is used: in that case, guard() would fail to swallow the
  corresponding ""end"" event.
- after an error, further elements appear in the stream before the
  guard()-ed element is over. in that case, guard() would fail to
  account for the ""start"" events caused by those events, and thus
  let its depth counter go entirely out-of-sync with the XML tree
If this flaw is combined with the use of a supressing
xso_error_handler, it is possible to make elements appear higher
up in the XML stream tree than they actually are; this implies
that it is possible to inject elements in the XML stream.
It requires very specific circumstances for an application to be
vulnerable. Example of a vulnerable XSO definition is:
class Baz(aioxmpp.xso.XSO):
    TAG = (""https://xmlns.zombofant.net/aioxmpp/test"", ""baz"")
class Bar(aioxmpp.xso.XSO):
    TAG = (""https://xmlns.zombofant.net/aioxmpp/test"", ""bar"")
    validated = aioxmpp.xso.Attr(
        ""foo"",
        type_=aioxmpp.xso.JID()
    )
    children = aioxmpp.xso.ChildList([Baz])
@aioxmpp.IQ.as_payload_class
class Foo(aioxmpp.xso.XSO):
    TAG = (""https://xmlns.zombofant.net/aioxmpp/test"", ""foo"")
    child = aioxmpp.xso.Child([Bar])
    def xso_error_handler(self, descriptor, ev_args, exc_info):
        return True
If an attacker sends:
    <iq ... type='result'><foo xmlns='https://xmlns.zombofant.net/aioxmpp/test'><bar foo='&quot;@bar'><baz/><baz/><baz/></bar></foo></iq>
to an application, it will see the ""end"" event of the </iq> *on the
stream level*, breaking the XML stream (because it expects a
""start"" event instead of an ""end"" event).
More sophisticated attacks could be used to make an element appear
on the stream level instead, which would open the possibility of
injecting, for example, <message> stanzas remotely into the stream
of a vulnerable aioxmpp client, with arbitrary sender.
</s>"," diff --git a/docs/api/changelog.rst b/docs/api/changelog.rst
index 879caf7..a0a6cc2 100644
--- a/docs/api/changelog.rst
+++ b/docs/api/changelog.rst
@@ -52,6 +52,20 @@ Version 0.11
 
 * :mod:`aioxmpp.ibb` (:xep:`47`) Support for In-Band Bytestreams.
 
+* Fix incorrect error handling in :mod:`aioxmpp.xso` when a supressing
+  :meth:`aioxmpp.xso.XSO.xso_error_handler` is in use.
+
+  Under certain circumstances, it is possible that the handling of supressed
+  error causes another error later on because the parsing stack mis-counts the
+  depth in which it is inside the XML tree. This makes elements appear in the
+  wrong place, typically leading to further errors.
+
+  In the worst case, using a supressing
+  :meth:`~aioxmpp.xso.XSO.xso_error_handler` in specific circumstances can be
+  vulnerable to denial of service and data injection into the XML stream.
+
+  (A CVE will be allocated for this.)
+
 .. _api-changelog-0.10:
 
 Version 0.10
",1.0,,1.0,tfidf
CVE-2019-1000007,CVE-2019-1000007/cc03e302056ef692f7c5a9591b2d245cdd125abc,https://github.com/horazont/aioxmpp/commit/cc03e302056ef692f7c5a9591b2d245cdd125abc,"<s>aioxmpp version 0.10.2 and earlier contains a Improper Handling of Structural Elements vulnerability in Stanza Parser, rollback during error processing, aioxmpp.xso.model.guard function that can result in Denial of Service, Other. This attack appears to be exploitable via Remote. A crafted stanza can be sent to an application which uses the vulnerable components to either inject data in a different context or cause the application to reconnect (potentially losing data). This vulnerability appears to have been fixed in 0.10.3.</s>","<s>stream: Log exceptions during IQ reply construction
</s>"," diff --git a/aioxmpp/stream.py b/aioxmpp/stream.py
index e746a1c..3afe512 100644
--- a/aioxmpp/stream.py
+++ b/aioxmpp/stream.py
@@ -944,6 +944,7 @@ class StanzaStream:
                 response = request.make_reply(type_=structs.IQType.RESULT)
                 response.payload = result
         except Exception:
+            self._logger.exception(""invalid payload for an IQ response"")
             response = self._compose_undefined_condition(
                 request
             )
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2018-7206,CVE-2018-7206/1845c0e4b1bff3462c91c3108c85205acd3c75a2,https://github.com/jupyterhub/oauthenticator/commit/1845c0e4b1bff3462c91c3108c85205acd3c75a2,"<s>An issue was discovered in Project Jupyter JupyterHub OAuthenticator 0.6.x before 0.6.2 and 0.7.x before 0.7.3. When using JupyterHub with GitLab group whitelisting for access control, group membership was not checked correctly, allowing members not in the whitelisted groups to create accounts on the Hub. (Users were not allowed to access other users' accounts, but could create their own accounts on the Hub linked to their GitLab account. GitLab authentication not using gitlab_group_whitelist is unaffected. No other Authenticators are affected.)</s>","<s>Security fix: fix gitlab group whitelist check
check group membership of users
previously, group_whitelist allowed any user who could access the groups in the whitelist,
rather than checking their membership of the groups.
Admin users received the correct behavior already
</s>"," diff --git a/oauthenticator/gitlab.py b/oauthenticator/gitlab.py
index e5d9029..e6669c2 100644
--- a/oauthenticator/gitlab.py
+++ b/oauthenticator/gitlab.py
@@ -21,7 +21,6 @@ from jupyterhub.auth import LocalAuthenticator
 
 from traitlets import Set
 
-from .common import next_page_from_links
 from .oauth2 import OAuthLoginHandler, OAuthenticator
 
 # Support gitlab.com and gitlab community edition installations
@@ -131,31 +130,14 @@ class GitLabOAuthenticator(OAuthenticator):
     def _check_group_whitelist(self, username, user_id, is_admin, access_token):
         http_client = AsyncHTTPClient()
         headers = _api_headers(access_token)
-        if is_admin:
-            # For admins, /groups returns *all* groups. As a workaround
-            # we check if we are a member of each group in the whitelist
-            for group in map(url_escape, self.gitlab_group_whitelist):
-                url = ""%s/groups/%s/members/%d"" % (GITLAB_API, group, user_id)
-                req = HTTPRequest(url, method=""GET"", headers=headers)
-                resp = yield http_client.fetch(req, raise_error=False)
-                if resp.code == 200:
-                    return True  # user _is_ in group
-        else:
-            # For regular users we get all the groups to which they have access
-            # and check if any of these are in the whitelisted groups
-            next_page = url_concat(""%s/groups"" % GITLAB_API,
-                                   dict(all_available=True))
-            while next_page:
-                req = HTTPRequest(next_page, method=""GET"", headers=headers)
-                resp = yield http_client.fetch(req)
-                resp_json = json.loads(resp.body.decode('utf8', 'replace'))
-                next_page = next_page_from_links(resp)
-                user_groups = set(entry[""path""] for entry in resp_json)
-                # check if any of the organizations seen thus far are in whitelist
-                if len(self.gitlab_group_whitelist & user_groups) > 0:
-                    return True
-            return False
-
+        # Check if we are a member of each group in the whitelist
+        for group in map(url_escape, self.gitlab_group_whitelist):
+            url = ""%s/groups/%s/members/%d"" % (GITLAB_API, group, user_id)
+            req = HTTPRequest(url, method=""GET"", headers=headers)
+            resp = yield http_client.fetch(req, raise_error=False)
+            if resp.code == 200:
+                return True  # user _is_ in group
+        return False
 
 
 class LocalGitLabOAuthenticator(LocalAuthenticator, GitLabOAuthenticator):
",1.0,,1.0,lime
CVE-2018-7206,CVE-2018-7206/7f2b440b09c6044cfdbfdbb7e8ebe977a1107cb6,https://github.com/jupyterhub/oauthenticator/commit/7f2b440b09c6044cfdbfdbb7e8ebe977a1107cb6,"<s>An issue was discovered in Project Jupyter JupyterHub OAuthenticator 0.6.x before 0.6.2 and 0.7.x before 0.7.3. When using JupyterHub with GitLab group whitelisting for access control, group membership was not checked correctly, allowing members not in the whitelisted groups to create accounts on the Hub. (Users were not allowed to access other users' accounts, but could create their own accounts on the Hub linked to their GitLab account. GitLab authentication not using gitlab_group_whitelist is unaffected. No other Authenticators are affected.)</s>","<s>changelog for 0.6.2
</s>"," diff --git a/CHANGELOG.md b/CHANGELOG.md
index f0ce875..ca2718c 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -58,6 +58,12 @@ command line for details.
 
 ## 0.6
 
+### [0.6.2] - 2018-02-16
+
+0.6.2 is a security fix.
+It fixes handling of `gitlab_group_whitelist` when using GitLabOAuthenticator.
+
+
 ### [0.6.1] - 2017-08-11
 
 0.6.1 has bugfixes for new behaviors in 0.6.0
@@ -118,10 +124,12 @@ command line for details.
 
 - First release
 
+
 [Unreleased]: https://github.com/jupyterhub/oauthenticator/compare/0.7.2...HEAD
 [0.7.2]: https://github.com/jupyterhub/oauthenticator/compare/0.7.1...0.7.2
 [0.7.1]: https://github.com/jupyterhub/oauthenticator/compare/0.7.0...0.7.1
 [0.7.0]: https://github.com/jupyterhub/oauthenticator/compare/0.6.1...0.7.0
+[0.6.2]: https://github.com/jupyterhub/oauthenticator/compare/0.6.1...0.6.2
 [0.6.1]: https://github.com/jupyterhub/oauthenticator/compare/0.6.0...0.6.1
 [0.6.0]:https://github.com/jupyterhub/oauthenticator/compare/0.5.1...0.6.0
 [0.5.1]:https://github.com/jupyterhub/oauthenticator/compare/0.5.0...0.5.1
",0.0,,0.0,lime
,,,,,,,,,
CVE-2019-9278,CVE-2019-9278/75aa73267fdb1e0ebfbc00369e7312bac43d0566,https://github.com/libexif/libexif/commit/75aa73267fdb1e0ebfbc00369e7312bac43d0566,"<s>In libexif, there is a possible out of bounds write due to an integer overflow. This could lead to remote escalation of privilege in the media content provider with no additional execution privileges needed. User interaction is needed for exploitation. Product: AndroidVersions: Android-10Android ID: A-112537774</s>","<s>fix CVE-2019-9278
avoid the use of unsafe integer overflow checking constructs (unsigned integer operations cannot overflow, so ""u1 + u2 > u1"" can be optimized away)
check for the actual sizes, which should also handle the overflows
document other places google patched, but do not seem relevant due to other restrictions
fixes https://github.com/libexif/libexif/issues/26
</s>"," diff --git a/libexif/exif-data.c b/libexif/exif-data.c
index a6f9c94..6332cd1 100644
--- a/libexif/exif-data.c
+++ b/libexif/exif-data.c
@@ -192,9 +192,15 @@ exif_data_load_data_entry (ExifData *data, ExifEntry *entry,
 		doff = offset + 8;
 
 	/* Sanity checks */
-	if ((doff + s < doff) || (doff + s < s) || (doff + s > size)) {
+	if (doff >= size) {
 		exif_log (data->priv->log, EXIF_LOG_CODE_DEBUG, ""ExifData"",
-				  ""Tag data past end of buffer (%u > %u)"", doff+s, size);	
+				  ""Tag starts past end of buffer (%u > %u)"", doff, size);
+		return 0;
+	}
+
+	if (s > size - doff) {
+		exif_log (data->priv->log, EXIF_LOG_CODE_DEBUG, ""ExifData"",
+				  ""Tag data goes past end of buffer (%u > %u)"", doff+s, size);
 		return 0;
 	}
 
@@ -315,13 +321,14 @@ exif_data_load_data_thumbnail (ExifData *data, const unsigned char *d,
 			       unsigned int ds, ExifLong o, ExifLong s)
 {
 	/* Sanity checks */
-	if ((o + s < o) || (o + s < s) || (o + s > ds) || (o > ds)) {
-		exif_log (data->priv->log, EXIF_LOG_CODE_DEBUG, ""ExifData"",
-			  ""Bogus thumbnail offset (%u) or size (%u)."",
-			  o, s);
+	if (o >= ds) {
+		exif_log (data->priv->log, EXIF_LOG_CODE_DEBUG, ""ExifData"", ""Bogus thumbnail offset (%u)."", o);
+		return;
+	}
+	if (s > ds - o) {
+		exif_log (data->priv->log, EXIF_LOG_CODE_DEBUG, ""ExifData"", ""Bogus thumbnail size (%u), max would be %u."", s, ds-o);
 		return;
 	}
-
 	if (data->data) 
 		exif_mem_free (data->priv->mem, data->data);
 	if (!(data->data = exif_data_alloc (data, s))) {
@@ -947,7 +954,7 @@ exif_data_load_data (ExifData *data, const unsigned char *d_orig,
 	exif_log (data->priv->log, EXIF_LOG_CODE_DEBUG, ""ExifData"", 
 		  ""IFD 0 at %i."", (int) offset);
 
-	/* Sanity check the offset, being careful about overflow */
+	/* ds is restricted to 16 bit above, so offset is restricted too, and offset+8 should not overflow. */
 	if (offset > ds || offset + 6 + 2 > ds)
 		return;
 
@@ -956,6 +963,7 @@ exif_data_load_data (ExifData *data, const unsigned char *d_orig,
 
 	/* IFD 1 offset */
 	n = exif_get_short (d + 6 + offset, data->priv->order);
+	/* offset < 2<<16, n is 16 bit at most, so this op will not overflow */
 	if (offset + 6 + 2 + 12 * n + 4 > ds)
 		return;
 
@@ -964,8 +972,8 @@ exif_data_load_data (ExifData *data, const unsigned char *d_orig,
 		exif_log (data->priv->log, EXIF_LOG_CODE_DEBUG, ""ExifData"",
 			  ""IFD 1 at %i."", (int) offset);
 
-		/* Sanity check. */
-		if (offset > ds || offset + 6 > ds) {
+		/* Sanity check. ds is ensured to be above 6 above, offset is 16bit */
+		if (offset > ds - 6) {
 			exif_log (data->priv->log, EXIF_LOG_CODE_CORRUPT_DATA,
 				  ""ExifData"", ""Bogus offset of IFD1."");
 		} else {
",1.0,,1.0,tfidf
CVE-2019-9278,CVE-2019-9278/8f5222e9484f849ee256fe3ada50bb9cabac0c05,https://github.com/libexif/libexif/commit/8f5222e9484f849ee256fe3ada50bb9cabac0c05,"<s>In libexif, there is a possible out of bounds write due to an integer overflow. This could lead to remote escalation of privilege in the media content provider with no additional execution privileges needed. User interaction is needed for exploitation. Product: AndroidVersions: Android-10Android ID: A-112537774</s>","<s>Fix an unused variable warning.
</s>"," diff --git a/test/test-fuzzer.c b/test/test-fuzzer.c
index 05d57e7..4aa7cc2 100644
--- a/test/test-fuzzer.c
+++ b/test/test-fuzzer.c
@@ -57,7 +57,7 @@ static int
 test_exif_data (ExifData *d)
 {
 	unsigned int i, c;
-	char v[1024], *p;
+	char v[1024];
 	ExifMnoteData *md;
 
 	fprintf (stdout, ""Byte order: %s\n"",
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2019-20788,CVE-2019-20788/54220248886b5001fbbb9fa73c4e1a2cb9413fed,https://github.com/LibVNC/libvncserver/commit/54220248886b5001fbbb9fa73c4e1a2cb9413fed,<s>libvncclient/cursor.c in LibVNCServer through 0.9.12 has a HandleCursorShape integer overflow and heap-based buffer overflow via a large height or width value. NOTE: this may overlap CVE-2019-15690.</s>,"<s>libvncclient/cursor: limit width/height input values
Avoids a possible heap overflow reported by Pavel Cheremushkin
<Pavel.Cheremushkin@kaspersky.com>.
re #275
</s>"," diff --git a/libvncclient/cursor.c b/libvncclient/cursor.c
index 67f45726..40ffb3b0 100644
--- a/libvncclient/cursor.c
+++ b/libvncclient/cursor.c
@@ -28,6 +28,8 @@
 #define OPER_SAVE     0
 #define OPER_RESTORE  1
 
+#define MAX_CURSOR_SIZE 1024
+
 #define RGB24_TO_PIXEL(bpp,r,g,b)                                       \
    ((((uint##bpp##_t)(r) & 0xFF) * client->format.redMax + 127) / 255             \
     << client->format.redShift |                                              \
@@ -54,6 +56,9 @@ rfbBool HandleCursorShape(rfbClient* client,int xhot, int yhot, int width, int h
   if (width * height == 0)
     return TRUE;
 
+  if (width >= MAX_CURSOR_SIZE || height >= MAX_CURSOR_SIZE)
+    return FALSE;
+
   /* Allocate memory for pixel data and temporary mask data. */
   if(client->rcSource)
     free(client->rcSource);
",1.0,,1.0,lime
CVE-2019-20788,CVE-2019-20788/200090a22b5baf81c99e6fb36d438073dcf2daa7,https://github.com/LibVNC/libvncserver/commit/200090a22b5baf81c99e6fb36d438073dcf2daa7,<s>libvncclient/cursor.c in LibVNCServer through 0.9.12 has a HandleCursorShape integer overflow and heap-based buffer overflow via a large height or width value. NOTE: this may overlap CVE-2019-15690.</s>,"<s>libvncclient: remove unused function
</s>"," diff --git a/libvncclient/vncviewer.c b/libvncclient/vncviewer.c
index fe05e767..d6b91f02 100644
--- a/libvncclient/vncviewer.c
+++ b/libvncclient/vncviewer.c
@@ -48,12 +48,7 @@ static rfbBool DummyPoint(rfbClient* client, int x, int y) {
 static void DummyRect(rfbClient* client, int x, int y, int w, int h) {
 }
 
-#ifdef WIN32
-static char* NoPassword(rfbClient* client) {
-  return strdup("""");
-}
-#else
-#include <stdio.h>
+#ifndef WIN32
 #include <termios.h>
 #endif
 
",0.0,,0.0,lime
,,,,,,,,,
CVE-2022-31799,CVE-2022-31799/a2b0ee6bb4ce88895429ec4aca856616244c4c4c,https://github.com/bottlepy/bottle/commit/a2b0ee6bb4ce88895429ec4aca856616244c4c4c,<s>Bottle before 0.12.20 mishandles errors during early request binding.</s>,"<s>Release of 0.12.20
This release contains a security fix.
Thanks Elton Nokaj for responsibly reporting this issue.
</s>"," diff --git a/bottle.py b/bottle.py
index 4dc8921..26e8b36 100644
--- a/bottle.py
+++ b/bottle.py
@@ -16,7 +16,7 @@ License: MIT (see LICENSE for details)
 from __future__ import with_statement
 
 __author__ = 'Marcel Hellkamp'
-__version__ = '0.12.19'
+__version__ = '0.12.20'
 __license__ = 'MIT'
 
 # The gevent server adapter needs to patch some modules before they are imported
",0.0,,1.0,lime
CVE-2022-31799,CVE-2022-31799/e140e1b54da721a660f2eb9d58a106b7b3ff2f00,https://github.com/bottlepy/bottle/commit/e140e1b54da721a660f2eb9d58a106b7b3ff2f00,<s>Bottle before 0.12.20 mishandles errors during early request binding.</s>,"<s>Gracefully handle errors during early request binding.
</s>"," diff --git a/bottle.py b/bottle.py
index 04ccf7d..035f99e 100644
--- a/bottle.py
+++ b/bottle.py
@@ -848,17 +848,19 @@ class Bottle(object):
         return tob(template(ERROR_PAGE_TEMPLATE, e=res))
 
     def _handle(self, environ):
-        path = environ['bottle.raw_path'] = environ['PATH_INFO']
-        if py3k:
-            try:
-                environ['PATH_INFO'] = path.encode('latin1').decode('utf8')
-            except UnicodeError:
-                return HTTPError(400, 'Invalid path string. Expected UTF-8')
-
         try:
+
             environ['bottle.app'] = self
             request.bind(environ)
             response.bind()
+
+            path = environ['bottle.raw_path'] = environ['PATH_INFO']
+            if py3k:
+                try:
+                    environ['PATH_INFO'] = path.encode('latin1').decode('utf8')
+                except UnicodeError:
+                    return HTTPError(400, 'Invalid path string. Expected UTF-8')
+
             try:
                 self.trigger_hook('before_request')
                 route, args = self.router.match(environ)
",1.0,,0.0,lime
,,,,,,,,,
CVE-2020-12641,CVE-2020-12641/fcfb099477f353373c34c8a65c9035b06b364db3,https://github.com/roundcube/roundcubemail/commit/fcfb099477f353373c34c8a65c9035b06b364db3,<s>rcube_image.php in Roundcube Webmail before 1.4.4 allows attackers to execute arbitrary code via shell metacharacters in a configuration setting for im_convert_path or im_identify_path.</s>,"<s>Fix remote code execution via crafted 'im_convert_path' or 'im_identify_path' settings
</s>"," diff --git a/program/lib/Roundcube/rcube_image.php b/program/lib/Roundcube/rcube_image.php
index a47fd7f84..df36a34db 100644
--- a/program/lib/Roundcube/rcube_image.php
+++ b/program/lib/Roundcube/rcube_image.php
@@ -158,7 +158,8 @@ class rcube_image
 >= 75 (#5125)
 - Security: Fix XSS issue in handling of CDATA in HTML messages
+- Security: Fix 'size' via crafted ' => $width . 'x' . $height,
ify_path' settings
 
 RELEASE 1.4.3
 -------------
       );
 
-                        $result = rcube::exec($convert . ' 2>&1 -flatten -auto-orient -colorspace sRGB -strip'
+                        $result = rcube::exec(escapeshellcmd($convert)
+                            . ' 2>&1 -flatten -auto-orient -colorspace sRGB -strip'
                             . ' -quality {quality} -resize {size} {intype}:{in} {type}:{out}', $p);
                     }
                     // use PHP's Imagick class
@@ -323,7 +324,8 @@ class rcube_image
             $p['out']  = $filename;
             $p['type'] = self::$extensions[$type];
 
-            $result = rcube::exec($convert . ' 2>&1 -colorspace sRGB -strip -flatten -quality 75 {in} {type}:{out}', $p);
+            $result = rcube::exec(escapeshellcmd($convert)
+                . ' 2>&1 -colorspace sRGB -strip -flatten -quality 75 {in} {type}:{out}', $p);
 
             if ($result === '') {
                 chmod($filename, 0600);
@@ -419,7 +421,7 @@ class rcube_image
         // use ImageMagick in command line
         if ($cmd = $rcube->config->get('im_identify_path')) {
             $args = array('in' => $this->image_file, 'format' => ""%m %[fx:w] %[fx:h]"");
-            $id   = rcube::exec($cmd. ' 2>/dev/null -format {format} {in}', $args);
+            $id   = rcube::exec(escapeshellcmd($cmd) . ' 2>/dev/null -format {format} {in}', $args);
 
             if ($id) {
                 return explode(' ', strtolower($id));
",1.0,,1.0,tfidf
CVE-2020-12641,CVE-2020-12641/9bbda422ff0b782b81de59c86994f1a5fd93f8e6,https://github.com/roundcube/roundcubemail/commit/9bbda422ff0b782b81de59c86994f1a5fd93f8e6,<s>rcube_image.php in Roundcube Webmail before 1.4.4 allows attackers to execute arbitrary code via shell metacharacters in a configuration setting for im_convert_path or im_identify_path.</s>,"<s>Fix CSRF bypass that could be used to log out an authenticated user (#7302)
</s>"," diff --git a/CHANGELOG b/CHANGELOG
index 0676a0fa8..d28fe1345 100644
--- a/CHANGELOG
+++ b/CHANGELOG
@@ -28,6 +28,7 @@ CHANGELOG Roundcube Webmail
 - Security: Fix XSS issue in handling of CDATA in HTML messages
 - Security: Fix remote code execution via crafted 'im_convert_path' or 'im_identify_path' settings
 - Security: Fix local file inclusion (and code execution) via crafted 'plugins' option
+- Security: Fix CSRF bypass that could be used to log out an authenticated user (#7302)
 
 RELEASE 1.4.3
 -------------
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2022-0284,CVE-2022-0284/e50f19fd73c792ebe912df8ab83aa51a243a3da7,https://github.com/ImageMagick/ImageMagick/commit/e50f19fd73c792ebe912df8ab83aa51a243a3da7,<s>A heap-based-buffer-over-read flaw was found in ImageMagick's GetPixelAlpha() function of 'pixel-accessor.h'. This vulnerability is triggered when an attacker passes a specially crafted Tagged Image File Format (TIFF) image to convert it into a PICON file format. This issue can potentially lead to a denial of service and information disclosure.</s>,"<s>https://github.com/ImageMagick/ImageMagick/issues/4729
</s>"," diff --git a/coders/xpm.c b/coders/xpm.c
index 782ed7325..5f73df8bc 100644
--- a/coders/xpm.c
+++ b/coders/xpm.c
@@ -773,7 +773,7 @@ static MagickBooleanType WritePICONImage(const ImageInfo *image_info,
               break;
             for (x=0; x < (ssize_t) picon->columns; x++)
             {
-              if (GetPixelAlpha(image,q) == (Quantum) TransparentAlpha)
+              if (GetPixelAlpha(picon,q) == (Quantum) TransparentAlpha)
                 transparent=MagickTrue;
               else
                 SetPixelAlpha(picon,OpaqueAlpha,q);
@@ -804,7 +804,7 @@ static MagickBooleanType WritePICONImage(const ImageInfo *image_info,
           break;
         for (x=0; x < (ssize_t) picon->columns; x++)
         {
-          if (GetPixelAlpha(image,q) == (Quantum) TransparentAlpha)
+          if (GetPixelAlpha(picon,q) == (Quantum) TransparentAlpha)
             SetPixelIndex(picon,(Quantum) picon->colors,q);
           q+=GetPixelChannels(picon);
         }
",1.0,,1.0,lime
CVE-2022-0284,CVE-2022-0284/8a4791c9840d1926c3ae7cbb81e8b996ee1d1e8c,https://github.com/ImageMagick/ImageMagick/commit/8a4791c9840d1926c3ae7cbb81e8b996ee1d1e8c,<s>A heap-based-buffer-over-read flaw was found in ImageMagick's GetPixelAlpha() function of 'pixel-accessor.h'. This vulnerability is triggered when an attacker passes a specially crafted Tagged Image File Format (TIFF) image to convert it into a PICON file format. This issue can potentially lead to a denial of service and information disclosure.</s>,"<s>account for floating point when comparing alpha values
</s>"," diff --git a/MagickCore/composite.c b/MagickCore/composite.c
index 7ddffeb28..fe86e5c66 100644
--- a/MagickCore/composite.c
+++ b/MagickCore/composite.c
@@ -687,6 +687,9 @@ static Image *SeamlessMeanImage(Image *image,const Image *source_image,
       break;
     for (x=0; x < (ssize_t) mean_image->columns; x++)
     {
+      double
+        alpha = (double) GetPixelAlpha(source_image,p);
+
       ssize_t
         i;
 
@@ -696,9 +699,9 @@ static Image *SeamlessMeanImage(Image *image,const Image *source_image,
         PixelTrait traits = GetPixelChannelTraits(mean_image,channel);
         if (traits == UndefinedPixelTrait)
           continue;
-        if (GetPixelAlpha(source_image,p) > 0)
+        if (fabs(alpha) >= MagickEpsilon)
           q[i]=mean[i];
-        if (GetPixelAlpha(source_image,p) == QuantumRange)
+        if (fabs(alpha-QuantumRange) < MagickEpsilon)
           q[i]=0.0;
       }
       p+=GetPixelChannels(source_image);
@@ -864,27 +867,16 @@ static MagickBooleanType SeamlessThresholdAlphaChannel(Image *image,
       break;
     for (x=0; x < (ssize_t) image->columns; x++)
     {
-      ssize_t
-        i;
+      double
+        alpha = (double) GetPixelAlpha(source_image,p);
 
-      for (i=0; i < (ssize_t) GetPixelChannels(image); i++)
-      {
-        PixelChannel channel = GetPixelChannelChannel(image,i);
-        PixelTrait traits = GetPixelChannelTraits(image,channel);
-        if (traits == UndefinedPixelTrait)
-          continue;
-        if (channel == AlphaPixelChannel)
-          {
-            double
-              alpha;
+      ssize_t
+        i = GetPixelChannelOffset(image,AlphaPixelChannel);
 
-            alpha=(double) GetPixelAlpha(source_image,p);
-            q[i]=(Quantum) 0;
-            if ((fabs(alpha) < MagickEpsilon) ||
-                (fabs(alpha) > (QuantumRange-MagickEpsilon)))
-              q[i]=QuantumRange;
-          }
-      }
+      q[i]=(Quantum) 0;
+      if ((fabs(alpha) < MagickEpsilon) ||
+          (fabs(alpha) > (QuantumRange-MagickEpsilon)))
+        q[i]=QuantumRange;
       p+=GetPixelChannels(source_image);
       q+=GetPixelChannels(image);
     }
",0.0,,0.0,lime
,,,,,,,,,
CVE-2019-17534,CVE-2019-17534/ce684dd008532ea0bf9d4a1d89bacb35f4a83f4d,https://github.com/libvips/libvips/commit/ce684dd008532ea0bf9d4a1d89bacb35f4a83f4d,"<s>vips_foreign_load_gif_scan_image in foreign/gifload.c in libvips before 8.8.2 tries to access a color map before a DGifGetImageDesc call, leading to a use-after-free.</s>","<s>fetch map after DGifGetImageDesc()
Earlier refactoring broke GIF map fetch.
</s>"," diff --git a/libvips/foreign/gifload.c b/libvips/foreign/gifload.c
index 67fe4c803..a394da7ac 100644
--- a/libvips/foreign/gifload.c
+++ b/libvips/foreign/gifload.c
@@ -408,9 +408,8 @@ vips_foreign_load_gif_scan_image( VipsForeignLoadGif *gif )
 {
 	VipsObjectClass *class = VIPS_OBJECT_GET_CLASS( gif );
 	GifFileType *file = gif->file;
-	ColorMapObject *map = file->Image.ColorMap ?
-		file->Image.ColorMap : file->SColorMap;
 
+	ColorMapObject *map;
 	GifByteType *extension;
 
 	if( DGifGetImageDesc( gif->file ) == GIF_ERROR ) {
@@ -435,6 +434,7 @@ vips_foreign_load_gif_scan_image( VipsForeignLoadGif *gif )
 
 	/* Test for a non-greyscale colourmap for this frame.
 	 */
+	map = file->Image.ColorMap ? file->Image.ColorMap : file->SColorMap;
 	if( !gif->has_colour &&
 		map ) {
 		int i;
",1.0,,1.0,lime
CVE-2019-17534,CVE-2019-17534/1ac96313cca88c4a69019f66c7f625e15815a29f,https://github.com/libvips/libvips/commit/1ac96313cca88c4a69019f66c7f625e15815a29f,"<s>vips_foreign_load_gif_scan_image in foreign/gifload.c in libvips before 8.8.2 tries to access a color map before a DGifGetImageDesc call, leading to a use-after-free.</s>","<s>note change in gifload.c
</s>"," diff --git a/libvips/foreign/gifload.c b/libvips/foreign/gifload.c
index b45aa0594..33c45f65c 100644
--- a/libvips/foreign/gifload.c
+++ b/libvips/foreign/gifload.c
@@ -24,6 +24,7 @@
  * 	- rework as a sequential loader ... simpler, much lower mem use
  * 23/8/18
  * 	- allow GIF read errors during header scan
+ * 	- better feof() handling
  */
 
 /*
",0.0,,0.0,lime
,,,,,,,,,
CVE-2016-10686,CVE-2016-10686/100862223904bb6478fcc33b701c7dee11f7b832,https://github.com/mithunsatheesh/node-rules/commit/100862223904bb6478fcc33b701c7dee11f7b832,"<s>fis-sass-all is another libsass wrapper for node. fis-sass-all downloads binary resources over HTTP, which leaves it vulnerable to MITM attacks. It may be possible to cause remote code execution (RCE) by swapping out the requested resources with an attacker controlled copy if the attacker is on the network or positioned in between the user and the remote server.</s>","<s>Remove fromJSON and toJSON from exposed APIs
Remove fromJSON and toJSON from exposed APIs in V5.0.0
</s>"," diff --git a/lib/node-rules.js b/lib/node-rules.js
index 443a156..0f9eb6b 100644
--- a/lib/node-rules.js
+++ b/lib/node-rules.js
@@ -128,36 +128,5 @@
         }
         this.sync();
     }
-    RuleEngine.prototype.toJSON = function() {
-        var rules = this.rules;
-        if (rules instanceof Array) {
-            rules = rules.map(function(rule) {
-                rule.condition = rule.condition.toString();
-                rule.consequence = rule.consequence.toString();
-                return rule;
-            });
-        } else if (typeof(rules) != ""undefined"") {
-            rules.condition = rules.condition.toString();
-            rules.consequence = rules.consequence.toString();
-        }
-        return rules;
-    };
-    RuleEngine.prototype.fromJSON = function(rules) {
-        this.init();
-        if (typeof(rules) == ""string"") {
-            rules = JSON.parse(rules);
-        }
-        if (rules instanceof Array) {
-            rules = rules.map(function(rule) {
-                rule.condition = eval(""("" + rule.condition + "")"");
-                rule.consequence = eval(""("" + rule.consequence + "")"");
-                return rule;
-            });
-        } else if (rules !== null && typeof(rules) == ""object"") {
-            rules.condition = eval(""("" + rules.condition + "")"");
-            rules.consequence = eval(""("" + rules.consequence + "")"");
-        }
-        this.register(rules);
-    };
     module.exports = RuleEngine;
 }(module.exports));
",1.0,,1.0,lime
CVE-2016-10686,CVE-2016-10686/5739577b035f6c1e0e9489902e7bef0ed52ca2d4,https://github.com/mithunsatheesh/node-rules/commit/5739577b035f6c1e0e9489902e7bef0ed52ca2d4,"<s>fis-sass-all is another libsass wrapper for node. fis-sass-all downloads binary resources over HTTP, which leaves it vulnerable to MITM attacks. It may be possible to cause remote code execution (RCE) by swapping out the requested resources with an attacker controlled copy if the attacker is on the network or positioned in between the user and the remote server.</s>","<s>Remove tests on fromJSON and toJSON
Remove tests on fromJSON and toJSON since APIs are removed in 5.0.0
</s>"," diff --git a/test/index.js b/test/index.js
index 6a9beb3..9c346e0 100644
--- a/test/index.js
+++ b/test/index.js
@@ -381,55 +381,31 @@ describe(""Rules"", function() {
             expect(R.activeRules[0].id).to.eql(""one"");
         });
     });
-    describe("".toJSON() & .fromJSON"", function() {
+    describe(""ignoreFactChanges"", function() {
         var rules = [{
+            ""name"": ""rule1"",
             ""condition"": function(R) {
-                R.when(1);
+                R.when(this.value1 > 5);
             },
             ""consequence"": function(R) {
-                R.stop();
-            },
-            ""on"": true
+                this.result = false;
+                this.errors = this.errors || [];
+                this.errors.push('must be less than 5');
+                R.next();
+            }
         }];
-        it(""rules after toJSON and fromJSON back should be equivalent to the old form"", function() {
-            var R1 = new RuleEngine(rules);
-            var store = R1.toJSON();
-            var R2 = new RuleEngine();
-            R2.fromJSON(store);
-            expect(R1.rules).to.eql(R2.rules);
-        });
-        it(""rules serilisation & back working fine?"", function() {
-            var R = new RuleEngine(rules);
-            var store = R.toJSON();
-            R.fromJSON(store);
-            expect(rules).to.eql(R.rules);
-        });
-    });
-  describe(""ignoreFactChanges"", function() {
-    var rules = [{
-        ""name"": ""rule1"",
-        ""condition"": function(R) {
-            R.when(this.value1 > 5);
-        },
-        ""consequence"": function(R) {
-            this.result = false;
-            this.errors = this.errors || [];
-            this.errors.push('must be less than 5');
-            R.next();
-        }
-    }];
 
-    var fact = {
-        ""value1"": 6
-    };
+        var fact = {
+            ""value1"": 6
+        };
 
-    it(""doesn't rerun when a fact changes if ignoreFactChanges is true"", function(done) {
-        var R = new RuleEngine(rules, { ignoreFactChanges: true });
+        it(""doesn't rerun when a fact changes if ignoreFactChanges is true"", function(done) {
+            var R = new RuleEngine(rules, { ignoreFactChanges: true });
 
-        R.execute(fact, function(result) {
-            expect(result.errors).to.have.length(1);
-            done();
+            R.execute(fact, function(result) {
+                expect(result.errors).to.have.length(1);
+                done();
+            });
         });
     });
-  });
 });
",0.0,,0.0,lime
,,,,,,,,,
CVE-2017-0247,CVE-2017-0247/fab6ae579aff17cb9b464b2b167b7dfd8fcea175,https://github.com/dotnet/corefx/commit/fab6ae579aff17cb9b464b2b167b7dfd8fcea175,<s>A denial of service vulnerability exists when the ASP.NET Core fails to properly validate web requests. NOTE: Microsoft has not commented on third-party claims that the issue is that the TextEncoder.EncodeCore function in the System.Text.Encodings.Web package in ASP.NET Core Mvc before 1.0.4 and 1.1.x before 1.1.3 allows remote attackers to cause a denial of service by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.</s>,"<s>Update the License info (#19779)
* Update the License info
* Update 3rd party license and rename some files
</s>"," diff --git a/THIRD-PARTY-NOTICES b/THIRD-PARTY-NOTICES
deleted file mode 100644
index 06055ff03e..0000000000
--- a/THIRD-PARTY-NOTICES
+++ /dev/null
@@ -1,226 +0,0 @@
-.NET Core uses third-party libraries or other resources that may be
-distributed under licenses different than the .NET Core software.
-
-In the event that we accidentally failed to list a required notice, please
-bring it to our attention. Post an issue or email us:
-
-           dotnet@microsoft.com
-
-The attached notices are provided for information only.
-
-License notice for Slicing-by-8 
--------------------------------
-
-http://sourceforge.net/projects/slicing-by-8/
-
-Copyright (c) 2004-2006 Intel Corporation - All Rights Reserved
-
-
-This software program is licensed subject to the BSD License,  available at
-http://www.opensource.org/licenses/bsd-license.html.
-
-
-License notice for Unicode data
--------------------------------
-
-http://www.unicode.org/copyright.html#License
-
-Copyright © 1991-2017 Unicode, Inc. All rights reserved.
-Distributed under the Terms of Use in http://www.unicode.org/copyright.html.
-
-Permission is hereby granted, free of charge, to any person obtaining
-a copy of the Unicode data files and any associated documentation
-(the ""Data Files"") or Unicode software and any associated documentation
-(the ""Software"") to deal in the Data Files or Software
-without restriction, including without limitation the rights to use,
-copy, modify, merge, publish, distribute, and/or sell copies of
-the Data Files or Software, and to permit persons to whom the Data Files
-or Software are furnished to do so, provided that either
-(a) this copyright and permission notice appear with all copies
-of the Data Files or Software, or
-(b) this copyright and permission notice appear in associated
-Documentation.
-
-THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF
-ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
-WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-NONINFRINGEMENT OF THIRD PARTY RIGHTS.
-IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS
-NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL
-DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
-DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
-TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
-PERFORMANCE OF THE DATA FILES OR SOFTWARE.
-
-Except as contained in this notice, the name of a copyright holder
-shall not be used in advertising or otherwise to promote the sale,
-use or other dealings in these Data Files or Software without prior
-written authorization of the copyright holder.
-
-License notice for Zlib 
------------------------
-
-https://github.com/madler/zlib
-http://zlib.net/zlib_license.html
-
-/* zlib.h -- interface of the 'zlib' general purpose compression library
-  version 1.2.11, January 15th, 2017
-
-  Copyright (C) 1995-2017 Jean-loup Gailly and Mark Adler
-
-  This software is provided 'as-is', without any express or implied
-  warranty.  In no event will the authors be held liable for any damages
-  arising from the use of this software.
-
-  Permission is granted to anyone to use this software for any purpose,
-  including commercial applications, and to alter it and redistribute it
-  freely, subject to the following restrictions:
-
-  1. The origin of this software must not be misrepresented; you must not
-     claim that you wrote the original software. If you use this software
-     in a product, an acknowledgment in the product documentation would be
-     appreciated but is not required.
-  2. Altered source versions must be plainly marked as such, and must not be
-     misrepresented as being the original software.
-  3. This notice may not be removed or altered from any source distribution.
-
-  Jean-loup Gailly        Mark Adler
-  jloup@gzip.org          madler@alumni.caltech.edu
-
-*/
-
-License notice for Mono
--------------------------------
-
-http://www.mono-project.com/docs/about-mono/
-
-Copyright (c) .NET Foundation Contributors
-
-MIT License
-
-Permission is hereby granted, free of charge, to any person obtaining a copy
-of this software  and associated documentation files (the Software), to deal
-in the Software without restriction,  including without limitation the rights
-to use, copy, modify, merge, publish, distribute, sublicense,  and/or sell
-copies of the Software, and to permit persons to whom the Software is
-furnished to do so,  subject to the following conditions:
-
-The above copyright notice and this permission notice shall be included in all
-copies or substantial portions of the Software.
-
-THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, 
-EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
-MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
-NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE 
-LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION 
-OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTIO",0.0,,0.0,tfidf
CVE-2017-0247,CVE-2017-0247/327fabf6f1cdef1f7bc338686a963480e7ac1e3e,https://github.com/dotnet/corefx/commit/327fabf6f1cdef1f7bc338686a963480e7ac1e3e,<s>A denial of service vulnerability exists when the ASP.NET Core fails to properly validate web requests. NOTE: Microsoft has not commented on third-party claims that the issue is that the TextEncoder.EncodeCore function in the System.Text.Encodings.Web package in ASP.NET Core Mvc before 1.0.4 and 1.1.x before 1.1.3 allows remote attackers to cause a denial of service by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.</s>,"<s>Port the Html Encoder fix from VSO branch (#19572)
This is the fix we have done in VSO branch and now we are porting it to corefx after we released the fix in the servicing packages
</s>"," diff --git a/src/System.Text.Encodings.Web/src/System/Text/Encodings/Web/HtmlEncoder.cs b/src/System.Text.Encodings.Web/src/System/Text/Encodings/Web/HtmlEncoder.cs
index 1a0079b047..47aaeada12 100644
--- a/src/System.Text.Encodings.Web/src/System/Text/Encodings/Web/HtmlEncoder.cs
+++ b/src/System.Text.Encodings.Web/src/System/Text/Encodings/Web/HtmlEncoder.cs
@@ -94,7 +94,7 @@ namespace System.Text.Encodings.Web
 
         public override int MaxOutputCharactersPerInputCharacter
         {
-            get { return 9; } // ""&#xFFFFF;"" is the longest encoded form
+            get { return 10; } // ""&#x10FFFF;"" is the longest encoded form
         }
 
         static readonly char[] s_quote = ""&quot;"".ToCharArray();
",1.0,,1.0,tfidf
,,,,,,,,,
CVE-2021-3993,CVE-2021-3993/6655ad632713340d7e87b01e250a71a7d72ef912,https://github.com/star7th/showdoc/commit/6655ad632713340d7e87b01e250a71a7d72ef912,<s>showdoc is vulnerable to Cross-Site Request Forgery (CSRF)</s>,"<s>Update composer.json
</s>"," diff --git a/composer.json b/composer.json
index 6fafebb3..7f50821a 100644
--- a/composer.json
+++ b/composer.json
@@ -4,7 +4,7 @@
     ""description"": ""ShowDoc is a tool greatly applicable for an IT team to share documents online"",
     ""keywords"": [""showdoc"",""documents"",""Api""],
     ""homepage"": ""https://github.com/star7th/showdoc"",
-    ""version"":""v2.9.12"", 
+    ""version"":""v2.9.13"", 
     ""license"": ""Apache-2.0"",
     ""authors"": [
         {
",0.0,,0.0,tfidf
CVE-2021-3993,CVE-2021-3993/654e871a3923e79076818a9a03533fe88222c871,https://github.com/star7th/showdoc/commit/654e871a3923e79076818a9a03533fe88222c871,<s>showdoc is vulnerable to Cross-Site Request Forgery (CSRF)</s>,"<s>Cookie security /Cookie 
</s>"," diff --git a/server/index.php b/server/index.php
index 6f19bcc8..176d03cd 100644
--- a/server/index.php
+++ b/server/index.php
@@ -8,6 +8,18 @@ if(version_compare(PHP_VERSION,COMPOSER_PHP_VERSION,'>')){
     require './vendor/autoload.php';
 }
 
+// cookiePHPSESSIDStrict
+if (PHP_VERSION_ID >= 70300) {
+    session_set_cookie_params([
+        'samesite' => 'Strict'
+    ]);
+} else { 
+    session_set_cookie_params(
+        NULL,
+        '/; samesite=Strict',
+    );
+}
+
 //   false
 define('APP_DEBUG',True);
 
",1.0,,1.0,tfidf
,,,,,,,,,
CVE-2020-15476,CVE-2020-15476/b69177be2fbe01c2442239a61832c44e40136c05,https://github.com/ntop/nDPI/commit/b69177be2fbe01c2442239a61832c44e40136c05,"<s>In nDPI through 3.2, the Oracle protocol dissector has a heap-based buffer over-read in ndpi_search_oracle in lib/protocols/oracle.c.</s>","<s>Adds bound check in oracle protocol
Found by oss-fuzz
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=21780
</s>"," diff --git a/src/lib/protocols/oracle.c b/src/lib/protocols/oracle.c
index 6ad6bac4c..a24837a68 100644
--- a/src/lib/protocols/oracle.c
+++ b/src/lib/protocols/oracle.c
@@ -43,7 +43,7 @@ void ndpi_search_oracle(struct ndpi_detection_module_struct *ndpi_struct, struct
     NDPI_LOG_DBG2(ndpi_struct, ""calculating ORACLE over tcp\n"");
     /* Oracle Database 9g,10g,11g */
     if ((dport == 1521 || sport == 1521)
-	&&  (((packet->payload[0] == 0x07) && (packet->payload[1] == 0xff) && (packet->payload[2] == 0x00))
+	&&  (((packet->payload_packet_len >= 3 && packet->payload[0] == 0x07) && (packet->payload[1] == 0xff) && (packet->payload[2] == 0x00))
 	     || ((packet->payload_packet_len >= 232) && ((packet->payload[0] == 0x00) || (packet->payload[0] == 0x01)) 
 	     && (packet->payload[1] != 0x00)
 	     && (packet->payload[2] == 0x00)
",1.0,,1.0,lime
CVE-2020-15476,CVE-2020-15476/61066fb106efa6d3d95b67e47b662de208b2b622,https://github.com/ntop/nDPI/commit/61066fb106efa6d3d95b67e47b662de208b2b622,"<s>In nDPI through 3.2, the Oracle protocol dissector has a heap-based buffer over-read in ndpi_search_oracle in lib/protocols/oracle.c.</s>","<s>Added check for heap buffer overflow read
</s>"," diff --git a/src/lib/ndpi_main.c b/src/lib/ndpi_main.c
index 7199f72eb..a062cdc8c 100644
--- a/src/lib/ndpi_main.c
+++ b/src/lib/ndpi_main.c
@@ -4807,29 +4807,34 @@ u_int32_t ndpi_bytestream_to_ipv4(const u_int8_t *str, u_int16_t max_chars_to_re
   u_int16_t read = 0;
   u_int16_t oldread;
   u_int32_t c;
+
   /* ip address must be X.X.X.X with each X between 0 and 255 */
   oldread = read;
   c = ndpi_bytestream_to_number(str, max_chars_to_read, &read);
   if(c > 255 || oldread == read || max_chars_to_read == read || str[read] != '.')
     return(0);
+  
   read++;
   val = c << 24;
   oldread = read;
   c = ndpi_bytestream_to_number(&str[read], max_chars_to_read - read, &read);
   if(c > 255 || oldread == read || max_chars_to_read == read || str[read] != '.')
     return(0);
+  
   read++;
   val = val + (c << 16);
   oldread = read;
   c = ndpi_bytestream_to_number(&str[read], max_chars_to_read - read, &read);
   if(c > 255 || oldread == read || max_chars_to_read == read || str[read] != '.')
     return(0);
+  
   read++;
   val = val + (c << 8);
   oldread = read;
   c = ndpi_bytestream_to_number(&str[read], max_chars_to_read - read, &read);
   if(c > 255 || oldread == read || max_chars_to_read == read)
     return(0);
+  
   val = val + c;
 
   *bytes_read = *bytes_read + read;
@@ -4869,9 +4874,10 @@ void ndpi_parse_packet_line_info(struct ndpi_detection_module_struct *ndpi_str,
 	int diff; /* No unsigned ! */
 	u_int32_t a1 = a + 4;
 
-	diff = ndpi_min(packet->payload_packet_len-a1, sizeof(flow->initial_binary_bytes));
+	diff = packet->payload_packet_len - a1;
 
 	if(diff > 0) {
+	  diff = ndpi_min(diff, sizeof(flow->initial_binary_bytes));
 	  memcpy(&flow->initial_binary_bytes, &packet->payload[a1], diff);
 	  flow->initial_binary_bytes_len = diff;
 	}
",0.0,,0.0,lime
,,,,,,,,,
CVE-2020-9274,CVE-2020-9274/8d0d42542e2cb7a56d645fbe4d0ef436e38bcefa,https://github.com/jedisct1/pure-ftpd/commit/8d0d42542e2cb7a56d645fbe4d0ef436e38bcefa,"<s>An issue was discovered in Pure-FTPd 1.0.49. An uninitialized pointer vulnerability has been detected in the diraliases linked list. When the *lookup_alias(const char alias) or print_aliases(void) function is called, they fail to correctly detect the end of the linked list and try to access a non-existent list member. This is related to init_aliases in diraliases.c.</s>","<s>diraliases: always set the tail of the list to NULL
Spotted and reported by Antonio Norales from GitHub Security Labs.
Thanks!
</s>"," diff --git a/src/diraliases.c b/src/diraliases.c
index 4002a36..fb70273 100644
--- a/src/diraliases.c
+++ b/src/diraliases.c
@@ -93,7 +93,6 @@ int init_aliases(void)
                 (tail->dir = strdup(dir)) == NULL) {
                 die_mem();
             }
-            tail->next = NULL;
         } else {
             DirAlias *curr;
 
@@ -105,6 +104,7 @@ int init_aliases(void)
             tail->next = curr;
             tail = curr;
         }
+        tail->next = NULL;
     }
     fclose(fp);
     aliases_up++;
",1.0,,1.0,tfidf
CVE-2020-9274,CVE-2020-9274/fbcd667a8d540feba214f5d2115e83b26fdab4f7,https://github.com/jedisct1/pure-ftpd/commit/fbcd667a8d540feba214f5d2115e83b26fdab4f7,"<s>An issue was discovered in Pure-FTPd 1.0.49. An uninitialized pointer vulnerability has been detected in the diraliases linked list. When the *lookup_alias(const char alias) or print_aliases(void) function is called, they fail to correctly detect the end of the linked list and try to access a non-existent list member. This is related to init_aliases in diraliases.c.</s>","<s>wait3() has been removed from POSIX
</s>"," diff --git a/src/ftpd.c b/src/ftpd.c
index 748c727..d856839 100644
--- a/src/ftpd.c
+++ b/src/ftpd.c
@@ -395,16 +395,6 @@ static void sigchild(int sig)
 #IN endif
 AC_FUNC_GETLOADAV iptrack_delete_pid(pid);
GROUPS
 }
-# else
-IT3
 while ((pid = wait3(NULL, WNOHANG, NULL)) > (pid_t) 0) {
-GTYPES
   if (nb_children > 0U) {
-            nb_children--;
-        }
-#  ifdef FTPWHO
-        ftpwho_unlinksbfile(pid);
-#  endif
-        iptrack_delete_pid(pid);
-    }
 # endif
     errno = olderrno;
 }
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2020-10237,CVE-2020-10237/a46e7a3bc4cf89e7fdbbcaf03c8c1f8a75c7a573,https://github.com/Froxlor/Froxlor/commit/a46e7a3bc4cf89e7fdbbcaf03c8c1f8a75c7a573,"<s>An issue was discovered in Froxlor through 0.10.15. The installer wrote configuration parameters including passwords into files in /tmp, setting proper permissions only after writing the sensitive data. A local attacker could have disclosed the information if he read the file at the right time, because of _createUserdataConf in install/lib/class.FroxlorInstall.php.</s>","<s>set correct umask to create user config in installation
Signed-off-by: Michael Kaufmann <d00p@froxlor.org>
</s>"," diff --git a/install/lib/class.FroxlorInstall.php b/install/lib/class.FroxlorInstall.php
index c00ebe85..33dc8434 100644
--- a/install/lib/class.FroxlorInstall.php
+++ b/install/lib/class.FroxlorInstall.php
@@ -332,8 +332,9 @@ class FroxlorInstall
 		$userdata .= ""?>"";
 
 		// test if we can store the userdata.inc.php in ../lib
+		$umask = @umask(077);
 		$userdata_file = dirname(dirname(dirname(__FILE__))) . '/lib/userdata.inc.php';
-		if (@touch($userdata_file) && @chmod($userdata_file, 0600) && @is_writable($userdata_file)) {
+		if (@touch($userdata_file) && @is_writable($userdata_file)) {
 			$fp = @fopen($userdata_file, 'w');
 			@fputs($fp, $userdata, strlen($userdata));
 			@fclose($fp);
@@ -343,7 +344,6 @@ class FroxlorInstall
 			// try creating it in a temporary file
 			$temp_file = @tempnam(sys_get_temp_dir(), 'fx');
 			if ($temp_file) {
-				chmod($temp_file, 0600);
 				$fp = @fopen($temp_file, 'w');
 				@fputs($fp, $userdata, strlen($userdata));
 				@fclose($fp);
@@ -354,6 +354,7 @@ class FroxlorInstall
 				eval(""\$content .= \"""" . $this->_getTemplate(""textarea"") . ""\"";"");
 			}
 		}
+		@umask($umask);
 
 		return $content;
 	}
",1.0,,1.0,tfidf
CVE-2020-10237,CVE-2020-10237/048e6c13aeab4d31c3eaefd8d0dd6f2a2ba14269,https://github.com/Froxlor/Froxlor/commit/048e6c13aeab4d31c3eaefd8d0dd6f2a2ba14269,"<s>An issue was discovered in Froxlor through 0.10.15. The installer wrote configuration parameters including passwords into files in /tmp, setting proper permissions only after writing the sensitive data. A local attacker could have disclosed the information if he read the file at the right time, because of _createUserdataConf in install/lib/class.FroxlorInstall.php.</s>","<s>Fix renewal of ECC/ECDSA certificates.
The ACME v2 implementation uses separate directoies for ECC and on-ECC
certificates. The renew command for a domain checks if an ECC directory
exists (having a ""_ecc"" suffix) and refuses the command unless the
""--ecc"" flag was specified.
Confusingly, this flag is only required to *renew* an ECC certificate,
but not to issue it.
This fixes https://github.com/Froxlor/Froxlor/issues/820.
</s>"," diff --git a/lib/Froxlor/Cron/Http/LetsEncrypt/AcmeSh.php b/lib/Froxlor/Cron/Http/LetsEncrypt/AcmeSh.php
index 2515783a..7b8cbcae 100644
--- a/lib/Froxlor/Cron/Http/LetsEncrypt/AcmeSh.php
+++ b/lib/Froxlor/Cron/Http/LetsEncrypt/AcmeSh.php
@@ -327,6 +327,9 @@ class AcmeSh extends \Froxlor\Cron\FroxlorCron
 			}
 			if (Settings::Get('system.leecc') > 0) {
 				$acmesh_cmd .= "" --keylength ec-"" . Settings::Get('system.leecc');
+				if ($cert_mode != 'issue') {
+					$acmesh_cmd .= "" --ecc"";
+				}
 			} else {
 				$acmesh_cmd .= "" --keylength "" . Settings::Get('system.letsencryptkeysize');
 			}
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2019-20840,CVE-2019-20840/5539962dab5cd6b86072f10111238d0b8350bec0,https://github.com/LibVNC/libvncserver/commit/5539962dab5cd6b86072f10111238d0b8350bec0,<s>An issue was discovered in LibVNCServer before 0.9.13. libvncserver/ws_decode.c can lead to a crash because of unaligned accesses in hybiReadAndDecode.</s>,"<s>libvncserver: ws_decode: eliminate duplicate code
</s>"," diff --git a/libvncserver/ws_decode.c b/libvncserver/ws_decode.c
index b783a131..f1c42033 100644
--- a/libvncserver/ws_decode.c
+++ b/libvncserver/ws_decode.c
@@ -542,8 +542,6 @@ webSocketsDecodeHybi(ws_ctx_t *wsctx, char *dst, int len)
         wsctx->hybiDecodeState = hybiReturnData(dst, len, wsctx, &result);
         break;
       case WS_HYBI_STATE_DATA_NEEDED:
-        wsctx->hybiDecodeState = hybiReadAndDecode(wsctx, dst, len, &result, 0);
-        break;
       case WS_HYBI_STATE_CLOSE_REASON_PENDING:
         wsctx->hybiDecodeState = hybiReadAndDecode(wsctx, dst, len, &result, 0);
         break;
",0.0,,0.0,tfidf
CVE-2019-20840,CVE-2019-20840/0cf1400c61850065de590d403f6d49e32882fd76,https://github.com/LibVNC/libvncserver/commit/0cf1400c61850065de590d403f6d49e32882fd76,<s>An issue was discovered in LibVNCServer before 0.9.13. libvncserver/ws_decode.c can lead to a crash because of unaligned accesses in hybiReadAndDecode.</s>,"<s>fix crash because of unaligned accesses in hybiReadAndDecode()
</s>"," diff --git a/libvncserver/ws_decode.c b/libvncserver/ws_decode.c
index 441ebc73..10c44d19 100644
--- a/libvncserver/ws_decode.c
+++ b/libvncserver/ws_decode.c
@@ -327,7 +327,6 @@ hybiReadAndDecode(ws_ctx_t *wsctx, char *dst, int len, int *sockRet, int nInBuf)
   int bufsize;
   int nextRead;
   unsigned char *data;
-  uint32_t *data32;
 
   /* if data was carried over, copy to start of buffer */
   memcpy(wsctx->writePos, wsctx->carryBuf, wsctx->carrylen);
@@ -383,10 +382,12 @@ hybiReadAndDecode(ws_ctx_t *wsctx, char *dst, int len, int *sockRet, int nInBuf)
   /* for a possible base64 decoding, we decode multiples of 4 bytes until
    * the whole frame is received and carry over any remaining bytes in the carry buf*/
   data = (unsigned char *)(wsctx->writePos - toDecode);
-  data32= (uint32_t *)data;
 
   for (i = 0; i < (toDecode >> 2); i++) {
-    data32[i] ^= wsctx->header.mask.u;
+    uint32_t tmp;
+    memcpy(&tmp, data + i * sizeof(tmp), sizeof(tmp));
+    tmp ^= wsctx->header.mask.u;
+    memcpy(data + i * sizeof(tmp), &tmp, sizeof(tmp));
   }
   ws_dbg(""mask decoding; i=%d toDecode=%d\n"", i, toDecode);
 
",1.0,,1.0,tfidf
,,,,,,,,,
CVE-2014-6047,CVE-2014-6047/d0a268446507eda488b314adba51d2f3fd9c1b31,https://github.com/thorsten/phpMyFAQ/commit/d0a268446507eda488b314adba51d2f3fd9c1b31,"<s>phpMyFAQ before 2.8.13 allows remote authenticated users with certain permissions to read arbitrary attachments by leveraging incorrect ""download an attachment"" permission checks.</s>","<s>Added missing check on permission to download attachments
</s>"," diff --git a/phpmyfaq/attachment.php b/phpmyfaq/attachment.php
index 92a849d58..a9f8d05f8 100644
--- a/phpmyfaq/attachment.php
+++ b/phpmyfaq/attachment.php
@@ -64,7 +64,23 @@ if (in_array($user->getUserId(), $userPermission)) {
     $userPermission = false;
 }
 
-if ($attachment && ($groupPermission || ($groupPermission && $userPermission))) {
+// get user rights
+$permission = array();
+if (isset($auth)) {
+    // read all rights, set them FALSE
+    $allRights = $user->perm->getAllRightsData();
+    foreach ($allRights as $right) {
+        $permission[$right['name']] = false;
+    }
+    // check user rights, set them TRUE
+    $allUserRights = $user->perm->getAllUserRights($user->getUserId());
+    foreach ($allRights as $right) {
+        if (in_array($right['right_id'], $allUserRights))
+            $permission[$right['name']] = true;
+    }
+}
+
+if ($attachment && ($groupPermission || ($groupPermission && $userPermission)) && $permission['dlattachment']) {
     try {
         $attachment->rawOut();
         exit(0);
",1.0,,1.0,lime
CVE-2014-6047,CVE-2014-6047/e258256d09ffbae4995c5a551281b554a1e0d7b3,https://github.com/thorsten/phpMyFAQ/commit/e258256d09ffbae4995c5a551281b554a1e0d7b3,"<s>phpMyFAQ before 2.8.13 allows remote authenticated users with certain permissions to read arbitrary attachments by leveraging incorrect ""download an attachment"" permission checks.</s>","<s>Fixed invalid default value for TIMESTAMP on MySQL, closes #898
</s>"," diff --git a/phpmyfaq/install/mysql.sql.php b/phpmyfaq/install/mysql.sql.php
index 6443abbd2..a74890c05 100644
--- a/phpmyfaq/install/mysql.sql.php
+++ b/phpmyfaq/install/mysql.sql.php
@@ -243,7 +243,7 @@ id INT(11) NOT NULL,
 url VARCHAR(255) NOT NULL,
 instance VARCHAR(255) NOT NULL,
 comment TEXT NULL,
-created TIMESTAMP DEFAULT 0,
+created TIMESTAMP,
 modified TIMESTAMP ON UPDATE CURRENT_TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
 PRIMARY KEY (id)) DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci"";
 
",0.0,,0.0,lime
,,,,,,,,,
CVE-2018-1000872,CVE-2018-1000872/3a7b880bdf70d295ed8af3a5880bab65fa6b3932,https://github.com/OpenKMIP/PyKMIP/commit/3a7b880bdf70d295ed8af3a5880bab65fa6b3932,<s>OpenKMIP PyKMIP version All versions before 0.8.0 contains a CWE 399: Resource Management Errors (similar issue to CVE-2015-5262) vulnerability in PyKMIP server that can result in DOS: the server can be made unavailable by one or more clients opening all of the available sockets. This attack appear to be exploitable via A client or clients open sockets with the server and then never close them. This vulnerability appears to have been fixed in 0.8.0.</s>,"<s>Fix a denial-of-service bug by setting the server socket timeout
This change fixes a potential denial-of-service bug with the
server, setting a default timeout for all server sockets. This
allows the server to drop hung connections without blocking
forever. The interrupt triggered during accept calls is expected
and is now handled appropriately. Server unit tests have been
updated to reflect this change.
Closes #430
</s>"," diff --git a/kmip/tests/unit/services/server/test_server.py b/kmip/tests/unit/services/server/test_server.py
index d450e09..e228747 100644
--- a/kmip/tests/unit/services/server/test_server.py
+++ b/kmip/tests/unit/services/server/test_server.py
@@ -485,7 +485,11 @@ class TestKmipServer(testtools.TestCase):
 
         # Test the expected behavior for a normal server/interrupt sequence
         s._socket.accept = mock.MagicMock(
-            side_effect=[('connection', 'address'), expected_error]
+            side_effect=[
+                ('connection', 'address'),
+                socket.timeout,
+                expected_error
+            ]
         )
 
         s.serve()
",1.0,,1.0,tfidf
CVE-2018-1000872,CVE-2018-1000872/53cbab73965b3907619b1a0ac6eacff7f9ea34b0,https://github.com/OpenKMIP/PyKMIP/commit/53cbab73965b3907619b1a0ac6eacff7f9ea34b0,<s>OpenKMIP PyKMIP version All versions before 0.8.0 contains a CWE 399: Resource Management Errors (similar issue to CVE-2015-5262) vulnerability in PyKMIP server that can result in DOS: the server can be made unavailable by one or more clients opening all of the available sockets. This attack appear to be exploitable via A client or clients open sockets with the server and then never close them. This vulnerability appears to have been fixed in 0.8.0.</s>,"<s>Add payloads for the Check operation
This change adds the request and response payloads needed for the
Check operation. Unit tests have been added to cover the new
payload structures.
</s>"," diff --git a/kmip/core/messages/payloads/check.py b/kmip/core/messages/payloads/check.py
new file mode 100644
index 0000000..7dd19dd
--- /dev/null
+++ b/kmip/core/messages/payloads/check.py
@@ -0,0 +1,484 @@
+# Copyright (c) 2017 The Johns Hopkins University/Applied Physics Laboratory
+# All Rights Reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the ""License""); you may
+# not use this file except in compliance with the License. You may obtain
+# a copy of the License at
+#
+#    http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
+# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+# License for the specific language governing permissions and limitations
+# under the License.
+
+import six
+
+from kmip import enums
+from kmip.core import primitives
+from kmip.core import utils
+
+
+class CheckRequestPayload(primitives.Struct):
+    """"""
+    A request payload for the Check operation.
+
+    Attributes:
+        unique_identifier: The unique ID of the object to be checked.
+        usage_limits_count: The number of usage limits units that should be
+            available on the checked object.
+        cryptographic_usage_mask: The numeric representation of a set of usage
+            masks that should be set on the checked object.
+        lease_time: The date in seconds since the epoch that a lease should be
+            available for on the checked object.
+    """"""
+
+    def __init__(self,
+                 unique_identifier=None,
+                 usage_limits_count=None,
+                 cryptographic_usage_mask=None,
+                 lease_time=None):
+        """"""
+        Construct a Check request payload struct.
+
+        Args:
+            unique_identifier (string): The ID of the managed object (e.g.,
+                a public key) to be checked. Optional, defaults to None.
+            usage_limits_count (int): The number of usage limits units that
+                should be available on the checked object. Optional, defaults
+                to None.
+            cryptographic_usage_mask (int): The numeric representation of a
+                set of usage masks that should be set on the checked object.
+                Optional, defaults to None.
+            lease_time (int): The date in seconds since the epoch that a
+                lease should be available for on the checked object. Optional,
+                defaults to None.
+        """"""
+        super(CheckRequestPayload, self).__init__(enums.Tags.REQUEST_PAYLOAD)
+
+        self._unique_identifier = None
+        self._usage_limits_count = None
+        self._cryptographic_usage_mask = None
+        self._lease_time = None
+
+        self.unique_identifier = unique_identifier
+        self.usage_limits_count = usage_limits_count
+        self.cryptographic_usage_mask = cryptographic_usage_mask
+        self.lease_time = lease_time
+
+    @property
+    def unique_identifier(self):
+        if self._unique_identifier:
+            return self._unique_identifier.value
+        else:
+            return None
+
+    @unique_identifier.setter
+    def unique_identifier(self, value):
+        if value is None:
+            self._unique_identifier = None
+        elif isinstance(value, six.string_types):
+            self._unique_identifier = primitives.TextString(
+                value=value,
+                tag=enums.Tags.UNIQUE_IDENTIFIER
+            )
+        else:
+            raise TypeError(""Unique identifier must be a string."")
+
+    @property
+    def usage_limits_count(self):
+        if self._usage_limits_count:
+            return self._usage_limits_count.value
+        else:
+            return None
+
+    @usage_limits_count.setter
+    def usage_limits_count(self, value):
+        if value is None:
+            self._usage_limits_count = None
+        elif isinstance(value, six.integer_types):
+            self._usage_limits_count = primitives.LongInteger(
+                value=value,
+                tag=enums.Tags.USAGE_LIMITS_COUNT
+            )
+        else:
+            raise TypeError(""Usage limits count must be an integer."")
+
+    @property
+    def cryptographic_usage_mask(self):
+        if self._cryptographic_usage_mask:
+            return self._cryptographic_usage_mask.value
+        else:
+            return None
+
+    @cryptographic_usage_mask.setter
+    def cryptographic_usage_mask(self, value):
+        if value is None:
+            self._cryptographic_usage_mask = None
+        elif isinstance(value, six.integer_types):
+            self._cryptographic_usage_mask = primitives.Integer(
+                value=value,
+                tag=enums.Tags.CRYPTOGRAPHIC_USAGE_MASK
+            )
+        else:
+            raise TypeError(""Cryptographic usage mask must be an integer."")
+
+    @property
+    def lease_time(self):
+        if self._lease_time:
+            return self._lease_time.value
+        else:
+            return None
+
+    @",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2017-9868,CVE-2017-9868/96db6d6644786fb89ddc16df18c455b0d3954f03,https://github.com/eclipse/mosquitto/commit/96db6d6644786fb89ddc16df18c455b0d3954f03,"<s>In Mosquitto through 1.4.12, mosquitto.db (aka the persistence file) is world readable, which allows local users to obtain sensitive MQTT topic information.</s>","<s>Fix CONNECT check for reserved=0, as per MQTT v3.1.1 check MQTT-3.1.2-3.
</s>"," diff --git a/ChangeLog.txt b/ChangeLog.txt
index 39bc64ec..1109359f 100644
--- a/ChangeLog.txt
+++ b/ChangeLog.txt
@@ -13,6 +13,7 @@ Broker:
 - Fix problems with large retained messages over websockets. Closes #427.
 - Set persistence file to only be readable by owner, except on Windows. Closes
   #468.
+- Fix CONNECT check for reserved=0, as per MQTT v3.1.1 check MQTT-3.1.2-3.
 
 Clients:
 - Don't use / in auto-generated client ids.
",0.0,,0.0,lime
CVE-2017-9868,CVE-2017-9868/09cb1b61c8f48284d9c42bd911faa7525cc689c7,https://github.com/eclipse/mosquitto/commit/09cb1b61c8f48284d9c42bd911faa7525cc689c7,"<s>In Mosquitto through 1.4.12, mosquitto.db (aka the persistence file) is world readable, which allows local users to obtain sensitive MQTT topic information.</s>","<s>[468] Set persistence file to only be readable by owner.
Not implemented on Windows.
Thanks to Moshe Zioni.
Bug: https://github.com/eclipse/mosquitto/issues/468
</s>"," diff --git a/ChangeLog.txt b/ChangeLog.txt
index 3e1691be..5540fda0 100644
--- a/ChangeLog.txt
+++ b/ChangeLog.txt
@@ -2,6 +2,8 @@ Broker:
 - Fix for poor websockets performance.
 - Fix lazy bridges not timing out for idle_timeout. Closes #417.
 - Fix problems with large retained messages over websockets. Closes #427.
+- Set persistence file to only be readable by owner, except on Windows. Closes
+  #468.
 
 Clients:
 - Don't use / in auto-generated client ids.
",0.0,,1.0,lime
,,,,,,,,,
CVE-2012-3388,CVE-2012-3388/1db89f5e6a5b922e2b6c71517bc0eda8277c1767,https://github.com/moodle/moodle/commit/1db89f5e6a5b922e2b6c71517bc0eda8277c1767,"<s>The is_enrolled function in lib/accesslib.php in Moodle 2.2.x before 2.2.4 and 2.3.x before 2.3.1 does not properly interact with the caching feature, which might allow remote authenticated users to bypass an intended capability check via unspecified vectors that trigger caching of a user record.</s>","<s>MDL-33916 Ensure that capabilities are checked for cached user enrolments
</s>"," diff --git a/lib/accesslib.php b/lib/accesslib.php
index fcd91b8b41d..de180b40dd1 100644
--- a/lib/accesslib.php
+++ b/lib/accesslib.php
@@ -1961,6 +1961,9 @@ function is_enrolled(context $context, $user = null, $withcapability = '', $only
             $coursecontext->reload_if_dirty();
             if (isset($USER->enrol['enrolled'][$coursecontext->instanceid])) {
                 if ($USER->enrol['enrolled'][$coursecontext->instanceid] > time()) {
+                    if ($withcapability and !has_capability($withcapability, $context, $userid)) {
+                        return false;
+                    }
                     return true;
                 }
             }
",1.0,,1.0,tfidf
CVE-2012-3388,CVE-2012-3388/770cee969678a2197e0c4d6b82ca019e94199845,https://github.com/moodle/moodle/commit/770cee969678a2197e0c4d6b82ca019e94199845,"<s>The is_enrolled function in lib/accesslib.php in Moodle 2.2.x before 2.2.4 and 2.3.x before 2.3.1 does not properly interact with the caching feature, which might allow remote authenticated users to bypass an intended capability check via unspecified vectors that trigger caching of a user record.</s>","<s>MDL-33916 Add unit tests to ensure that is_enrolled returns correctly
</s>"," diff --git a/lib/tests/accesslib_test.php b/lib/tests/accesslib_test.php
index ac51a372a76..6d7bc4e22a8 100644
--- a/lib/tests/accesslib_test.php
+++ b/lib/tests/accesslib_test.php
@@ -147,6 +147,59 @@ class accesslib_testcase extends advanced_testcase {
         }
     }
 
+    /**
+     * Test if user is enrolled in a course
+     * @return void
+     */
+    public function test_is_enrolled() {
+        global $DB;
+
+        // Generate data
+        $user = $this->getDataGenerator()->create_user();
+        $course = $this->getDataGenerator()->create_course();
+        $coursecontext = context_course::instance($course->id);
+        $role = $DB->get_record('role', array('shortname'=>'student'));
+
+        // There should be a manual enrolment as part of the default install
+        $plugin = enrol_get_plugin('manual');
+        $instance = $DB->get_record('enrol', array(
+            'courseid' => $course->id,
+            'enrol' => 'manual',
+        ));
+        $this->assertNotEquals($instance, false);
+
+        // Enrol the user in the course
+        $plugin->enrol_user($instance, $user->id, $role->id);
+
+        // We'll test with the mod/assign:submit capability
+        $capability= 'mod/assign:submit';
+        $this->assertTrue($DB->record_exists('capabilities', array('name' => $capability)));
+
+        // Switch to our user
+        $this->setUser($user);
+
+        // Ensure that the user has the capability first
+        $this->assertTrue(has_capability($capability, $coursecontext, $user->id));
+
+        // We first test whether the user is enrolled on the course as this
+        // seeds the cache, then we test for the capability
+        $this->assertTrue(is_enrolled($coursecontext, $user, '', true));
+        $this->assertTrue(is_enrolled($coursecontext, $user, $capability));
+
+        // Prevent the capability for this user role
+        assign_capability($capability, CAP_PROHIBIT, $role->id, $coursecontext);
+        $coursecontext->mark_dirty();
+        $this->assertFalse(has_capability($capability, $coursecontext, $user->id));
+
+        // Again, we seed the cache first by checking initial enrolment,
+        // and then we test the actual capability
+        $this->assertTrue(is_enrolled($coursecontext, $user, '', true));
+        $this->assertFalse(is_enrolled($coursecontext, $user, $capability));
+
+        // We need variable states to be reset for the next test
+        $this->resetAfterTest(true);
+    }
+
     /**
      * Test logged in test.
      * @return void
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2018-1002201,CVE-2018-1002201/759b72f33bc8f4d69f84f09fcb7f010ad45d6fff,https://github.com/zeroturnaround/zt-zip/commit/759b72f33bc8f4d69f84f09fcb7f010ad45d6fff,"<s>zt-zip before 1.13 is vulnerable to directory traversal, allowing attackers to write to arbitrary files via a ../ (dot dot slash) in a Zip archive entry that is mishandled during extraction. This vulnerability is also known as 'Zip-Slip'.</s>","<s>Fixed potential security vulnerability reported by Snyk Security Research Team
This is an arbitrary file write vulnerability, that can be achieved using a specially crafted zip archive, that holds path traversal filenames. So when the filename gets concatenated to the target extraction directory, the final path ends up outside of the target folder.
</s>"," diff --git a/src/test/java/org/zeroturnaround/zip/DirectoryTraversalMaliciousTest.java b/src/test/java/org/zeroturnaround/zip/DirectoryTraversalMaliciousTest.java
new file mode 100644
index 0000000..8eede3d
--- /dev/null
+++ b/src/test/java/org/zeroturnaround/zip/DirectoryTraversalMaliciousTest.java
@@ -0,0 +1,61 @@
+package org.zeroturnaround.zip;
+
+/**
+ *    Copyright (C) 2012 ZeroTurnaround LLC <support@zeroturnaround.com>
+ *
+ *    Licensed under the Apache License, Version 2.0 (the ""License"");
+ *    you may not use this file except in compliance with the License.
+ *    You may obtain a copy of the License at
+ *
+ *        http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *    Unless required by applicable law or agreed to in writing, software
+ *    distributed under the License is distributed on an ""AS IS"" BASIS,
+ *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *    See the License for the specific language governing permissions and
+ *    limitations under the License.
+ */
+import java.io.File;
+
+import junit.framework.TestCase;
+
+public class DirectoryTraversalMaliciousTest extends TestCase {
+  /*
+   * This is the contents of the file. There is one evil file that tries to get out of the
+   * target.
+   *
+   * $ unzip -t zip-slip.zip
+   * Archive: zip-slip.zip
+   * testing: good.txt OK
+   * testing: ../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../tmp/evil.txt OK
+   * No errors detected in compressed data of zip-slip.zip.
+   */
+  private static final File badFile = new File(""src/test/resources/zip-malicious-traversal.zip"");
+  private static final File badFileBackslashes = new File(""src/test/resources/zip-malicious-traversal-backslashes.zip"");
+
+  public void testUnpackDoesntLeaveTarget() throws Exception {
+    File file = File.createTempFile(""temp"", null);
+    File tmpDir = file.getParentFile();
+
+    try {
+      ZipUtil.unpack(badFile, tmpDir);
+      fail();
+    }
+    catch (ZipException e) {
+      assertTrue(true);
+    }
+  }
+
+  public void testUnwrapDoesntLeaveTarget() throws Exception {
+    File file = File.createTempFile(""temp"", null);
+    File tmpDir = file.getParentFile();
+
+    try {
+      ZipUtil.iterate(badFileBackslashes, new ZipUtil.BackslashUnpacker(tmpDir));
+      fail();
+    }
+    catch (ZipException e) {
+      assertTrue(true);
+    }
+  }
+}
",1.0,,1.0,tfidf
CVE-2018-1002201,CVE-2018-1002201/2aa8c72a6b2a2cb14e8a5cd3891fbba4d6cbd905,https://github.com/zeroturnaround/zt-zip/commit/2aa8c72a6b2a2cb14e8a5cd3891fbba4d6cbd905,"<s>zt-zip before 1.13 is vulnerable to directory traversal, allowing attackers to write to arbitrary files via a ../ (dot dot slash) in a Zip archive entry that is mishandled during extraction. This vulnerability is also known as 'Zip-Slip'.</s>","<s>Prepare release zt-zip-1.13
</s>"," diff --git a/pom.xml b/pom.xml
index c2ea0a8..50178ed 100644
--- a/pom.xml
+++ b/pom.xml
@@ -5,7 +5,7 @@
   <artifactId>zt-zip</artifactId>
   <packaging>jar</packaging>
   <name>ZT Zip</name>
-  <version>1.13-SNAPSHOT</version>
+  <version>1.13</version>
 
   <scm>
     <connection>scm:git:git@github.com:zeroturnaround/zt-zip.git</connection>
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2021-37742,CVE-2021-37742/af50add82433eb2a740c3621b99d9d14d2b1e192,https://github.com/MISP/MISP/commit/af50add82433eb2a740c3621b99d9d14d2b1e192,<s>app/View/Elements/GalaxyClusters/view_relation_tree.ctp in MISP 2.4.147 allows Stored XSS when viewing galaxy cluster relationships.</s>,"<s>fix: [security] Stored XSS when viewing galaxy cluster relationships
- As reported by Dawid Czarnecki
</s>"," diff --git a/app/View/Elements/GalaxyClusters/view_relation_tree.ctp b/app/View/Elements/GalaxyClusters/view_relation_tree.ctp
index b9b7e5c33..93f4d206d 100644
--- a/app/View/Elements/GalaxyClusters/view_relation_tree.ctp
+++ b/app/View/Elements/GalaxyClusters/view_relation_tree.ctp
@@ -299,7 +299,7 @@ $randomClass = ""relation-{$random}"";
             .attr(""class"", ""well well-small"")
             .style('padding', '4px 9px')
             .style('white-space', 'nowrap')
-            .html(function(d) { return d.Relation.referenced_galaxy_cluster_type; })
+            .text(function(d) { return d.Relation.referenced_galaxy_cluster_type; })
             
         paddingX = 8;
         gEnter.append(""foreignObject"")
@@ -319,7 +319,7 @@ $randomClass = ""relation-{$random}"";
                             .style('background-color', tag.colour)
                             .style('color', getTextColour(tag.colour))
                             .style('display', 'inline')
-                            .html(tag.name)
+                            .text(tag.name)
                     });
                 }
             });
",1.0,,1.0,lime
CVE-2021-37742,CVE-2021-37742/f318f7c0ddac7dfd2b1f246fd8f488d9dfc3a4bf,https://github.com/MISP/MISP/commit/f318f7c0ddac7dfd2b1f246fd8f488d9dfc3a4bf,<s>app/View/Elements/GalaxyClusters/view_relation_tree.ctp in MISP 2.4.147 allows Stored XSS when viewing galaxy cluster relationships.</s>,"<s>fix: [security] Stored XSS when viewing galaxy cluster elements in JSON format
</s>"," diff --git a/app/View/GalaxyElements/ajax/index.ctp b/app/View/GalaxyElements/ajax/index.ctp
index 24290c49b..9bc542e09 100644
--- a/app/View/GalaxyElements/ajax/index.ctp
+++ b/app/View/GalaxyElements/ajax/index.ctp
@@ -83,7 +83,7 @@ if ($context == 'JSONView') {
 
 echo $this->element('/genericElements/IndexTable/index_table', $indexOptions);
 if ($context == 'JSONView') {
-    echo sprintf('<div id=""elementJSONDiv"" class=""well well-small"">%s</div>', json_encode($JSONElements));
+    echo sprintf('<div id=""elementJSONDiv"" class=""well well-small"">%s</div>', json_encode(h($JSONElements)));
 }
 ?>
 
",0.0,,0.0,lime
,,,,,,,,,
CVE-2019-16346,CVE-2019-16346/5bad360070216388768be9b66d9fb59241e86d66,https://github.com/miniupnp/ngiflib/commit/5bad360070216388768be9b66d9fb59241e86d66,"<s>ngiflib 0.4 has a heap-based buffer overflow in WritePixel() in ngiflib.c when called from DecodeGifImg, because deinterlacing for small pictures is mishandled.</s>","<s>fix palette read overflow
fixes #15
</s>"," diff --git a/ngiflib.c b/ngiflib.c
index 7bb78b6..8890f39 100644
--- a/ngiflib.c
+++ b/ngiflib.c
@@ -130,8 +130,8 @@ static void WritePixel(struct ngiflib_img * i, struct ngiflib_decode_context * c
 			*context->frbuff_p.p8 = v;
 #ifndef NGIFLIB_INDEXED_ONLY
 		} else
-			*context->frbuff_p.p32 =
-			   GifIndexToTrueColor(i->palette, v);
+			*context->frbuff_p.p32 = v < i->ncolors ?
+			   GifIndexToTrueColor(i->palette, v) : 0;
 #endif /* NGIFLIB_INDEXED_ONLY */
 	}
 	if(--(context->Xtogo) <= 0) {
@@ -222,8 +222,9 @@ static void WritePixels(struct ngiflib_img * i, struct ngiflib_decode_context *
 			} else {
 				int j;
 				for(j = (int)tocopy; j > 0; j--) {
-					*(context->frbuff_p.p32++) =
-					   GifIndexToTrueColor(i->palette, *pixels++);
+					u8 v = *pixels++;
+					*(context->frbuff_p.p32++) = v < i->ncolors ?
+					   GifIndexToTrueColor(i->palette, v) : 0;
 				}
 			}
 #endif /* NGIFLIB_INDEXED_ONLY */
@@ -241,7 +242,7 @@ static void WritePixels(struct ngiflib_img * i, struct ngiflib_decode_context *
 			} else {
 				for(j = (int)tocopy; j > 0; j--) {
 					if(*pixels != i->gce.transparent_color) {
-						*context->frbuff_p.p32 = GifIndexToTrueColor(i->palette, *pixels);
+						*context->frbuff_p.p32 = *pixels < i->ncolors ? GifIndexToTrueColor(i->palette, *pixels) : 0;
 					}
 					pixels++;
 					context->frbuff_p.p32++;
@@ -386,7 +387,7 @@ static void FillGifBackGround(struct ngiflib_gif * g) {
 #ifndef NGIFLIB_INDEXED_ONLY
 	} else {
 		u32 * p = g->frbuff.p32;
-		bg_truecolor = GifIndexToTrueColor(g->palette, g->backgroundindex);
+		bg_truecolor = g->backgroundindex < g->ncolors ? GifIndexToTrueColor(g->palette, g->backgroundindex) : 0;
 		while(n-->0) *p++ = bg_truecolor;
 	}
 #endif /* NGIFLIB_INDEXED_ONLY */
@@ -489,6 +490,7 @@ static int DecodeGifImg(struct ngiflib_img * i) {
 		if(i->parent->palette_cb) i->parent->palette_cb(i->parent, i->palette, localpalsize);
 #endif /* NGIFLIB_ENABLE_CALLBACKS */
 	} else {
+		/* use global palette */
 		i->palette = i->parent->palette;
 		i->localpalbits = i->parent->imgbits;
 	}
",1.0,,0.0,lime
CVE-2019-16346,CVE-2019-16346/37d939a6f511d16d4c95678025c235fe62e6417a,https://github.com/miniupnp/ngiflib/commit/37d939a6f511d16d4c95678025c235fe62e6417a,"<s>ngiflib 0.4 has a heap-based buffer overflow in WritePixel() in ngiflib.c when called from DecodeGifImg, because deinterlacing for small pictures is mishandled.</s>","<s>fix deinterlacing for small pictures
fixes #12
</s>"," diff --git a/ngiflib.c b/ngiflib.c
index 05321f1..1d29313 100644
--- a/ngiflib.c
+++ b/ngiflib.c
@@ -6,7 +6,7 @@
 
 /* decodeur GIF en C portable (pas de pb big/little endian)
  * Thomas BERNARD. janvier 2004.
- * (c) 2004-2017 Thomas Bernard. All rights reserved
+ * (c) 2004-2019 Thomas Bernard. All rights reserved
  */
 
 /* Fonction de debug */
@@ -135,29 +135,31 @@ static void WritePixel(struct ngiflib_img * i, struct ngiflib_decode_context * c
 			break;
 		case 1:	/* 1st pass : every eighth row starting from 0 */
 			context->curY += 8;
-			if(context->curY >= p->height) {
-				context->pass++;
-				context->curY = i->posY + 4;
-			}
 			break;
 		case 2:	/* 2nd pass : every eighth row starting from 4 */
 			context->curY += 8;
-			if(context->curY >= p->height) {
-				context->pass++;
-				context->curY = i->posY + 2;
-			}
 			break;
 		case 3:	/* 3rd pass : every fourth row starting from 2 */
 			context->curY += 4;
-			if(context->curY >= p->height) {
-				context->pass++;
-				context->curY = i->posY + 1;
-			}
 			break;
 		case 4:	/* 4th pass : every odd row */
 			context->curY += 2;
 			break;
 		}
+		while(context->pass > 0 && context->pass < 4 &&
+		      context->curY >= p->height) {
+			switch(++context->pass) {
+			case 2:	/* 2nd pass : every eighth row starting from 4 */
+				context->curY = i->posY + 4;
+				break;
+			case 3:	/* 3rd pass : every fourth row starting from 2 */
+				context->curY = i->posY + 2;
+				break;
+			case 4:	/* 4th pass : every odd row */
+				context->curY = i->posY + 1;
+				break;
+			}
+		}
 #ifndef NGIFLIB_INDEXED_ONLY
 		if(p->mode & NGIFLIB_MODE_INDEXED) {
 #endif /* NGIFLIB_INDEXED_ONLY */
@@ -249,29 +251,31 @@ static void WritePixels(struct ngiflib_img * i, struct ngiflib_decode_context *
 				break;
 			case 1:	/* 1st pass : every eighth row starting from 0 */
 				context->curY += 8;
-				if(context->curY >= p->height) {
-					context->pass++;
-					context->curY = i->posY + 4;
-				}
 				break;
 			case 2:	/* 2nd pass : every eighth row starting from 4 */
 				context->curY += 8;
-				if(context->curY >= p->height) {
-					context->pass++;
-					context->curY = i->posY + 2;
-				}
 				break;
 			case 3:	/* 3rd pass : every fourth row starting from 2 */
 				context->curY += 4;
-				if(context->curY >= p->height) {
-					context->pass++;
-					context->curY = i->posY + 1;
-				}
 				break;
 			case 4:	/* 4th pass : every odd row */
 				context->curY += 2;
 				break;
 			}
+			while(context->pass > 0 && context->pass < 4 &&
+			      context->curY >= p->height) {
+				switch(++context->pass) {
+				case 2:	/* 2nd pass : every eighth row starting from 4 */
+					context->curY = i->posY + 4;
+					break;
+				case 3:	/* 3rd pass : every fourth row starting from 2 */
+					context->curY = i->posY + 2;
+					break;
+				case 4:	/* 4th pass : every odd row */
+					context->curY = i->posY + 1;
+					break;
+				}
+			}
 #ifndef NGIFLIB_INDEXED_ONLY
 			if(p->mode & NGIFLIB_MODE_INDEXED) {
 #endif /* NGIFLIB_INDEXED_ONLY */
",0.0,,1.0,lime
,,,,,,,,,
CVE-2018-15801,CVE-2018-15801/c70b65c5df0e170a2d34d812b83db0b7bc71ea25,https://github.com/spring-projects/spring-security/commit/c70b65c5df0e170a2d34d812b83db0b7bc71ea25,"<s>Spring Security versions 5.1.x prior to 5.1.2 contain an authorization bypass vulnerability during JWT issuer validation. In order to be impacted, the same private key for an honest issuer and a malicious user must be used when signing JWTs. In that case, a malicious user could fashion signed JWTs with the malicious issuer URL that may be granted for the honest issuer.</s>","<s>Favor URL.toExternalForm
Converts URLs to Strings before comparing them. Uses toString(),
which delegates to toExternalForm().
Fixes: gh-6073
</s>"," diff --git a/oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/JwtIssuerValidatorTests.java b/oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/JwtIssuerValidatorTests.java
index 7a01da149e..5839f74d3b 100644
--- a/oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/JwtIssuerValidatorTests.java
+++ b/oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/JwtIssuerValidatorTests.java
@@ -23,9 +23,6 @@ import org.junit.Test;
 
 import org.springframework.security.oauth2.core.OAuth2TokenValidatorResult;
 import org.springframework.security.oauth2.jose.jws.JwsAlgorithms;
-import org.springframework.security.oauth2.jwt.Jwt;
-import org.springframework.security.oauth2.jwt.JwtClaimNames;
-import org.springframework.security.oauth2.jwt.JwtIssuerValidator;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatCode;
@@ -72,6 +69,19 @@ public class JwtIssuerValidatorTests {
 		assertThat(result.getErrors()).isNotEmpty();
 	}
 
+	@Test
+	public void validateWhenJwtHasNoIssuerThenReturnsError() {
+		Jwt jwt = new Jwt(
+				MOCK_TOKEN,
+				MOCK_ISSUED_AT,
+				MOCK_EXPIRES_AT,
+				MOCK_HEADERS,
+				Collections.singletonMap(JwtClaimNames.AUD, ""https://aud""));
+
+		OAuth2TokenValidatorResult result = this.validator.validate(jwt);
+		assertThat(result.getErrors()).isNotEmpty();
+	}
+
 	@Test
 	public void validateWhenJwtIsNullThenThrowsIllegalArgumentException() {
 		assertThatCode(() -> this.validator.validate(null))
",1.0,,1.0,tfidf
CVE-2018-15801,CVE-2018-15801/63f2b6094f59cc9ded6a83ac3def4a1726890a8b,https://github.com/spring-projects/spring-security/commit/63f2b6094f59cc9ded6a83ac3def4a1726890a8b,"<s>Spring Security versions 5.1.x prior to 5.1.2 contain an authorization bypass vulnerability during JWT issuer validation. In order to be impacted, the same private key for an honest issuer and a malicious user must be used when signing JWTs. In that case, a malicious user could fashion signed JWTs with the malicious issuer URL that may be granted for the honest issuer.</s>","<s>The ""Bearer"" keyword should be case-insensitive
The Authorization header was matched for OAuth2
against the ""Bearer"" keyword in a case sensitive
fashion.
According to RFC 2617, it should be case insensitive
and some oauth clients (including some earlier
versions of spring-security) expect it so.
</s>"," diff --git a/oauth2/oauth2-resource-server/src/test/java/org/springframework/security/oauth2/server/resource/web/DefaultBearerTokenResolverTests.java b/oauth2/oauth2-resource-server/src/test/java/org/springframework/security/oauth2/server/resource/web/DefaultBearerTokenResolverTests.java
index 32518f4d1a..4286b63671 100644
--- a/oauth2/oauth2-resource-server/src/test/java/org/springframework/security/oauth2/server/resource/web/DefaultBearerTokenResolverTests.java
+++ b/oauth2/oauth2-resource-server/src/test/java/org/springframework/security/oauth2/server/resource/web/DefaultBearerTokenResolverTests.java
@@ -51,6 +51,14 @@ public class DefaultBearerTokenResolverTests {
 		assertThat(this.resolver.resolve(request)).isEqualTo(TEST_TOKEN);
 	}
 
+	@Test
+	public void resolveWhenLowercaseHeaderIsPresentThenTokenIsResolved() {
+		MockHttpServletRequest request = new MockHttpServletRequest();
+		request.addHeader(""authorization"", ""bearer "" + TEST_TOKEN);
+
+		assertThat(this.resolver.resolve(request)).isEqualTo(TEST_TOKEN);
+	}
+
 	@Test
 	public void resolveWhenNoHeaderIsPresentThenTokenIsNotResolved() {
 		MockHttpServletRequest request = new MockHttpServletRequest();
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2017-6439,CVE-2017-6439/32ee5213fe64f1e10ec76c1ee861ee6f233120dd,https://github.com/libimobiledevice/libplist/commit/32ee5213fe64f1e10ec76c1ee861ee6f233120dd,<s>Heap-based buffer overflow in the parse_string_node function in bplist.c in libimobiledevice libplist 1.12 allows local users to cause a denial of service (out-of-bounds write) via a crafted plist file.</s>,"<s>bplist: Fix data range check for string/data/dict/array nodes
Passing a size of 0xFFFFFFFFFFFFFFFF to parse_string_node() might result
in a memcpy with a size of -1, leading to undefined behavior.
This commit makes sure that the actual node data (which depends on the size)
is in the range start_of_object..start_of_object+size.
Credit to OSS-Fuzz
</s>"," diff --git a/src/bplist.c b/src/bplist.c
index 0fd149e..7d21b27 100644
--- a/src/bplist.c
+++ b/src/bplist.c
@@ -654,14 +654,14 @@ static plist_t parse_bin_node(struct bplist_data *bplist, const char** object)
         return parse_date_node(object, size);
 
     case BPLIST_DATA:
-        if (*object + size > bplist->offset_table) {
+        if (*object + size < *object || *object + size > bplist->offset_table) {
             PLIST_BIN_ERR(""%s: BPLIST_DATA data bytes point outside of valid range\n"", __func__);
             return NULL;
         }
         return parse_data_node(object, size);
 
     case BPLIST_STRING:
-        if (*object + size > bplist->offset_table) {
+        if (*object + size < *object || *object + size > bplist->offset_table) {
             PLIST_BIN_ERR(""%s: BPLIST_STRING data bytes point outside of valid range\n"", __func__);
             return NULL;
         }
@@ -672,7 +672,7 @@ static plist_t parse_bin_node(struct bplist_data *bplist, const char** object)
             PLIST_BIN_ERR(""%s: Integer overflow when calculating BPLIST_UNICODE data size.\n"", __func__);
             return NULL;
         }
-        if (*object + size*2 > bplist->offset_table) {
+        if (*object + size*2 < *object || *object + size*2 > bplist->offset_table) {
             PLIST_BIN_ERR(""%s: BPLIST_UNICODE data bytes point outside of valid range\n"", __func__);
             return NULL;
         }
@@ -680,7 +680,7 @@ static plist_t parse_bin_node(struct bplist_data *bplist, const char** object)
 
     case BPLIST_SET:
     case BPLIST_ARRAY:
-        if (*object + size > bplist->offset_table) {
+        if (*object + size < *object || *object + size > bplist->offset_table) {
             PLIST_BIN_ERR(""%s: BPLIST_ARRAY data bytes point outside of valid range\n"", __func__);
             return NULL;
         }
@@ -694,8 +694,8 @@ static plist_t parse_bin_node(struct bplist_data *bplist, const char** object)
         return parse_uid_node(object, size);
 
     case BPLIST_DICT:
-        if (*object + size > bplist->offset_table) {
-            PLIST_BIN_ERR(""%s: BPLIST_REAL data bytes point outside of valid range\n"", __func__);
+        if (*object + size < *object || *object + size > bplist->offset_table) {
+            PLIST_BIN_ERR(""%s: BPLIST_DICT data bytes point outside of valid range\n"", __func__);
             return NULL;
         }
         return parse_dict_node(bplist, object, size);
",1.0,,1.0,lime
CVE-2017-6439,CVE-2017-6439/fbd8494d5e4e46bf2e90cb6116903e404374fb56,https://github.com/libimobiledevice/libplist/commit/fbd8494d5e4e46bf2e90cb6116903e404374fb56,<s>Heap-based buffer overflow in the parse_string_node function in bplist.c in libimobiledevice libplist 1.12 allows local users to cause a denial of service (out-of-bounds write) via a crafted plist file.</s>,"<s>bplist: Make sure to bail out if malloc() fails in parse_string_node()
Credit to Wang Junjie <zhunkibatu@gmail.com> (#93)
</s>"," diff --git a/src/bplist.c b/src/bplist.c
index 81bd716..20e5090 100644
--- a/src/bplist.c
+++ b/src/bplist.c
@@ -289,6 +289,11 @@ static plist_t parse_string_node(const char **bnode, uint64_t size)
 
     data->type = PLIST_STRING;
     data->strval = (char *) malloc(sizeof(char) * (size + 1));
+    if (!data->strval) {
+        plist_free_data(data);
+        PLIST_BIN_ERR(""%s: Could not allocate %"" PRIu64 "" bytes\n"", __func__, sizeof(char) * (size + 1));
+        return NULL;
+    }
     memcpy(data->strval, *bnode, size);
     data->strval[size] = '\0';
     data->length = strlen(data->strval);
",0.0,,0.0,lime
,,,,,,,,,
CVE-2017-15209,CVE-2017-15209/066c9bf6e14cf2e6ec57d4bc7354aee38a08a944,https://github.com/kanboard/kanboard/commit/066c9bf6e14cf2e6ec57d4bc7354aee38a08a944,"<s>In Kanboard before 1.0.47, by altering form data, an authenticated user can remove attachments from a private project of another user.</s>","<s>Add CVE ID to ChangeLog
</s>"," diff --git a/ChangeLog b/ChangeLog
index c889556b1..485814e5f 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -4,7 +4,8 @@ Version 1.0.46 (August 13, 2017)
 Security Issues:
 
 * Fix two privilege escalation issues: a standard user could reset the password 
-of another user by altering form data.
+of another user (including admin) by altering form data.
+(CVE-2017-12850 and CVE-2017-12851, discovered by ""chbi"").
 
 Improvements:
 
",0.0,,0.0,lime
CVE-2017-15209,CVE-2017-15209/7100f6de8a1f566e260b3e65312767e4cde112b1,https://github.com/kanboard/kanboard/commit/7100f6de8a1f566e260b3e65312767e4cde112b1,"<s>In Kanboard before 1.0.47, by altering form data, an authenticated user can remove attachments from a private project of another user.</s>","<s>Make sure people do not access to files of other projects
</s>"," diff --git a/app/Controller/BaseController.php b/app/Controller/BaseController.php
index 41fcef1c3..43ecfaab5 100644
--- a/app/Controller/BaseController.php
+++ b/app/Controller/BaseController.php
@@ -74,13 +74,14 @@ abstract class BaseController extends Base
     {
         $task_id = $this->request->getIntegerParam('task_id');
         $file_id = $this->request->getIntegerParam('file_id');
+        $project_id = $this->request->getIntegerParam('project_id');
         $model = 'projectFileModel';
 
         if ($task_id > 0) {
             $model = 'taskFileModel';
-            $project_id = $this->taskFinderModel->getProjectId($task_id);
+            $task_project_id = $this->taskFinderModel->getProjectId($task_id);
 
-            if ($project_id !== $this->request->getIntegerParam('project_id')) {
+            if ($project_id != $task_project_id) {
                 throw new AccessForbiddenException();
             }
         }
@@ -91,6 +92,12 @@ abstract class BaseController extends Base
             throw new PageNotFoundException();
         }
 
+        if (isset($file['task_id']) && $file['task_id'] != $task_id) {
+            throw new AccessForbiddenException();
+        } else if (isset($file['project_id']) && $file['project_id'] != $project_id) {
+            throw new AccessForbiddenException();
+        }
+
         $file['model'] = $model;
         return $file;
     }
",1.0,,1.0,lime
,,,,,,,,,
CVE-2018-16323,CVE-2018-16323/61ed761414db6bdb56e3633b2bf3c82919f710ba,https://github.com/ImageMagick/ImageMagick/commit/61ed761414db6bdb56e3633b2bf3c82919f710ba,"<s>ReadXBMImage in coders/xbm.c in ImageMagick before 7.0.8-9 leaves data uninitialized when processing an XBM file that has a negative pixel value. If the affected code is used as a library loaded into a process that includes sensitive information, that information sometimes can be leaked via the image data.</s>","<s>...
</s>"," diff --git a/coders/xbm.c b/coders/xbm.c
index bae47c8e5..0cc82339f 100644
--- a/coders/xbm.c
+++ b/coders/xbm.c
@@ -180,6 +180,10 @@ static Image *ReadXBMImage(const ImageInfo *image_info,ExceptionInfo *exception)
   int
     c;
 
+  long
+    height,
+    width;
+
   MagickBooleanType
     status;
 
@@ -206,11 +210,9 @@ static Image *ReadXBMImage(const ImageInfo *image_info,ExceptionInfo *exception)
     bit,
     byte,
     bytes_per_line,
-    height,
     length,
     padding,
-    version,
-    width;
+    version;
 
   /*
     Open image file.
@@ -236,17 +238,19 @@ static Image *ReadXBMImage(const ImageInfo *image_info,ExceptionInfo *exception)
   height=0;
   *name='\0';
   while (ReadBlobString(image,buffer) != (char *) NULL)
-    if (sscanf(buffer,""#define %1024s %u"",name,&width) == 2)
+    if (sscanf(buffer,""#define %1024s %ld"",name,&width) == 2)
       if ((strlen(name) >= 6) &&
           (LocaleCompare(name+strlen(name)-6,""_width"") == 0))
         break;
   while (ReadBlobString(image,buffer) != (char *) NULL)
-    if (sscanf(buffer,""#define %1024s %u"",name,&height) == 2)
+    if (sscanf(buffer,""#define %1024s %ld"",name,&height) == 2)
       if ((strlen(name) >= 7) &&
           (LocaleCompare(name+strlen(name)-7,""_height"") == 0))
         break;
-  image->columns=width;
-  image->rows=height;
+  if ((width <= 0) || (height <= 0) || (EOFBlob(image) != MagickFalse))
+    ThrowReaderException(CorruptImageError,""ImproperImageHeader"");
+  image->columns=(size_t) width;
+  image->rows=(size_t) height;
   image->depth=8;
   image->storage_class=PseudoClass;
   image->colors=2;
@@ -274,9 +278,6 @@ static Image *ReadXBMImage(const ImageInfo *image_info,ExceptionInfo *exception)
     if (LocaleCompare(""bits[]"",(char *) p) == 0)
       break;
   }
-  if ((image->columns == 0) || (image->rows == 0) ||
-      (EOFBlob(image) != MagickFalse))
-    ThrowReaderException(CorruptImageError,""ImproperImageHeader"");
   /*
     Initialize image structure.
   */
",0.0,,0.0,tfidf
CVE-2018-16323,CVE-2018-16323/216d117f05bff87b9dc4db55a1b1fadb38bcb786,https://github.com/ImageMagick/ImageMagick/commit/216d117f05bff87b9dc4db55a1b1fadb38bcb786,"<s>ReadXBMImage in coders/xbm.c in ImageMagick before 7.0.8-9 leaves data uninitialized when processing an XBM file that has a negative pixel value. If the affected code is used as a library loaded into a process that includes sensitive information, that information sometimes can be leaked via the image data.</s>","<s>XBM coder leaves the hex image data uninitialized if hex value of the pixel is negative
</s>"," diff --git a/coders/xbm.c b/coders/xbm.c
index 34344b735..bae47c8e5 100644
--- a/coders/xbm.c
+++ b/coders/xbm.c
@@ -351,7 +351,10 @@ static Image *ReadXBMImage(const ImageInfo *image_info,ExceptionInfo *exception)
     {
       c=XBMInteger(image,hex_digits);
       if (c < 0)
-        break;
+        {
+          data=(unsigned char *) RelinquishMagickMemory(data);
+          ThrowReaderException(CorruptImageError,""ImproperImageHeader"");
+        }
       *p++=(unsigned char) c;
       if ((padding == 0) || (((i+2) % bytes_per_line) != 0))
         *p++=(unsigned char) (c >> 8);
@@ -361,7 +364,10 @@ static Image *ReadXBMImage(const ImageInfo *image_info,ExceptionInfo *exception)
     {
       c=XBMInteger(image,hex_digits);
       if (c < 0)
-        break;
+        {
+          data=(unsigned char *) RelinquishMagickMemory(data);
+          ThrowReaderException(CorruptImageError,""ImproperImageHeader"");
+        }
       *p++=(unsigned char) c;
     }
   if (EOFBlob(image) != MagickFalse)
",1.0,,1.0,tfidf
,,,,,,,,,
CVE-2018-20975,CVE-2018-20975/e89a0f938c0910370aaac5a7e4c0da2ab7e432ea,https://github.com/fatfreecrm/fat_free_crm/commit/e89a0f938c0910370aaac5a7e4c0da2ab7e432ea,<s>Fat Free CRM before 0.18.1 has XSS in the tags_helper in app/helpers/tags_helper.rb.</s>,"<s>Updated changelog.
</s>"," diff --git a/CHANGELOG.md b/CHANGELOG.md
index 01d1c324..a8ed5449 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -9,6 +9,9 @@ Unreleased (0.19.0)
 
 ### Important changes
 
+#### Fixed XSS flaw in tags_helper
+Credit Antonin Steinhauser (asteinhauser) for discovery and responsible disclosure.
+
 #### Devise replaces Authlogic for user authentication
 Ticket #742 replaces Authlogic with the latest Devise (4.3.0) which has wider adoption.
 This change requires a database migration on the User model. Please note:
",0.0,,0.0,lime
CVE-2018-20975,CVE-2018-20975/6d60bc8ed010c4eda05d6645c64849f415f68d65,https://github.com/fatfreecrm/fat_free_crm/commit/6d60bc8ed010c4eda05d6645c64849f415f68d65,<s>Fat Free CRM before 0.18.1 has XSS in the tags_helper in app/helpers/tags_helper.rb.</s>,"<s>Context-sensitive XSS bugfix.
</s>"," diff --git a/app/helpers/tags_helper.rb b/app/helpers/tags_helper.rb
index 266060c6..39797768 100755
--- a/app/helpers/tags_helper.rb
+++ b/app/helpers/tags_helper.rb
@@ -17,7 +17,7 @@ module TagsHelper
       elsif !query.include?(hashtag)
         query += "" #{hashtag}""
       end
-      out << link_to_function(tag, ""crm.search_tagged('#{query}', '#{model.class.to_s.tableize}')"", title: tag)
+      out << link_to_function(tag, ""crm.search_tagged('#{escape_javascript(query)}', '#{model.class.to_s.tableize}')"", title: tag)
     end
   end
 
",1.0,,1.0,lime
,,,,,,,,,
CVE-2016-6837,CVE-2016-6837/7086c2d8b4b20ac14013b36761ac04f0abf21a4e,https://github.com/mantisbt/mantisbt/commit/7086c2d8b4b20ac14013b36761ac04f0abf21a4e,"<s>Cross-site scripting (XSS) vulnerability in MantisBT Filter API in MantisBT versions before 1.2.19, and versions 2.0.0-beta1, 1.3.0-beta1 allows remote attackers to inject arbitrary web script or HTML via the 'view_type' parameter.</s>","<s>Fix XSS in view_all_bug_page.php
The value of the view_type parameter on the view_all_bug_page.php page
was not encoded before being displayed.
This vulnerability was discovered by Will Dollman of Netcraft Ltd.
Initial patch modified to use strict comparison per Will's suggestion.
Fixes #21611
</s>"," diff --git a/core/filter_api.php b/core/filter_api.php
index b1e2d8961..72ac90f1c 100644
--- a/core/filter_api.php
+++ b/core/filter_api.php
@@ -489,9 +489,15 @@ function filter_ensure_valid_filter( array $p_filter_arr ) {
 		# if the version is old, update it
 		$p_filter_arr['_version'] = FILTER_VERSION;
 	}
+
+	# Filter view type - ensure it's either 'simple' or 'advanced' (prevent XSS)
 	if( !isset( $p_filter_arr['_view_type'] ) ) {
 		$p_filter_arr['_view_type'] = gpc_get_string( 'view_type', 'simple' );
 	}
+	if( $p_filter_arr['_view_type'] !== 'advanced' ) {
+		$p_filter_arr['_view_type'] = 'simple';
+	}
+
 	if( !isset( $p_filter_arr[FILTER_PROPERTY_ISSUES_PER_PAGE] ) ) {
 		$p_filter_arr[FILTER_PROPERTY_ISSUES_PER_PAGE] = gpc_get_int( FILTER_PROPERTY_ISSUES_PER_PAGE, config_get( 'default_limit_view' ) );
 	}
",1.0,,1.0,tfidf
CVE-2016-6837,CVE-2016-6837/23694bc2384a91a9323132f339ed78030fa1bb41,https://github.com/mantisbt/mantisbt/commit/23694bc2384a91a9323132f339ed78030fa1bb41,"<s>Cross-site scripting (XSS) vulnerability in MantisBT Filter API in MantisBT versions before 1.2.19, and versions 2.0.0-beta1, 1.3.0-beta1 allows remote attackers to inject arbitrary web script or HTML via the 'view_type' parameter.</s>","<s>Update version to 2.0.0-beta.2
</s>"," diff --git a/core/constant_inc.php b/core/constant_inc.php
index 5b8a729e2..5c56118fe 100644
--- a/core/constant_inc.php
+++ b/core/constant_inc.php
@@ -21,7 +21,7 @@
 /**
  * Mantis Version
  */
-define( 'MANTIS_VERSION', '2.0.0-beta.1' );
+define( 'MANTIS_VERSION', '2.0.0-beta.2' );
 define( 'FILTER_VERSION', 'v9' );
 
 # --- constants -------------------
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2018-16733,CVE-2018-16733/106d196ec4a6451efedc60ab15957f231fa85639,https://github.com/ethereum/go-ethereum/commit/106d196ec4a6451efedc60ab15957f231fa85639,"<s>In Go Ethereum (aka geth) before 1.8.14, TraceChain in eth/api_tracer.go does not verify that the end block is after the start block.</s>","<s>eth: ensure from<to when tracing chain (credits Chen Nan via bugbounty)
</s>"," diff --git a/eth/api_tracer.go b/eth/api_tracer.go
index 722e2a6e3..704a6cdba 100644
--- a/eth/api_tracer.go
+++ b/eth/api_tracer.go
@@ -119,6 +119,9 @@ func (api *PrivateDebugAPI) TraceChain(ctx context.Context, start, end rpc.Block
 	if to == nil {
 		return nil, fmt.Errorf(""end block #%d not found"", end)
 	}
+	if from.Number().Cmp(to.Number()) >= 0 {
+		return nil, fmt.Errorf(""end block (#%d) needs to come after start block (#%d)"", end, start)
+	}
 	return api.traceChain(ctx, from, to, config)
 }
 
",1.0,,1.0,tfidf
CVE-2018-16733,CVE-2018-16733/11bbc660823246b9fc25e4b994121e30a9f17306,https://github.com/ethereum/go-ethereum/commit/11bbc660823246b9fc25e4b994121e30a9f17306,"<s>In Go Ethereum (aka geth) before 1.8.14, TraceChain in eth/api_tracer.go does not verify that the end block is after the start block.</s>","<s>eth, trie: fix tracer GC which accidentally pruned the metaroot
</s>"," diff --git a/eth/api_tracer.go b/eth/api_tracer.go
index 623e5ed1b..722e2a6e3 100644
--- a/eth/api_tracer.go
+++ b/eth/api_tracer.go
@@ -297,7 +297,9 @@ func (api *PrivateDebugAPI) traceChain(ctx context.Context, start, end *types.Bl
 				database.TrieDB().Reference(root, common.Hash{})
 			}
 			// Dereference all past tries we ourselves are done working with
-			database.TrieDB().Dereference(proot)
+			if proot != (common.Hash{}) {
+				database.TrieDB().Dereference(proot)
+			}
 			proot = root
 
 			// TODO(karalabe): Do we need the preimages? Won't they accumulate too much?
@@ -526,7 +528,9 @@ func (api *PrivateDebugAPI) computeStateDB(block *types.Block, reexec uint64) (*
 			return nil, err
 		}
 		database.TrieDB().Reference(root, common.Hash{})
-		database.TrieDB().Dereference(proot)
+		if proot != (common.Hash{}) {
+			database.TrieDB().Dereference(proot)
+		}
 		proot = root
 	}
 	nodes, imgs := database.TrieDB().Size()
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2019-15026,CVE-2019-15026/554b56687a19300a75ec24184746b5512580c819,https://github.com/memcached/memcached/commit/554b56687a19300a75ec24184746b5512580c819,"<s>memcached 1.5.16, when UNIX sockets are used, has a stack-based buffer over-read in conn_to_str in memcached.c.</s>","<s>fix strncpy call to avoid ASAN violation
Ensure we're only reading to the size of the smallest buffer, since
they're both on the stack and could potentially overlap. Overlapping is
defined as ... undefined behavior. I've looked through all available
implementations of strncpy and they still only copy from the first \0
found.
We'll also never read past the end of sun_path since we _supply_
sun_path with a proper null terminator.
</s>"," diff --git a/memcached.c b/memcached.c
index 2291563..788647f 100644
--- a/memcached.c
+++ b/memcached.c
@@ -3463,6 +3463,7 @@ static inline void get_conn_text(const conn *c, const int af,
     addr_text[0] = '\0';
     const char *protoname = ""?"";
     unsigned short port = 0;
+    size_t pathlen = 0;
 
     switch (af) {
         case AF_INET:
@@ -3488,10 +3489,27 @@ static inline void get_conn_text(const conn *c, const int af,
             break;
 
         case AF_UNIX:
+            // this strncpy call originally could piss off an address
+            // sanitizer; we supplied the size of the dest buf as a limiter,
+            // but optimized versions of strncpy could read past the end of
+            // *src while looking for a null terminator. Since buf and
+            // sun_path here are both on the stack they could even overlap,
+            // which is ""undefined"". In all OSS versions of strncpy I could
+            // find this has no effect; it'll still only copy until the first null
+            // terminator is found. Thus it's possible to get the OS to
+            // examine past the end of sun_path but it's unclear to me if this
+            // can cause any actual problem.
+            //
+            // We need a safe_strncpy util function but I'll punt on figuring
+            // that out for now.
+            pathlen = sizeof(((struct sockaddr_un *)sock_addr)->sun_path);
+            if (MAXPATHLEN <= pathlen) {
+                pathlen = MAXPATHLEN - 1;
+            }
             strncpy(addr_text,
                     ((struct sockaddr_un *)sock_addr)->sun_path,
-                    sizeof(addr_text) - 1);
-            addr_text[sizeof(addr_text)-1] = '\0';
+                    pathlen);
+            addr_text[pathlen] = '\0';
             protoname = ""unix"";
             break;
     }
",1.0,,1.0,lime
CVE-2019-15026,CVE-2019-15026/f39aa3992a3b72f50ede4467979e64c555b9914c,https://github.com/memcached/memcached/commit/f39aa3992a3b72f50ede4467979e64c555b9914c,"<s>memcached 1.5.16, when UNIX sockets are used, has a stack-based buffer over-read in conn_to_str in memcached.c.</s>","<s>Detect closed socket
Closed sockets return an empty buffer and 0 length.
</s>"," diff --git a/t/misbehave.t b/t/misbehave.t
index 1312a27..7438e8e 100755
--- a/t/misbehave.t
+++ b/t/misbehave.t
@@ -23,6 +23,7 @@ sleep(1);
 # check if the socket is dead now
 my $buff;
 my $ret = recv($sock, $buff, 1, MSG_PEEK | MSG_DONTWAIT);
-is($ret, undef, ""did not allow misbehaving"");
+# ret = 0 means read 0 bytes, which means a closed socket
+ok($ret == 0, ""did not allow misbehaving"");
 
 $server->DESTROY();
",0.0,,0.0,lime
,,,,,,,,,
CVE-2022-34299,CVE-2022-34299/7ef09e1fc9ba07653dd078edb2408631c7969162,https://github.com/davea42/libdwarf-code/commit/7ef09e1fc9ba07653dd078edb2408631c7969162,<s>There is a heap-based buffer over-read in libdwarf 0.4.0. This issue is related to dwarf_global_formref_b.</s>,"<s>Fixes old bug(which could result in Denial of Service)
due to a missing check before reading the 8 bytes of a DW_FORM_ref_sig8.
DW202206-001
	modified:   src/lib/libdwarf/dwarf_form.c
</s>"," diff --git a/src/lib/libdwarf/dwarf_form.c b/src/lib/libdwarf/dwarf_form.c
index 8e8e2309..fe4b013e 100644
--- a/src/lib/libdwarf/dwarf_form.c
+++ b/src/lib/libdwarf/dwarf_form.c
@@ -605,7 +605,6 @@ find_sig8_target_as_global_offset(Dwarf_Attribute attr,
     Dwarf_Bool targ_is_info = 0;
     Dwarf_Off  localoff = 0;
     int res = 0;
-
     targ_is_info = attr->ar_cu_context->cc_is_info;
     memcpy(sig8,attr->ar_debug_ptr,sizeof(*sig8));
     res = dwarf_find_die_given_sig8(attr->ar_dbg,
@@ -837,6 +836,13 @@ dwarf_global_formref_b(Dwarf_Attribute attr,
         Dwarf_Bool t_is_info = TRUE;
         Dwarf_Unsigned t_offset = 0;
 
+        if ((attr->ar_debug_ptr + sizeof(Dwarf_Sig8)) > section_end) {
+            _dwarf_error_string(dbg, error,
+                DW_DLE_REF_SIG8_NOT_HANDLED,
+                ""DW_DLE_REF_SIG8_NOT_HANDLED: ""
+                "" Dwarf_Sig8 content runs off the end of its section"");
+            return DW_DLV_ERROR;
+        }
         memcpy(&sig8,attr->ar_debug_ptr,sizeof(Dwarf_Sig8));
         res = find_sig8_target_as_global_offset(attr,
             &sig8,&t_is_info,&t_offset,error);
",1.0,,1.0,tfidf
CVE-2022-34299,CVE-2022-34299/7538384df89f38bb25df14cb5e3c5a1c3b96ac84,https://github.com/davea42/libdwarf-code/commit/7538384df89f38bb25df14cb5e3c5a1c3b96ac84,<s>There is a heap-based buffer over-read in libdwarf 0.4.0. This issue is related to dwarf_global_formref_b.</s>,"<s>Corrected the name to follow meson requirements.
	modified:   src/lib/libdwarf/meson.build
Removed an unnecessary andin appropriate
join_paths() in the tests (added when there
were other issues causing confusion).
	modified:   test/meson.build
</s>"," diff --git a/test/meson.build b/test/meson.build
index 5d013497..b8fd9f8f 100644
--- a/test/meson.build
+++ b/test/meson.build
@@ -79,11 +79,12 @@ incdir = include_directories(
   '../src/bin/dwarfdump'
 )
 
+#  pathname = join_paths('test',test_name)
+#    executable(pathname, test_src,
 foreach test_src : tests
   test_name = test_src[0].split('.')[0]
-  pathname = join_paths('test',test_name)
   test(test_name,
-    executable(pathname, test_src,
+    executable(test_name, test_src,
       c_args : [ dev_cflags, libdwarf_args, '-DTESTING', '-DLIBDWARF_BUILD' ],
       include_directories : [ config_dir, incdir ],
       install : false
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2021-26926,CVE-2021-26926/41f214b121b837fa30d9ca5f2430212110f5cd9b,https://github.com/jasper-software/jasper/commit/41f214b121b837fa30d9ca5f2430212110f5cd9b,<s>A flaw was found in jasper before 2.0.25. An out of bounds read issue was found in jp2_decode function whic may lead to disclosure of information or program crash.</s>,"<s>Fixes #264.
The JP2 decoder was allowing the decoding of a code stream to be
attempted when the stream has inconsistent values for the number of
components and/or the component types.  For such invalid streams,
only a warning would be issued and decoding would proceed.  This is
dangerous, however, as it can lead to many unexpected paths through
the code, which in some cases have been demonstrated to result in
security vulnerabilities.  This code change makes decoding of these
types invalid code streams a hard error.
</s>"," diff --git a/src/libjasper/jp2/jp2_dec.c b/src/libjasper/jp2/jp2_dec.c
index 60dee42..78d6cef 100644
--- a/src/libjasper/jp2/jp2_dec.c
+++ b/src/libjasper/jp2/jp2_dec.c
@@ -232,7 +232,8 @@ jas_image_t *jp2_decode(jas_stream_t *in, const char *optstr)
 	  the value specified in the code stream? */
 	if (dec->ihdr->data.ihdr.numcmpts != JAS_CAST(jas_uint,
 	  jas_image_numcmpts(dec->image))) {
-		jas_eprintf(""warning: number of components mismatch\n"");
+		jas_eprintf(""error: number of components mismatch (IHDR)\n"");
+		goto error;
 	}
 
 	/* At least one component must be present. */
@@ -255,7 +256,8 @@ jas_image_t *jp2_decode(jas_stream_t *in, const char *optstr)
 	  with the data in the code stream? */
 	if ((samedtype && dec->ihdr->data.ihdr.bpc != JP2_DTYPETOBPC(dtype)) ||
 	  (!samedtype && dec->ihdr->data.ihdr.bpc != JP2_IHDR_BPCNULL)) {
-		jas_eprintf(""warning: component data type mismatch (IHDR)\n"");
+		jas_eprintf(""error: component data type mismatch (IHDR)\n"");
+		goto error;
 	}
 
 	/* Is the compression type supported? */
@@ -267,9 +269,10 @@ jas_image_t *jp2_decode(jas_stream_t *in, const char *optstr)
 	if (dec->bpcc) {
 		/* Is the number of components indicated in the BPCC box
 		  consistent with the code stream data? */
-		if (dec->bpcc->data.bpcc.numcmpts != JAS_CAST(jas_uint, jas_image_numcmpts(
-		  dec->image))) {
-			jas_eprintf(""warning: number of components mismatch\n"");
+		if (dec->bpcc->data.bpcc.numcmpts !=
+		  JAS_CAST(jas_uint, jas_image_numcmpts(dec->image))) {
+			jas_eprintf(""error: number of components mismatch (BPCC)\n"");
+			goto error;
 		}
 		/* Is the component data type information indicated in the BPCC
 		  box consistent with the code stream data? */
@@ -278,7 +281,8 @@ jas_image_t *jp2_decode(jas_stream_t *in, const char *optstr)
 			  ++i) {
 				if (jas_image_cmptdtype(dec->image, i) !=
 				  JP2_BPCTODTYPE(dec->bpcc->data.bpcc.bpcs[i])) {
-					jas_eprintf(""warning: component data type mismatch (BPCC)\n"");
+					jas_eprintf(""error: component data type mismatch (BPCC)\n"");
+						goto error;
 				}
 			}
 		} else {
",1.0,,1.0,tfidf
CVE-2021-26926,CVE-2021-26926/49174ab592cdfa6f1a929a2ee3d4b4976f9459fd,https://github.com/jasper-software/jasper/commit/49174ab592cdfa6f1a929a2ee3d4b4976f9459fd,<s>A flaw was found in jasper before 2.0.25. An out of bounds read issue was found in jp2_decode function whic may lead to disclosure of information or program crash.</s>,"<s>Fixes #259
</s>"," diff --git a/src/libjasper/jp2/jp2_dec.c b/src/libjasper/jp2/jp2_dec.c
index 4acf004..60dee42 100644
--- a/src/libjasper/jp2/jp2_dec.c
+++ b/src/libjasper/jp2/jp2_dec.c
@@ -255,7 +255,7 @@ jas_image_t *jp2_decode(jas_stream_t *in, const char *optstr)
 	  with the data in the code stream? */
 	if ((samedtype && dec->ihdr->data.ihdr.bpc != JP2_DTYPETOBPC(dtype)) ||
 	  (!samedtype && dec->ihdr->data.ihdr.bpc != JP2_IHDR_BPCNULL)) {
-		jas_eprintf(""warning: component data type mismatch\n"");
+		jas_eprintf(""warning: component data type mismatch (IHDR)\n"");
 	}
 
 	/* Is the compression type supported? */
@@ -278,7 +278,7 @@ jas_image_t *jp2_decode(jas_stream_t *in, const char *optstr)
 			  ++i) {
 				if (jas_image_cmptdtype(dec->image, i) !=
 				  JP2_BPCTODTYPE(dec->bpcc->data.bpcc.bpcs[i])) {
-					jas_eprintf(""warning: component data type mismatch\n"");
+					jas_eprintf(""warning: component data type mismatch (BPCC)\n"");
 				}
 			}
 		} else {
@@ -409,6 +409,14 @@ jas_image_t *jp2_decode(jas_stream_t *in, const char *optstr)
 		}
 	}
 
+	/* Ensure that the number of channels being used by the decoder
+	  matches the number of image components. */
+	if (dec->numchans != jas_image_numcmpts(dec->image)) {
+		jas_eprintf(""error: mismatch in number of components (%d != %d)\n"",
+		  dec->numchans, jas_image_numcmpts(dec->image));
+		goto error;
+	}
+
 	/* Mark all components as being of unknown type. */
 
 	for (i = 0; i < JAS_CAST(jas_uint, jas_image_numcmpts(dec->image)); ++i) {
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2015-1555,CVE-2015-1555/351279d669cf16eb5c640f86e944fe8f84c8b181,https://github.com/zendframework/zendframework/commit/351279d669cf16eb5c640f86e944fe8f84c8b181,"<s>Zend/Session/SessionManager in Zend Framework 2.2.x before 2.2.9, 2.3.x before 2.3.4 allows remote attackers to create valid sessions without using session validators.</s>","<s>[2.2.9] Release preparation
- Created security announcement in README and CHANGELOG.
- Bumped version number in README and `Zend\Version\Version`.
</s>"," diff --git a/CHANGELOG.md b/CHANGELOG.md
index 3691a15a16..e5242456c8 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,18 @@
 # CHANGELOG
 
+## 2.2.9 (2015-01-14)
+
+### SECURITY UPDATES
+
+- **ZF2015-01:** Session validators were not run if set before session start.
+  Essentially, the validators were writing to the `$_SESSION` superglobal before
+  session start, which meant the data was overwritten once the session began.
+  This meant on subsequent calls, the validators had no data to compare against,
+  making the sessions automatically valid. We have provided patches to ensure
+  that validators are run only after the session has begun, which will ensure
+  they validate sessions correctly going forward. If you use `Zend\Session`
+  validators, we recommend upgrading immediately.
+
 ## 2.2.8 (2014-09-17)
 
 ### SECURITY UPDATES
",0.0,,0.0,tfidf
CVE-2015-1555,CVE-2015-1555/1672aee3531205e5c1a0b96d8c680124ec93db09,https://github.com/zendframework/zendframework/commit/1672aee3531205e5c1a0b96d8c680124ec93db09,"<s>Zend/Session/SessionManager in Zend Framework 2.2.x before 2.2.9, 2.3.x before 2.3.4 allows remote attackers to create valid sessions without using session validators.</s>","<s>#6366 - session data is backed up and merged back into `$_SESSION` after `session_start()` (when not empty)
Signed-off-by: Marco Pivetta <ocramius@gmail.com>
</s>"," diff --git a/library/Zend/Session/SessionManager.php b/library/Zend/Session/SessionManager.php
index 545befd3ce..3dafc003c6 100644
--- a/library/Zend/Session/SessionManager.php
+++ b/library/Zend/Session/SessionManager.php
@@ -10,6 +10,7 @@
 namespace Zend\Session;
 
 use Zend\EventManager\EventManagerInterface;
+use Zend\Stdlib\ArrayUtils;
 
 /**
  * Session ManagerInterface implementation utilizing ext/session
@@ -92,8 +93,16 @@ class SessionManager extends AbstractManager
             $this->registerSaveHandler($saveHandler);
         }
 
+        $oldSessionData = $_SESSION;
+
         session_start();
 
+        if ($oldSessionData instanceof \Traversable
+            || (! empty($oldSessionData) && is_array($oldSessionData))
+        ) {
+            $_SESSION = ArrayUtils::merge($oldSessionData, $_SESSION, true);
+        }
+
         $storage = $this->getStorage();
 
         // Since session is starting, we need to potentially repopulate our
",1.0,,1.0,tfidf
,,,,,,,,,
CVE-2022-0577,CVE-2022-0577/735750c254e6e82af46b4ebbb35e28b8c0a52250,https://github.com/scrapy/scrapy/commit/735750c254e6e82af46b4ebbb35e28b8c0a52250,<s>Exposure of Sensitive Information to an Unauthorized Actor in GitHub repository scrapy/scrapy prior to 2.6.1.</s>,"<s>Cover 1.8.1 in the release notes
</s>"," diff --git a/docs/news.rst b/docs/news.rst
index 4b5cbb2da..5e590f027 100644
--- a/docs/news.rst
+++ b/docs/news.rst
@@ -1492,6 +1492,44 @@ affect subclasses:
 (:issue:`3884`)
 
 
+.. _release-1.8.1:
+
+Scrapy 1.8.1 (2021-10-05)
+-------------------------
+
+*   **Security bug fix:**
+
+    If you use
+    :class:`~scrapy.downloadermiddlewares.httpauth.HttpAuthMiddleware`
+    (i.e. the ``http_user`` and ``http_pass`` spider attributes) for HTTP
+    authentication, any request exposes your credentials to the request target.
+
+    To prevent unintended exposure of authentication credentials to unintended
+    domains, you must now additionally set a new, additional spider attribute,
+    ``http_auth_domain``, and point it to the specific domain to which the
+    authentication credentials must be sent.
+
+    If the ``http_auth_domain`` spider attribute is not set, the domain of the
+    first request will be considered the HTTP authentication target, and
+    authentication credentials will only be sent in requests targeting that
+    domain.
+
+    If you need to send the same HTTP authentication credentials to multiple
+    domains, you can use :func:`w3lib.http.basic_auth_header` instead to
+    set the value of the ``Authorization`` header of your requests.
+
+    If you *really* want your spider to send the same HTTP authentication
+    credentials to any domain, set the ``http_auth_domain`` spider attribute
+    to ``None``.
+
+    Finally, if you are a user of `scrapy-splash`_, know that this version of
+    Scrapy breaks compatibility with scrapy-splash 0.7.2 and earlier. You will
+    need to upgrade scrapy-splash to a greater version for it to continue to
+    work.
+
+.. _scrapy-splash: https://github.com/scrapy-plugins/scrapy-splash
+
+
 .. _release-1.8.0:
 
 Scrapy 1.8.0 (2019-10-28)
",0.0,,0.0,lime
CVE-2022-0577,CVE-2022-0577/8ce01b3b76d4634f55067d6cfdf632ec70ba304a,https://github.com/scrapy/scrapy/commit/8ce01b3b76d4634f55067d6cfdf632ec70ba304a,<s>Exposure of Sensitive Information to an Unauthorized Actor in GitHub repository scrapy/scrapy prior to 2.6.1.</s>,"<s>Merge pull request from GHSA-cjvr-mfj7-j4j8
* Do not carry over cookies to a different domain on redirect
* Cover the cookie-domain redirect fix in the release notes
* Cover 1.8.2 in the release notes
* Fix redirect Cookie handling when the cookie middleware is disabled
* Update the 1.8.2 release date
</s>"," diff --git a/docs/news.rst b/docs/news.rst
index 2128f2f0e..aef12d9db 100644
--- a/docs/news.rst
+++ b/docs/news.rst
@@ -5,11 +5,13 @@ Release notes
 
 .. _release-2.6.0:
 
-Scrapy 2.6.0 (2022-02-??)
+Scrapy 2.6.0 (2022-03-01)
 -------------------------
 
 Highlights:
 
+*   :ref:`Security fixes for cookie handling <2.6-security-fixes>`
+
 *   Python 3.10 support
 
 *   :ref:`asyncio support <using-asyncio>` is no longer considered
@@ -20,6 +22,37 @@ Highlights:
     :ref:`item filtering <item-filter>` and
     :ref:`post-processing <post-processing>`
 
+.. _2.6-security-fixes:
+
+Security bug fixes
+~~~~~~~~~~~~~~~~~~
+
+-   When a :class:`~scrapy.http.Request` object with cookies defined gets a
+    redirect response causing a new :class:`~scrapy.http.Request` object to be
+    scheduled, the cookies defined in the original
+    :class:`~scrapy.http.Request` object are no longer copied into the new
+    :class:`~scrapy.http.Request` object.
+
+    If you manually set the ``Cookie`` header on a
+    :class:`~scrapy.http.Request` object and the domain name of the redirect
+    URL is not an exact match for the domain of the URL of the original
+    :class:`~scrapy.http.Request` object, your ``Cookie`` header is now dropped
+    from the new :class:`~scrapy.http.Request` object.
+
+    The old behavior could be exploited by an attacker to gain access to your
+    cookies. Please, see the `cjvr-mfj7-j4j8 security advisory`_ for more
+    information.
+
+    .. _cjvr-mfj7-j4j8 security advisory: https://github.com/scrapy/scrapy/security/advisories/GHSA-cjvr-mfj7-j4j8
+
+    .. note:: It is still possible to enable the sharing of cookies between
+              different domains with a shared domain suffix (e.g.
+              ``example.com`` and any subdomain) by defining the shared domain
+              suffix (e.g. ``example.com``) as the cookie domain when defining
+              your cookies. See the documentation of the
+              :class:`~scrapy.http.Request` class for more information.
+
+
 Modified requirements
 ~~~~~~~~~~~~~~~~~~~~~
 
@@ -1842,6 +1875,38 @@ affect subclasses:
 
 (:issue:`3884`)
 
+.. _release-1.8.2:
+
+Scrapy 1.8.2 (2022-03-01)
+-------------------------
+
+**Security bug fixes:**
+
+-   When a :class:`~scrapy.http.Request` object with cookies defined gets a
+    redirect response causing a new :class:`~scrapy.http.Request` object to be
+    scheduled, the cookies defined in the original
+    :class:`~scrapy.http.Request` object are no longer copied into the new
+    :class:`~scrapy.http.Request` object.
+
+    If you manually set the ``Cookie`` header on a
+    :class:`~scrapy.http.Request` object and the domain name of the redirect
+    URL is not an exact match for the domain of the URL of the original
+    :class:`~scrapy.http.Request` object, your ``Cookie`` header is now dropped
+    from the new :class:`~scrapy.http.Request` object.
+
+    The old behavior could be exploited by an attacker to gain access to your
+    cookies. Please, see the `cjvr-mfj7-j4j8 security advisory`_ for more
+    information.
+
+    .. _cjvr-mfj7-j4j8 security advisory: https://github.com/scrapy/scrapy/security/advisories/GHSA-cjvr-mfj7-j4j8
+
+    .. note:: It is still possible to enable the sharing of cookies between
+              different domains with a shared domain suffix (e.g.
+              ``example.com`` and any subdomain) by defining the shared domain
+              suffix (e.g. ``example.com``) as the cookie domain when defining
+              your cookies. See the documentation of the
+              :class:`~scrapy.http.Request` class for more information.
+
 
 .. _release-1.8.1:
 
",0.0,,1.0,lime
,,,,,,,,,
CVE-2020-8131,CVE-2020-8131/2c8e97eaf3047be92c99114b7f08aee044329a05,https://github.com/yarnpkg/yarn/commit/2c8e97eaf3047be92c99114b7f08aee044329a05,<s>Arbitrary filesystem write vulnerability in Yarn before 1.22.0 allows attackers to write to any path on the filesystem and potentially lead to arbitrary code execution by forcing the user to install a malicious package.</s>,"<s>Fix suggestions for CLI (#7808)
At some point the `scripts` object changes to be a map instead of an array, at which point the suggestions functionality broke. This commit includes the fix and a test to make sure it doesn't break again.
</s>"," diff --git a/__tests__/fixtures/index/run-suggestion/package.json b/__tests__/fixtures/index/run-suggestion/package.json
new file mode 100644
index 00000000..5757bb3b
--- /dev/null
+++ b/__tests__/fixtures/index/run-suggestion/package.json
@@ -0,0 +1,8 @@
+{
+  ""name"": ""test_suggestion"",
+  ""version"": ""1.0.0"",
+  ""license"": ""UNLICENSED"",
+  ""scripts"": {
+    ""foobar"": ""foobar""
+  }
+}
",0.0,,0.0,lime
CVE-2020-8131,CVE-2020-8131/0e7133ca28618513503b4e1d9063f1c18ea318e5,https://github.com/yarnpkg/yarn/commit/0e7133ca28618513503b4e1d9063f1c18ea318e5,<s>Arbitrary filesystem write vulnerability in Yarn before 1.22.0 allows attackers to write to any path on the filesystem and potentially lead to arbitrary code execution by forcing the user to install a malicious package.</s>,"<s>Fixes arbitrary file write on fetch (#7831)

</s>"," diff --git a/src/fetchers/tarball-fetcher.js b/src/fetchers/tarball-fetcher.js
index 8d1a4522..c06cc110 100644
--- a/src/fetchers/tarball-fetcher.js
+++ b/src/fetchers/tarball-fetcher.js
@@ -136,6 +136,11 @@ export default class TarballFetcher extends BaseFetcher {
       chown: false, // don't chown. just leave as it is
       map: header => {
         header.mtime = now;
+        if (header.linkname) {
+          const basePath = path.posix.dirname(path.join('/', header.name));
+          const jailPath = path.posix.join(basePath, header.linkname);
+          header.linkname = path.posix.relative('/', jailPath);
+        }
         return header;
       },
       fs: patchedFs,
",1.0,,1.0,lime
,,,,,,,,,
CVE-2017-9207,CVE-2017-9207/e457436d59e515dba53bd0f6c6e5cecd3e9cb54e,https://github.com/jsummers/imageworsener/commit/e457436d59e515dba53bd0f6c6e5cecd3e9cb54e,"<s>The iw_get_ui16be function in imagew-util.c:422:24 in libimageworsener.a in ImageWorsener 1.3.1 allows remote attackers to cause a denial of service (heap-based buffer over-read) via a crafted image, related to imagew-jpeg.c.</s>","<s>Updated version number to 1.3.2
</s>"," diff --git a/readme.txt b/readme.txt
index 2bfce08..6c4ec0d 100644
--- a/readme.txt
+++ b/readme.txt
@@ -1,5 +1,5 @@
 ImageWorsener is a raster image scaling and processing utility.
-Version 1.3.1
+Version 1.3.2
 Copyright (c) 2011-2017 Jason Summers  <jason1@pobox.com>
 
 Web site: http://entropymine.com/imageworsener/
",0.0,,0.0,tfidf
CVE-2017-9207,CVE-2017-9207/b45cb1b665a14b0175b9cb1502ef7168e1fe0d5d,https://github.com/jsummers/imageworsener/commit/b45cb1b665a14b0175b9cb1502ef7168e1fe0d5d,"<s>The iw_get_ui16be function in imagew-util.c:422:24 in libimageworsener.a in ImageWorsener 1.3.1 allows remote attackers to cause a denial of service (heap-based buffer over-read) via a crafted image, related to imagew-jpeg.c.</s>","<s>Fixed invalid memory access bugs when decoding JPEG Exif data
Fixes issues #22, #23, #24, #25
</s>"," diff --git a/src/imagew-jpeg.c b/src/imagew-jpeg.c
index 43bf946..e810539 100644
--- a/src/imagew-jpeg.c
+++ b/src/imagew-jpeg.c
@@ -58,6 +58,18 @@ struct iw_exif_state {
 	size_t d_len;
 };
 
+static unsigned int get_exif_ui16(struct iw_exif_state *e, unsigned int pos)
+{
+	if(e->d_len<2 || pos>e->d_len-2) return 0;
+	return iw_get_ui16_e(&e->d[pos], e->endian);
+}
+
+static unsigned int get_exif_ui32(struct iw_exif_state *e, unsigned int pos)
+{
+	if(e->d_len<4 || pos>e->d_len-4) return 0;
+	return iw_get_ui32_e(&e->d[pos], e->endian);
+}
+
 // Try to read an Exif tag into an integer.
 // Returns zero on failure.
 static int get_exif_tag_int_value(struct iw_exif_state *e, unsigned int tag_pos,
@@ -66,17 +78,17 @@ static int get_exif_tag_int_value(struct iw_exif_state *e, unsigned int tag_pos,
 	unsigned int field_type;
 	unsigned int value_count;
 
-	field_type = iw_get_ui16_e(&e->d[tag_pos+2],e->endian);
-	value_count = iw_get_ui32_e(&e->d[tag_pos+4],e->endian);
+	field_type = get_exif_ui16(e, tag_pos+2);
+	value_count = get_exif_ui32(e, tag_pos+4);
 
 	if(value_count!=1) return 0;
 
 	if(field_type==3) { // SHORT (uint16)
-		*pv = iw_get_ui16_e(&e->d[tag_pos+8],e->endian);
+		*pv = get_exif_ui16(e, tag_pos+8);
 		return 1;
 	}
 	else if(field_type==4) { // LONG (uint32)
-		*pv = iw_get_ui32_e(&e->d[tag_pos+8],e->endian);
+		*pv = get_exif_ui32(e, tag_pos+8);
 		return 1;
 	}
 
@@ -93,8 +105,8 @@ static int get_exif_tag_dbl_value(struct iw_exif_state *e, unsigned int tag_pos,
 	unsigned int value_pos;
 	unsigned int numer, denom;
 
-	field_type = iw_get_ui16_e(&e->d[tag_pos+2],e->endian);
-	value_count = iw_get_ui32_e(&e->d[tag_pos+4],e->endian);
+	field_type = get_exif_ui16(e, tag_pos+2);
+	value_count = get_exif_ui32(e, tag_pos+4);
 
 	if(value_count!=1) return 0;
 
@@ -103,12 +115,12 @@ static int get_exif_tag_dbl_value(struct iw_exif_state *e, unsigned int tag_pos,
 	// A rational is 8 bytes. Since 8>4, it is stored indirectly. First, read
 	// the location where it is stored.
 
-	value_pos = iw_get_ui32_e(&e->d[tag_pos+8],e->endian);
+	value_pos = get_exif_ui32(e, tag_pos+8);
 	if(value_pos > e->d_len-8) return 0;
 
 	// Read the actual value.
-	numer = iw_get_ui32_e(&e->d[value_pos  ],e->endian);
-	denom = iw_get_ui32_e(&e->d[value_pos+4],e->endian);
+	numer = get_exif_ui32(e, value_pos);
+	denom = get_exif_ui32(e, value_pos+4);
 	if(denom==0) return 0;
 
 	*pv = ((double)numer)/denom;
@@ -125,15 +137,15 @@ static void iwjpeg_scan_exif_ifd(struct iwjpegrcontext *rctx,
 	unsigned int v;
 	double v_dbl;
 
-	if(ifd<8 || ifd>e->d_len-18) return;
+	if(ifd<8 || e->d_len<18 || ifd>e->d_len-18) return;
 
-	tag_count = iw_get_ui16_e(&e->d[ifd],e->endian);
+	tag_count = get_exif_ui16(e, ifd);
 	if(tag_count>1000) return; // Sanity check.
 
 	for(i=0;i<tag_count;i++) {
 		tag_pos = ifd+2+i*12;
 		if(tag_pos+12 > e->d_len) return; // Avoid overruns.
-		tag_id = iw_get_ui16_e(&e->d[tag_pos],e->endian);
+		tag_id = get_exif_ui16(e, tag_pos);
 
 		switch(tag_id) {
 		case 274: // 274 = Orientation
@@ -177,7 +189,7 @@ static void iwjpeg_scan_exif(struct iwjpegrcontext *rctx,
 
 	e.endian = d[0]=='I' ? IW_ENDIAN_LITTLE : IW_ENDIAN_BIG;
 
-	ifd = iw_get_ui32_e(&d[4],e.endian);
+	ifd = get_exif_ui32(&e, 4);
 
 	iwjpeg_scan_exif_ifd(rctx,&e,ifd);
 }
",1.0,,1.0,tfidf
,,,,,,,,,
CVE-2017-18184,CVE-2017-18184/8fe0b06cd879f503d0e5be63f706d3adda3b8203,https://github.com/qpdf/qpdf/commit/8fe0b06cd879f503d0e5be63f706d3adda3b8203,<s>An issue was discovered in QPDF before 7.0.0. There is a stack-based out-of-bounds read in the function iterate_rc4 in QPDF_encryption.cc.</s>,"<s>Pad encryption parameters that are too short (fixes #96)
</s>"," diff --git a/qpdf/qtest/qpdf.test b/qpdf/qtest/qpdf.test
index edd9f1ec..12fb5dd2 100644
--- a/qpdf/qtest/qpdf.test
+++ b/qpdf/qtest/qpdf.test
@@ -232,7 +232,7 @@ foreach my $d (@bug_tests)
 show_ntests();
 # ----------
 $td->notify(""--- Miscellaneous Tests ---"");
-$n_tests += 87;
+$n_tests += 88;
 
 $td->runtest(""qpdf version"",
 	     {$td->COMMAND => ""qpdf --version""},
@@ -676,6 +676,16 @@ $td->runtest(""recoverable xref errors"",
               $td->EXIT_STATUS => 3},
              $td->NORMALIZE_NEWLINES);
 
+# A file was emailed privately with issue 96. short-O-U.pdf was
+# created by copying encryption parameters from that file. It exhibits
+# the same behavior as the original file.
+$td->runtest(""short /O or /U"",
+             {$td->COMMAND =>
+                  ""qpdf --password=19723102477 --check short-O-U.pdf""},
+             {$td->FILE => ""short-O-U.out"",
+              $td->EXIT_STATUS => 0},
+             $td->NORMALIZE_NEWLINES);
+
 show_ntests();
 # ----------
 $td->notify(""--- Single Page ---"");
",0.0,,0.0,lime
CVE-2017-18184,CVE-2017-18184/dea704f0ab7f625e1e7b3f9a1110b45b63157317,https://github.com/qpdf/qpdf/commit/dea704f0ab7f625e1e7b3f9a1110b45b63157317,<s>An issue was discovered in QPDF before 7.0.0. There is a stack-based out-of-bounds read in the function iterate_rc4 in QPDF_encryption.cc.</s>,"<s>Pad keys to avoid memory errors (fixes #147)
</s>"," diff --git a/libqpdf/QPDF_encryption.cc b/libqpdf/QPDF_encryption.cc
index 81325591..a2445b61 100644
--- a/libqpdf/QPDF_encryption.cc
+++ b/libqpdf/QPDF_encryption.cc
@@ -479,6 +479,8 @@ compute_O_value(std::string const& user_password,
 
     char upass[key_bytes];
     pad_or_truncate_password_V4(user_password, upass);
+    std::string k1(reinterpret_cast<char*>(O_key), OU_key_bytes_V4);
+    pad_short_parameter(k1, data.getLengthBytes());
     iterate_rc4(QUtil::unsigned_char_pointer(upass), key_bytes,
 		O_key, data.getLengthBytes(),
                 (data.getR() >= 3) ? 20 : 1, false);
@@ -495,6 +497,7 @@ compute_U_value_R2(std::string const& user_password,
     std::string k1 = QPDF::compute_encryption_key(user_password, data);
     char udata[key_bytes];
     pad_or_truncate_password_V4("""", udata);
+    pad_short_parameter(k1, data.getLengthBytes());
     iterate_rc4(QUtil::unsigned_char_pointer(udata), key_bytes,
 		QUtil::unsigned_char_pointer(k1),
                 data.getLengthBytes(), 1, false);
@@ -516,6 +519,7 @@ compute_U_value_R3(std::string const& user_password,
                                 data.getId1().length());
     MD5::Digest digest;
     md5.digest(digest);
+    pad_short_parameter(k1, data.getLengthBytes());
     iterate_rc4(digest, sizeof(MD5::Digest),
 		QUtil::unsigned_char_pointer(k1),
                 data.getLengthBytes(), 20, false);
@@ -591,7 +595,10 @@ check_owner_password_V4(std::string& user_password,
     compute_O_rc4_key(user_password, owner_password, data, key);
     unsigned char O_data[key_bytes];
     memcpy(O_data, QUtil::unsigned_char_pointer(data.getO()), key_bytes);
-    iterate_rc4(O_data, key_bytes, key, data.getLengthBytes(),
+    std::string k1(reinterpret_cast<char*>(key), OU_key_bytes_V4);
+    pad_short_parameter(k1, data.getLengthBytes());
+    iterate_rc4(O_data, key_bytes, QUtil::unsigned_char_pointer(k1),
+                data.getLengthBytes(),
                 (data.getR() >= 3) ? 20 : 1, true);
     std::string new_user_password =
         std::string(reinterpret_cast<char*>(O_data), key_bytes);
@@ -886,6 +893,7 @@ QPDF::initializeEncryption()
 
     if (V < 5)
     {
+        // These must be exactly the right number of bytes.
         pad_short_parameter(O, key_bytes);
         pad_short_parameter(U, key_bytes);
         if (! ((O.length() == key_bytes) && (U.length() == key_bytes)))
@@ -913,24 +921,12 @@ QPDF::initializeEncryption()
         UE = encryption_dict.getKey(""/UE"").getStringValue();
         Perms = encryption_dict.getKey(""/Perms"").getStringValue();
 
+        // These may be longer than the minimum number of bytes.
         pad_short_parameter(O, OU_key_bytes_V5);
         pad_short_parameter(U, OU_key_bytes_V5);
         pad_short_parameter(OE, OUE_key_bytes_V5);
         pad_short_parameter(UE, OUE_key_bytes_V5);
         pad_short_parameter(Perms, Perms_key_bytes_V5);
-        if ((O.length() < OU_key_bytes_V5) ||
-            (U.length() < OU_key_bytes_V5) ||
-            (OE.length() < OUE_key_bytes_V5) ||
-            (UE.length() < OUE_key_bytes_V5) ||
-            (Perms.length() < Perms_key_bytes_V5))
-        {
-            throw QPDFExc(qpdf_e_damaged_pdf, this->m->file->getName(),
-                          ""encryption dictionary"",
-                          this->m->file->getLastOffset(),
-                          ""incorrect length for some of""
-                          "" /O, /U, /OE, /UE, or /Perms in""
-                          "" encryption dictionary"");
-        }
     }
 
     int Length = 40;
",1.0,,1.0,lime
,,,,,,,,,
CVE-2021-21375,CVE-2021-21375/aadc643a015f30af7d2458ad5b2cdb1a72083dc0,https://github.com/pjsip/pjproject/commit/aadc643a015f30af7d2458ad5b2cdb1a72083dc0,"<s>PJSIP is a free and open source multimedia communication library written in C language implementing standard based protocols such as SIP, SDP, RTP, STUN, TURN, and ICE. In PJSIP version 2.10 and earlier, after an initial INVITE has been sent, when two 183 responses are received, with the first one causing negotiation failure, a crash will occur. This results in a denial of service.</s>","<s>Fixed assertion in media update of session refresh after previous SDP offer has been rejected (#2627)

</s>"," diff --git a/tests/pjsua/scripts-sipp/uas-reinv-after-failed-nego.xml b/tests/pjsua/scripts-sipp/uas-reinv-after-failed-nego.xml
new file mode 100644
index 000000000..ec7c01c45
--- /dev/null
+++ b/tests/pjsua/scripts-sipp/uas-reinv-after-failed-nego.xml
@@ -0,0 +1,116 @@
+<?xml version=""1.0"" encoding=""ISO-8859-1"" ?>
+<!DOCTYPE scenario SYSTEM ""sipp.dtd"">
+
+<!-- This program is free software; you can redistribute it and/or      -->
+<!-- modify it under the terms of the GNU General Public License as     -->
+<!-- published by the Free Software Foundation; either version 2 of the -->
+<!-- License, or (at your option) any later version.                    -->
+<!--                                                                    -->
+<!-- This program is distributed in the hope that it will be useful,    -->
+<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of     -->
+<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      -->
+<!-- GNU General Public License for more details.                       -->
+<!--                                                                    -->
+<!-- You should have received a copy of the GNU General Public License  -->
+<!-- along with this program; if not, write to the                      -->
+<!-- Free Software Foundation, Inc.,                                    -->
+<!-- 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA             -->
+
+
+<!--                                                                    -->
+<!--   Session timer where UAS doesn't indicate support for UPDATE.     -->
+<!--   In this case, UAC MUST use re-INVITE with SDP.                   -->
+
+<scenario name=""Basic UAS responder"">
+  <recv request=""INVITE"" crlf=""true"">
+  </recv>
+
+  <send retrans=""500"">
+    <![CDATA[
+
+      SIP/2.0 200 OK
+      [last_Via:]
+      [last_From:]
+      [last_To:];tag=[call_number]
+      [last_Call-ID:]
+      [last_CSeq:]
+      Contact: <sip:[local_ip]:[local_port];transport=[transport]> 
+      Content-Type: application/sdp
+      Content-Length: [len]
+ 
+      v=0
+      o=Some-UserAgent 68 210 IN IP4 [local_ip]
+      s=SIP Call
+      c=IN IP4 [local_ip]
+      t=0 0
+      m=audio 17294 RTP/AVP 0
+      c=IN IP4 [local_ip]
+    ]]>
+  </send>
+
+  <recv request=""ACK""
+        optional=""true""
+        rtd=""true""
+        crlf=""true""> 
+  </recv> 
+ 
+  <recv request=""INVITE"" crlf=""true"">
+  </recv>
+
+  <send retrans=""500"">
+    <![CDATA[
+
+      SIP/2.0 500 SDP rejected for test
+      [last_Via:]
+      [last_From:]
+      [last_To:];tag=[call_number]
+      [last_Call-ID:]
+      [last_CSeq:]
+      Contact: <sip:[local_ip]:[local_port];transport=[transport]> 
+    ]]>
+  </send>
+
+  <recv request=""ACK""
+        rtd=""true""
+        crlf=""true""> 
+  </recv> 
+
+  <recv request=""INVITE"" crlf=""true"">
+  </recv>
+
+  <send retrans=""500"">
+    <![CDATA[
+
+      SIP/2.0 200 OK
+      [last_Via:]
+      [last_From:]
+      [last_To:];tag=[call_number]
+      [last_Call-ID:]
+      [last_CSeq:]
+      Contact: <sip:[local_ip]:[local_port];transport=[transport]> 
+      Content-Type: application/sdp
+      Content-Length: [len]
+ 
+      v=0
+      o=Some-UserAgent 68 210 IN IP4 [local_ip]
+      s=SIP Call
+      c=IN IP4 [local_ip]
+      t=0 0
+      m=audio 17294 RTP/AVP 0
+      c=IN IP4 [local_ip]
+    ]]>
+  </send>
+
+  <recv request=""ACK""
+        rtd=""true""
+        crlf=""true""> 
+  </recv> 
+
+  <!-- definition of the response time repartition table (unit is ms)   -->
+  <ResponseTimeRepartition value=""10, 20, 30, 40, 50, 100, 150, 200""/>
+
+  <!-- definition of the call length repartition table (unit is ms)     -->
+  <CallLengthRepartition value=""10, 50, 100, 500, 1000, 5000, 10000""/>
+
+</scenario>
+
",0.0,,0.0,tfidf
CVE-2021-21375,CVE-2021-21375/97b3d7addbaa720b7ddb0af9bf6f3e443e664365,https://github.com/pjsip/pjproject/commit/97b3d7addbaa720b7ddb0af9bf6f3e443e664365,"<s>PJSIP is a free and open source multimedia communication library written in C language implementing standard based protocols such as SIP, SDP, RTP, STUN, TURN, and ICE. In PJSIP version 2.10 and earlier, after an initial INVITE has been sent, when two 183 responses are received, with the first one causing negotiation failure, a crash will occur. This results in a denial of service.</s>","<s>Merge pull request from GHSA-hvq6-f89p-frvp

</s>"," diff --git a/pjmedia/src/pjmedia/sdp_neg.c b/pjmedia/src/pjmedia/sdp_neg.c
index f4838f75d..9f76b5200 100644
--- a/pjmedia/src/pjmedia/sdp_neg.c
+++ b/pjmedia/src/pjmedia/sdp_neg.c
@@ -304,7 +304,6 @@ PJ_DEF(pj_status_t) pjmedia_sdp_neg_modify_local_offer2(
 {
     pjmedia_sdp_session *new_offer;
     pjmedia_sdp_session *old_offer;
-    char media_used[PJMEDIA_MAX_SDP_MEDIA];
     unsigned oi; /* old offer media index */
     pj_status_t status;
 
@@ -323,8 +322,19 @@ PJ_DEF(pj_status_t) pjmedia_sdp_neg_modify_local_offer2(
     /* Change state to STATE_LOCAL_OFFER */
     neg->state = PJMEDIA_SDP_NEG_STATE_LOCAL_OFFER;
 
+    /* When there is no active local SDP in state PJMEDIA_SDP_NEG_STATE_DONE,
+     * it means that the previous initial SDP nego must have been failed,
+     * so we'll just set the local SDP offer here.
+     */
+    if (!neg->active_local_sdp) {
+	neg->initial_sdp_tmp = NULL;
+	neg->initial_sdp = pjmedia_sdp_session_clone(pool, local);
+	neg->neg_local_sdp = pjmedia_sdp_session_clone(pool, local);
+
+	return PJ_SUCCESS;
+    }
+
     /* Init vars */
-    pj_bzero(media_used, sizeof(media_used));
     old_offer = neg->active_local_sdp;
     new_offer = pjmedia_sdp_session_clone(pool, local);
 
",1.0,,1.0,tfidf
,,,,,,,,,
CVE-2014-3552,CVE-2014-3552/f0ab42f9858ff157225a8c7cb50ac2504a1e3f97,https://github.com/moodle/moodle/commit/f0ab42f9858ff157225a8c7cb50ac2504a1e3f97,"<s>The Shibboleth authentication plugin in auth/shibboleth/index.php in Moodle through 2.3.11, 2.4.x before 2.4.11, and 2.5.x before 2.5.7 does not check whether a session ID is empty, which allows remote authenticated users to hijack sessions via crafted plugin interaction.</s>","<s>MDL-45485 auth_shibboleth: User taking over other user's session
Replacing code with call to complete_user_login() since it calls session_regenerate_id().
</s>"," diff --git a/auth/shibboleth/index.php b/auth/shibboleth/index.php
index cf9695899ad..9cc3af1b789 100644
--- a/auth/shibboleth/index.php
+++ b/auth/shibboleth/index.php
@@ -49,21 +49,7 @@
         if ($shibbolethauth->user_login($frm->username, $frm->password)
                 && $user = authenticate_user_login($frm->username, $frm->password)) {
 
-            enrol_check_plugins($user);
-            session_set_user($user);
-
-            $USER->loggedin = true;
-            $USER->site     = $CFG->wwwroot; // for added security, store the site in the
-
-            update_user_login_times();
-
-            // Don't show previous shibboleth username on login page
-
-            set_login_session_preferences();
-
-            unset($SESSION->lang);
-            $SESSION->justloggedin = true;
-
+            complete_user_login($user);
             add_to_log(SITEID, 'user', 'login', ""view.php?id=$USER->id&course="".SITEID, $USER->id, 0, $USER->id);
 
             if (user_not_fully_set_up($USER)) {
",1.0,,1.0,lime
CVE-2014-3552,CVE-2014-3552/dc97145785b9ae192168659c65309bca61a58151,https://github.com/moodle/moodle/commit/dc97145785b9ae192168659c65309bca61a58151,"<s>The Shibboleth authentication plugin in auth/shibboleth/index.php in Moodle through 2.3.11, 2.4.x before 2.4.11, and 2.5.x before 2.5.7 does not check whether a session ID is empty, which allows remote authenticated users to hijack sessions via crafted plugin interaction.</s>","<s>MDL-45760 make sure to check permission before setting header
</s>"," diff --git a/notes/index.php b/notes/index.php
index 62c01b9979d..b2cfe36882b 100644
--- a/notes/index.php
+++ b/notes/index.php
@@ -15,6 +15,10 @@ $userid       = optional_param('user', 0, PARAM_INT);
 $filtertype   = optional_param('filtertype', '', PARAM_ALPHA);
 $filterselect = optional_param('filterselect', 0, PARAM_INT);
 
+if (empty($CFG->enablenotes)) {
+    print_error('notesdisabled', 'notes');
+}
+
 $url = new moodle_url('/notes/index.php');
 if ($courseid != SITEID) {
     $url->param('course', $courseid);
@@ -61,11 +65,6 @@ if ($userid) {
 
 /// require login to access notes
 require_login($course);
-add_to_log($courseid, 'notes', 'view', 'index.php?course='.$courseid.'&amp;user='.$userid, 'view notes');
-
-if (empty($CFG->enablenotes)) {
-    print_error('notesdisabled', 'notes');
-}
 
 /// output HTML
 if ($course->id == SITEID) {
@@ -73,8 +72,11 @@ if ($course->id == SITEID) {
 } else {
     $coursecontext = context_course::instance($course->id);   // Course context
 }
+require_capability('moodle/notes:view', $coursecontext);
 $systemcontext = context_system::instance();   // SYSTEM context
 
+add_to_log($courseid, 'notes', 'view', 'index.php?course='.$courseid.'&amp;user='.$userid, 'view notes');
+
 $strnotes = get_string('notes', 'notes');
 if ($userid) {
     $PAGE->set_context(context_user::instance($user->id));
",0.0,,0.0,lime
,,,,,,,,,
CVE-2017-12662,CVE-2017-12662/bd40cc5f53067322861b881485cbd70f509f3829,https://github.com/ImageMagick/ImageMagick/commit/bd40cc5f53067322861b881485cbd70f509f3829,<s>ImageMagick 7.0.6-2 has a memory leak vulnerability in WritePDFImage in coders/pdf.c.</s>,"<s>https://github.com/ImageMagick/ImageMagick/issues/576
</s>"," diff --git a/coders/pdf.c b/coders/pdf.c
index 55f32d6e7..dc7fc6e95 100644
--- a/coders/pdf.c
+++ b/coders/pdf.c
@@ -1989,7 +1989,11 @@ RestoreMSCWarning
             length*=image->colorspace == CMYKColorspace ? 4UL : 3UL;
             pixel_info=AcquireVirtualMemory(length,sizeof(*pixels));
             if (pixel_info == (MemoryInfo *) NULL)
-              ThrowWriterException(ResourceLimitError,""MemoryAllocationFailed"");
+              {
+                xref=(MagickOffsetType *) RelinquishMagickMemory(xref);
+                ThrowWriterException(ResourceLimitError,
+                  ""MemoryAllocationFailed"");
+              }
             pixels=(unsigned char *) GetVirtualMemoryBlob(pixel_info);
             /*
               Dump runoffset encoded pixels.
@@ -2086,8 +2090,11 @@ RestoreMSCWarning
               length=(size_t) number_pixels;
               pixel_info=AcquireVirtualMemory(length,sizeof(*pixels));
               if (pixel_info == (MemoryInfo *) NULL)
-                ThrowWriterException(ResourceLimitError,
-                  ""MemoryAllocationFailed"");
+                {
+                  xref=(MagickOffsetType *) RelinquishMagickMemory(xref);
+                  ThrowWriterException(ResourceLimitError,
+                    ""MemoryAllocationFailed"");
+                }
               pixels=(unsigned char *) GetVirtualMemoryBlob(pixel_info);
               /*
                 Dump Runlength encoded pixels.
",1.0,,1.0,lime
CVE-2017-12662,CVE-2017-12662/7b604a554dfb6630fe32e739334fa57341dc6123,https://github.com/ImageMagick/ImageMagick/commit/7b604a554dfb6630fe32e739334fa57341dc6123,<s>ImageMagick 7.0.6-2 has a memory leak vulnerability in WritePDFImage in coders/pdf.c.</s>,"<s>Fix another leak related to #574.
</s>"," diff --git a/MagickCore/quantize.c b/MagickCore/quantize.c
index 851a24015..5281ee2c4 100644
--- a/MagickCore/quantize.c
+++ b/MagickCore/quantize.c
@@ -3395,8 +3395,11 @@ static MagickBooleanType SetGrayscaleImage(Image *image,
     IntensityCompare);
   colormap=(PixelInfo *) AcquireQuantumMemory(image->colors,sizeof(*colormap));
   if (colormap == (PixelInfo *) NULL)
-    ThrowBinaryException(ResourceLimitError,""MemoryAllocationFailed"",
-      image->filename);
+    {
+      colormap_index=(ssize_t *) RelinquishMagickMemory(colormap_index);
+      ThrowBinaryException(ResourceLimitError,""MemoryAllocationFailed"",
+        image->filename);
+    }
   j=0;
   colormap[j]=image->colormap[0];
   for (i=0; i < (ssize_t) image->colors; i++)
",0.0,,0.0,lime
,,,,,,,,,
CVE-2018-16651,CVE-2018-16651/69b3a92048122438e6ae3a03e27d78000c4c9451,https://github.com/thorsten/phpMyFAQ/commit/69b3a92048122438e6ae3a03e27d78000c4c9451,<s>The admin backend in phpMyFAQ before 2.9.11 allows CSV injection in reports.</s>,"<s>phpMyFAQ homepage is now on https
</s>"," diff --git a/phpmyfaq/admin/ajax.config.php b/phpmyfaq/admin/ajax.config.php
index 0c8975c07..4b1f396cc 100644
--- a/phpmyfaq/admin/ajax.config.php
+++ b/phpmyfaq/admin/ajax.config.php
@@ -16,7 +16,7 @@
  * @copyright 2009-2018 phpMyFAQ Team
  * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0
  *
- * @link      http://www.phpmyfaq.de
+ * @link      https://www.phpmyfaq.de
  * @since     2009-04-01
  */
 if (!defined('IS_VALID_PHPMYFAQ') || !$user->perm->checkRight($user->getUserId(), 'editconfig')) {
",0.0,,0.0,lime
CVE-2018-16651,CVE-2018-16651/02d287852dbdcb2ee310254c3d1b83588cdac910,https://github.com/thorsten/phpMyFAQ/commit/02d287852dbdcb2ee310254c3d1b83588cdac910,<s>The admin backend in phpMyFAQ before 2.9.11 allows CSV injection in reports.</s>,"<s>Added check to avoid formula injections
</s>"," diff --git a/phpmyfaq/inc/PMF/Report.php b/phpmyfaq/inc/PMF/Report.php
index 7b5581629..050cddf2c 100644
--- a/phpmyfaq/inc/PMF/Report.php
+++ b/phpmyfaq/inc/PMF/Report.php
@@ -10,12 +10,10 @@
  * obtain one at http://mozilla.org/MPL/2.0/.
  *
  * @category  phpMyFAQ
- *
  * @author    Thorsten Rinne <thorsten@phpmyfaq.de>
  * @author    Gustavo Solt <gustavo.solt@mayflower.de>
  * @copyright 2011-2018 phpMyFAQ Team
  * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0
- *
  * @link      https://www.phpmyfaq.de
  * @since     2011-02-04
  */
@@ -27,12 +25,10 @@ if (!defined('IS_VALID_PHPMYFAQ')) {
  * PMF_Report.
  *
  * @category  phpMyFAQ
- *
  * @author    Thorsten Rinne <thorsten@phpmyfaq.de>
  * @author    Gustavo Solt <gustavo.solt@mayflower.de>
  * @copyright 2011-2018 phpMyFAQ Team
  * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0
- *
  * @link      https://www.phpmyfaq.de
  * @since     2011-02-04
  */
@@ -45,10 +41,7 @@ class PMF_Report
 
     /**
      * Constructor.
-     *
      * @param PMF_Configuration
-     *
-     * @return PMF_Report
      */
     public function __construct(PMF_Configuration $config)
     {
@@ -57,7 +50,6 @@ class PMF_Report
 
     /**
      * Generates a huge array for the report.
-     *
      * @return array
      */
     public function getReportingData()
@@ -139,10 +131,9 @@ class PMF_Report
     }
 
     /**
-     * Convert string to the correct encoding.
-     *
+     * Convert string to the correct encoding and removes possible
+     * bad strings to avoid formula injection attacks.
      * @param string $outputString String to encode.
-     *
      * @return string Encoded string.
      */
     public function convertEncoding($outputString)
@@ -158,6 +149,9 @@ class PMF_Report
             }
         }
 
+        $toBeRemoved = [ '=', '+', '-', 'HYPERLINK'];
+        $outputString = str_replace($toBeRemoved, '', $outputString);
+
         return $outputString;
     }
 }
",1.0,,1.0,lime
,,,,,,,,,
CVE-2017-9263,CVE-2017-9263/b76d4a81b8fbbc339d33b767e141c473ba350678,https://github.com/openvswitch/ovs/commit/b76d4a81b8fbbc339d33b767e141c473ba350678,"<s>In Open vSwitch (OvS) 2.7.0, while parsing an OpenFlow role status message, there is a call to the abort() function for undefined role status reasons in the function `ofp_print_role_status_message` in `lib/ofp-print.c` that may be leveraged toward a remote DoS attack by a malicious switch.</s>","<s>ofp-print: Don't abort on unknown reason in role status message.
A buggy or malicious switch could send a role status message with a bad
reason code, which if printed by OVS would cause it to abort.  This fixes
the problem.
Reported-by: Bhargava Shastry <bshastry@sec.t-labs.tu-berlin.de>
Signed-off-by: Ben Pfaff <blp@ovn.org>
Acked-by: Yi-Hung Wei <yihung.wei@gmail.com>
</s>"," diff --git a/lib/ofp-print.c b/lib/ofp-print.c
index 4370cb522..7e3000f77 100644
--- a/lib/ofp-print.c
+++ b/lib/ofp-print.c
@@ -2180,7 +2180,8 @@ ofp_print_role_status_message(struct ds *string, const struct ofp_header *oh)
         break;
     case OFPCRR_N_REASONS:
     default:
-        OVS_NOT_REACHED();
+        ds_put_cstr(string, ""(unknown)"");
+        break;
     }
 }
 
",1.0,,1.0,tfidf
CVE-2017-9263,CVE-2017-9263/b7ff4a4a917f06709220a138dfc0b6aeae6e6d5f,https://github.com/openvswitch/ovs/commit/b7ff4a4a917f06709220a138dfc0b6aeae6e6d5f,"<s>In Open vSwitch (OvS) 2.7.0, while parsing an OpenFlow role status message, there is a call to the abort() function for undefined role status reasons in the function `ofp_print_role_status_message` in `lib/ofp-print.c` that may be leveraged toward a remote DoS attack by a malicious switch.</s>","<s>redhat: allow dpdk to also run as non-root user
After this commit, users may start a dpdk-enabled ovs setup as a
non-root user.  This is accomplished by exporting the $HOME directory,
which dpdk uses to fill in it's semi-persistent RTE configuration.
This change may be a bit controversial since it modifies /dev/hugepages
as part of starting the ovs-vswitchd to set a hugetlbfs group
ownership.  This is used to enable writing to /dev/hugepages so that the
dpdk_init will successfully complete.  There is an alternate way of
accomplishing this - namely to initialize DPDK before dropping
privileges.  However, this would mean that if DPDK ever grows an uninit
/ reinit function, non-root ovs likely could never use it.
This does not change OvS+DPDK's SELinux requirements.  It still must be
disabled.
Signed-off-by: Aaron Conole <aconole@redhat.com>
Signed-off-by: Russell Bryant <russell@ovn.org>
</s>"," diff --git a/Documentation/intro/install/dpdk.rst b/Documentation/intro/install/dpdk.rst
index b2b91d405..4b0828c7a 100644
--- a/Documentation/intro/install/dpdk.rst
+++ b/Documentation/intro/install/dpdk.rst
@@ -134,6 +134,13 @@ has to be configured with DPDK support (``--with-dpdk``).
 
 Additional information can be found in :doc:`general`.
 
+.. note::
+  If you are running using the Fedora or Red Hat package, the Open vSwitch
+  daemon will run as a non-root user.  This implies that you must have a
+  working IOMMU.  Visit the `RHEL README`__ for additional information.
+
+__ https://github.com/openvswitch/ovs/blob/master/rhel/README.RHEL.rst
+
 Setup
 -----
 
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2020-29651,CVE-2020-29651/e5ff378fc3bd3f7c366dec769a718bdb1ceca1f1,https://github.com/pytest-dev/py/commit/e5ff378fc3bd3f7c366dec769a718bdb1ceca1f1,<s>A denial of service via regular expression in the py.path.svnwc component of py (aka python-py) through 1.9.0 could be used by attackers to cause a compute-time denial of service attack by supplying malicious input to the blame functionality.</s>,"<s>Update CHANGELOG for 1.10.0
</s>"," diff --git a/CHANGELOG.rst b/CHANGELOG.rst
index c74ee69f..90e5905a 100644
--- a/CHANGELOG.rst
+++ b/CHANGELOG.rst
@@ -1,3 +1,10 @@
+1.10.0 (2020-12-12)
+===================
+
+- Fix a regular expression DoS vulnerability in the py.path.svnwc SVN blame functionality (CVE-2020-29651)
+- Update vendored apipkg: 1.4 => 1.5
+- Update vendored iniconfig: 1.0.0 => 1.1.1
+
 1.9.0 (2020-06-24)
 ==================
 
",0.0,,0.0,tfidf
CVE-2020-29651,CVE-2020-29651/4a9017dc6199d2a564b6e4b0aa39d6d8870e4144,https://github.com/pytest-dev/py/commit/4a9017dc6199d2a564b6e4b0aa39d6d8870e4144,<s>A denial of service via regular expression in the py.path.svnwc component of py (aka python-py) through 1.9.0 could be used by attackers to cause a compute-time denial of service attack by supplying malicious input to the blame functionality.</s>,"<s>svnwc: fix regular expression vulnerable to DoS in blame functionality
The subpattern `\d+\s*\S+` is ambiguous which makes the pattern subject
to catastrophic backtracing given a string like `""1"" * 5000`.
SVN blame output seems to always have at least one space between the
revision number and the user name, so the ambiguity can be fixed by
changing the `*` to `+`.
Fixes #256.
</s>"," diff --git a/py/_path/svnwc.py b/py/_path/svnwc.py
index 3138dd85..b5b9d8d5 100644
--- a/py/_path/svnwc.py
+++ b/py/_path/svnwc.py
@@ -396,7 +396,7 @@ class SvnAuth(object):
     def __str__(self):
         return ""<SvnAuth username=%s ...>"" %(self.username,)
 
-rex_blame = re.compile(r'\s*(\d+)\s*(\S+) (.*)')
+rex_blame = re.compile(r'\s*(\d+)\s+(\S+) (.*)')
 
 class SvnWCCommandPath(common.PathBase):
     """""" path implementation offering access/modification to svn working copies.
",1.0,,1.0,tfidf
,,,,,,,,,
CVE-2014-5256,CVE-2014-5256/530af9cb8e700e7596b3ec812bad123c9fa06356,https://github.com/nodejs/node-v0.x-archive/commit/530af9cb8e700e7596b3ec812bad123c9fa06356,"<s>Node.js 0.8 before 0.8.28 and 0.10 before 0.10.30 does not consider the possibility of recursive processing that triggers V8 garbage collection in conjunction with a V8 interrupt, which allows remote attackers to cause a denial of service (memory corruption and application crash) via deep JSON objects whose parsing lets this interrupt mask an overflow of the program stack.</s>","<s>v8: Interrupts must not mask stack overflow.
Backport of https://codereview.chromium.org/339883002
</s>"," diff --git a/deps/v8/src/isolate.h b/deps/v8/src/isolate.h
index b90191d0e..2769ca7c9 100644
--- a/deps/v8/src/isolate.h
+++ b/deps/v8/src/isolate.h
@@ -1392,14 +1392,9 @@ class StackLimitCheck BASE_EMBEDDED {
  public:
   explicit StackLimitCheck(Isolate* isolate) : isolate_(isolate) { }
 
-  bool HasOverflowed() const {
+  inline bool HasOverflowed() const {
     StackGuard* stack_guard = isolate_->stack_guard();
-    // Stack has overflowed in C++ code only if stack pointer exceeds the C++
-    // stack guard and the limits are not set to interrupt values.
-    // TODO(214): Stack overflows are ignored if a interrupt is pending. This
-    // code should probably always use the initial C++ limit.
-    return (reinterpret_cast<uintptr_t>(this) < stack_guard->climit()) &&
-           stack_guard->IsStackOverflow();
+    return reinterpret_cast<uintptr_t>(this) < stack_guard->real_climit();
   }
  private:
   Isolate* isolate_;
",1.0,,1.0,lime
CVE-2014-5256,CVE-2014-5256/a97bdef06d1451c39df3a4a46f85f285c552a9df,https://github.com/nodejs/node-v0.x-archive/commit/a97bdef06d1451c39df3a4a46f85f285c552a9df,"<s>Node.js 0.8 before 0.8.28 and 0.10 before 0.10.30 does not consider the possibility of recursive processing that triggers V8 garbage collection in conjunction with a V8 interrupt, which allows remote attackers to cause a denial of service (memory corruption and application crash) via deep JSON objects whose parsing lets this interrupt mask an overflow of the program stack.</s>","<s>zlib: do not crash on write after close
fix #7767
Signed-off-by: Fedor Indutny <fedor@indutny.com>
</s>"," diff --git a/test/simple/test-zlib-write-after-close.js b/test/simple/test-zlib-write-after-close.js
new file mode 100644
index 000000000..d3f3d4e6b
--- /dev/null
+++ b/test/simple/test-zlib-write-after-close.js
@@ -0,0 +1,40 @@
+// Copyright Joyent, Inc. and other Node contributors.
+//
+// Permission is hereby granted, free of charge, to any person obtaining a
+// copy of this software and associated documentation files (the
+// ""Software""), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to permit
+// persons to whom the Software is furnished to do so, subject to the
+// following conditions:
+//
+// The above copyright notice and this permission notice shall be included
+// in all copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
+// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
+// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
+// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
+// USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+var common = require('../common.js');
+var assert = require('assert');
+var zlib = require('zlib');
+
+var closed = false;
+
+zlib.gzip('hello', function(err, out) {
+  var unzip = zlib.createGunzip();
+  unzip.close(function() {
+    closed = true;
+  });
+  assert.throws(function() {
+    unzip.write(out);
+  });
+});
+
+process.on('exit', function() {
+  assert(closed);
+});
",0.0,,0.0,lime
,,,,,,,,,
CVE-2018-6526,CVE-2018-6526/1c2b9340f29c8878a6a3a52d05ec5d96f7c83f02,https://github.com/mantisbt/mantisbt/commit/1c2b9340f29c8878a6a3a52d05ec5d96f7c83f02,"<s>view_all_bug_page.php in MantisBT 2.10.0-development before 2018-02-02 allows remote attackers to discover the full path via an invalid filter parameter, related to a filter_ensure_valid_filter call in current_user_api.php.</s>","<s>Summary: added bugs ratio and resolved ratio
In summary page, added two columns in by_project, by_enum, by_developer
and by_reporter summary tables:
- resolved bug ratio, i.e. (resolved + closed)/total * 100%
- item ratio, i.e. (item total)/(sum of total bugs).
A new 'summary_header' string variable was added in replacement of the
old 'orct' one, to support the 2 new columns; structure and processing
of this string was changed from the original, it is no longer wrapped in
parenthesis, so it can be parsed with a simple explode() call instead of
relying on preg_split().
This commit  is a squash of rainflood's original work, following
discussion in PR https://github.com/mantisbt/mantisbt/pull/1231,
including some adjustments by dregad.
Note: the change includes refactoring of the original code, to reduce
duplication, remove useless code and simplify it.
Fixes #23627
Signed-off-by: Damien Regad <dregad@mantisbt.org>
</s>"," diff --git a/summary_page.php b/summary_page.php
index f2728bef8..e74f0275c 100644
--- a/summary_page.php
+++ b/summary_page.php
@@ -111,13 +111,13 @@ $t_largest_diff7	= number_format( $t_largest_diff / SECONDS_PER_DAY, 2 );
 $t_total_time		= number_format( $t_total_time / SECONDS_PER_DAY, 2 );
 $t_average_time_	= number_format( $t_average_time / SECONDS_PER_DAY, 2 );
 #
-$t_orct_arr = preg_split( '/[\)\/\(]/', lang_get( 'orct' ), -1, PREG_SPLIT_NO_EMPTY );
+$t_summary_header_arr = explode( '/', lang_get( 'summary_header' ) );
 
-$t_orcttab = '';
-foreach ( $t_orct_arr as $t_orct_s ) {
-	$t_orcttab .= '<th class=""align-right"">';
-	$t_orcttab .= $t_orct_s;
-	$t_orcttab .= '</th>';
+$t_summary_header = '';
+foreach ( $t_summary_header_arr as $t_summary_header_name ) {
+	$t_summary_header .= '<th class=""align-right"">';
+	$t_summary_header .= $t_summary_header_name;
+	$t_summary_header .= '</th>';
 }
 
 layout_page_header( lang_get( 'summary_link' ) );
@@ -146,7 +146,7 @@ print_summary_submenu();
 <!-- LEFT COLUMN -->
 <div class=""col-md-6 col-xs-12"">
 
-	<?php if( 1 < count( $t_project_ids ) ) { ?>
+	<?php if( 0 < count( $t_project_ids ) ) { ?>
 	<!-- BY PROJECT -->
 	<div class=""space-10""></div>
 	<div class=""widget-box table-responsive"">
@@ -154,7 +154,7 @@ print_summary_submenu();
 		<thead>
 			<tr>
 				<th class=""width-35""><?php echo lang_get( 'by_project' ) ?></th>
-				<?php echo $t_orcttab ?>
+				<?php echo $t_summary_header ?>
 			</tr>
 		</thead>
 		<?php summary_print_by_project(); ?>
@@ -169,7 +169,7 @@ print_summary_submenu();
 		<thead>
 			<tr>
 				<th class=""width-35""><?php echo lang_get( 'by_status' ) ?></th>
-				<?php echo $t_orcttab ?>
+				<?php echo $t_summary_header ?>
 			</tr>
 		</thead>
 		<?php summary_print_by_enum( 'status' ) ?>
@@ -183,7 +183,7 @@ print_summary_submenu();
 		<thead>
 			<tr>
 				<th class=""width-35""><?php echo lang_get( 'by_severity' ) ?></th>
-				<?php echo $t_orcttab ?>
+				<?php echo $t_summary_header ?>
 			</tr>
 		</thead>
 		<?php summary_print_by_enum( 'severity' ) ?>
@@ -197,7 +197,7 @@ print_summary_submenu();
 		<thead>
 			<tr>
 				<th class=""width-35""><?php echo lang_get( 'by_category' ) ?></th>
-				<?php echo $t_orcttab ?>
+				<?php echo $t_summary_header ?>
 			</tr>
 		</thead>
 		<?php summary_print_by_category() ?>
@@ -243,7 +243,7 @@ print_summary_submenu();
 		<thead>
 			<tr>
 				<th><?php echo lang_get( 'developer_stats' ) ?></th>
-				<?php echo $t_orcttab ?>
+				<?php echo $t_summary_header ?>
 			</tr>
 		</thead>
 		<?php summary_print_by_developer() ?>
@@ -305,7 +305,7 @@ print_summary_submenu();
 		<thead>
 			<tr>
 				<th class=""width-35""><?php echo lang_get( 'by_resolution' ) ?></th>
-				<?php echo $t_orcttab ?>
+				<?php echo $t_summary_header ?>
 			</tr>
 		</thead>
 		<?php summary_print_by_enum( 'resolution' ) ?>
@@ -319,7 +319,7 @@ print_summary_submenu();
 		<thead>
 			<tr>
 				<th class=""width-35""><?php echo lang_get( 'by_priority' ) ?></th>
-				<?php echo $t_orcttab ?>
+				<?php echo $t_summary_header ?>
 			</tr>
 		</thead>
 		<?php summary_print_by_enum( 'priority' ) ?>
@@ -333,7 +333,7 @@ print_summary_submenu();
 		<thead>
 			<tr>
 				<th class=""width-35""><?php echo lang_get( 'reporter_stats' ) ?></th>
-				<?php echo $t_orcttab ?>
+				<?php echo $t_summary_header ?>
 			</tr>
 		</thead>
 		<?php summary_print_by_reporter() ?>
",0.0,,0.0,lime
CVE-2018-6526,CVE-2018-6526/de686a9e6d8c909485b87ca09c8f912bf83082f2,https://github.com/mantisbt/mantisbt/commit/de686a9e6d8c909485b87ca09c8f912bf83082f2,"<s>view_all_bug_page.php in MantisBT 2.10.0-development before 2018-02-02 allows remote attackers to discover the full path via an invalid filter parameter, related to a filter_ensure_valid_filter call in current_user_api.php.</s>","<s>Fix PHP error - wrong argument type
Initialize $t_filter variable as array() instead of '' in
current_user_get_bug_filter(), to ensure its type is correct when
calling filter_ensure_valid_filter().
Fixes #23921
</s>"," diff --git a/core/current_user_api.php b/core/current_user_api.php
index 85f854b83..e60e00504 100644
--- a/core/current_user_api.php
+++ b/core/current_user_api.php
@@ -238,7 +238,7 @@ function current_user_ensure_unprotected() {
  */
 function current_user_get_bug_filter( $p_project_id = null ) {
 	$f_filter_string = gpc_get_string( 'filter', '' );
-	$t_filter = '';
+	$t_filter = array();
 
 	if( !is_blank( $f_filter_string ) ) {
 		if( is_numeric( $f_filter_string ) ) {
",1.0,,1.0,lime
,,,,,,,,,
CVE-2016-10033,CVE-2016-10033/833c35fe39715c3d01934508987e97af1fbc1ba0,https://github.com/PHPMailer/PHPMailer/commit/833c35fe39715c3d01934508987e97af1fbc1ba0,"<s>The mailSend function in the isMail transport in PHPMailer before 5.2.18 might allow remote attackers to pass extra parameters to the mail command and consequently execute arbitrary code via a \"" (backslash double quote) in a crafted Sender property.</s>","<s>CVE-2016-10033, CVE-2016-10045: More patches, stricter anti-escaping
</s>"," diff --git a/class.phpmailer.php b/class.phpmailer.php
index 1b260677..f0be1783 100644
--- a/class.phpmailer.php
+++ b/class.phpmailer.php
@@ -1364,20 +1364,24 @@ class PHPMailer
      */
     protected function sendmailSend($header, $body)
     {
-        // CVE-2016-10033, CVE-2016-10045: Don't pass -f if characters will be escaped by escapeshellcmd when popen is called due to safe mode.
-        if (!empty($this->Sender) || ini_get('safe_mode')) {
+        // CVE-2016-10033, CVE-2016-10045: Don't pass -f if characters will be escaped.
+        if (!empty($this->Sender) and self::isShellSafe($this->Sender)) {
             if ($this->Mailer == 'qmail') {
-                $sendmail = sprintf('%s -f%s', escapeshellcmd($this->Sendmail), escapeshellarg($this->Sender));
+                $sendmailFmt = '%s -f%s';
             } else {
-                $sendmail = sprintf('%s -oi -f%s -t', escapeshellcmd($this->Sendmail), escapeshellarg($this->Sender));
+                $sendmailFmt = '%s -oi -f%s -t';
             }
         } else {
             if ($this->Mailer == 'qmail') {
-                $sendmail = sprintf('%s', escapeshellcmd($this->Sendmail));
+                $sendmailFmt = '%s';
             } else {
-                $sendmail = sprintf('%s -oi -t', escapeshellcmd($this->Sendmail));
+                $sendmailFmt = '%s -oi -t';
             }
         }
+
+        // TODO: If possible, this should be changed to escapeshellarg.  Needs thorough testing.
+        $sendmail = sprintf($sendmailFmt, escapeshellcmd($this->Sendmail), $this->Sender);
+
         if ($this->SingleTo) {
             foreach ($this->SingleToArray as $toAddr) {
                 if (!@$mail = popen($sendmail, 'w')) {
@@ -1423,6 +1427,38 @@ class PHPMailer
         return true;
     }
 
+    /**
+     * Fix CVE-2016-10033 and CVE-2016-10045 by disallowing potentially unsafe shell characters.
+     *
+     * Note that escapeshellarg and escapeshellcmd are inadequate for our purposes, especially on Windows.
+     * @param string $string The string to be validated
+     * @see https://github.com/PHPMailer/PHPMailer/issues/924 CVE-2016-10045 bug report
+     * @access protected
+     * @return boolean
+     */
+    protected static function isShellSafe($string)
+    {
+        // Future-proof
+        if (escapeshellcmd($string) !== $string or !in_array(escapeshellarg($string), array(""'$string'"", ""\""$string\""""))) {
+            return false;
+        }
+
+        $length = strlen($string);
+
+        for ($i = 0; $i < $length; $i++) {
+            $c = $string[$i];
+
+            // All other characters have a special meaning in at least one common shell, including = and +.
+            // Full stop (.) has a special meaning in cmd.exe, but its impact should be negligible here.
+            // Note that this does permit non-Latin alphanumeric characters based on the current locale.
+            if (!ctype_alnum($c) && strpos('@_-.', $c) === false) {
+                return false;
+            }
+        }
+
+        return true;
+    }
+
     /**
      * Send mail using the PHP mail() function.
      * @param string $header The message headers
@@ -1444,8 +1480,8 @@ class PHPMailer
         //This sets the SMTP envelope sender which gets turned into a return-path header by the receiver
         if (!empty($this->Sender) and $this->validateAddress($this->Sender)) {
             // CVE-2016-10033, CVE-2016-10045: Don't pass -f if characters will be escaped.
-            if (escapeshellcmd($this->Sender) === $this->Sender && in_array(escapeshellarg($this->Sender), array(""'$this->Sender'"", ""\""$this->Sender\""""))) {
-                $params = sprintf('-f%s', escapeshellarg($this->Sender));
+            if (self::isShellSafe($this->Sender)) {
+                $params = sprintf('-f%s', $this->Sender);
             }
         }
         if (!empty($this->Sender) and !ini_get('safe_mode') and $this->validateAddress($this->Sender)) {
",1.0,,1.0,tfidf
CVE-2016-10033,CVE-2016-10033/efde5edb3da8e1d257e030e3c2d922c4de6e5d09,https://github.com/PHPMailer/PHPMailer/commit/efde5edb3da8e1d257e030e3c2d922c4de6e5d09,"<s>The mailSend function in the isMail transport in PHPMailer before 5.2.18 might allow remote attackers to pass extra parameters to the mail command and consequently execute arbitrary code via a \"" (backslash double quote) in a crafted Sender property.</s>","<s>Fixed link to Security (#931)

</s>"," diff --git a/README.md b/README.md
index 4b16ea2c..c865a519 100644
--- a/README.md
+++ b/README.md
@@ -147,7 +147,7 @@ PHPMailer versions prior to 5.2.20 (released December 28th 2016) are vulnerable
 
 PHPMailer versions prior to 5.2.18 (released December 2016) are vulnerable to [CVE-2016-10033](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-10033) a critical remote code execution vulnerability, responsibly reported by [Dawid Golunski](http://legalhackers.com/advisories/PHPMailer-Exploit-Remote-Code-Exec-CVE-2016-10033-Vuln.html).
 
-See [SECURITY](https://github.com/PHPMailer/PHPMailer/tree/master/SECURITY) for more detail on security issues.
+See [SECURITY](https://github.com/PHPMailer/PHPMailer/tree/master/SECURITY.md) for more detail on security issues.
 
 ## Contributing
 
",0.0,,0.0,tfidf
