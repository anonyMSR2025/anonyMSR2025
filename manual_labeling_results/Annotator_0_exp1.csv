cve,post_id,commit_url,cve_desc_text,commit_msg_text,code_text,is_patch,"helpfulness (1 - 3, 3 is most helpful)",true_label,method
CVE-2017-5609,CVE-2017-5609/c62d667287f2d76c81e03a740a581eb3c51249b6,https://github.com/s9y/Serendipity/commit/c62d667287f2d76c81e03a740a581eb3c51249b6,<s>SQL injection vulnerability in include/functions_entries.inc.php in Serendipity 2.0.5 allows remote authenticated users to execute arbitrary SQL commands via the cat parameter.</s>,"<s>  * [Security] Fix missing integer casting for inserting new categories
    (thanks to cdxy)
</s>"," diff --git a/include/functions_entries.inc.php b/include/functions_entries.inc.php
index 45453c80..59bdf81a 100644
--- a/include/functions_entries.inc.php
+++ b/include/functions_entries.inc.php
@@ -1523,7 +1523,7 @@ function serendipity_updertEntry($entry) {
         if (is_array($categories)) {
             serendipity_db_query(""DELETE FROM {$serendipity['dbPrefix']}entrycat WHERE entryid={$entry['id']}"");
             foreach ($categories as $cat) {
-                serendipity_db_query(""INSERT INTO {$serendipity['dbPrefix']}entrycat (entryid, categoryid) VALUES ({$entry['id']}, {$cat})"");
+                serendipity_db_query(""INSERT INTO {$serendipity['dbPrefix']}entrycat (entryid, categoryid) VALUES ({$entry['id']}, "" . (int)$cat . "")"");
             }
         } elseif ($had_categories) {
             // This case actually only happens if an existing entry is edited, and its category assignments are all removed.
",1.0,1.0,1.0,lime
CVE-2017-5609,CVE-2017-5609/0c8416f5dff8a5c6c8a765b0ee6ee618c920bc36,https://github.com/s9y/Serendipity/commit/0c8416f5dff8a5c6c8a765b0ee6ee618c920bc36,<s>SQL injection vulnerability in include/functions_entries.inc.php in Serendipity 2.0.5 allows remote authenticated users to execute arbitrary SQL commands via the cat parameter.</s>,"<s>Allow setting a default category.
Needs some testing, I am not sure how to solve the case now where ""no category"" shall be used. It will always fall back to the default category.
Probably if someone uses a default category, that's the intended behaviour?
</s>"," diff --git a/include/functions_entries.inc.php b/include/functions_entries.inc.php
index f68d2339..45453c80 100644
--- a/include/functions_entries.inc.php
+++ b/include/functions_entries.inc.php
@@ -627,7 +627,7 @@ function &serendipity_fetchEntryProperties($id) {
  * @param   string  The ACL artifact condition. If set to ""write"" only categories will be shown that the author can write to. If set to ""read"", only categories will be show that the author can read or write to.
  * @return  array   Returns the array of categories
  */
-function &serendipity_fetchCategories($authorid = null, $name = null, $order = null, $artifact_mode = 'write') {
+function &serendipity_fetchCategories($authorid = null, $name = null, $order = null, $artifact_mode = 'write', $flat = false) {
     global $serendipity;
 
     if ($name === null) {
@@ -716,6 +716,16 @@ function &serendipity_fetchCategories($authorid = null, $name = null, $order = n
     $ret =& serendipity_db_query($querystring);
     if (is_string($ret)) {
         echo ""Query failed: $ret"";
+    } else {
+        if ($flat) {
+          $cats = serendipity_walkRecursive($ret, 'categoryid', 'parentid', VIEWMODE_THREADED);
+          $flat_cats = array();
+          $flat_cats[0] = NO_CATEGORY;
+          foreach($cats AS $catidx => $catdata) {
+              $flat_cats[$catdata['categoryid']] = str_repeat('&nbsp;', $catdata['depth']*2) . serendipity_specialchars($catdata['category_name']);
+          }
+          return $flat_cats;
+        }
     }
     return $ret;
 }
",0.0,,0.0,lime
,,,,,,,,,
CVE-2022-21189,CVE-2022-21189/ea55dcc5f9b79663f7d4e72f45cd033e3fb7ae52,https://github.com/dexie/Dexie.js/commit/ea55dcc5f9b79663f7d4e72f45cd033e3fb7ae52,"<s>The package dexie before 3.2.2, from 4.0.0-alpha.1 and before 4.0.0-alpha.3 are vulnerable to Prototype Pollution in the Dexie.setByKeyPath(obj, keyPath, value) function which does not properly check the keys being set (like __proto__ or constructor). This can allow an attacker to add/modify properties of the Object.prototype leading to prototype pollution vulnerability. **Note:** This vulnerability can occur in multiple ways, for example when modifying a collection with untrusted user input.</s>","<s>Build output
</s>"," diff --git a/addons/Dexie.Syncable/dist/dexie-syncable.min.js b/addons/Dexie.Syncable/dist/dexie-syncable.min.js
new file mode 100644
index 00000000..9221e5c2
--- /dev/null
+++ b/addons/Dexie.Syncable/dist/dexie-syncable.min.js
@@ -0,0 +1 @@
+(function(e,n){""object""==typeof exports&&""undefined""!=typeof module?module.exports=n(require(""dexie""),require(""dexie-observable"")):""function""==typeof define&&define.amd?define([""dexie"",""dexie-observable""],n):((e=""undefined""!=typeof globalThis?globalThis:e||self).Dexie=e.Dexie||{},e.Dexie.Syncable=n(e.Dexie))})(this,function(e){""use strict"";function n(e){return e&&""object""==typeof e&&""default""in e?e:{default:e}}var R=n(e),s=R.default.Promise;function d(e){return n.prototype.save=function(){return R.default.vip(function(){return e.save()})},n;function n(e,n){this.nodeID=e,n&&R.default.extend(this,n)}}var y=1,h=2,u=3;function O(c){return function(e){var i={};e.forEach(function(e){var n;i.hasOwnProperty(e.table)||(i[e.table]=((n={})[y]=[],n[u]=[],n[h]=[],n)),i[e.table][e.type].push(e)});var n=Object.keys(i),t=n.map(function(e){return c.table(e)});return c.transaction(""rw"",t,function(){n.forEach(function(e){var n=c.table(e),t=!n.schema.primKey.keyPath,r=i[e][y],o=i[e][u],a=i[e][h];0<r.length&&n.bulkPut(r.map(function(e){return e.obj}),t?r.map(function(e){return e.key}):void 0),0<a.length&&function(n,t){var e=t.map(function(e){return e.key}),r={};n.where("":id"").anyOf(e).raw().each(function(e,n){r[n.primaryKey+""""]=e}).then(function(){var e=t.filter(function(e){return r.hasOwnProperty(e.key+"""")}).map(function(n){var t=r[n.key+""""];return Object.keys(n.mods).forEach(function(e){R.default.setByKeyPath(t,e,n.mods[e])}),t});return n.bulkPut(e)})}(n,a),0<o.length&&n.bulkDelete(o.map(function(e){return e.key}))})})}}function v(e){if(0===e.remoteBaseRevisions.length)return{maxClientRevision:1/0,remoteBaseRevision:null};for(var n=e.remoteBaseRevisions.length-1;0<=n;--n)if(e.myRevision>=e.remoteBaseRevisions[n].local)return{maxClientRevision:n===e.remoteBaseRevisions.length-1?1/0:e.remoteBaseRevisions[n+1].local,remoteBaseRevision:e.remoteBaseRevisions[n].remote};return{maxClientRevision:e.remoteBaseRevisions[0].local,remoteBaseRevision:null}}function b(e,n){switch(e.type){case y:switch(n.type){case y:return n;case h:return function(e,n){var t=R.default.deepClone(e);return Object.keys(n.mods).forEach(function(e){R.default.setByKeyPath(t.obj,e,n.mods[e])}),t}(e,n);case u:return n}break;case h:switch(n.type){case y:return n;case h:return function(e,r){var o=R.default.deepClone(e);return Object.keys(r.mods).forEach(function(n){var t=!1;Object.keys(e.mods).filter(function(e){return 0===n.indexOf(e+""."")}).forEach(function(e){R.default.setByKeyPath(o.mods[e],n.substr(e.length+1),r.mods[n]),t=!0}),t||(o.mods[n]=r.mods[n]),Object.keys(e.mods).filter(function(e){return 0===e.indexOf(n+""."")}).forEach(function(e){delete o.mods[e]})}),o}(e,n);case u:return n}break;case u:switch(n.type){case y:return n;case h:case u:return e}}}function o(s,u,e){var l=e;return function(e,r){var n=function(u,l,f){return function(e,n,t,r){var a={},i=0,o=!1,c=l.id,s=e;return u.transaction(""r"",u._changes,function(){return u._changes.where(""rev"").between(e,t,!1,!0).until(function(){if(i===n)return o=!0}).each(function(e){if(s=e.rev,e.source!==c){var n={type:e.type,table:e.table,key:e.key};e.type===y?n.obj=e.obj:e.type===h&&(n.mods=e.mods);var t=e.table+"":""+e.key,r=a[t];if(r){var o=b(r,n);a[t]=o}else a[t]=n,++i}})}).then(function(){var e=Object.keys(a).map(function(e){return a[e]});return f.hasMoreToGive=o,r(e,o,{myRevision:s})})}}(s,e,u),t=function(i,c,s,u,l,f){return function e(t,o,n){var a=!1;return n.until(function(){if(o.length===s)return a=!0}).each(function(e,n){o.push({type:y,table:t.currentTable,key:n.key,obj:n.value}),t.currentKey=n.key}).then(function(){if(a)return l.hasMoreToGive=!0,f(o,null,!0,{dbUploadState:t});if(0!==t.tablesToUpload.length)return t.currentTable=t.tablesToUpload.shift(),e(t,o,i.table(t.currentTable).orderBy("":id""));var r=v(c);return u(t.localBaseRevision,s-o.length,r.maxClientRevision,function(e,n,t){return o=o.concat(e),t.dbUploadState=null,f(o,r.remoteBaseRevision,n,t)})})}}(s,e,l,n,u,r);if(0<=e.myRevision){var o=v(e);return n(e.myRevision,l,o.maxClientRevision,function(e,n,t){return r(e,o.remoteBaseRevision,n,t)})}if(null===e.dbUploadState){var a=s.tables.filter(function(e){return e.schema.observable}).map(function(e){return e.name});if(0===a.length)return R.default.Promise.resolve(r([],null,!1,{}));var i={tablesToUpload:a,currentTable:a.shift(),currentKey:null};return s._changes.orderBy(""rev"").last(function(e){i.localBaseRevision=e&&e.rev||0;var n=s.table(i.currentTable).orderBy("":id"");return t(i,[],n)})}if(e.dbUploadState.currentKey){var c=s.table(e.dbUploadState.currentTable).where("":id"").above(e.dbUploadState.currentKey);return t(R.default.deepClone(e.dbUploadState),[],c)}c=s.table(i.currentTable).orderBy("":id"");return t(R.default.deepClone(e.dbUploadState),[],c)}}var w={ERROR:-1,OFFLINE:0,CONNECTING:1,ONLINE:2,SYNCING:3,ERROR_WILL_RETRY:4},E=R.default.Promise;function p(b,p,a,m,g){var i=function(a){re",0.0,,0.0,lime
CVE-2022-21189,CVE-2022-21189/1d655a69b9f28c3af6fae10cf5c61df387dc689b,https://github.com/dexie/Dexie.js/commit/1d655a69b9f28c3af6fae10cf5c61df387dc689b,"<s>The package dexie before 3.2.2, from 4.0.0-alpha.1 and before 4.0.0-alpha.3 are vulnerable to Prototype Pollution in the Dexie.setByKeyPath(obj, keyPath, value) function which does not properly check the keys being set (like __proto__ or constructor). This can allow an attacker to add/modify properties of the Object.prototype leading to prototype pollution vulnerability. **Note:** This vulnerability can occur in multiple ways, for example when modifying a collection with untrusted user input.</s>","<s>Prohibit prototype pollution
</s>"," diff --git a/src/functions/utils.ts b/src/functions/utils.ts
index da97860c..8485c933 100644
--- a/src/functions/utils.ts
+++ b/src/functions/utils.ts
@@ -151,7 +151,7 @@ export function setByKeyPath(obj, keyPath, value) {
                 } else obj[currentKeyPath] = value;
             else {
                 var innerObj = obj[currentKeyPath];
-                if (!innerObj) innerObj = (obj[currentKeyPath] = {});
+                if (!innerObj || !hasOwn(obj, currentKeyPath)) innerObj = (obj[currentKeyPath] = {});
                 setByKeyPath(innerObj, remainingKeyPath, value);
             }
         } else {
",1.0,3.0,1.0,lime
,,,,,,,,,
CVE-2019-1010294,CVE-2019-1010294/7e768f8a473409215fe3fff8f6e31f8a3a0103c6,https://github.com/OP-TEE/optee_os/commit/7e768f8a473409215fe3fff8f6e31f8a3a0103c6,<s>Linaro/OP-TEE OP-TEE 3.3.0 and earlier is affected by: Rounding error. The impact is: Potentially leaking code and/or data from previous Trusted Application. The component is: optee_os. The fixed version is: 3.4.0 and later.</s>,"<s>core: clear the entire TA area
Previously we cleared (memset to zero) the size corresponding to code
and data segments, however the allocation for the TA is made on the
granularity of the memory pool, meaning that we did not clear all memory
and because of that we could potentially leak code and data of a
previous loaded TA.
Fixes: OP-TEE-2018-0006: ""Potential disclosure of previously loaded TA
code and data""
Signed-off-by: Joakim Bech <joakim.bech@linaro.org>
Tested-by: Joakim Bech <joakim.bech@linaro.org> (QEMU v7, v8)
Suggested-by: Jens Wiklander <jens.wiklander@linaro.org>
Reviewed-by: Jens Wiklander <jens.wiklander@linaro.org>
Reported-by: Riscure <inforequest@riscure.com>
Reported-by: Alyssa Milburn <a.a.milburn@vu.nl>
Acked-by: Etienne Carriere <etienne.carriere@linaro.org>
</s>"," diff --git a/core/arch/arm/kernel/user_ta.c b/core/arch/arm/kernel/user_ta.c
index 808cffd43..e70061e36 100644
--- a/core/arch/arm/kernel/user_ta.c
+++ b/core/arch/arm/kernel/user_ta.c
@@ -197,8 +197,12 @@ static struct mobj *alloc_ta_mem(size_t size)
 #else
 	struct mobj *mobj = mobj_mm_alloc(mobj_sec_ddr, size, &tee_mm_sec_ddr);
 
-	if (mobj)
-		memset(mobj_get_va(mobj, 0), 0, size);
+	if (mobj) {
+		size_t granularity = BIT(tee_mm_sec_ddr.shift);
+
+		/* Round up to allocation granularity size */
+		memset(mobj_get_va(mobj, 0), 0, ROUNDUP(size, granularity));
+	}
 	return mobj;
 #endif
 }
",1.0,2.0,1.0,tfidf
CVE-2019-1010294,CVE-2019-1010294/0b107f4c8908cd04318ed4bccac0b3ecbeae587e,https://github.com/OP-TEE/optee_os/commit/0b107f4c8908cd04318ed4bccac0b3ecbeae587e,<s>Linaro/OP-TEE OP-TEE 3.3.0 and earlier is affected by: Rounding error. The impact is: Potentially leaking code and/or data from previous Trusted Application. The component is: optee_os. The fixed version is: 3.4.0 and later.</s>,"<s>core: arm64: pager: make sure __thread_enter_user_mode is unpaged
__thread_enter_user_mode() cannot be paged out, because the pager cannot
be invoked to restore any faulting code page after SP has been switched to
use SP_EL1. At this point, a synchronous exception would take the CPU to
the 0x200 offset in the exception vector, which corresponds to
[workaround_]el1_sync_sp1 and is an error-catching infinite loop. This
explains the behavior described in [1].
Add the requisite KEEP_PAGER so that the function is kept in the unpaged
area.
Fixes: [1] https://github.com/OP-TEE/optee_os/issues/2684
Signed-off-by: Jerome Forissier <jerome.forissier@linaro.org>
Reviewed-by: Joakim Bech <joakim.bech@linaro.org>
Reviewed-by: Jens Wiklander <jens.wiklander@linaro.org>
</s>"," diff --git a/core/arch/arm/kernel/thread_a64.S b/core/arch/arm/kernel/thread_a64.S
index c9e284f72..c38f280d6 100644
--- a/core/arch/arm/kernel/thread_a64.S
+++ b/core/arch/arm/kernel/thread_a64.S
@@ -317,6 +317,7 @@ FUNC __thread_enter_user_mode , :
 	store_xregs sp, THREAD_CORE_LOCAL_X0, 0, 1
 	b eret_to_el0
 END_FUNC __thread_enter_user_mode
+KEEP_PAGER __thread_enter_user_mode
 
 /*
  * void thread_unwind_user_mode(uint32_t ret, uint32_t exit_status0,
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2022-24823,CVE-2022-24823/185f8b2756a36aaa4f973f1a2a025e7d981823f1,https://github.com/netty/netty/commit/185f8b2756a36aaa4f973f1a2a025e7d981823f1,"<s>Netty is an open-source, asynchronous event-driven network application framework. The package `io.netty:netty-codec-http` prior to version 4.1.77.Final contains an insufficient fix for CVE-2021-21290. When Netty's multipart decoders are used local information disclosure can occur via the local system temporary directory if temporary storing uploads on the disk is enabled. This only impacts applications running on Java version 6 and lower. Additionally, this vulnerability impacts code running on Unix-like systems, and very old versions of Mac OSX and Windows as they all share the system temporary directory between all users. Version 4.1.77.Final contains a patch for this vulnerability. As a workaround, specify one's own `java.io.tmpdir` when starting the JVM or use DefaultHttpDataFactory.setBaseDir(...) to set the directory to something that is only readable by the current user.</s>","<s>Merge pull request from GHSA-269q-hmxg-m83q
* Correctly modify permission for temporary files when using Java 6 in all cases
Motivation:
[GHSA-5mcr-gq6c-3hq2](https://github.com/netty/netty/security/advisories/GHSA-5mcr-gq6c-3hq2) did not correctly fix all cases for temprory files when running on java 6.
Modifications:
- Add correctly adjust perms in all cases
- Add logging if adjusting of permissions fails
Result:
Fixes https://github.com/netty/netty/security/advisories/GHSA-269q-hmxg-m83q
* Throw on failure
</s>"," diff --git a/common/src/main/java/io/netty/util/internal/PlatformDependent.java b/common/src/main/java/io/netty/util/internal/PlatformDependent.java
index 8532046366..00310e585e 100644
--- a/common/src/main/java/io/netty/util/internal/PlatformDependent.java
+++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java
@@ -1447,13 +1447,20 @@ public final class PlatformDependent {
             }
             return Files.createTempFile(directory.toPath(), prefix, suffix).toFile();
         }
+        final File file;
         if (directory == null) {
-            return File.createTempFile(prefix, suffix);
+            file = File.createTempFile(prefix, suffix);
+        } else {
+            file = File.createTempFile(prefix, suffix, directory);
         }
-        File file = File.createTempFile(prefix, suffix, directory);
+
         // Try to adjust the perms, if this fails there is not much else we can do...
-        file.setReadable(false, false);
-        file.setReadable(true, true);
+        if (!file.setReadable(false, false)) {
+            throw new IOException(""Failed to set permissions on temporary file "" + file);
+        }
+        if (!file.setReadable(true, true)) {
+            throw new IOException(""Failed to set permissions on temporary file "" + file);
+        }
         return file;
     }
 
",1.0,2.0,1.0,tfidf
CVE-2022-24823,CVE-2022-24823/7be44fba673147ff881903bb994fbdbd112f19d5,https://github.com/netty/netty/commit/7be44fba673147ff881903bb994fbdbd112f19d5,"<s>Netty is an open-source, asynchronous event-driven network application framework. The package `io.netty:netty-codec-http` prior to version 4.1.77.Final contains an insufficient fix for CVE-2021-21290. When Netty's multipart decoders are used local information disclosure can occur via the local system temporary directory if temporary storing uploads on the disk is enabled. This only impacts applications running on Java version 6 and lower. Additionally, this vulnerability impacts code running on Unix-like systems, and very old versions of Mac OSX and Windows as they all share the system temporary directory between all users. Version 4.1.77.Final contains a patch for this vulnerability. As a workaround, specify one's own `java.io.tmpdir` when starting the JVM or use DefaultHttpDataFactory.setBaseDir(...) to set the directory to something that is only readable by the current user.</s>","<s>Update transport-native-epoll compile flags (#12272) (#12313)
Motivation:
Loading of the native epoll transport might segfault the JVM if musl is used and no glibc-compat is installed:
Modifications:
- Move libraries to LIBS where they should be, avoiding need for
  -Wl,--no-as-needed.
- Use -O2 instead of -O3; there are no tight loops so -O3 just increases
  code size for no benefit.
- Add -pipe for faster compilation.
- Add -D_FORTIFY_SOURCE=2 and -Wl,-z,relro for security.
- Add -Wl,-z,now for security and to improve musl
  compatibility. musl does not implement __strdup and __strndup which
  old glibc aliases strdup and strndup to, but OpenJDK loads libraries
  with RTLD_LAZY, so this is not discovered until too late. See
  https://github.com/grpc/grpc-java/issues/8751#issuecomment-1086963256
  for more information.
- Add -ffunction-sections -fdata-sections -Wl,--gc-sections to reduce
  output size and avoid linking librt when not really needed (only used
  for kqueue)
Result:
""Fixes"" #11701 by making the native library load fail.
Co-authored-by: Alex Xu <351006+Hello71@users.noreply.github.com>
</s>"," diff --git a/transport-native-epoll/pom.xml b/transport-native-epoll/pom.xml
index d2768a4d3d..cad13b4b77 100644
--- a/transport-native-epoll/pom.xml
+++ b/transport-native-epoll/pom.xml
@@ -34,8 +34,9 @@
     <unix.common.lib.dir>${project.build.directory}/unix-common-lib</unix.common.lib.dir>
     <unix.common.lib.unpacked.dir>${unix.common.lib.dir}/META-INF/native/lib</unix.common.lib.unpacked.dir>
     <unix.common.include.unpacked.dir>${unix.common.lib.dir}/META-INF/native/include</unix.common.include.unpacked.dir>
-    <jni.compiler.args.cflags>CFLAGS=-O3 -Werror -fno-omit-frame-pointer -Wunused-variable -fvisibility=hidden -I${unix.common.include.unpacked.dir}</jni.compiler.args.cflags>
-    <jni.compiler.args.ldflags>LDFLAGS=-L${unix.common.lib.unpacked.dir} -Wl,--no-as-needed -lrt -ldl -Wl,--whole-archive -l${unix.common.lib.name} -Wl,--no-whole-archive</jni.compiler.args.ldflags>
+    <jni.compiler.args.cflags>CFLAGS=-O2 -pipe -Werror -fno-omit-frame-pointer -Wunused-variable -fvisibility=hidden -D_FORTIFY_SOURCE=2 -ffunction-sections -fdata-sections -I${unix.common.include.unpacked.dir}</jni.compiler.args.cflags>
+    <jni.compiler.args.ldflags>LDFLAGS=-Wl,-z,relro -Wl,-z,now -Wl,--as-needed -Wl,--gc-sections -L${unix.common.lib.unpacked.dir}</jni.compiler.args.ldflags>
+    <jni.compiler.args.libs>LIBS=-Wl,--whole-archive -l${unix.common.lib.name} -Wl,--no-whole-archive -ldl</jni.compiler.args.libs>
     <nativeSourceDirectory>${project.basedir}/src/main/c</nativeSourceDirectory>
     <skipTests>true</skipTests>
     <japicmp.skip>true</japicmp.skip>
@@ -157,6 +158,7 @@
                   <platform>.</platform>
                   <configureArgs>
                     <arg>${jni.compiler.args.ldflags}</arg>
+                    <arg>${jni.compiler.args.libs}</arg>
                     <arg>${jni.compiler.args.cflags}</arg>
                     <configureArg>--libdir=${project.build.directory}/native-build/target/lib</configureArg>
                   </configureArgs>
@@ -306,6 +308,7 @@
                   <platform>.</platform>
                   <configureArgs>
                     <arg>${jni.compiler.args.ldflags}</arg>
+                    <arg>${jni.compiler.args.libs}</arg>
                     <arg>${jni.compiler.args.cflags}</arg>
                     <configureArg>--libdir=${project.build.directory}/native-build/target/lib</configureArg>
                     <configureArg>--host=aarch64-linux-gnu</configureArg>
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2019-12243,CVE-2019-12243/1653747e798fa32b5fe6ced74cd2e931167ff7f3,https://github.com/istio/istio/commit/1653747e798fa32b5fe6ced74cd2e931167ff7f3,<s>Istio 1.1.x through 1.1.6 has Incorrect Access Control.</s>,"<s>Add application port option for gateways (#14059)
* Add application ports for gateways
* Check all ports for readiness
</s>"," diff --git a/pilot/cmd/pilot-agent/status/util/listeners.go b/pilot/cmd/pilot-agent/status/util/listeners.go
index be2d4dcf40..23c8e6ddcf 100644
--- a/pilot/cmd/pilot-agent/status/util/listeners.go
+++ b/pilot/cmd/pilot-agent/status/util/listeners.go
@@ -21,6 +21,8 @@ import (
 	""strings""
 
 	multierror ""github.com/hashicorp/go-multierror""
+
+	""istio.io/istio/pilot/pkg/model""
 )
 
 var (
@@ -28,7 +30,7 @@ var (
 )
 
 // GetInboundListeningPorts returns a map of inbound ports for which Envoy has active listeners.
-func GetInboundListeningPorts(adminPort uint16) (map[uint16]bool, string, error) {
+func GetInboundListeningPorts(adminPort uint16, nodeType model.NodeType) (map[uint16]bool, string, error) {
 	buf, err := doHTTPGet(fmt.Sprintf(""http://127.0.0.1:%d/listeners"", adminPort))
 	if err != nil {
 		return nil, """", multierror.Prefix(err, ""failed retrieving Envoy listeners:"")
@@ -50,8 +52,17 @@ func GetInboundListeningPorts(adminPort uint16) (map[uint16]bool, string, error)
 		}
 		// Before checking if listener is local, removing port portion of the address
 		ipAddr := strings.TrimSuffix(l, "":""+ipAddrParts[len(ipAddrParts)-1])
-		if !isLocalListener(ipAddr) {
-			continue
+
+		switch nodeType {
+		// For gateways, we will not listen on a local host, instead on 0.0.0.0
+		case model.Router:
+			if ipAddr != ""0.0.0.0"" {
+				continue
+			}
+		default:
+			if !isLocalListener(ipAddr) {
+				continue
+			}
 		}
 
 		portStr := ipAddrParts[len(ipAddrParts)-1]
",0.0,,0.0,tfidf
CVE-2019-12243,CVE-2019-12243/eec7a74473deee98cad0a996f41a32a47dd453c2,https://github.com/istio/istio/commit/eec7a74473deee98cad0a996f41a32a47dd453c2,<s>Istio 1.1.x through 1.1.6 has Incorrect Access Control.</s>,"<s>fix 13868 (#13894)
Signed-off-by: Kuat Yessenov <kuat@google.com>
</s>"," diff --git a/mixer/test/client/pilotplugin_tcp/pilotplugin_tcp_test.go b/mixer/test/client/pilotplugin_tcp/pilotplugin_tcp_test.go
index 53bf913caf..48f8ea9c14 100644
--- a/mixer/test/client/pilotplugin_tcp/pilotplugin_tcp_test.go
+++ b/mixer/test/client/pilotplugin_tcp/pilotplugin_tcp_test.go
@@ -139,7 +139,7 @@ func TestPilotPluginTCP(t *testing.T) {
 	}
 
 	snapshots := cache.NewSnapshotCache(true, mock{}, nil)
-	snapshots.SetSnapshot(id, makeSnapshot(s, t))
+	snapshots.SetSnapshot(id, makeSnapshot(s, t, model.SidecarProxy))
 	server := xds.NewServer(snapshots, nil)
 	discovery.RegisterAggregatedDiscoveryServiceServer(grpcServer, server)
 	go func() {
@@ -155,8 +155,14 @@ func TestPilotPluginTCP(t *testing.T) {
 	defer s.TearDown()
 
 	s.WaitEnvoyReady()
+	if _, _, err := env.HTTPGet(fmt.Sprintf(""http://localhost:%d/echo"", s.Ports().ClientProxyPort)); err != nil {
+		t.Errorf(""Failed in request: %v"", err)
+	}
+	s.VerifyCheck(""tcp-inbound"", checkAttributesOkInbound)
 
-	// Issues a GET echo request with 0 size body
+	// force a client-side policy check at ingress node type
+	snapshots.SetSnapshot(id, makeSnapshot(s, t, model.Router))
+	s.WaitEnvoyReady()
 	if _, _, err := env.HTTPGet(fmt.Sprintf(""http://localhost:%d/echo"", s.Ports().ClientProxyPort)); err != nil {
 		t.Errorf(""Failed in request: %v"", err)
 	}
@@ -201,9 +207,8 @@ var (
 	}
 	mesh = &model.Environment{
 		Mesh: &meshconfig.MeshConfig{
-			MixerCheckServer:            ""mixer_server:9091"",
-			MixerReportServer:           ""mixer_server:9091"",
-			EnableClientSidePolicyCheck: true,
+			MixerCheckServer:  ""mixer_server:9091"",
+			MixerReportServer: ""mixer_server:9091"",
 		},
 		ServiceDiscovery: mock{},
 	}
@@ -212,26 +217,6 @@ var (
 			model.Hostname(""svc.ns3""): &svc,
 		},
 	}
-	serverParams = plugin.InputParams{
-		ListenerProtocol: plugin.ListenerProtocolTCP,
-		Env:              mesh,
-		Node: &model.Proxy{
-			ID:   ""pod1.ns1"",
-			Type: model.SidecarProxy,
-		},
-		ServiceInstance: &model.ServiceInstance{Service: &svc},
-		Push:            &pushContext,
-	}
-	clientParams = plugin.InputParams{
-		ListenerProtocol: plugin.ListenerProtocolTCP,
-		Env:              mesh,
-		Node: &model.Proxy{
-			ID:   ""pod2.ns2"",
-			Type: model.SidecarProxy,
-		},
-		Service: &svc,
-		Push:    &pushContext,
-	}
 )
 
 func makeListener(port uint16, cluster string) *v2.Listener {
@@ -252,12 +237,33 @@ func makeListener(port uint16, cluster string) *v2.Listener {
 	}
 }
 
-func makeSnapshot(s *env.TestSetup, t *testing.T) cache.Snapshot {
+func makeSnapshot(s *env.TestSetup, t *testing.T, node model.NodeType) cache.Snapshot {
 	clientListener := makeListener(s.Ports().ClientProxyPort, ""outbound|||svc.ns3"")
 	serverListener := makeListener(s.Ports().ServerProxyPort, ""inbound|||backend"")
 
 	p := mixer.NewPlugin()
 
+	serverParams := plugin.InputParams{
+		ListenerProtocol: plugin.ListenerProtocolTCP,
+		Env:              mesh,
+		Node: &model.Proxy{
+			ID:   ""pod1.ns1"",
+			Type: node,
+		},
+		ServiceInstance: &model.ServiceInstance{Service: &svc},
+		Push:            &pushContext,
+	}
+	clientParams := plugin.InputParams{
+		ListenerProtocol: plugin.ListenerProtocolTCP,
+		Env:              mesh,
+		Node: &model.Proxy{
+			ID:   ""pod2.ns2"",
+			Type: node,
+		},
+		Service: &svc,
+		Push:    &pushContext,
+	}
+
 	serverMutable := plugin.MutableObjects{Listener: serverListener, FilterChains: []plugin.FilterChain{{}}}
 	if err := p.OnInboundListener(&serverParams, &serverMutable); err != nil {
 		t.Error(err)
@@ -271,6 +277,6 @@ func makeSnapshot(s *env.TestSetup, t *testing.T) cache.Snapshot {
 	clientListener.FilterChains[0].Filters = append(clientMutable.FilterChains[0].TCP, clientListener.FilterChains[0].Filters...)
 
 	return cache.Snapshot{
-		Listeners: cache.NewResources(""tcp"", []cache.Resource{clientListener, serverListener}),
+		Listeners: cache.NewResources(string(node), []cache.Resource{clientListener, serverListener}),
 	}
 }
",1.0,1.0,1.0,tfidf
,,,,,,,,,
CVE-2019-20176,CVE-2019-20176/aea56f4bcb9948d456f3fae4d044fd3fa2e19706,https://github.com/jedisct1/pure-ftpd/commit/aea56f4bcb9948d456f3fae4d044fd3fa2e19706,"<s>In Pure-FTPd 1.0.49, a stack exhaustion issue was discovered in the listdir function in ls.c.</s>","<s>listdir(): reuse a single buffer to store every file name to display
Allocating a new buffer for each entry is useless.
And as these buffers are allocated on the stack, on systems with a
small stack size, with many entries, the limit can easily be reached,
causing a stack exhaustion and aborting the user session.
Reported by Antonio Morales from the GitHub Security Lab team, thanks!
</s>"," diff --git a/src/ls.c b/src/ls.c
index cf804c7..f8a588f 100644
--- a/src/ls.c
+++ b/src/ls.c
@@ -661,6 +661,8 @@ static void listdir(unsigned int depth, int f, void * const tls_fd,
     char *names;
     PureFileInfo *s;
     PureFileInfo *r;
+    char *alloca_subdir;
+    size_t sizeof_subdir;
     int d;
 
     if (depth >= max_ls_depth || matches >= max_ls_files) {
@@ -690,14 +692,12 @@ static void listdir(unsigned int depth, int f, void * const tls_fd,
     }
     outputfiles(f, tls_fd);
     r = dir;
+    sizeof_subdir = PATH_MAX + 1U;
+    if ((alloca_subdir = ALLOCA(sizeof_subdir)) == NULL) {
+        goto toomany;
+    }
     while (opt_R && r != s) {
         if (r->name_offset != (size_t) -1 && !chdir(FI_NAME(r))) {
-            char *alloca_subdir;
-            const size_t sizeof_subdir = PATH_MAX + 1U;
-
-            if ((alloca_subdir = ALLOCA(sizeof_subdir)) == NULL) {
-                goto toomany;
-            }
             if (SNCHECK(snprintf(alloca_subdir, sizeof_subdir, ""%s/%s"",
                                  name, FI_NAME(r)), sizeof_subdir)) {
                 goto nolist;
@@ -706,8 +706,8 @@ static void listdir(unsigned int depth, int f, void * const tls_fd,
             wrstr(f, tls_fd, alloca_subdir);
             wrstr(f, tls_fd, "":\r\n\r\n"");
             listdir(depth + 1U, f, tls_fd, alloca_subdir);
+
             nolist:
-            ALLOCA_FREE(alloca_subdir);
             if (matches >= max_ls_files) {
                 goto toomany;
             }
@@ -720,6 +720,7 @@ static void listdir(unsigned int depth, int f, void * const tls_fd,
         r++;
     }
     toomany:
+    ALLOCA_FREE(alloca_subdir);
     free(names);
     free(dir);
     names = NULL;
",1.0,3.0,1.0,tfidf
CVE-2019-20176,CVE-2019-20176/4e9cd43c3d61a0a697dbabb053b23c32a90265d8,https://github.com/jedisct1/pure-ftpd/commit/4e9cd43c3d61a0a697dbabb053b23c32a90265d8,"<s>In Pure-FTPd 1.0.49, a stack exhaustion issue was discovered in the listdir function in ls.c.</s>","<s>Update ftpd.c
</s>"," diff --git a/src/ftpd.c b/src/ftpd.c
index 60b95b6..d60f139 100644
--- a/src/ftpd.c
+++ b/src/ftpd.c
@@ -1399,9 +1399,7 @@ void douser(const char *username)
                 hd = (char *) ""/"";
             }
             if (chdir(root_directory) || chroot(root_directory) || chdir(hd)) {
-                die(421, LOG_ERR, MSG_CANT_CHANGE_DIR "" [%s]"",
-                    root_directory, hd);
-                goto cantsec;
+                die(421, LOG_ERR, MSG_CANT_CHANGE_DIR "" [%s]"", root_directory, hd);
             }
             logfile(LOG_INFO, MSG_ANONYMOUS_LOGGED);
         }
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2013-4525,CVE-2013-4525/6917b452bf5c74cedcd984d653e4d4c9270c800f,https://github.com/moodle/moodle/commit/6917b452bf5c74cedcd984d653e4d4c9270c800f,"<s>Cross-site scripting (XSS) vulnerability in mod/quiz/report/responses/responses_table.php in Moodle through 2.2.11, 2.3.x before 2.3.10, 2.4.x before 2.4.7, and 2.5.x before 2.5.3 allows remote authenticated users to inject arbitrary web script or HTML via an answer to a text-based quiz question.</s>","<s>MDL-41820 XSS in the quiz responses report.
Thanks to Michael Hess for finding this bug and reporting it to us.
</s>"," diff --git a/mod/quiz/report/responses/responses_table.php b/mod/quiz/report/responses/responses_table.php
index a5a0c094d83..3c9c7c9f458 100644
--- a/mod/quiz/report/responses/responses_table.php
+++ b/mod/quiz/report/responses/responses_table.php
@@ -97,6 +97,11 @@ class quiz_responses_table extends quiz_attempts_report_table {
             $summary = trim($stepdata->$field);
         }
 
+        if ($this->is_downloading() && $this->is_downloading() != 'xhtml') {
+            return $summary;
+        }
+        $summary = s($summary);
+
         if ($this->is_downloading() || $field != 'responsesummary') {
             return $summary;
         }
",1.0,3.0,1.0,tfidf
CVE-2013-4525,CVE-2013-4525/768779972e27e9b3e5d86c65f4cd7dd7c7fb7e8b,https://github.com/moodle/moodle/commit/768779972e27e9b3e5d86c65f4cd7dd7c7fb7e8b,"<s>Cross-site scripting (XSS) vulnerability in mod/quiz/report/responses/responses_table.php in Moodle through 2.2.11, 2.3.x before 2.3.10, 2.4.x before 2.4.7, and 2.5.x before 2.5.3 allows remote authenticated users to inject arbitrary web script or HTML via an answer to a text-based quiz question.</s>","<s>MDL-41929 quiz statistics, overall stats not displayed.
</s>"," diff --git a/mod/quiz/report/statistics/report.php b/mod/quiz/report/statistics/report.php
index e3153a17b24..13a3a197433 100644
--- a/mod/quiz/report/statistics/report.php
+++ b/mod/quiz/report/statistics/report.php
@@ -492,7 +492,7 @@ class quiz_statistics_report extends quiz_default_report {
 
         // The statistics.
         foreach ($todisplay as $property => $format) {
-            if (!isset($quizstats->$property) || empty($format[$property])) {
+            if (!isset($quizstats->$property) || !$format) {
                 continue;
             }
             $value = $quizstats->$property;
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2011-1010,CVE-2011-1010/fa7ea87a057958a8b7926c1a60a3ca6d696328ed,https://github.com/pennyfang/kernel/commit/fa7ea87a057958a8b7926c1a60a3ca6d696328ed,<s>Buffer overflow in the mac_partition function in fs/partitions/mac.c in the Linux kernel before 2.6.37.2 allows local users to cause a denial of service (panic) or possibly have unspecified other impact via a malformed Mac OS partition table.</s>,"<s>fs/partitions: Validate map_count in Mac partition tables
Validate number of blocks in map and remove redundant variable.
Signed-off-by: Timo Warns <warns@pre-sense.de>
Cc: stable@kernel.org
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
</s>"," diff --git a/fs/partitions/mac.c b/fs/partitions/mac.c
index 68d6a216ee7..11f688bd76c 100644
--- a/fs/partitions/mac.c
+++ b/fs/partitions/mac.c
@@ -29,10 +29,9 @@ static inline void mac_fix_string(char *stg, int len)
 
 int mac_partition(struct parsed_partitions *state)
 {
-	int slot = 1;
 	Sector sect;
 	unsigned char *data;
-	int blk, blocks_in_map;
+	int slot, blocks_in_map;
 	unsigned secsize;
 #ifdef CONFIG_PPC_PMAC
 	int found_root = 0;
@@ -59,10 +58,14 @@ int mac_partition(struct parsed_partitions *state)
 		put_dev_sector(sect);
 		return 0;		/* not a MacOS disk */
 	}
-	strlcat(state->pp_buf, "" [mac]"", PAGE_SIZE);
 	blocks_in_map = be32_to_cpu(part->map_count);
-	for (blk = 1; blk <= blocks_in_map; ++blk) {
-		int pos = blk * secsize;
+	if (blocks_in_map < 0 || blocks_in_map >= DISK_MAX_PARTS) {
+		put_dev_sector(sect);
+		return 0;
+	}
+	strlcat(state->pp_buf, "" [mac]"", PAGE_SIZE);
+	for (slot = 1; slot <= blocks_in_map; ++slot) {
+		int pos = slot * secsize;
 		put_dev_sector(sect);
 		data = read_part_sector(state, pos/512, &sect);
 		if (!data)
@@ -113,13 +116,11 @@ int mac_partition(struct parsed_partitions *state)
 			}
 
 			if (goodness > found_root_goodness) {
-				found_root = blk;
+				found_root = slot;
 				found_root_goodness = goodness;
 			}
 		}
 #endif /* CONFIG_PPC_PMAC */
-
-		++slot;
 	}
 #ifdef CONFIG_PPC_PMAC
 	if (found_root_goodness)
",1.0,2.0,1.0,lime
CVE-2011-1010,CVE-2011-1010/4c7e604babd15db9dca3b07de167a0f93fe23bf4,https://github.com/pennyfang/kernel/commit/4c7e604babd15db9dca3b07de167a0f93fe23bf4,<s>Buffer overflow in the mac_partition function in fs/partitions/mac.c in the Linux kernel before 2.6.37.2 allows local users to cause a denial of service (panic) or possibly have unspecified other impact via a malformed Mac OS partition table.</s>,"<s>ixgbe: fix panic due to uninitialised pointer
Systems containing an 82599EB and running a backported driver from
upstream were panicing on boot.  It turns out hw->mac.ops.setup_sfp is
only set for 82599, so one should check to be sure that pointer is set
before continuing in ixgbe_sfp_config_module_task.  I verified by
inspection that the upstream driver has the same issue and also added a
check before the call in ixgbe_sfp_link_config.
Signed-off-by: Andy Gospodarek <andy@greyhouse.net>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
</s>"," diff --git a/drivers/net/ixgbe/ixgbe_main.c b/drivers/net/ixgbe/ixgbe_main.c
index fbae703b46d..30f9ccfb4f8 100644
--- a/drivers/net/ixgbe/ixgbe_main.c
+++ b/drivers/net/ixgbe/ixgbe_main.c
@@ -3728,7 +3728,8 @@ static void ixgbe_sfp_link_config(struct ixgbe_adapter *adapter)
 			 * We need to try and force an autonegotiation
 			 * session, then bring up link.
 			 */
-			hw->mac.ops.setup_sfp(hw);
+			if (hw->mac.ops.setup_sfp)
+				hw->mac.ops.setup_sfp(hw);
 			if (!(adapter->flags & IXGBE_FLAG_IN_SFP_LINK_TASK))
 				schedule_work(&adapter->multispeed_fiber_task);
 		} else {
@@ -5968,7 +5969,8 @@ static void ixgbe_sfp_config_module_task(struct work_struct *work)
 		unregister_netdev(adapter->netdev);
 		return;
 	}
-	hw->mac.ops.setup_sfp(hw);
+	if (hw->mac.ops.setup_sfp)
+		hw->mac.ops.setup_sfp(hw);
 
 	if (!(adapter->flags & IXGBE_FLAG_IN_SFP_LINK_TASK))
 		/* This will also work for DA Twinax connections */
",0.0,,0.0,lime
,,,,,,,,,
CVE-2017-5581,CVE-2017-5581/18c020124ff1b2441f714da2017f63dba50720ba,https://github.com/TigerVNC/tigervnc/commit/18c020124ff1b2441f714da2017f63dba50720ba,<s>Buffer overflow in the ModifiablePixelBuffer::fillRect function in TigerVNC before 1.7.1 allows remote servers to execute arbitrary code via an RRE message with subrectangle outside framebuffer boundaries.</s>,"<s>Fix buffer overflow in ModifiablePixelBuffer::fillRect.
It can be triggered by RRE message with subrectangle out of framebuffer
boundaries. It may prevent the same kind of issue caused by evil message
from another encoding too.
</s>"," diff --git a/common/rfb/PixelBuffer.cxx b/common/rfb/PixelBuffer.cxx
index 89addabc..7f3df6cb 100644
--- a/common/rfb/PixelBuffer.cxx
+++ b/common/rfb/PixelBuffer.cxx
@@ -101,15 +101,26 @@ void ModifiablePixelBuffer::fillRect(const Rect& r, const void* pix)
   int stride;
   U8 *buf;
   int w, h, b;
+  Rect drect;
 
-  w = r.width();
-  h = r.height();
+  drect = r;
+  if (!drect.enclosed_by(getRect())) {
+    vlog.error(""Destination rect %dx%d at %d,%d exceeds framebuffer %dx%d"",
+               drect.width(), drect.height(), drect.tl.x, drect.tl.y, width_, height_);
+    drect = drect.intersect(getRect());
+  }
+
+  if (drect.is_empty())
+    return;
+
+  w = drect.width();
+  h = drect.height();
   b = format.bpp/8;
 
   if (h == 0)
     return;
 
-  buf = getBufferRW(r, &stride);
+  buf = getBufferRW(drect, &stride);
 
   if (b == 1) {
     while (h--) {
@@ -136,7 +147,7 @@ void ModifiablePixelBuffer::fillRect(const Rect& r, const void* pix)
     }
   }
 
-  commitBufferRW(r);
+  commitBufferRW(drect);
 }
 
 void ModifiablePixelBuffer::imageRect(const Rect& r,
",1.0,3.0,1.0,lime
CVE-2017-5581,CVE-2017-5581/466de9c52e925ea784fe4ce455741b2638ee3e94,https://github.com/TigerVNC/tigervnc/commit/466de9c52e925ea784fe4ce455741b2638ee3e94,<s>Buffer overflow in the ModifiablePixelBuffer::fillRect function in TigerVNC before 1.7.1 allows remote servers to execute arbitrary code via an RRE message with subrectangle outside framebuffer boundaries.</s>,"<s>Check invalid RRE rects
</s>"," diff --git a/common/rfb/rreDecode.h b/common/rfb/rreDecode.h
index 56defbd1..f9fdcfc9 100644
--- a/common/rfb/rreDecode.h
+++ b/common/rfb/rreDecode.h
@@ -22,6 +22,7 @@
 // BPP                - 8, 16 or 32
 
 #include <rdr/InStream.h>
+#include <rfb/Exception.h>
 
 namespace rfb {
 
@@ -49,6 +50,10 @@ void RRE_DECODE (const Rect& r, rdr::InStream* is,
     int y = is->readU16();
     int w = is->readU16();
     int h = is->readU16();
+
+    if (((x+w) > r.width()) || ((y+h) > r.height()))
+      throw Exception (""RRE decode error"");
+
     pb->fillRect(pf, Rect(r.tl.x+x, r.tl.y+y, r.tl.x+x+w, r.tl.y+y+h), &pix);
   }
 }
",0.0,,0.0,lime
,,,,,,,,,
CVE-2016-8654,CVE-2016-8654/4a59cfaf9ab3d48fca4a15c0d2674bf7138e3d1a,https://github.com/jasper-software/jasper/commit/4a59cfaf9ab3d48fca4a15c0d2674bf7138e3d1a,<s>A heap-buffer overflow vulnerability was found in QMFB code in JPC codec caused by buffer being allocated with too small size. jasper versions before 2.0.0 are affected.</s>,"<s>Fixed a buffer overrun problem in the QMFB code in the JPC codec
that was caused by a buffer being allocated with a size that was too small
in some cases.
Added a new regression test case.
</s>"," diff --git a/src/libjasper/jpc/jpc_qmfb.c b/src/libjasper/jpc/jpc_qmfb.c
index 45be24e..f26070f 100644
--- a/src/libjasper/jpc/jpc_qmfb.c
+++ b/src/libjasper/jpc/jpc_qmfb.c
@@ -374,7 +374,7 @@ void jpc_qmfb_split_col(jpc_fix_t *a, int numrows, int stride,
 	register jpc_fix_t *dstptr;
 	register int n;
 	register int m;
-	int hstartcol;
+	int hstartrow;
 
 	/* Get a buffer. */
 	if (bufsize > QMFB_SPLITBUFSIZE) {
@@ -385,9 +385,9 @@ void jpc_qmfb_split_col(jpc_fix_t *a, int numrows, int stride,
 	}
 
 	if (numrows >= 2) {
-		hstartcol = (numrows + 1 - parity) >> 1;
-		// ORIGINAL (WRONG): m = (parity) ? hstartcol : (numrows - hstartcol);
-		m = numrows - hstartcol;
+		hstartrow = (numrows + 1 - parity) >> 1;
+		// ORIGINAL (WRONG): m = (parity) ? hstartrow : (numrows - hstartrow);
+		m = numrows - hstartrow;
 
 		/* Save the samples destined for the highpass channel. */
 		n = m;
@@ -408,7 +408,7 @@ void jpc_qmfb_split_col(jpc_fix_t *a, int numrows, int stride,
 			srcptr += stride << 1;
 		}
 		/* Copy the saved samples into the highpass channel. */
-		dstptr = &a[hstartcol * stride];
+		dstptr = &a[hstartrow * stride];
 		srcptr = buf;
 		n = m;
 		while (n-- > 0) {
@@ -439,20 +439,21 @@ void jpc_qmfb_split_colgrp(jpc_fix_t *a, int numrows, int stride,
 	register int n;
 	register int i;
 	int m;
-	int hstartcol;
+	int hstartrow;
 
 	/* Get a buffer. */
 	if (bufsize > QMFB_SPLITBUFSIZE) {
-		if (!(buf = jas_alloc2(bufsize, sizeof(jpc_fix_t)))) {
+		if (!(buf = jas_alloc3(bufsize, JPC_QMFB_COLGRPSIZE,
+		  sizeof(jpc_fix_t)))) {
 			/* We have no choice but to commit suicide in this case. */
 			abort();
 		}
 	}
 
 	if (numrows >= 2) {
-		hstartcol = (numrows + 1 - parity) >> 1;
-		// ORIGINAL (WRONG): m = (parity) ? hstartcol : (numrows - hstartcol);
-		m = numrows - hstartcol;
+		hstartrow = (numrows + 1 - parity) >> 1;
+		// ORIGINAL (WRONG): m = (parity) ? hstartrow : (numrows - hstartrow);
+		m = numrows - hstartrow;
 
 		/* Save the samples destined for the highpass channel. */
 		n = m;
@@ -485,7 +486,7 @@ void jpc_qmfb_split_colgrp(jpc_fix_t *a, int numrows, int stride,
 			srcptr += stride << 1;
 		}
 		/* Copy the saved samples into the highpass channel. */
-		dstptr = &a[hstartcol * stride];
+		dstptr = &a[hstartrow * stride];
 		srcptr = buf;
 		n = m;
 		while (n-- > 0) {
@@ -526,7 +527,7 @@ void jpc_qmfb_split_colres(jpc_fix_t *a, int numrows, int numcols,
 
 	/* Get a buffer. */
 	if (bufsize > QMFB_SPLITBUFSIZE) {
-		if (!(buf = jas_alloc2(bufsize, sizeof(jpc_fix_t)))) {
+		if (!(buf = jas_alloc3(bufsize, numcols, sizeof(jpc_fix_t)))) {
 			/* We have no choice but to commit suicide in this case. */
 			abort();
 		}
@@ -721,7 +722,8 @@ void jpc_qmfb_join_colgrp(jpc_fix_t *a, int numrows, int stride,
 
 	/* Allocate memory for the join buffer from the heap. */
 	if (bufsize > QMFB_JOINBUFSIZE) {
-		if (!(buf = jas_alloc3(bufsize, JPC_QMFB_COLGRPSIZE, sizeof(jpc_fix_t)))) {
+		if (!(buf = jas_alloc3(bufsize, JPC_QMFB_COLGRPSIZE,
+		  sizeof(jpc_fix_t)))) {
 			/* We have no choice but to commit suicide. */
 			abort();
 		}
",1.0,3.0,1.0,lime
CVE-2016-8654,CVE-2016-8654/6c6c123465d8299b60cc527c1c2983c29368e8d6,https://github.com/jasper-software/jasper/commit/6c6c123465d8299b60cc527c1c2983c29368e8d6,<s>A heap-buffer overflow vulnerability was found in QMFB code in JPC codec caused by buffer being allocated with too small size. jasper versions before 2.0.0 are affected.</s>,"<s>Fixed a minor const correctness issue in the JPC codec.
</s>"," diff --git a/src/libjasper/jpc/jpc_util.h b/src/libjasper/jpc/jpc_util.h
index 526312a..d123160 100644
--- a/src/libjasper/jpc/jpc_util.h
+++ b/src/libjasper/jpc/jpc_util.h
@@ -63,7 +63,7 @@
 #define JPC_UTIL_H
 
 /* Parse a comma separated list of real numbers into an array of doubles. */
-int jpc_atoaf(char *s, int *numvalues, double **values);
+int jpc_atoaf(const char *s, int *numvalues, double **values);
 
 /* Upsample a sequence. */
 jas_seq_t *jpc_seq_upsample(jas_seq_t *seq, int n);
",0.0,,0.0,lime
,,,,,,,,,
CVE-2020-14062,CVE-2020-14062/840eae2ca81c597a0010b2126f32dce17d384b70,https://github.com/FasterXML/jackson-databind/commit/840eae2ca81c597a0010b2126f32dce17d384b70,"<s>FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to com.sun.org.apache.xalan.internal.lib.sql.JNDIConnectionPool (aka xalan2).</s>","<s>... actual #2704 fix here (forgot to commit change)
</s>"," diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
index 20bbf2059..80cc37879 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
@@ -113,8 +113,10 @@ public class SubTypeValidator
         s.add(""org.apache.commons.configuration.JNDIConfiguration"");
         s.add(""org.apache.commons.configuration2.JNDIConfiguration"");
 
-        // [databind#2469]: xalan2
+        // [databind#2469]: xalan
         s.add(""org.apache.xalan.lib.sql.JNDIConnectionPool"");
+        // [databind#2704]: xalan2
+        s.add(""com.sun.org.apache.xalan.internal.lib.sql.JNDIConnectionPool"");
 
         // [databind#2478]: comons-dbcp, p6spy
         s.add(""org.apache.commons.dbcp.datasources.PerUserPoolDataSource"");
",1.0,2.0,1.0,lime
CVE-2020-14062,CVE-2020-14062/d1c67a0396e84c08d0558fbb843b5bd1f26e1921,https://github.com/FasterXML/jackson-databind/commit/d1c67a0396e84c08d0558fbb843b5bd1f26e1921,"<s>FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to com.sun.org.apache.xalan.internal.lib.sql.JNDIConnectionPool (aka xalan2).</s>","<s>Fix #2688
</s>"," diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
index b123bee8b..a7853c026 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
@@ -180,6 +180,9 @@ public class SubTypeValidator
         // [databind#2682]: commons-jelly
         s.add(""org.apache.commons.jelly.impl.Embedded"");
 
+        // [databind#2688]: apache/drill
+        s.add(""oadd.org.apache.xalan.lib.sql.JNDIConnectionPool"");
+
         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);
     }
 
",0.0,,0.0,lime
,,,,,,,,,
CVE-2021-40346,CVE-2021-40346/f079f44096cf78c18880e5b0d9279a168bd4b44e,https://github.com/haproxy/haproxy/commit/f079f44096cf78c18880e5b0d9279a168bd4b44e,"<s>An integer overflow exists in HAProxy 2.0 through 2.5 in htx_add_header that can be exploited to perform an HTTP request smuggling attack, allowing an attacker to bypass all configured http-request HAProxy ACLs and possibly other ACLs.</s>","<s>MINOR: htx: Skip headers with no value when adding a header list to a message
When the header list is added, after the message parsing, headers with no
value are now ignored. It is not the same than headers with empty value
fields. Only headers with a NULL pointer as value are skipped. This only
happens if the header value is removed during the message
parsing. Concretly, such headers are now ignored when htx_add_all_headers()
is called. However, htx_add_header() is not affected by this change.
Symetrically, the same is true for trailers. It may be backported to 2.4
because of the previous fix (""BUG/MEDIUM: mux-h1: Remove ""Upgrade:"" header
for requests with payload"").
</s>"," diff --git a/include/haproxy/htx.h b/include/haproxy/htx.h
index a6535237b..93b3206a8 100644
--- a/include/haproxy/htx.h
+++ b/include/haproxy/htx.h
@@ -517,12 +517,19 @@ static inline struct htx_blk *htx_add_endof(struct htx *htx, enum htx_blk_type t
 
 /* Add all headers from the list <hdrs> into the HTX message <htx>, followed by
  * the EOH. On success, it returns the last block inserted (the EOH), otherwise
- * NULL is returned. */
+ * NULL is returned.
+ *
+ * Headers with a NULL value (.ptr == NULL) are ignored but not those with empty
+ * value (.len == 0 but .ptr != NULL)
+ */
 static inline struct htx_blk *htx_add_all_headers(struct htx *htx, const struct http_hdr *hdrs)
 {
 	int i;
 
 	for (i = 0; hdrs[i].n.len; i++) {
+		/* Don't check the value length because a header value may be empty */
+		if (isttest(hdrs[i].v) == 0)
+			continue;
 		if (!htx_add_header(htx, hdrs[i].n, hdrs[i].v))
 			return NULL;
 	}
@@ -531,12 +538,19 @@ static inline struct htx_blk *htx_add_all_headers(struct htx *htx, const struct
 
 /* Add all trailers from the list <hdrs> into the HTX message <htx>, followed by
  * the EOT. On success, it returns the last block inserted (the EOT), otherwise
- * NULL is returned. */
+ * NULL is returned.
+ *
+ * Trailers with a NULL value (.ptr == NULL) are ignored but not those with
+ * empty value (.len == 0 but .ptr != NULL)
+ */
 static inline struct htx_blk *htx_add_all_trailers(struct htx *htx, const struct http_hdr *hdrs)
 {
 	int i;
 
 	for (i = 0; hdrs[i].n.len; i++) {
+		/* Don't check the value length because a header value may be empty */
+		if (isttest(hdrs[i].v) == 0)
+			continue;
 		if (!htx_add_trailer(htx, hdrs[i].n, hdrs[i].v))
 			return NULL;
 	}
",0.0,,0.0,tfidf
CVE-2021-40346,CVE-2021-40346/3b69886f7dcc3cfb3d166309018e6cfec9ce2c95,https://github.com/haproxy/haproxy/commit/3b69886f7dcc3cfb3d166309018e6cfec9ce2c95,"<s>An integer overflow exists in HAProxy 2.0 through 2.5 in htx_add_header that can be exploited to perform an HTTP request smuggling attack, allowing an attacker to bypass all configured http-request HAProxy ACLs and possibly other ACLs.</s>","<s>BUG/MAJOR: htx: fix missing header name length check in htx_add_header/trailer
Ori Hollander of JFrog Security reported that htx_add_header() and
htx_add_trailer() were missing a length check on the header name. While
this does not allow to overwrite any memory area, it results in bits of
the header name length to slip into the header value length and may
result in forging certain header names on the input. The sad thing here
is that a FIXME comment was present suggesting to add the required length
checks :-(
The injected headers are visible to the HTTP internals and to the config
rules, so haproxy will generally stay synchronized with the server. But
there is one exception which is the content-length header field, because
it is already deduplicated on the input, but before being indexed. As
such, injecting a content-length header after the deduplication stage
may be abused to present a different, shorter one on the other side and
help build a request smuggling attack, or even maybe a response splitting
attack. CVE-2021-40346 was assigned to this problem.
As a mitigation measure, it is sufficient to verify that no more than
one such header is present in any message, which is normally the case
thanks to the duplicate checks:
   http-request  deny if { req.hdr_cnt(content-length) gt 1 }
   http-response deny if { res.hdr_cnt(content-length) gt 1 }
This must be backported to all HTX-enabled versions, hence as far as 2.0.
In 2.3 and earlier, the functions are in src/htx.c instead.
Many thanks to Ori for his work and his responsible report!
</s>"," diff --git a/include/haproxy/htx.h b/include/haproxy/htx.h
index b6d95274e..a6535237b 100644
--- a/include/haproxy/htx.h
+++ b/include/haproxy/htx.h
@@ -466,7 +466,9 @@ static inline struct htx_blk *htx_add_header(struct htx *htx, const struct ist n
 {
 	struct htx_blk *blk;
 
-	/* FIXME: check name.len (< 256B) and value.len (< 1MB) */
+	if (name.len > 255 || value.len > 1048575)
+		return NULL;
+
 	blk = htx_add_blk(htx, HTX_BLK_HDR, name.len + value.len);
 	if (!blk)
 		return NULL;
@@ -485,7 +487,9 @@ static inline struct htx_blk *htx_add_trailer(struct htx *htx, const struct ist
 {
 	struct htx_blk *blk;
 
-	/* FIXME: check name.len (< 256B) and value.len (< 1MB) */
+	if (name.len > 255 || value.len > 1048575)
+		return NULL;
+
 	blk = htx_add_blk(htx, HTX_BLK_TLR, name.len + value.len);
 	if (!blk)
 		return NULL;
",1.0,2.0,1.0,tfidf
,,,,,,,,,
CVE-2019-20919,CVE-2019-20919/eca7d7c8f43d96f6277e86d1000e842eb4cc67ff,https://github.com/perl5-dbi/dbi/commit/eca7d7c8f43d96f6277e86d1000e842eb4cc67ff,"<s>An issue was discovered in the DBI module before 1.643 for Perl. The hv_fetch() documentation requires checking for NULL and the code does that. But, shortly thereafter, it calls SvOK(profile), causing a NULL pointer dereference.</s>","<s>Fix a NULL profile dereference in dbi_profile()
hv_fetch() documentation requires checking for NULL and the code does
that. But then calls SvOK(profile) uncoditionally two lines later.
This patch fixes it.
</s>"," diff --git a/DBI.xs b/DBI.xs
index a96894c..4825d1d 100644
--- a/DBI.xs
+++ b/DBI.xs
@@ -2888,8 +2888,12 @@ dbi_profile(SV *h, imp_xxh_t *imp_xxh, SV *statement_sv, SV *method, NV t1, NV t
         mg_get(profile); /* FETCH */
     if (!profile || !SvROK(profile)) {
         DBIc_set(imp_xxh, DBIcf_Profile, 0); /* disable */
-        if (SvOK(profile) && !PL_dirty)
-            warn(""Profile attribute isn't a hash ref (%s,%ld)"", neatsvpv(profile,0), (long)SvTYPE(profile));
+        if (!PL_dirty) {
+            if (!profile)
+                warn(""Profile attribute does not exist"");
+            else if (SvOK(profile))
+                warn(""Profile attribute isn't a hash ref (%s,%ld)"", neatsvpv(profile,0), (long)SvTYPE(profile));
+        }
         return &PL_sv_undef;
     }
 
",1.0,2.0,1.0,lime
CVE-2019-20919,CVE-2019-20919/36f2a2c5fea36d7d47d6871e420286643460e71b,https://github.com/perl5-dbi/dbi/commit/36f2a2c5fea36d7d47d6871e420286643460e71b,"<s>An issue was discovered in the DBI module before 1.643 for Perl. The hv_fetch() documentation requires checking for NULL and the code does that. But, shortly thereafter, it calls SvOK(profile), causing a NULL pointer dereference.</s>","<s>Fix a buffer overlfow on an overlong DBD class name
dbih_setup_handle() in DBI.xs does:
static void
dbih_setup_handle(pTHX_ SV *orv, char *imp_class, SV *parent, SV *imp_datasv)
{
    [...]
    char imp_mem_name[300];
    [...]
    strcpy(imp_mem_name, imp_class);
    strcat(imp_mem_name, ""_mem"");
    [...]
}
If imp_class argument string value is longer than 300 - strlen(""_mem"")
- 1 bytes, a data will be written past imp_mem_name[] array. The
imp_class comes from DBD driver class name (DBI::_new_drh ->
_new_handle() -> dbih_setup_handle()).
People usually do not use so long package names (e.g. DBD::ExampleP
calls DBI::_new_drh() in lib/DBD/ExampleP.pm), so the risk is low.
Reproducer:
$ perl -MDBI -e 'DBI::_new_drh(q{x} x 300, {}, 0)'
*** buffer overflow detected ***: perl terminated
Aborted (core dumped)
https://rt.cpan.org/Ticket/Display.html?id=130191
</s>"," diff --git a/DBI.xs b/DBI.xs
index b6a4e1a..c631a28 100644
--- a/DBI.xs
+++ b/DBI.xs
@@ -1398,7 +1398,7 @@ dbih_setup_handle(pTHX_ SV *orv, char *imp_class, SV *parent, SV *imp_datasv)
     SV *dbih_imp_rv;
     SV *dbi_imp_data = Nullsv;
     SV **svp;
-    char imp_mem_name[300];
+    SV *imp_mem_name;
     HV  *imp_mem_stash;
     imp_xxh_t *imp;
     imp_xxh_t *parent_imp;
@@ -1425,10 +1425,9 @@ dbih_setup_handle(pTHX_ SV *orv, char *imp_class, SV *parent, SV *imp_datasv)
     if (mg_find(SvRV(h), DBI_MAGIC) != NULL)
         croak(errmsg, neatsvpv(orv,0), imp_class, ""already a DBI (or ~magic) handle"");
 
-    strcpy(imp_mem_name, imp_class);
-    strcat(imp_mem_name, ""_mem"");
-    if ( (imp_mem_stash = gv_stashpv(imp_mem_name, FALSE)) == NULL)
-        croak(errmsg, neatsvpv(orv,0), imp_mem_name, ""unknown _mem package"");
+    imp_mem_name = sv_2mortal(newSVpvf(""%s_mem"", imp_class));
+    if ( (imp_mem_stash = gv_stashsv(imp_mem_name, FALSE)) == NULL)
+        croak(errmsg, neatsvpv(orv,0), SvPVbyte_nolen(imp_mem_name), ""unknown _mem package"");
 
     if ((svp = hv_fetch((HV*)SvRV(h), ""dbi_imp_data"", 12, 0))) {
         dbi_imp_data = *svp;
",0.0,,0.0,lime
,,,,,,,,,
CVE-2017-9527,CVE-2017-9527/5c114c91d4ff31859fcd84cf8bf349b737b90d99,https://github.com/mruby/mruby/commit/5c114c91d4ff31859fcd84cf8bf349b737b90d99,<s>The mark_context_stack function in gc.c in mruby through 1.2.0 allows attackers to cause a denial of service (heap-based use-after-free and application crash) or possibly have unspecified other impact via a crafted .rb file.</s>,"<s>Clear unused stack region that may refer freed objects; fix #3596
</s>"," diff --git a/src/gc.c b/src/gc.c
index 116fd0bfd..19bc1ad4b 100644
--- a/src/gc.c
+++ b/src/gc.c
@@ -544,6 +544,7 @@ mark_context_stack(mrb_state *mrb, struct mrb_context *c)
 {
   size_t i;
   size_t e;
+  mrb_value nil;
 
   if (c->stack == NULL) return;
   e = c->stack - c->stbase;
@@ -553,14 +554,14 @@ mark_context_stack(mrb_state *mrb, struct mrb_context *c)
     mrb_value v = c->stbase[i];
 
     if (!mrb_immediate_p(v)) {
-      if (mrb_basic_ptr(v)->tt == MRB_TT_FREE) {
-        c->stbase[i] = mrb_nil_value();
-      }
-      else {
-        mrb_gc_mark(mrb, mrb_basic_ptr(v));
-      }
+      mrb_gc_mark(mrb, mrb_basic_ptr(v));
     }
   }
+  e = c->stend - c->stbase;
+  nil = mrb_nil_value();
+  for (; i<e; i++) {
+    c->stbase[i] = nil;
+  }
 }
 
 static void
",1.0,2.0,1.0,lime
CVE-2017-9527,CVE-2017-9527/497a0a791e562d4e9b60305527b2bc2c1d9af20e,https://github.com/mruby/mruby/commit/497a0a791e562d4e9b60305527b2bc2c1d9af20e,<s>The mark_context_stack function in gc.c in mruby through 1.2.0 allows attackers to cause a denial of service (heap-based use-after-free and application crash) or possibly have unspecified other impact via a crafted .rb file.</s>,"<s>Correct comments in gc.c
</s>"," diff --git a/src/gc.c b/src/gc.c
index f74a7f31d..a0f430457 100644
--- a/src/gc.c
+++ b/src/gc.c
@@ -579,10 +579,10 @@ mark_context(mrb_state *mrb, struct mrb_context *c)
   int i;
   mrb_callinfo *ci;
 
-  /* mark stack */
+  /* mark VM stack */
   mark_context_stack(mrb, c);
 
-  /* mark VM stack */
+  /* mark call stack */
   if (c->cibase) {
     for (ci = c->cibase; ci <= c->ci; ci++) {
       mrb_gc_mark(mrb, (struct RBasic*)ci->env);
",0.0,,0.0,lime
,,,,,,,,,
CVE-2021-27903,CVE-2021-27903/c17728fa0bec11d3b82c34defe0930ed409aec38,https://github.com/craftcms/cms/commit/c17728fa0bec11d3b82c34defe0930ed409aec38,"<s>An issue was discovered in Craft CMS before 3.6.7. In some circumstances, a potential Remote Code Execution vulnerability existed on sites that did not restrict administrative changes (if an attacker were somehow able to hijack an administrator's session).</s>","<s>Dont allow pointing a Local volume to a system directory
</s>"," diff --git a/CHANGELOG.md b/CHANGELOG.md
index e2e428f7ff..cd785dd79c 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -10,6 +10,9 @@
 - Adjusted GraphQL complexity values for relational fields.
 - Updated Composer to 2.0.9.
 
+### Security
+- Its no longer possible to save a Local volume with the File System Path setting set to a system directory (e.g. the `templates/` or `vendor/` folders).
+
 ## 3.6.6 - 2021-02-15
 
 ### Added
",0.0,,1.0,lime
CVE-2021-27903,CVE-2021-27903/c5f403f87144dc40f3304c36d03a9c5ca525537b,https://github.com/craftcms/cms/commit/c5f403f87144dc40f3304c36d03a9c5ca525537b,"<s>An issue was discovered in Craft CMS before 3.6.7. In some circumstances, a potential Remote Code Execution vulnerability existed on sites that did not restrict administrative changes (if an attacker were somehow able to hijack an administrator's session).</s>","<s>Clear the test config/project folder if it exists before running a suite.
</s>"," diff --git a/src/test/Craft.php b/src/test/Craft.php
index fc0bc48057..c329dfb68f 100644
--- a/src/test/Craft.php
+++ b/src/test/Craft.php
@@ -134,6 +134,7 @@ class Craft extends Yii2
             $this->setupDb();
         }
 
+        TestSetup::removeProjectConfigFolders(CRAFT_CONFIG_PATH . DIRECTORY_SEPARATOR . 'project');
     }
 
     /**
",1.0,1.0,0.0,lime
,,,,,,,,,
CVE-2021-39196,CVE-2021-39196/0f74f431e0970a2e5784dbd955cfa4760e3b1ef7,https://github.com/jdhwpgmbca/pcapture/commit/0f74f431e0970a2e5784dbd955cfa4760e3b1ef7,"<s>pcapture is an open source dumpcap web service interface . In affected versions this vulnerability allows an authenticated but unprivileged user to use the REST API to capture and download packets with no capture filter and without adequate permissions. This is important because the capture filters can effectively limit the scope of information that a user can see in the data captures. If no filter is present, then all data on the local network segment where the program is running can be captured and downloaded. v3.12 fixes this problem. There is no workaround, you must upgrade to v3.12 or greater.</s>","<s>Fixed major security bug.
A user could effectively specify an undefined url and the program would return a null filter rather than throwing an exception and returning an error to the user. This was a really bad bug. I found it when I was adding code to validate the path parameters. That will be coming in the next commit.
</s>"," diff --git a/src/main/java/com/rtds/svc/CaptureTypeService.java b/src/main/java/com/rtds/svc/CaptureTypeService.java
index 52bdea3..be6c346 100644
--- a/src/main/java/com/rtds/svc/CaptureTypeService.java
+++ b/src/main/java/com/rtds/svc/CaptureTypeService.java
@@ -52,12 +52,16 @@ public class CaptureTypeService
         
         CaptureType type = em.find( CaptureType.class, url_suffix );
         
-        if( type != null )
+        if( type == null )
         {
-            return type.getCaptureFilter();
+            throw new IllegalArgumentException( ""The url_suffix must exist in the database."" );
         }
         
-        return null;
+        // It is okay for the capture filter itself to be null, but the CaptureType
+        // must be in the database, otherwise the user could effectively forge
+        // a capture filter for ""all"" just by requesting a non-existent filter.
+        
+        return type.getCaptureFilter();
     }
     
     public CaptureType find( String url_suffix )
",1.0,3.0,1.0,lime
CVE-2021-39196,CVE-2021-39196/7a4c25b32421f7b73f392b1c4296b2186549c5e6,https://github.com/jdhwpgmbca/pcapture/commit/7a4c25b32421f7b73f392b1c4296b2186549c5e6,"<s>pcapture is an open source dumpcap web service interface . In affected versions this vulnerability allows an authenticated but unprivileged user to use the REST API to capture and download packets with no capture filter and without adequate permissions. This is important because the capture filters can effectively limit the scope of information that a user can see in the data captures. If no filter is present, then all data on the local network segment where the program is running can be captured and downloaded. v3.12 fixes this problem. There is no workaround, you must upgrade to v3.12 or greater.</s>","<s>Add some of the admin scripts to win64svc install folder.
This is mostly just for convenience. It makes it very easy to setup the service on a development workstation because everything you need to install and configure the service is all in one directory. Just run the pre-install.ps1 script, then the install-and-start.ps1 script to get the service running, then the add-all-filters.ps1 script to populate the capture filters. For production you can copy the directory to your production server, change the .env file to point to it, and have the proper certificates, and update the dumpcap-ws.xml file to use a valid PKCS12 server certificate.
</s>"," diff --git a/src/main/win64svc/pre-install.ps1 b/src/main/win64svc/pre-install.ps1
index 4be3d18..052d211 100644
--- a/src/main/win64svc/pre-install.ps1
+++ b/src/main/win64svc/pre-install.ps1
@@ -1,2 +1,6 @@
 Copy-Item -Path ${project.basedir}/src/main/resources/startCaptureScript.ps1 -Destination .
 Copy-Item -Path ${project.build.directory}/${project.artifactId}-${project.version}-runner.jar -Destination .
+Copy-Item -Path ${project.basedir}/.env -Destination .
+Copy-Item -Path ${project.basedir}/admin_scripts/add-all-filters.ps1 -Destination .
+Copy-Item -Path ${project.basedir}/admin_scripts/add-filter.ps1 -Destination .
+Copy-Item -Path ${project.basedir}/admin_scripts/delete-filter.ps1 -Destination .
",0.0,,0.0,lime
,,,,,,,,,
CVE-2016-8746,CVE-2016-8746/37512c121ac19eb059c512a89c9294bbff824098,https://github.com/apache/ranger/commit/37512c121ac19eb059c512a89c9294bbff824098,<s>Apache Ranger before 0.6.3 policy engine incorrectly matches paths in certain conditions when policy does not contain wildcards and has recursion flag set to true.</s>,"<s>RANGER-1193: Completed 0.6.2 release and updated version to 0.6.3-SNAPSHOT
</s>"," diff --git a/pom.xml b/pom.xml
index 957b7ff89..493a2fc5b 100644
--- a/pom.xml
+++ b/pom.xml
@@ -23,7 +23,7 @@
     </parent>
     <groupId>org.apache.ranger</groupId>
     <artifactId>ranger</artifactId>
-    <version>0.6.2</version>
+    <version>0.6.3-SNAPSHOT</version>
     <description>Security for Enforcing Enterprise Policies</description>
     <packaging>pom</packaging>
     <name>ranger</name>
",0.0,,0.0,lime
CVE-2016-8746,CVE-2016-8746/9dfde6de92799d7d923cf8eb11bbdc8788d6664c,https://github.com/apache/ranger/commit/9dfde6de92799d7d923cf8eb11bbdc8788d6664c,<s>Apache Ranger before 0.6.3 policy engine incorrectly matches paths in certain conditions when policy does not contain wildcards and has recursion flag set to true.</s>,"<s>RANGER-1261: fix path matching inconsistencies and wildcard treatment
Signed-off-by: Madhan Neethiraj <madhan@apache.org>
(cherry picked from commit 22029847559b3881cdc3176b15e545e847ef6d7c)
</s>"," diff --git a/agents-common/src/test/resources/resourcematcher/test_resourcematcher_path.json b/agents-common/src/test/resources/resourcematcher/test_resourcematcher_path.json
index c67ff45d6..86da28ce2 100644
--- a/agents-common/src/test/resources/resourcematcher/test_resourcematcher_path.json
+++ b/agents-common/src/test/resources/resourcematcher/test_resourcematcher_path.json
@@ -1,5 +1,44 @@
 {
   ""testCases"":[
+	  {
+		  ""name"":""value=/a/b*y.txt; isRecursive=true; wildCard=true; ignoreCase=true"",
+		  ""resourceDef"":{
+			  ""matcher"":""org.apache.ranger.plugin.resourcematcher.RangerPathResourceMatcher"",
+			  ""matcherOptions"":{""wildCard"":true, ""ignoreCase"":true}
+		  },
+		  ""policyResource"":{
+			  ""values"": [""/a/b*y.txt""],
+			  ""isRecursive"":true
+		  },
+		  ""tests"":[
+			  { ""name"":""exact-path"",""input"":""/a/b*y.txt"", ""result"":true},
+			  { ""name"":""child-path"",""input"":""/a/b/y.txt"", ""result"":true},
+			  { ""name"":""grand-child-path"",""input"":""/a/b1/b2/y.txt"", ""result"":true},
+			  { ""name"":""descendant-child-path"",""input"":""/a/b1/c1/d1/any.txt"", ""result"":true},
+			  { ""name"":""mismatche-path"",""input"":""/a/any.txt"", ""result"":false},
+
+		  ]
+	  }
+	  ,
+	  {
+		  ""name"":""value=/a/b*y.txt; isRecursive=false; wildCard=true; ignoreCase=true"",
+		  ""resourceDef"":{
+			  ""matcher"":""org.apache.ranger.plugin.resourcematcher.RangerPathResourceMatcher"",
+			  ""matcherOptions"":{""wildCard"":true, ""ignoreCase"":true}
+		  },
+		  ""policyResource"":{
+			  ""values"": [""/a/b*y.txt""],
+			  ""isRecursive"":false
+		  },
+		  ""tests"":[
+			  { ""name"":""exact-path"",""input"":""/a/b*y.txt"", ""result"":true},
+			  { ""name"":""child-path"",""input"":""/a/b/y.txt"", ""result"":true},
+			  { ""name"":""grand-child-path"",""input"":""/a/b1/b2/y.txt"", ""result"":true},
+			  { ""name"":""descendant-child-path"",""input"":""/a/b1/c1/d1/any.txt"", ""result"":true},
+			  { ""name"":""mismatche-path"",""input"":""/a/any.txt"", ""result"":false},
+		  ]
+	  }
+	  ,
 	  {
 		  ""name"":""value=*; isRecursive=false; wildCard=true; ignoreCase=true"",
 		  ""resourceDef"":{
@@ -131,9 +170,31 @@
       	{ ""name"":""grand-child-path-camel-case"",""input"":""/Path1/Path2/Path3"", ""result"":true},
       	{ ""name"":""sibling-path"",""input"":""/path2"", ""result"":false},
       	{ ""name"":""invalid-path"",""input"":""path1"", ""result"":false},
+          { ""name"":""prefix-path"",""input"":""/path12"", ""result"":false},
+          { ""name"":""no-path"",""input"":"""", ""result"":false}
       ]
   	}
   	,
+      {
+          ""name"": ""value=/path1/path2; isRecursive=true; wildCard=true; ignoreCase=true"",
+          ""resourceDef"": {
+              ""matcher"": ""org.apache.ranger.plugin.resourcematcher.RangerPathResourceMatcher"",
+              ""matcherOptions"": {""wildCard"": true, ""ignoreCase"": true
+              }
+          },
+          ""policyResource"": {""values"": [""/path1/path2""], ""isRecursive"": true},
+          ""tests"": [
+              {""name"": ""exact-path"", ""input"": ""/path1/path2"", ""result"": true},
+              {""name"": ""parent-path"", ""input"": ""/path1"", ""result"": false},
+              {""name"": ""grand-parent-path"", ""input"": ""/"", ""result"": false},
+              {""name"": ""child-path"", ""input"": ""/path1/path2/path3"", ""result"": true},
+              {""name"": ""grandchild-path"", ""input"": ""/path1/path2/path3/path4"", ""result"": true},
+              {""name"": ""sibling-path"", ""input"": ""/path1/path3"", ""result"": false},
+              {""name"": ""prefix-path"", ""input"": ""/path1/path21"", ""result"": false},
+              {""name"": ""invalid-path"", ""input"": ""path1/path2*"", ""result"": false}
+          ]
+      }
+  ,
   	{
       ""name"":""value=/path*; isRecursive=true; wildCard=true; ignoreCase=true"",
       ""resourceDef"":{
",1.0,1.0,1.0,lime
,,,,,,,,,
CVE-2019-6257,CVE-2019-6257/2f522db8f037a66ce9040ee0b216aa4a0359286c,https://github.com/Studio-42/elFinder/commit/2f522db8f037a66ce9040ee0b216aa4a0359286c,<s>A Server Side Request Forgery (SSRF) vulnerability in elFinder before 2.1.46 could allow a malicious user to access the content of internal network resources. This occurs in get_remote_contents() in php/elFinder.class.php.</s>,"<s>[php:core:security] fix SSRF vulnerability of `get_remote_contents()`
We express special gratitude to Do Ha Anh of Viettel Cyber Security
Center, the reporter of this vulnerability.
</s>"," diff --git a/php/elFinder.class.php b/php/elFinder.class.php
index 38b1a9dd3..8ab213686 100644
--- a/php/elFinder.class.php
+++ b/php/elFinder.class.php
@@ -2410,23 +2410,41 @@ class elFinder
     {
         if (preg_match('~^(?:ht|f)tps?://[-_.!\~*\'()a-z0-9;/?:\@&=+\$,%#\*\[\]]+~i', $url)) {
             $info = parse_url($url);
-            $host = strtolower($info['host']);
+            $host = trim(strtolower($info['host']), '.');
             // do not support IPv6 address
             if (preg_match('/^\[.*\]$/', $host)) {
                 return false;
             }
-            // do not support non dot URL
+            // do not support non dot host
             if (strpos($host, '.') === false) {
                 return false;
             }
-            // disallow including ""localhost""
-            if (strpos($host, 'localhost') !== false) {
+            // do not support URL-encoded host
+            if (strpos($host, '%') !== false) {
                 return false;
             }
-            // check IPv4 local loopback
-            if (preg_match('/^(?:127|0177|0x7f)\.[0-9a-fx.]+$/', $host)) {
+            // disallow including ""localhost"" and ""localdomain""
+            if (preg_match('/\b(?:localhost|localdomain)\b/', $host)) {
                 return false;
             }
+            // check IPv4 local loopback, private network and link local
+            if (preg_match('/^0x[0-9a-f]+|[0-9]+(?:\.(?:0x[0-9a-f]+|[0-9]+)){1,3}$/', $host, $m)) {
+                $long = (int)sprintf('%u', ip2long($host));
+                if (!$long) {
+                    return false;
+                }
+                $local = (int)sprintf('%u', ip2long('127.255.255.255')) >> 24;
+                $prv1 = (int)sprintf('%u', ip2long('10.255.255.255')) >> 24;
+                $prv2 = (int)sprintf('%u', ip2long('172.31.255.255')) >> 20;
+                $prv3 = (int)sprintf('%u', ip2long('192.168.255.255')) >> 16;
+                $link = (int)sprintf('%u', ip2long('169.254.255.255')) >> 16;
+
+                if ($long >> 24 === $local || $long >> 24 === $prv1 || $long >> 20 === $prv2 || $long >> 16 === $prv3 || $long >> 16 === $link) {
+                    return false;
+                }
+            }
+            // dose not support 'user' and 'pass' for security reasons
+            $url = $info['scheme'].'://'.$host.(!empty($info['port'])? (':'.$info['port']) : '').$info['path'].(!empty($info['query'])? ('?'.$info['query']) : '').(!empty($info['fragment'])? ('#'.$info['fragment']) : '');
             // check by URL upload filter
             if ($this->urlUploadFilter && is_callable($this->urlUploadFilter)) {
                 if (!call_user_func_array($this->urlUploadFilter, array($url, $this))) {
@@ -2551,6 +2569,10 @@ class elFinder
             sleep(1); // wait 1sec
         }
 
+        if (!$fp) {
+            return false;
+        }
+
         $fwrite = 0;
         for ($written = 0; $written < strlen($query); $written += $fwrite) {
             $fwrite = fwrite($fp, substr($query, $written));
",1.0,2.0,1.0,lime
CVE-2019-6257,CVE-2019-6257/57f1c62106fab26f9f4578c27d5b23d4a6d301e2,https://github.com/Studio-42/elFinder/commit/57f1c62106fab26f9f4578c27d5b23d4a6d301e2,<s>A Server Side Request Forgery (SSRF) vulnerability in elFinder before 2.1.46 could allow a malicious user to access the content of internal network resources. This occurs in get_remote_contents() in php/elFinder.class.php.</s>,"<s>[php:core] typo fix of last commit
</s>"," diff --git a/php/elFinder.class.php b/php/elFinder.class.php
index 7713a65b7..85ce557de 100644
--- a/php/elFinder.class.php
+++ b/php/elFinder.class.php
@@ -2882,7 +2882,7 @@ class elFinder {
 		
 		if ($encoding === 'scheme') {
 			if (preg_match('~^https?://~i', $args['content'])) {
-				$fp = $this->get_remote_contents($args['content'], 30, 5, 'Mozilla/5.0', fopen($volume->getTempFile, 'wb'));
+				$fp = $this->get_remote_contents($args['content'], 30, 5, 'Mozilla/5.0', fopen($volume->getTempFile(), 'wb'));
 				if (! $fp) {
 					return  array('error' => self::ERROR_SAVE, $args['content'], self::ERROR_FILE_NOT_FOUND);
 				}
",0.0,,0.0,lime
,,,,,,,,,
CVE-2015-8702,CVE-2015-8702/6058483d9fbc1b904d5ae7cfea47bfcde5c5b559,https://github.com/inspircd/inspircd/commit/6058483d9fbc1b904d5ae7cfea47bfcde5c5b559,"<s>The DNS::GetResult function in dns.cpp in InspIRCd before 2.0.19 allows remote DNS servers to cause a denial of service (netsplit) via an invalid character in a PTR response, as demonstrated by a ""\032"" (whitespace) character in a hostname.</s>","<s>Reject replies to DNS PTR requests that contain invalid characters
Fixes issue #1033 reported by @ping86
</s>"," diff --git a/src/dns.cpp b/src/dns.cpp
index 75e5731fe..14305ccab 100644
--- a/src/dns.cpp
+++ b/src/dns.cpp
@@ -700,8 +700,16 @@ DNSResult DNS::GetResult()
 				/* Identical handling to PTR */
 
 			case DNS_QUERY_PTR:
+			{
 				/* Reverse lookups just come back as char* */
 				resultstr = std::string((const char*)data.first);
+				if (resultstr.find_first_not_of(""0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.-"") != std::string::npos)
+				{
+					std::string ro = req->orig;
+					delete req;
+					return DNSResult(this_id | ERROR_MASK, ""Invalid char(s) in reply"", 0, ro);
+				}
+			}
 			break;
 
 			default:
",1.0,3.0,1.0,lime
CVE-2015-8702,CVE-2015-8702/81841f76c863844210baf991d5c8cdfd01e57353,https://github.com/inspircd/inspircd/commit/81841f76c863844210baf991d5c8cdfd01e57353,"<s>The DNS::GetResult function in dns.cpp in InspIRCd before 2.0.19 allows remote DNS servers to cause a denial of service (netsplit) via an invalid character in a PTR response, as demonstrated by a ""\032"" (whitespace) character in a hostname.</s>","<s>Fix a minor crash when a user has no class after OnCheckReady.
This bug looks serious but it can only be triggered with a
very unusual server configuration problem. If you haven't
already had a crash then you probably aren't at any risk.
The way this crash happens is:
1. InspIRCd::DoBackgroundUserStuff is called by the main loop.
2. In the switch statement curr->registered is set to REG_NICKUSER so InspIRCd::AllModulesReportReady is called.
3. InspIRCd::AllModulesReportReady calls the OnCheckReady event in m_cgiirc.
4. m_cgiirc calls RecheckClass which sets the user's class to NULL and calls LocalUser::SetClass followed by LocalUser::CheckClass.
5. The user doesn't match any classes in LocalUser::SetClass so LocalUser::CheckClass quits the user with with ""Access denied by configuration"".
6. Control flow returns to InspIRCd::DoBackgroundUserStuff when InspIRCd::AllModulesReportReady returns false.
7. The if statement at the end of InspIRCd::DoBackgroundUserStuff calls ConnectClass::GetRegTimeout on curr->MyClass.
8. ConnectClass::GetRegTimeout tries to access a member of this which is NULL.
9. The server crashes with a SEGFAULT.
</s>"," diff --git a/src/userprocess.cpp b/src/userprocess.cpp
index 0ef95e413..69c31f840 100644
--- a/src/userprocess.cpp
+++ b/src/userprocess.cpp
@@ -104,10 +104,15 @@ void InspIRCd::DoBackgroundUserStuff()
 					curr->FullConnect();
 					continue;
 				}
+
+				// If the user has been quit in OnCheckReady then we shouldn't
+				// quit them again for having a registration timeout.
+				if (curr->quitting)
+					continue;
 				break;
 		}
 
-		if (curr->registered != REG_ALL && (Time() > (curr->signon + curr->MyClass->GetRegTimeout())))
+		if (curr->registered != REG_ALL && curr->MyClass && (Time() > (curr->signon + curr->MyClass->GetRegTimeout())))
 		{
 			/*
 			 * registration timeout -- didnt send USER/NICK/HOST
",0.0,,0.0,lime
,,,,,,,,,
CVE-2011-1772,CVE-2011-1772/885ab3459e146ff830d1f7257f809f4a3dd4493a,https://github.com/apache/struts/commit/885ab3459e146ff830d1f7257f809f4a3dd4493a,"<s>Multiple cross-site scripting (XSS) vulnerabilities in XWork in Apache Struts 2.x before 2.2.3, and OpenSymphony XWork in OpenSymphony WebWork, allow remote attackers to inject arbitrary web script or HTML via vectors involving (1) an action name, (2) the action attribute of an s:submit element, or (3) the method attribute of an s:submit element.</s>","<s>Solves WW-3579 - escapes actionName and methodName to prevent XSS vulnerability
git-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@1076372 13f79535-47bb-0310-9956-ffa450edef68
</s>"," diff --git a/xwork-core/src/main/java/com/opensymphony/xwork2/DefaultActionProxy.java b/xwork-core/src/main/java/com/opensymphony/xwork2/DefaultActionProxy.java
index ef0d3b4d0..f58b17aa5 100644
--- a/xwork-core/src/main/java/com/opensymphony/xwork2/DefaultActionProxy.java
+++ b/xwork-core/src/main/java/com/opensymphony/xwork2/DefaultActionProxy.java
@@ -23,12 +23,12 @@ import com.opensymphony.xwork2.util.LocalizedTextUtil;
 import com.opensymphony.xwork2.util.logging.Logger;
 import com.opensymphony.xwork2.util.logging.LoggerFactory;
 import com.opensymphony.xwork2.util.profiling.UtilTimerStack;
+import org.apache.commons.lang.StringEscapeUtils;
+import org.apache.commons.lang.StringUtils;
 
 import java.io.Serializable;
 import java.util.Locale;
 
-import org.apache.commons.lang.StringUtils;
-
 
 /**
  * The Default ActionProxy implementation
@@ -74,10 +74,10 @@ public class DefaultActionProxy implements ActionProxy, Serializable {
 			LOG.debug(""Creating an DefaultActionProxy for namespace "" + namespace + "" and action name "" + actionName);
 		}
 
-		this.actionName = actionName;
-		this.namespace = namespace;
-		this.executeResult = executeResult;
-        this.method = methodName;
+        this.actionName = StringEscapeUtils.escapeHtml(actionName);
+        this.namespace = namespace;
+        this.executeResult = executeResult;
+        this.method = StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(methodName));
     }
     
     @Inject
",1.0,1.0,1.0,lime
CVE-2011-1772,CVE-2011-1772/62e78be60f604b153a38506bbc823ed02ead067f,https://github.com/apache/struts/commit/62e78be60f604b153a38506bbc823ed02ead067f,"<s>Multiple cross-site scripting (XSS) vulnerabilities in XWork in Apache Struts 2.x before 2.2.3, and OpenSymphony XWork in OpenSymphony WebWork, allow remote attackers to inject arbitrary web script or HTML via vectors involving (1) an action name, (2) the action attribute of an s:submit element, or (3) the method attribute of an s:submit element.</s>","<s>WW-3498 Inject values into top of stack (model or action) instead of always using action. This does not break backward compatibility because nobody could use a model before this patch.

git-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@1065743 13f79535-47bb-0310-9956-ffa450edef68
</s>"," diff --git a/plugins/json/src/main/java/org/apache/struts2/json/JSONInterceptor.java b/plugins/json/src/main/java/org/apache/struts2/json/JSONInterceptor.java
index aa713d840..2a6272d69 100644
--- a/plugins/json/src/main/java/org/apache/struts2/json/JSONInterceptor.java
+++ b/plugins/json/src/main/java/org/apache/struts2/json/JSONInterceptor.java
@@ -83,7 +83,7 @@ public class JSONInterceptor extends AbstractInterceptor {
                 contentType = contentType.substring(0, iSemicolonIdx);
         }
 
-        Object rootObject;
+        Object rootObject = null;
         if (this.root != null) {
             ValueStack stack = invocation.getStack();
             rootObject = stack.findValue(this.root);
@@ -91,8 +91,6 @@ public class JSONInterceptor extends AbstractInterceptor {
             if (rootObject == null) {
                 throw new RuntimeException(""Invalid root expression: '"" + this.root + ""'."");
             }
-        } else {
-            rootObject = invocation.getAction();
         }
 
         if ((contentType != null) && contentType.equalsIgnoreCase(""application/json"")) {
@@ -106,6 +104,9 @@ public class JSONInterceptor extends AbstractInterceptor {
                 if (dataCleaner != null)
                     dataCleaner.clean("""", json);
 
+                if (rootObject == null) // model overrides action
+                    rootObject = invocation.getStack().peek();
+
                 // populate fields
                 populator.populateObject(rootObject, json);
             } else {
@@ -121,6 +122,9 @@ public class JSONInterceptor extends AbstractInterceptor {
                 if (obj instanceof Map) {
                     Map smd = (Map) obj;
 
+                    if (rootObject == null) // model makes no sense when using RPC
+                        rootObject = invocation.getAction();
+
                     // invoke method
                     try {
                         result = this.invoke(rootObject, smd);
",0.0,,0.0,lime
,,,,,,,,,
CVE-2021-32691,CVE-2021-32691/cb5f8f1c0b24f1b215b2bb5eb6f9a8e16d728ce2,https://github.com/ApollosProject/apollos-apps/commit/cb5f8f1c0b24f1b215b2bb5eb6f9a8e16d728ce2,"<s>Apollos Apps is an open source platform for launching church-related apps. In Apollos Apps versions prior to 2.20.0, new user registrations are able to access anyone's account by only knowing their basic profile information (name, birthday, gender, etc). This includes all app functionality within the app, as well as any authenticated links to Rock-based webpages (such as giving and events). There is a patch in version 2.20.0. As a workaround, one can patch one's server by overriding the `create` data source method on the `People` class.</s>","<s>fix: turns off automerging new people (#1989)
* fix: turns off automerging new people
* fix
* tests and snaps
</s>"," diff --git a/packages/apollos-data-connector-rock/src/auth/__tests__/index.tests.js b/packages/apollos-data-connector-rock/src/auth/__tests__/index.tests.js
index edf11916..2b5fbf7b 100644
--- a/packages/apollos-data-connector-rock/src/auth/__tests__/index.tests.js
+++ b/packages/apollos-data-connector-rock/src/auth/__tests__/index.tests.js
@@ -224,11 +224,12 @@ describe('Auth', () => {
     });
 
     it('creates user profile', async () => {
+      context.dataSources.Person.create = jest.fn(() => 35);
       const result = await context.dataSources.Auth.createUserProfile({
         email: 'isaac.hardy@newspring.cc',
       });
 
-      expect(result).toEqual('35');
+      expect(result).toEqual(35);
     });
 
     it('throws error in createUserProfile', async () => {
@@ -276,6 +277,7 @@ describe('Auth', () => {
           }
         }
       `;
+      context.dataSources.Person.create = jest.fn(() => 1);
 
       const rootValue = {};
 
",1.0,1.0,1.0,lime
CVE-2021-32691,CVE-2021-32691/2d6044ccc2540d6515918ccd706a4f4cb26f3a7b,https://github.com/ApollosProject/apollos-apps/commit/2d6044ccc2540d6515918ccd706a4f4cb26f3a7b,"<s>Apollos Apps is an open source platform for launching church-related apps. In Apollos Apps versions prior to 2.20.0, new user registrations are able to access anyone's account by only knowing their basic profile information (name, birthday, gender, etc). This includes all app functionality within the app, as well as any authenticated links to Rock-based webpages (such as giving and events). There is a patch in version 2.20.0. As a workaround, one can patch one's server by overriding the `create` data source method on the `People` class.</s>","<s>chore: makes app developement faster (#1974)
* chore: makes app developement faster
uses the default URL for the API so there's no need to type in the encryption password
* made it optional
Co-authored-by: Vincent Wilson <vince@classyh.at>
</s>"," diff --git a/scripts/setup-api.sh b/scripts/setup-api.sh
index 2f92036f..2e0a720c 100755
--- a/scripts/setup-api.sh
+++ b/scripts/setup-api.sh
@@ -19,6 +19,7 @@ cd ..
 
 shopt -s dotglob
 mv apollos-templates/apollos-church-api/* ../ApollosApi
+cp apollos-templates/yarn.lock ../ApollosApi
 
 cd ..
 
",0.0,,0.0,lime
,,,,,,,,,
CVE-2014-2068,CVE-2014-2068/0530a6645aac10fec005614211660e98db44b5eb,https://github.com/jenkinsci/jenkins/commit/0530a6645aac10fec005614211660e98db44b5eb,<s>The doIndex function in hudson/util/RemotingDiagnostics.java in CloudBees Jenkins before 1.551 and LTS before 1.532.2 allows remote authenticated users with the ADMINISTER permission to obtain sensitive information via vectors related to heapDump.</s>,"<s>[FIXED SECURITY-73] Require RUN_SCRIPTS for /heapDump.
</s>"," diff --git a/core/src/main/java/hudson/util/RemotingDiagnostics.java b/core/src/main/java/hudson/util/RemotingDiagnostics.java
index 408c9931f4..8f014bbcf8 100644
--- a/core/src/main/java/hudson/util/RemotingDiagnostics.java
+++ b/core/src/main/java/hudson/util/RemotingDiagnostics.java
@@ -202,7 +202,7 @@ public final class RemotingDiagnostics {
 
         @WebMethod(name=""heapdump.hprof"")
         public void doHeapDump(StaplerRequest req, StaplerResponse rsp) throws IOException, InterruptedException {
-            owner.checkPermission(Jenkins.ADMINISTER);
+            owner.checkPermission(Jenkins.RUN_SCRIPTS);
             rsp.setContentType(""application/octet-stream"");
 
             FilePath dump = obtain();
",1.0,1.0,1.0,tfidf
CVE-2014-2068,CVE-2014-2068/2a9197d36dcd544b94ea2b5e2057a6bcb15552fc,https://github.com/jenkinsci/jenkins/commit/2a9197d36dcd544b94ea2b5e2057a6bcb15552fc,<s>The doIndex function in hudson/util/RemotingDiagnostics.java in CloudBees Jenkins before 1.551 and LTS before 1.532.2 allows remote authenticated users with the ADMINISTER permission to obtain sensitive information via vectors related to heapDump.</s>,"<s>Better diagnostics than Failed to get backup version: indicate what file was broken.
</s>"," diff --git a/core/src/main/java/hudson/PluginWrapper.java b/core/src/main/java/hudson/PluginWrapper.java
index 3245888194..9ac22a3eab 100644
--- a/core/src/main/java/hudson/PluginWrapper.java
+++ b/core/src/main/java/hudson/PluginWrapper.java
@@ -581,7 +581,7 @@ public class PluginWrapper implements Comparable<PluginWrapper>, ModelObject {
                     backupPlugin.close();
                 }
             } catch (IOException e) {
-                LOGGER.log(WARNING, ""Failed to get backup version "", e);
+                LOGGER.log(WARNING, ""Failed to get backup version from "" + backup, e);
                 return null;
             }
         } else {
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2016-7405,CVE-2016-7405/bd9eca9f40220f9918ec3cc7ae9ef422b3e448b8,https://github.com/ADOdb/ADOdb/commit/bd9eca9f40220f9918ec3cc7ae9ef422b3e448b8,<s>The qstr method in the PDO driver in the ADOdb Library for PHP before 5.x before 5.20.7 might allow remote attackers to conduct SQL injection attacks via vectors related to incorrect quoting.</s>,"<s>PDO: fix incorrect quoting allowing SQL injection
The PDO driver was relying on ADOConnection::qstr() for quoting strings.
An application relying on qstr() to manually prepare SQL statements
rather than using parameterized queries may be vulnerable to SQL
injection attacks, as demonstrated by @jdavidlists.
This commit delegates string quoting to PDO::quote() when a connection
is available. If not, it simply replaces single quotes by the value of
$replaceQuote property.
Fixes #226
</s>"," diff --git a/drivers/adodb-pdo.inc.php b/drivers/adodb-pdo.inc.php
index e3f49a4f..63a3e6e0 100644
--- a/drivers/adodb-pdo.inc.php
+++ b/drivers/adodb-pdo.inc.php
@@ -518,6 +518,30 @@ class ADODB_pdo extends ADOConnection {
 	{
 		return ($this->_connectionID) ? $this->_connectionID->lastInsertId() : 0;
 	}
+
+	/**
+	 * Quotes a string to be sent to the database.
+	 * If we have an active connection, delegates quoting to the underlying
+	 * PDO object. Otherwise, replace ""'"" by the value of $replaceQuote (same
+	 * behavior as mysqli driver)
+	 * @param string  $s            The string to quote
+	 * @param boolean $magic_quotes If false, use PDO::quote().
+	 * @return string Quoted string
+	 */
+	function qstr($s, $magic_quotes = false)
+	{
+		if (!$magic_quotes) {
+			if ($this->_connectionID) {
+				return $this->_connectionID->quote($s);
+			}
+			return ""'"" . str_replace(""'"", $this->replaceQuote, $s) . ""'"";
+		}
+
+		// undo magic quotes for ""
+		$s = str_replace('\\""', '""', $s);
+		return ""'$s'"";
+	}
+
 }
 
 class ADODB_pdo_base extends ADODB_pdo {
",1.0,3.0,1.0,lime
CVE-2016-7405,CVE-2016-7405/bfb32f996ece70578ca9189dff026b19e46bb61d,https://github.com/ADOdb/ADOdb/commit/bfb32f996ece70578ca9189dff026b19e46bb61d,<s>The qstr method in the PDO driver in the ADOdb Library for PHP before 5.x before 5.20.7 might allow remote attackers to conduct SQL injection attacks via vectors related to incorrect quoting.</s>,"<s>PDO/mysql: fix MetaTables broken SQL
When a schema is specified in $showSchema, the function generates an
invalid where clause:
WHERE TABLE_SCHEMA= from myschema
                    ^
                    should be 'myschema'
Fixes #275
</s>"," diff --git a/drivers/adodb-pdo_mysql.inc.php b/drivers/adodb-pdo_mysql.inc.php
index b1df4c35..8eaba8ae 100644
--- a/drivers/adodb-pdo_mysql.inc.php
+++ b/drivers/adodb-pdo_mysql.inc.php
@@ -70,7 +70,7 @@ class ADODB_pdo_mysql extends ADODB_pdo {
 	{
 		$save = $this->metaTablesSQL;
 		if ($showSchema && is_string($showSchema)) {
-			$this->metaTablesSQL .= "" from $showSchema"";
+			$this->metaTablesSQL .= $this->qstr($showSchema);
 		} else {
 			$this->metaTablesSQL .= 'schema()';
 		}
",0.0,,0.0,lime
,,,,,,,,,
CVE-2019-20839,CVE-2019-20839/3fd03977c9b35800d73a865f167338cb4d05b0c1,https://github.com/LibVNC/libvncserver/commit/3fd03977c9b35800d73a865f167338cb4d05b0c1,<s>libvncclient/sockets.c in LibVNCServer before 0.9.13 has a buffer overflow via a long socket filename.</s>,"<s>libvncclient: bail out if unix socket name would overflow
Closes #291
</s>"," diff --git a/libvncclient/sockets.c b/libvncclient/sockets.c
index f042472f..821f85ca 100644
--- a/libvncclient/sockets.c
+++ b/libvncclient/sockets.c
@@ -461,6 +461,10 @@ ConnectClientToUnixSock(const char *sockFile)
   int sock;
   struct sockaddr_un addr;
   addr.sun_family = AF_UNIX;
+  if(strlen(sockFile) + 1 > sizeof(addr.sun_path)) {
+      rfbClientErr(""ConnectToUnixSock: socket file name too long\n"");
+      return -1;
+  }
   strcpy(addr.sun_path, sockFile);
 
   sock = socket(AF_UNIX, SOCK_STREAM, 0);
",1.0,3.0,1.0,lime
CVE-2019-20839,CVE-2019-20839/be31f456421e0bb04cb78a714cb76c7110448832,https://github.com/LibVNC/libvncserver/commit/be31f456421e0bb04cb78a714cb76c7110448832,<s>libvncclient/sockets.c in LibVNCServer before 0.9.13 has a buffer overflow via a long socket filename.</s>,"<s>LibVNCServer: fix a for loop for C90
</s>"," diff --git a/libvncserver/sockets.c b/libvncserver/sockets.c
index 70250431..0320a269 100644
--- a/libvncserver/sockets.c
+++ b/libvncserver/sockets.c
@@ -493,7 +493,7 @@ rfbProcessNewConnection(rfbScreenInfoPtr rfbScreen)
     int chosen_listen_sock = -1;
 #if defined LIBVNCSERVER_HAVE_SYS_RESOURCE_H && defined LIBVNCSERVER_HAVE_FCNTL_H
     struct rlimit rlim;
-    size_t maxfds, curfds;
+    size_t maxfds, curfds, i;
 #endif
     /* Do another select() call to find out which listen socket
        has an incoming connection pending. We know that at least 
@@ -528,7 +528,7 @@ rfbProcessNewConnection(rfbScreenInfoPtr rfbScreen)
 
     /* get the number of currently open fds as per https://stackoverflow.com/a/7976880/361413 */
     curfds = 0;
-    for(size_t i = 0; i < maxfds; ++i)
+    for(i = 0; i < maxfds; ++i)
 	if(fcntl(i, F_GETFD) != -1)
 	    ++curfds;
 
",0.0,,0.0,lime
,,,,,,,,,
CVE-2022-1993,CVE-2022-1993/9bf748b6c4c9a17d3aa77f6b9abcfae65451febf,https://github.com/gogs/gogs/commit/9bf748b6c4c9a17d3aa77f6b9abcfae65451febf,<s>Path Traversal in GitHub repository gogs/gogs prior to 0.12.9.</s>,"<s>http: clean request path from Git endpoints (#7022)

</s>"," diff --git a/CHANGELOG.md b/CHANGELOG.md
index 765d6935..cb3e5cfe 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -26,6 +26,7 @@ All notable changes to Gogs are documented in this file.
 - _Security:_ OS Command Injection in file editor. [#7000](https://github.com/gogs/gogs/issues/7000)
 - _Security:_ Sanitize `DisplayName` in repository issue list. [#7009](https://github.com/gogs/gogs/pull/7009)
 - _Security:_ Path Traversal in file editor on Windows. [#7001](https://github.com/gogs/gogs/issues/7001)
+- _Security:_ Path Traversal in Git HTTP endpoints. [#7002](https://github.com/gogs/gogs/issues/7002)
 - Unable to use LDAP authentication on ARM machines. [#6761](https://github.com/gogs/gogs/issues/6761)
 - Unable to init repository during creation on Windows. [#6967](https://github.com/gogs/gogs/issues/6967)
 - Mysterious panic on `Value not found for type *repo.HTTPContext`. [#6963](https://github.com/gogs/gogs/issues/6963)
",0.0,,1.0,tfidf
CVE-2022-1993,CVE-2022-1993/4a89438454f9b437c22e1265ed1d81c6686f33e6,https://github.com/gogs/gogs/commit/4a89438454f9b437c22e1265ed1d81c6686f33e6,<s>Path Traversal in GitHub repository gogs/gogs prior to 0.12.9.</s>,"<s>ci: update GitHub Actions (#6612)

</s>"," diff --git a/.github/workflows/go.yml b/.github/workflows/go.yml
index 7100cab0..30c9901a 100644
--- a/.github/workflows/go.yml
+++ b/.github/workflows/go.yml
@@ -34,8 +34,8 @@ jobs:
     name: Test
     strategy:
       matrix:
-        go-version: [1.14.x, 1.15.x, 1.16.x]
-        platform: [ubuntu-latest, macos-latest, windows-latest]
+        go-version: [ 1.15.x, 1.16.x, 1.17.x ]
+        platform: [ ubuntu-latest, macos-latest, windows-latest ]
     runs-on: ${{ matrix.platform }}
     steps:
       - name: Install Go
@@ -44,18 +44,10 @@ jobs:
           go-version: ${{ matrix.go-version }}
       - name: Checkout code
         uses: actions/checkout@v2
-      - name: Cache downloaded modules
-        uses: actions/cache@v1
-        with:
-          path: ~/go/pkg/mod
-          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
-          restore-keys: |
-            ${{ runner.os }}-go-
-      - name: Run unit tests
+      - name: Run tests with coverage
         run: go test -v -race -coverprofile=coverage -covermode=atomic ./...
       - name: Upload coverage report to Codecov
         uses: codecov/codecov-action@v1.5.0
         with:
           file: ./coverage
           flags: unittests
-
",1.0,,0.0,tfidf
,,,,,,,,,
CVE-2021-3664,CVE-2021-3664/81ab967889b08112d3356e451bf03e6aa0cbb7e0,https://github.com/unshiftio/url-parse/commit/81ab967889b08112d3356e451bf03e6aa0cbb7e0,<s>url-parse is vulnerable to URL Redirection to Untrusted Site</s>,"<s>[fix] Ignore slashes after the protocol for special URLs
Fixes #205
Fixes #206
</s>"," diff --git a/index.js b/index.js
index 94e357e..f424acc 100644
--- a/index.js
+++ b/index.js
@@ -98,6 +98,24 @@ function lolcation(loc) {
   return finaldestination;
 }
 
+/**
+ * Check whether a protocol scheme is special.
+ *
+ * @param {String} The protocol scheme of the URL
+ * @return {Boolean} `true` if the protocol scheme is special, else `false`
+ * @private
+ */
+function isSpecial(scheme) {
+  return (
+    scheme === 'file:' ||
+    scheme === 'ftp:' ||
+    scheme === 'http:' ||
+    scheme === 'https:' ||
+    scheme === 'ws:' ||
+    scheme === 'wss:'
+  );
+}
+
 /**
  * @typedef ProtocolExtract
  * @type Object
@@ -110,16 +128,32 @@ function lolcation(loc) {
  * Extract protocol information from a URL with/without double slash (""//"").
  *
  * @param {String} address URL we want to extract from.
+ * @param {Object} location
  * @return {ProtocolExtract} Extracted information.
  * @private
  */
-function extractProtocol(address) {
+function extractProtocol(address, location) {
   address = trimLeft(address);
+  location = location || {};
 
-  var match = protocolre.exec(address)
-    , protocol = match[1] ? match[1].toLowerCase() : ''
-    , slashes = !!(match[2] && match[2].length >= 2)
-    , rest =  match[2] && match[2].length === 1 ? '/' + match[3] : match[3];
+  var match = protocolre.exec(address);
+  var protocol = match[1] ? match[1].toLowerCase() : '';
+  var rest = match[2] ? match[2] + match[3] : match[3];
+  var slashes = !!(match[2] && match[2].length >= 2);
+
+  if (protocol === 'file:') {
+    if (slashes) {
+      rest = rest.slice(2);
+    }
+  } else if (isSpecial(protocol)) {
+    rest = match[3];
+  } else if (protocol) {
+    if (rest.indexOf('//') === 0) {
+      rest = rest.slice(2);
+    }
+  } else if (slashes && location.hostname) {
+    rest = match[3];
+  }
 
   return {
     protocol: protocol,
@@ -214,7 +248,7 @@ function Url(address, location, parser) {
   //
   // Extract protocol information before running the instructions.
   //
-  extracted = extractProtocol(address || '');
+  extracted = extractProtocol(address || '', location);
   relative = !extracted.protocol && !extracted.slashes;
   url.slashes = extracted.slashes || relative && location.slashes;
   url.protocol = extracted.protocol || location.protocol || '';
@@ -224,7 +258,10 @@ function Url(address, location, parser) {
   // When the authority component is absent the URL starts with a path
   // component.
   //
-  if (!extracted.slashes || url.protocol === 'file:') {
+  if (
+    url.protocol === 'file:' ||
+    (!extracted.slashes && !isSpecial(extracted.protocol))
+  ) {
     instructions[3] = [/(.*)/, 'pathname'];
   }
 
",1.0,2.0,1.0,tfidf
CVE-2021-3664,CVE-2021-3664/94872e7ab9103ee69b958959baa14c9e682a7f10,https://github.com/unshiftio/url-parse/commit/94872e7ab9103ee69b958959baa14c9e682a7f10,<s>url-parse is vulnerable to URL Redirection to Untrusted Site</s>,"<s>[fix] Do not incorrectly set the `slashes` property to `true`
Set it to `true` only if the protocol is special or if it is actually
followed by two forward slashes.
</s>"," diff --git a/test/test.js b/test/test.js
index 9a84fba..71cc473 100644
--- a/test/test.js
+++ b/test/test.js
@@ -71,7 +71,8 @@ describe('url-parse', function () {
       assume(parse.extractProtocol('http://example.com')).eql({
         slashes: true,
         protocol: 'http:',
-        rest: 'example.com'
+        rest: 'example.com',
+        slashesCount: 2
       });
     });
 
@@ -79,7 +80,8 @@ describe('url-parse', function () {
       assume(parse.extractProtocol('')).eql({
         slashes: false,
         protocol: '',
-        rest: ''
+        rest: '',
+        slashesCount: 0
       });
     });
 
@@ -87,13 +89,15 @@ describe('url-parse', function () {
       assume(parse.extractProtocol('/foo')).eql({
         slashes: false,
         protocol: '',
-        rest: '/foo'
+        rest: '/foo',
+        slashesCount: 1
       });
 
       assume(parse.extractProtocol('//foo/bar')).eql({
         slashes: true,
         protocol: '',
-        rest: '//foo/bar'
+        rest: '//foo/bar',
+        slashesCount: 2
       });
     });
 
@@ -103,7 +107,8 @@ describe('url-parse', function () {
       assume(parse.extractProtocol(input)).eql({
         slashes: false,
         protocol: '',
-        rest: input
+        rest: input,
+        slashesCount: 0
       });
     });
 
@@ -111,7 +116,8 @@ describe('url-parse', function () {
       assume(parse.extractProtocol(' javascript://foo')).eql({
         slashes: true,
         protocol: 'javascript:',
-        rest: 'foo'
+        rest: 'foo',
+        slashesCount: 2
       });
     });
   });
@@ -281,6 +287,12 @@ describe('url-parse', function () {
 
     assume(parsed.host).equals('what-is-up.com');
     assume(parsed.href).equals('http://what-is-up.com/');
+
+    url = '\\\\\\\\what-is-up.com'
+    parsed = parse(url, parse('http://google.com'));
+
+    assume(parsed.host).equals('what-is-up.com');
+    assume(parsed.href).equals('http://what-is-up.com/');
   });
 
   it('ignores slashes after the protocol for special URLs', function () {
@@ -290,32 +302,44 @@ describe('url-parse', function () {
     assume(parsed.host).equals('github.com');
     assume(parsed.hostname).equals('github.com');
     assume(parsed.pathname).equals('/foo/bar');
+    assume(parsed.slashes).is.true();
+    assume(parsed.href).equals('https://github.com/foo/bar');
 
     url = 'https:/\\/\\/\\github.com/foo/bar';
     parsed = parse(url);
     assume(parsed.host).equals('github.com');
     assume(parsed.hostname).equals('github.com');
     assume(parsed.pathname).equals('/foo/bar');
+    assume(parsed.slashes).is.true();
+    assume(parsed.href).equals('https://github.com/foo/bar');
 
     url = 'https:/github.com/foo/bar';
     parsed = parse(url);
     assume(parsed.host).equals('github.com');
     assume(parsed.pathname).equals('/foo/bar');
+    assume(parsed.slashes).is.true();
+    assume(parsed.href).equals('https://github.com/foo/bar');
 
     url = 'https:\\github.com/foo/bar';
     parsed = parse(url);
     assume(parsed.host).equals('github.com');
     assume(parsed.pathname).equals('/foo/bar');
+    assume(parsed.slashes).is.true();
+    assume(parsed.href).equals('https://github.com/foo/bar');
 
     url = 'https:github.com/foo/bar';
     parsed = parse(url);
     assume(parsed.host).equals('github.com');
     assume(parsed.pathname).equals('/foo/bar');
+    assume(parsed.slashes).is.true();
+    assume(parsed.href).equals('https://github.com/foo/bar');
 
     url = 'https:github.com/foo/bar';
     parsed = parse(url);
     assume(parsed.host).equals('github.com');
     assume(parsed.pathname).equals('/foo/bar');
+    assume(parsed.slashes).is.true();
+    assume(parsed.href).equals('https://github.com/foo/bar');
   });
 
   it('handles slashes after the protocol for non special URLs', function () {
@@ -325,24 +349,28 @@ describe('url-parse', function () {
     assume(parsed.hostname).equals('');
     assume(parsed.pathname).equals('example.com');
     assume(parsed.href).equals('foo:example.com');
+    assume(parsed.slashes).is.false();
 
     url = 'foo:/example.com';
     parsed = parse(url);
     assume(parsed.hostname).equals('');
     assume(parsed.pathname).equals('/example.com');
     assume(parsed.href).equals('foo:/example.com');
+    assume(parsed.slashes).is.false();
 
     url = 'foo://example.com';
     parsed = parse(url);
     assume(parsed.hostname).equals('example.com');
     assume(parsed.pathname).equals('/');
     assume(parsed.href).equals('foo://example.com/');
+    assume(parsed.slashes).is.true();
 
     url = 'foo:///example.com';
     parsed = parse(url);
     assume(parsed.hostname).equals('');
     assume(parsed.pathname).equals('/example.com');
     assume(parsed.href).equals('foo:///example.com');
+    assume(parsed.slashes).is.true();
   })
 
   describe('origin', function () {
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2016-9540,CVE-2016-9540/5ad9d8016fbb60109302d558f7edb2cb2a3bb8e3,https://github.com/vadz/libtiff/commit/5ad9d8016fbb60109302d558f7edb2cb2a3bb8e3,"<s>tools/tiffcp.c in libtiff 4.0.6 has an out-of-bounds write on tiled images with odd tile width versus image width. Reported as MSVR 35103, aka ""cpStripToTile heap-buffer-overflow.""</s>","<s>* tools/tiffcp.c: fix out-of-bounds write on tiled images with odd
tile width vs image width. Reported as MSVR 35103
by Axel Souchet and Vishal Chauhan from the MSRC Vulnerabilities &
Mitigations team.
</s>"," diff --git a/ChangeLog b/ChangeLog
index 8b57d1b1..d38f3a51 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,10 @@
+2016-10-08 Even Rouault <even.rouault at spatialys.com>
+
+	* tools/tiffcp.c: fix out-of-bounds write on tiled images with odd
+	tile width vs image width. Reported as MSVR 35103
+	by Axel Souchet and Vishal Chauhan from the MSRC Vulnerabilities &
+	Mitigations team.
+
 2016-10-08 Even Rouault <even.rouault at spatialys.com>
 
 	* tools/tiff2pdf.c: fix read -largely- outsize of buffer in
",1.0,3.0,1.0,lime
CVE-2016-9540,CVE-2016-9540/43c0b81a818640429317c80fea1e66771e85024b,https://github.com/vadz/libtiff/commit/43c0b81a818640429317c80fea1e66771e85024b,"<s>tools/tiffcp.c in libtiff 4.0.6 has an out-of-bounds write on tiled images with odd tile width versus image width. Reported as MSVR 35103, aka ""cpStripToTile heap-buffer-overflow.""</s>","<s>* tools/tiffcp.c: fix read of undefined variable in case of missing
required tags. Found on test case of MSVR 35100.
* tools/tiffcrop.c: fix read of undefined buffer in
readContigStripsIntoBuffer() due to uint16 overflow. Probably not a
security issue but I can be wrong. Reported as MSVR 35100 by Axel
Souchet from the MSRC Vulnerabilities & Mitigations team.
</s>"," diff --git a/tools/tiffcp.c b/tools/tiffcp.c
index ba2b715c..4ad74d39 100644
--- a/tools/tiffcp.c
+++ b/tools/tiffcp.c
@@ -592,8 +592,8 @@ static	copyFunc pickCopyFunc(TIFF*, TIFF*, uint16, uint16);
 static int
 tiffcp(TIFF* in, TIFF* out)
 {
-	uint16 bitspersample, samplesperpixel;
-	uint16 input_compression, input_photometric;
+	uint16 bitspersample, samplesperpixel = 1;
+	uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK;
 &	copyFunc cf;

	uint32 width, length;
ries	struct cpTag* p;
simple.dallas.tx.us>
 
 	* html: Change as many remotesensing.org broken links to a working
",0.0,,0.0,lime
,,,,,,,,,
CVE-2019-12109,CVE-2019-12109/86030db849260dd8fb2ed975b9890aef1b62b692,https://github.com/miniupnp/miniupnp/commit/86030db849260dd8fb2ed975b9890aef1b62b692,<s>A Denial Of Service vulnerability in MiniUPnP MiniUPnPd through 2.1 exists due to a NULL pointer dereference in GetOutboundPinholeTimeout in upnpsoap.c for rem_port.</s>,"<s>fix error from commit 13585f15c7f7dc28bbbba1661efb280d530d114c
</s>"," diff --git a/miniupnpd/upnpsoap.c b/miniupnpd/upnpsoap.c
index 997b325..acd7fed 100644
--- a/miniupnpd/upnpsoap.c
+++ b/miniupnpd/upnpsoap.c
@@ -1850,7 +1850,7 @@ GetOutboundPinholeTimeout(struct upnphttp * h, const char * action, const char *
 	rem_port = GetValueFromNameValueList(&data, ""RemotePort"");
 	protocol = GetValueFromNameValueList(&data, ""Protocol"");
 
-	if (!int_port || !ext_port || !protocol)
+	if (!int_port || !rem_port || !protocol)
 	{
 		ClearNameValueList(&data);
 		SoapError(h, 402, ""Invalid Args"");
",0.0,,1.0,lime
CVE-2019-12109,CVE-2019-12109/13585f15c7f7dc28bbbba1661efb280d530d114c,https://github.com/miniupnp/miniupnp/commit/13585f15c7f7dc28bbbba1661efb280d530d114c,<s>A Denial Of Service vulnerability in MiniUPnP MiniUPnPd through 2.1 exists due to a NULL pointer dereference in GetOutboundPinholeTimeout in upnpsoap.c for rem_port.</s>,"<s>GetOutboundPinholeTimeout: check args
</s>"," diff --git a/miniupnpd/upnpsoap.c b/miniupnpd/upnpsoap.c
index e7193c0..997b325 100644
--- a/miniupnpd/upnpsoap.c
+++ b/miniupnpd/upnpsoap.c
@@ -1850,6 +1850,13 @@ GetOutboundPinholeTimeout(struct upnphttp * h, const char * action, const char *
 	rem_port = GetValueFromNameValueList(&data, ""RemotePort"");
 	protocol = GetValueFromNameValueList(&data, ""Protocol"");
 
+	if (!int_port || !ext_port || !protocol)
+	{
+		ClearNameValueList(&data);
+		SoapError(h, 402, ""Invalid Args"");
+		return;
+	}
+
 	rport = (unsigned short)atoi(rem_port);
 	iport = (unsigned short)atoi(int_port);
 	/*proto = atoi(protocol);*/
",1.0,3.0,0.0,lime
,,,,,,,,,
CVE-2012-0047,CVE-2012-0047/2faab951738702b0251ed41e5b137bd5a9fc127d,https://github.com/apache/wicket/commit/2faab951738702b0251ed41e5b137bd5a9fc127d,<s>Cross-site scripting (XSS) vulnerability in Apache Wicket 1.4.x before 1.4.20 allows remote attackers to inject arbitrary web script or HTML via the wicket:pageMapName parameter.</s>,"<s>Escape pageMap's name from characters which may break the produced HTML.
</s>"," diff --git a/wicket/src/main/java/org/apache/wicket/Page.java b/wicket/src/main/java/org/apache/wicket/Page.java
index b7bcd6b0fe..c19871c6ae 100644
--- a/wicket/src/main/java/org/apache/wicket/Page.java
+++ b/wicket/src/main/java/org/apache/wicket/Page.java
@@ -44,6 +44,7 @@ import org.apache.wicket.settings.IDebugSettings;
 import org.apache.wicket.util.lang.Classes;
 import org.apache.wicket.util.lang.Objects;
 import org.apache.wicket.util.string.StringValue;
+import org.apache.wicket.util.string.Strings;
 import org.apache.wicket.version.IPageVersionManager;
 import org.apache.wicket.version.undo.Change;
 import org.slf4j.Logger;
@@ -1248,6 +1249,10 @@ public abstract class Page extends MarkupContainer implements IRedirectListener,
 		{
 			RequestParameters parameters = getRequest().getRequestParameters();
 			pageMapName = parameters.getPageMapName();
+			if (pageMapName != null)
+			{
+				pageMapName = Strings.escapeMarkup(pageMapName).toString();
+			}
 		}
 
 		final IPageMap pageMap = PageMap.forName(pageMapName);
",0.0,,1.0,tfidf
CVE-2012-0047,CVE-2012-0047/df2784e1092d6456533b94334fed96faf64b0d6c,https://github.com/apache/wicket/commit/df2784e1092d6456533b94334fed96faf64b0d6c,<s>Cross-site scripting (XSS) vulnerability in Apache Wicket 1.4.x before 1.4.20 allows remote attackers to inject arbitrary web script or HTML via the wicket:pageMapName parameter.</s>,"<s>restoring the PopupSettings(IPageMap pageMapName, final int displayFlags) constructor as deprecated
Issue: WICKET-3109

git-svn-id: https://svn.apache.org/repos/asf/wicket/branches/wicket-1.4.x@1064282 13f79535-47bb-0310-9956-ffa450edef68
</s>"," diff --git a/wicket/src/main/java/org/apache/wicket/markup/html/link/PopupSettings.java b/wicket/src/main/java/org/apache/wicket/markup/html/link/PopupSettings.java
index d936241430..ed9ab25cb9 100644
--- a/wicket/src/main/java/org/apache/wicket/markup/html/link/PopupSettings.java
+++ b/wicket/src/main/java/org/apache/wicket/markup/html/link/PopupSettings.java
@@ -120,7 +120,7 @@ public class PopupSettings implements IClusterable
 	 */
 	public PopupSettings(final int displayFlags)
 	{
-		this(null, displayFlags);
+		this((String)null, displayFlags);
 	}
 
 	/**
@@ -154,6 +154,15 @@ public class PopupSettings implements IClusterable
 		this(pageMapName, 0);
 	}
 
+	/**
+	 * @deprecated Use the {@link PopupSettings#PopupSettings(String, int)}
+	 */
+	@Deprecated
+	public PopupSettings(IPageMap pageMapName, final int displayFlags)
+	{
+		this(pageMapName.getName(), displayFlags);
+	}
+
 	/**
 	 * Construct.
 	 * 
",1.0,1.0,0.0,tfidf
,,,,,,,,,
CVE-2022-25856,CVE-2022-25856/d0f66dbce78bc31923ca057b20fc722aa24ca961,https://github.com/argoproj/argo-events/commit/d0f66dbce78bc31923ca057b20fc722aa24ca961,<s>The package github.com/argoproj/argo-events/sensors/artifacts before 1.7.1 are vulnerable to Directory Traversal in the (g *GitArtifactReader).Read() API in git.go. This could allow arbitrary file reads if the GitArtifactReader is provided a pathname containing a symbolic link or an implicit directory name such as ...</s>,"<s>fix: git artifactory arbitrary file read issue (#1965)
Signed-off-by: Derek Wang <whynowy@gmail.com>
</s>"," diff --git a/sensors/artifacts/git.go b/sensors/artifacts/git.go
index 6e6d26ed..0965082a 100644
--- a/sensors/artifacts/git.go
+++ b/sensors/artifacts/git.go
@@ -20,6 +20,8 @@ import (
 	""fmt""
 	""io/ioutil""
 	""os""
+	""path""
+	""strings""
 
 	""github.com/go-git/go-git/v5""
 	""github.com/go-git/go-git/v5/config""
@@ -44,6 +46,8 @@ var (
 		""refs/*:refs/*"",
 		""HEAD:refs/heads/HEAD"",
 	}
+
+	notAllowedInPath = []string{"".."", ""~"", ""\\""}
 )
 
 type GitArtifactReader struct {
@@ -52,6 +56,15 @@ type GitArtifactReader struct {
 
 // NewGitReader returns a new git reader
 func NewGitReader(gitArtifact *v1alpha1.GitArtifact) (*GitArtifactReader, error) {
+	if gitArtifact == nil {
+		return nil, fmt.Errorf(""nil git artifact"")
+	}
+	for _, na := range notAllowedInPath {
+		if strings.Contains(gitArtifact.FilePath, na) {
+			return nil, fmt.Errorf(""%q is not allowed in the filepath"", na)
+		}
+	}
+
 	return &GitArtifactReader{
 		artifact: gitArtifact,
 	}, nil
@@ -176,8 +189,16 @@ func (g *GitArtifactReader) readFromRepository(r *git.Repository, dir string) ([
 			return nil, fmt.Errorf(""failed to pull latest updates. err: %+v"", err)
 		}
 	}
-
-	return ioutil.ReadFile(fmt.Sprintf(""%s/%s"", dir, g.artifact.FilePath))
+	filePath := fmt.Sprintf(""%s/%s"", dir, g.artifact.FilePath)
+	// symbol link is not allowed due to security concern
+	isSymbolLink, err := isSymbolLink(filePath)
+	if err != nil {
+		return nil, err
+	}
+	if isSymbolLink {
+		return nil, fmt.Errorf(""%q is a symbol link which is not allowed"", g.artifact.FilePath)
+	}
+	return ioutil.ReadFile(filePath)
 }
 
 func (g *GitArtifactReader) getBranchOrTag() *git.CheckoutOptions {
@@ -241,3 +262,14 @@ func (g *GitArtifactReader) Read() ([]byte, error) {
 	}
 	return g.readFromRepository(r, cloneDir)
 }
+
+func isSymbolLink(filepath string) (bool, error) {
+	fi, err := os.Lstat(path.Clean(filepath))
+	if err != nil {
+		return false, err
+	}
+	if fi.Mode()&os.ModeSymlink != 0 {
+		return true, nil
+	}
+	return false, nil
+}
",1.0,1.0,1.0,lime
CVE-2022-25856,CVE-2022-25856/abf5b8ef0ca87cbd5fd79adef22e1bcc029668bb,https://github.com/argoproj/argo-events/commit/abf5b8ef0ca87cbd5fd79adef22e1bcc029668bb,<s>The package github.com/argoproj/argo-events/sensors/artifacts before 1.7.1 are vulnerable to Directory Traversal in the (g *GitArtifactReader).Read() API in git.go. This could allow arbitrary file reads if the GitArtifactReader is provided a pathname containing a symbolic link or an implicit directory name such as ...</s>,"<s>chore: expose git artifactory InsecureIgnoreHostKey in user spec (#1982)
Signed-off-by: Derek Wang <whynowy@gmail.com>
</s>"," diff --git a/sensors/artifacts/git.go b/sensors/artifacts/git.go
index 406323ef..baa88b55 100644
--- a/sensors/artifacts/git.go
+++ b/sensors/artifacts/git.go
@@ -76,7 +76,7 @@ func (g *GitArtifactReader) getRemote() string {
 	return DefaultRemote
 }
 
-func getSSHKeyAuth(sshKeyFile string) (transport.AuthMethod, error) {
+func getSSHKeyAuth(sshKeyFile string, insecureIgnoreHostKey bool) (transport.AuthMethod, error) {
 	sshKey, err := os.ReadFile(sshKeyFile)
 	if err != nil {
 		return nil, fmt.Errorf(""failed to read ssh key file. err: %+v"", err)
@@ -86,7 +86,9 @@ func getSSHKeyAuth(sshKeyFile string) (transport.AuthMethod, error) {
 		return nil, fmt.Errorf(""failed to parse ssh key. err: %+v"", err)
 	}
 	auth := &go_git_ssh.PublicKeys{User: ""git"", Signer: signer}
-	auth.HostKeyCallback = ssh.InsecureIgnoreHostKey()
+	if insecureIgnoreHostKey {
+		auth.HostKeyCallback = ssh.InsecureIgnoreHostKey()
+	}
 	return auth, nil
 }
 
@@ -110,7 +112,7 @@ func (g *GitArtifactReader) getGitAuth() (transport.AuthMethod, error) {
 		if err != nil {
 			return nil, errors.Wrap(err, ""failed to get SSH key from mounted volume"")
 		}
-		return getSSHKeyAuth(sshKeyPath)
+		return getSSHKeyAuth(sshKeyPath, g.artifact.InsecureIgnoreHostKey)
 	}
 	return nil, nil
 }
",0.0,,0.0,lime
,,,,,,,,,
CVE-2016-3995,CVE-2016-3995/9f335d719ebc27f58251559240de0077ec42c583,https://github.com/weidai11/cryptopp/commit/9f335d719ebc27f58251559240de0077ec42c583,"<s>The timing attack protection in Rijndael::Enc::ProcessAndXorBlock and Rijndael::Dec::ProcessAndXorBlock in Crypto++ (aka cryptopp) before 5.6.4 may be optimized out by the compiler, which allows attackers to conduct timing attacks.</s>","<s>Fix the Rijndael timing attack counter measure
</s>"," diff --git a/rijndael.cpp b/rijndael.cpp
index f394960d..92f9dea8 100644
--- a/rijndael.cpp
+++ b/rijndael.cpp
@@ -391,7 +391,7 @@ void Rijndael::Enc::ProcessAndXorBlock(const byte *inBlock, const byte *xorBlock
 	// timing attack countermeasure. see comments at top for more details
 	const int cacheLineSize = GetCacheLineSize();
 	unsigned int i;
-	word32 u = 0;
+	volatile word32 u = 0;
 #if defined(CRYPTOPP_ALLOW_UNALIGNED_DATA_ACCESS) || defined(CRYPTOPP_ALLOW_RIJNDAEL_UNALIGNED_DATA_ACCESS)
 	for (i=0; i<2048; i+=cacheLineSize)
 #else
@@ -467,7 +467,7 @@ void Rijndael::Dec::ProcessAndXorBlock(const byte *inBlock, const byte *xorBlock
 	// timing attack countermeasure. see comments at top for more details
 	const int cacheLineSize = GetCacheLineSize();
 	unsigned int i;
-	word32 u = 0;
+	volatile word32 u = 0;
 #if defined(CRYPTOPP_ALLOW_UNALIGNED_DATA_ACCESS) || defined(CRYPTOPP_ALLOW_RIJNDAEL_UNALIGNED_DATA_ACCESS)
 	for (i=0; i<2048; i+=cacheLineSize)
 #else
",0.0,,0.0,tfidf
CVE-2016-3995,CVE-2016-3995/22f493dda9674df574abba300cf75d12ae62d510,https://github.com/weidai11/cryptopp/commit/22f493dda9674df574abba300cf75d12ae62d510,"<s>The timing attack protection in Rijndael::Enc::ProcessAndXorBlock and Rijndael::Dec::ProcessAndXorBlock in Crypto++ (aka cryptopp) before 5.6.4 may be optimized out by the compiler, which allows attackers to conduct timing attacks.</s>","<s>Fix the Rijndael timing attack counter measure (Issue 146)
</s>"," diff --git a/rijndael.cpp b/rijndael.cpp
index ab9f70a0..71fa1b85 100644
--- a/rijndael.cpp
+++ b/rijndael.cpp
@@ -511,7 +511,7 @@ void Rijndael::Dec::ProcessAndXorBlock(const byte *inBlock, const byte *xorBlock
 	// timing attack countermeasure. see comments at top for more details
 	// If CRYPTOPP_ALLOW_UNALIGNED_DATA_ACCESS is defined, 
 	// QUARTER_ROUND_LD will use Td, which is already preloaded.
-	u = 0;
+	u = _u;
 	for (i=0; i<256; i+=cacheLineSize)
 		u &= *(const word32 *)(const void *)(Sd+i);
 	u &= *(const word32 *)(const void *)(Sd+252);
",1.0,1.0,1.0,tfidf
,,,,,,,,,
CVE-2019-20372,CVE-2019-20372/c1be55f97211d38b69ac0c2027e6812ab8b1b94e,https://github.com/nginx/nginx/commit/c1be55f97211d38b69ac0c2027e6812ab8b1b94e,"<s>NGINX before 1.17.7, with certain error_page configurations, allows HTTP request smuggling, as demonstrated by the ability of an attacker to read unauthorized web pages in environments where NGINX is being fronted by a load balancer.</s>","<s>Discard request body when redirecting to a URL via error_page.
Reported by Bert JW Regeer and Francisco Oca Gonzalez.
</s>"," diff --git a/src/http/ngx_http_special_response.c b/src/http/ngx_http_special_response.c
index 4ffb2cc8a..76e670588 100644
--- a/src/http/ngx_http_special_response.c
+++ b/src/http/ngx_http_special_response.c
@@ -623,6 +623,12 @@ ngx_http_send_error_page(ngx_http_request_t *r, ngx_http_err_page_t *err_page)
         return ngx_http_named_location(r, &uri);
     }
 
+    r->expect_tested = 1;
+
+    if (ngx_http_discard_request_body(r) != NGX_OK) {
+        r->keepalive = 0;
+    }
+
     location = ngx_list_push(&r->headers_out.headers);
 
     if (location == NULL) {
",0.0,,1.0,tfidf
CVE-2019-20372,CVE-2019-20372/be45a3aa590a5f7e64c6d55e8e0f78565adf4823,https://github.com/nginx/nginx/commit/be45a3aa590a5f7e64c6d55e8e0f78565adf4823,"<s>NGINX before 1.17.7, with certain error_page configurations, allows HTTP request smuggling, as demonstrated by the ability of an attacker to read unauthorized web pages in environments where NGINX is being fronted by a load balancer.</s>","<s>Saved some memory allocations.
In configurations when ""root"" has variables, some modules unnecessarily
allocated memory for the ""Location"" header value.
</s>"," diff --git a/src/http/modules/ngx_http_dav_module.c b/src/http/modules/ngx_http_dav_module.c
index 105a607ae..59ad2cedf 100644
--- a/src/http/modules/ngx_http_dav_module.c
+++ b/src/http/modules/ngx_http_dav_module.c
@@ -56,7 +56,7 @@ static ngx_int_t ngx_http_dav_copy_tree_file(ngx_tree_ctx_t *ctx,
 static ngx_int_t ngx_http_dav_depth(ngx_http_request_t *r, ngx_int_t dflt);
 static ngx_int_t ngx_http_dav_error(ngx_log_t *log, ngx_err_t err,
     ngx_int_t not_found, char *failed, u_char *path);
-static ngx_int_t ngx_http_dav_location(ngx_http_request_t *r, u_char *path);
+static ngx_int_t ngx_http_dav_location(ngx_http_request_t *r);
 static void *ngx_http_dav_create_loc_conf(ngx_conf_t *cf);
 static char *ngx_http_dav_merge_loc_conf(ngx_conf_t *cf,
     void *parent, void *child);
@@ -285,7 +285,7 @@ ngx_http_dav_put_handler(ngx_http_request_t *r)
     }
 
     if (status == NGX_HTTP_CREATED) {
-        if (ngx_http_dav_location(r, path.data) != NGX_OK) {
+        if (ngx_http_dav_location(r) != NGX_OK) {
             ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
             return;
         }
@@ -520,9 +520,7 @@ ngx_http_dav_mkcol_handler(ngx_http_request_t *r, ngx_http_dav_loc_conf_t *dlcf)
     if (ngx_create_dir(path.data, ngx_dir_access(dlcf->access))
         != NGX_FILE_ERROR)
     {
-        *(p - 1) = '/';
-
-        if (ngx_http_dav_location(r, path.data) != NGX_OK) {
+        if (ngx_http_dav_location(r) != NGX_OK) {
             return NGX_HTTP_INTERNAL_SERVER_ERROR;
         }
 
@@ -1070,35 +1068,16 @@ ngx_http_dav_error(ngx_log_t *log, ngx_err_t err, ngx_int_t not_found,
 
 
 static ngx_int_t
-ngx_http_dav_location(ngx_http_request_t *r, u_char *path)
+ngx_http_dav_location(ngx_http_request_t *r)
 {
-    u_char                    *location;
-    ngx_http_core_loc_conf_t  *clcf;
-
     r->headers_out.location = ngx_list_push(&r->headers_out.headers);
     if (r->headers_out.location == NULL) {
         return NGX_ERROR;
     }
 
-    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);
-
-    if (!clcf->alias && clcf->root_lengths == NULL) {
-        location = path + clcf->root.len;
-
-    } else {
-        location = ngx_pnalloc(r->pool, r->uri.len);
-        if (location == NULL) {
-            ngx_http_clear_location(r);
-            return NGX_ERROR;
-        }
-
-        ngx_memcpy(location, r->uri.data, r->uri.len);
-    }
-
     r->headers_out.location->hash = 1;
     ngx_str_set(&r->headers_out.location->key, ""Location"");
-    r->headers_out.location->value.len = r->uri.len;
-    r->headers_out.location->value.data = location;
+    r->headers_out.location->value = r->uri;
 
     return NGX_OK;
 }
",1.0,3.0,0.0,tfidf
,,,,,,,,,
CVE-2013-3081,CVE-2013-3081/972757c4500d94b4b1306bf092e678add3a987d8,https://github.com/JojoCMS/Jojo-CMS/commit/972757c4500d94b4b1306bf092e678add3a987d8,<s>SQL injection vulnerability in the checkEmailFormat function in plugins/jojo_core/classes/Jojo.php in Jojo before 1.2.2 allows remote attackers to execute arbitrary SQL commands via the X-Forwarded-For HTTP header to /articles/test/.</s>,"<s>Fix SQL injection issue CVE-2013-3081
</s>"," diff --git a/plugins/jojo_core/classes/Jojo.php b/plugins/jojo_core/classes/Jojo.php
index c61e1af..c47c5db 100755
--- a/plugins/jojo_core/classes/Jojo.php
+++ b/plugins/jojo_core/classes/Jojo.php
@@ -2461,14 +2461,18 @@ class Jojo {
     /* Gets the IP address of the visitor, bypassing proxies */
     static function getIp()
     {
+        $ip = false;
         if ( (getenv('HTTP_X_FORWARDED_FOR') != '') && (strtolower(getenv('HTTP_X_FORWARDED_FOR')) != 'unknown')) {
             $iparray = explode(',', getenv('HTTP_X_FORWARDED_FOR'));
-            return $iparray[0];
+            $ip = $iparray[0];
         } elseif (getenv('REMOTE_ADDR') != '') {
-            return getenv('REMOTE_ADDR');
-        } else {
-            return false;
+            $ip = getenv('REMOTE_ADDR');
         }
+        /* check IP is valid format */
+        if (preg_match('/\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b/', $ip)) {
+        	return $ip;
+        }
+        return false;
     }
 
     /* reads the user agent string and gives the browser type - quick and simple detection */
",1.0,3.0,1.0,lime
CVE-2013-3081,CVE-2013-3081/58fde2271db266d02957f60f5f76a5f235cd9e5b,https://github.com/JojoCMS/Jojo-CMS/commit/58fde2271db266d02957f60f5f76a5f235cd9e5b,<s>SQL injection vulnerability in the checkEmailFormat function in plugins/jojo_core/classes/Jojo.php in Jojo before 1.2.2 allows remote attackers to execute arbitrary SQL commands via the X-Forwarded-For HTTP header to /articles/test/.</s>,"<s>Core - Editor: Add field label to inline editor
</s>"," diff --git a/plugins/jojo_core/external/normalize b/plugins/jojo_core/external/normalize
index 97e7867..0357529 160000
--- a/plugins/jojo_core/external/normalize
+++ b/plugins/jojo_core/external/normalize
@@ -1 +1 @@
-Subproject commit 97e78671617343e9ef8d8fc221200ecf1c18f260
+Subproject commit 03575299fc8cba752a51fece7c35343085d6ed09
",0.0,,0.0,lime
,,,,,,,,,
CVE-2016-2512,CVE-2016-2512/f4e6e02f7713a6924d16540be279909ff4091eb6,https://github.com/django/django/commit/f4e6e02f7713a6924d16540be279909ff4091eb6,"<s>The utils.http.is_safe_url function in Django before 1.8.10 and 1.9.x before 1.9.3 allows remote attackers to redirect users to arbitrary web sites and conduct phishing attacks or possibly conduct cross-site scripting (XSS) attacks via a URL containing basic authentication, as demonstrated by http://mysite.example.com\@attacker.com.</s>","<s>[1.8.x] Fixed CVE-2016-2513 -- Fixed user enumeration timing attack during login.
This is a security fix.
</s>"," diff --git a/docs/releases/1.8.10.txt b/docs/releases/1.8.10.txt
index 73c7cc04a4..d57afc470d 100644
--- a/docs/releases/1.8.10.txt
+++ b/docs/releases/1.8.10.txt
@@ -22,6 +22,39 @@ redirecting to this URL sends the user to ``attacker.com``.
 Also, if a developer relies on ``is_safe_url()`` to provide safe redirect
 targets and puts such a URL into a link, they could suffer from an XSS attack.
 
+CVE-2016-2513: User enumeration through timing difference on password hasher work factor upgrade
+================================================================================================
+
+In each major version of Django since 1.6, the default number of iterations for
+the ``PBKDF2PasswordHasher`` and its subclasses has increased. This improves
+the security of the password as the speed of hardware increases, however, it
+also creates a timing difference between a login request for a user with a
+password encoded in an older number of iterations and login request for a
+nonexistent user (which runs the default hasher's default number of iterations
+since Django 1.6).
+
+This only affects users who haven't logged in since the iterations were
+increased. The first time a user logs in after an iterations increase, their
+password is updated with the new iterations and there is no longer a timing
+difference.
+
+The new ``BasePasswordHasher.harden_runtime()`` method allows hashers to bridge
+the runtime gap between the work factor (e.g. iterations) supplied in existing
+encoded passwords and the default work factor of the hasher. This method
+is implemented for ``PBKDF2PasswordHasher``  and ``BCryptPasswordHasher``.
+The number of rounds for the latter hasher hasn't changed since Django 1.4, but
+some projects may subclass it and increase the work factor as needed.
+
+A warning will be emitted for any :ref:`third-party password hashers that don't
+implement <write-your-own-password-hasher>` a ``harden_runtime()`` method.
+
+If you have different password hashes in your database (such as SHA1 hashes
+from users who haven't logged in since the default hasher switched to PBKDF2
+in Django 1.4), the timing difference on a login request for these users may be
+even greater and this fix doesn't remedy that difference (or any difference
+when changing hashers). You may be able to :ref:`upgrade those hashes
+<wrapping-password-hashers>` to prevent a timing attack for that case.
+
 Bugfixes
 ========
 
",0.0,,0.0,lime
CVE-2016-2512,CVE-2016-2512/382ab137312961ad62feb8109d70a5a581fe8350,https://github.com/django/django/commit/382ab137312961ad62feb8109d70a5a581fe8350,"<s>The utils.http.is_safe_url function in Django before 1.8.10 and 1.9.x before 1.9.3 allows remote attackers to redirect users to arbitrary web sites and conduct phishing attacks or possibly conduct cross-site scripting (XSS) attacks via a URL containing basic authentication, as demonstrated by http://mysite.example.com\@attacker.com.</s>","<s>[1.8.x] Fixed CVE-2016-2512 -- Prevented spoofing is_safe_url() with basic auth.
This is a security fix.
</s>"," diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py
index 5679a576bd..e04a3abaf9 100644
--- a/tests/utils_tests/test_http.py
+++ b/tests/utils_tests/test_http.py
@@ -117,6 +117,11 @@ class TestUtilsHttp(unittest.TestCase):
                         'javascript:alert(""XSS"")',
                         '\njavascript:alert(x)',
                         '\x08//example.com',
+                        r'http://otherserver\@example.com',
+                        r'http:\\testserver\@example.com',
+                        r'http://testserver\me:pass@example.com',
+                        r'http://testserver\@example.com',
+                        r'http:\\testserver\confirm\me@example.com',
                         '\n'):
             self.assertFalse(http.is_safe_url(bad_url, host='testserver'), ""%s should be blocked"" % bad_url)
         for good_url in ('/view/?param=http://example.com',
@@ -126,8 +131,15 @@ class TestUtilsHttp(unittest.TestCase):
                      'https://testserver/',
                      'HTTPS://testserver/',
                      '//testserver/',
+                     'http://testserver/confirm?email=me@example.com',
                      '/url%20with%20spaces/'):
             self.assertTrue(http.is_safe_url(good_url, host='testserver'), ""%s should be allowed"" % good_url)
+        # Valid basic auth credentials are allowed.
+        self.assertTrue(http.is_safe_url(r'http://user:pass@testserver/', host='user:pass@testserver'))
+        # A path without host is allowed.
+        self.assertTrue(http.is_safe_url('/confirm/me@example.com'))
+        # Basic auth without host is not allowed.
+        self.assertFalse(http.is_safe_url(r'http://testserver\@example.com'))
 
     def test_urlsafe_base64_roundtrip(self):
         bytestring = b'foo'
",1.0,3.0,1.0,lime
,,,,,,,,,
CVE-2021-21401,CVE-2021-21401/e2f0ccf939d9f82931d085acb6df8e9a182a4261,https://github.com/nanopb/nanopb/commit/e2f0ccf939d9f82931d085acb6df8e9a182a4261,"<s>Nanopb is a small code-size Protocol Buffers implementation in ansi C. In Nanopb before versions 0.3.9.8 and 0.4.5, decoding a specifically formed message can cause invalid `free()` or `realloc()` calls if the message type contains an `oneof` field, and the `oneof` directly contains both a pointer field and a non-pointer field. If the message data first contains the non-pointer field and then the pointer field, the data of the non-pointer field is incorrectly treated as if it was a pointer value. Such message data rarely occurs in normal messages, but it is a concern when untrusted data is parsed. This has been fixed in versions 0.3.9.8 and 0.4.5. See referenced GitHub Security Advisory for more information including workarounds.</s>","<s>Fix invalid free() with oneof (#647)
Nanopb would call free() or realloc() on an invalid
(attacker controlled) pointer value when all the following
conditions are true:
- PB_ENABLE_MALLOC is defined at the compile time
- Message definition contains an oneof field, and the oneof
  contains at least one pointer type field and at least one
  non-pointer type field.
- Data being decoded first contains a non-pointer value for
  the oneof field, and later contains an overwriting pointer
  value.
Depending on message layout, the bug may not be exploitable in all
cases, but it is known to be exploitable at least with string and
bytes fields. Actual security impact will also depend on the heap
implementation used.
</s>"," diff --git a/pb_decode.c b/pb_decode.c
index 5f3b51e..b194825 100644
--- a/pb_decode.c
+++ b/pb_decode.c
@@ -1203,6 +1203,14 @@ static bool pb_release_union_field(pb_istream_t *stream, pb_field_iter_t *field)
 
     pb_release_single_field(&old_field);
 
+    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
+    {
+        /* Initialize the pointer to NULL to make sure it is valid
+         * even in case of error return. */
+        *(void**)field->pField = NULL;
+        field->pData = NULL;
+    }
+
     return true;
 }
 
",1.0,3.0,1.0,lime
CVE-2021-21401,CVE-2021-21401/9cbe4ae6b03ae4ac2a678861101a9d771a6522ce,https://github.com/nanopb/nanopb/commit/9cbe4ae6b03ae4ac2a678861101a9d771a6522ce,"<s>Nanopb is a small code-size Protocol Buffers implementation in ansi C. In Nanopb before versions 0.3.9.8 and 0.4.5, decoding a specifically formed message can cause invalid `free()` or `realloc()` calls if the message type contains an `oneof` field, and the `oneof` directly contains both a pointer field and a non-pointer field. If the message data first contains the non-pointer field and then the pointer field, the data of the non-pointer field is incorrectly treated as if it was a pointer value. Such message data rarely occurs in normal messages, but it is a concern when untrusted data is parsed. This has been fixed in versions 0.3.9.8 and 0.4.5. See referenced GitHub Security Advisory for more information including workarounds.</s>","<s>Add testcase for #647: invalid free with oneof
</s>"," diff --git a/tests/regression/issue_647/SConscript b/tests/regression/issue_647/SConscript
new file mode 100644
index 0000000..70eedf8
--- /dev/null
+++ b/tests/regression/issue_647/SConscript
@@ -0,0 +1,12 @@
+# Regression test for #647:
+# Ill-formed oneof message leads to calling free on an arbitrary pointer
+
+Import(""env"")
+
+env.NanopbProto(""repro.proto"")
+
+test = env.Program([""repro.c"", ""repro.pb.c"",
+                    ""$COMMON/pb_decode_with_malloc.o"",
+                    ""$COMMON/pb_common_with_malloc.o"",
+                    ""$COMMON/malloc_wrappers.o""])
+env.RunTest(test)
",0.0,,0.0,lime
,,,,,,,,,
CVE-2017-7490,CVE-2017-7490/61f2bbbf363e9ff7e577bf3382a48e74a23b1581,https://github.com/moodle/moodle/commit/61f2bbbf363e9ff7e577bf3382a48e74a23b1581,"<s>In Moodle 2.x and 3.x, searching of arbitrary blogs is possible because a capability check is missing.</s>","<s>MDL-58670 blog: respect capability to search entries
</s>"," diff --git a/blog/lib.php b/blog/lib.php
index 06b4af808ae..2e53d979284 100644
--- a/blog/lib.php
+++ b/blog/lib.php
@@ -872,7 +872,7 @@ function blog_get_headers($courseid=null, $groupid=null, $userid=null, $tagid=nu
         }
 
         // Append Search info.
-        if (!empty($search)) {
+        if (!empty($search) && has_capability('moodle/blog:search', $sitecontext)) {
             $headers['filters']['search'] = $search;
             $blogurl->param('search', $search);
             $PAGE->navbar->add(get_string('searchterm', 'blog', $search), $blogurl->out());
",1.0,3.0,1.0,tfidf
CVE-2017-7490,CVE-2017-7490/e5bec10f56ab5dafee1605d353474a6c46127a53,https://github.com/moodle/moodle/commit/e5bec10f56ab5dafee1605d353474a6c46127a53,"<s>In Moodle 2.x and 3.x, searching of arbitrary blogs is possible because a capability check is missing.</s>","<s>MDL-58635 blogs: check edited blog belongs to current user
</s>"," diff --git a/blog/external_blog_edit.php b/blog/external_blog_edit.php
index 3f615bdd1b0..edb0927dd66 100644
--- a/blog/external_blog_edit.php
+++ b/blog/external_blog_edit.php
@@ -52,11 +52,11 @@ $action = (empty($id)) ? 'add' : 'edit';
 
 $external = new stdClass();
 
-// Check that this id exists.
-if (!empty($id) && !$DB->record_exists('blog_external', array('id' => $id))) {
-    print_error('wrongexternalid', 'blog');
-} else if (!empty($id)) {
-    $external = $DB->get_record('blog_external', array('id' => $id));
+// Retrieve the external blog record.
+if (!empty($id)) {
+    if (!$external = $DB->get_record('blog_external', array('id' => $id, 'userid' => $USER->id))) {
+        print_error('wrongexternalid', 'blog');
+    }
     $external->autotags = core_tag_tag::get_item_tags_array('core', 'blog_external', $id);
 }
 
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2017-5206,CVE-2017-5206/6b8dba29d73257311564ee7f27b9b14758cc693e,https://github.com/netblue30/firejail/commit/6b8dba29d73257311564ee7f27b9b14758cc693e,"<s>Firejail before 0.9.44.4, when running on a Linux kernel before 4.8, allows context-dependent attackers to bypass a seccomp-based sandbox protection mechanism via the --allow-debuggers argument.</s>","<s>security fix
</s>"," diff --git a/RELNOTES b/RELNOTES
index 6aaebefc3..36da0100f 100644
--- a/RELNOTES
+++ b/RELNOTES
@@ -1,5 +1,8 @@
 firejail (0.9.44.3) baseline; urgency=low
   * development version
+  * security: disabled --allow-debuggers when running on kernel
+    versions prior to 4.8; a kernel bug in ptrace system call
+    allows a full bypass of seccomp filter; problem reported by Lizzie Dixon
   * security: root exploit found by Sebastian Krahmer
  -- netblue30 <netblue30@yahoo.com>  Wed, 4 Jan 2017 11:00:00 -0500
 
",1.0,2.0,1.0,tfidf
CVE-2017-5206,CVE-2017-5206/8b1b3cb8c1f696d0f765513c11e4f87c48c96a05,https://github.com/netblue30/firejail/commit/8b1b3cb8c1f696d0f765513c11e4f87c48c96a05,"<s>Firejail before 0.9.44.4, when running on a Linux kernel before 4.8, allows context-dependent attackers to bypass a seccomp-based sandbox protection mechanism via the --allow-debuggers argument.</s>","<s>0.9.44.4 testing - disabled --allow-debuggers test
</s>"," diff --git a/test/environment/environment.sh b/test/environment/environment.sh
index 04a1daaf6..93af87cea 100755
--- a/test/environment/environment.sh
+++ b/test/environment/environment.sh
@@ -82,12 +82,12 @@ echo ""TESTING: nice (test/environment/nice.exp)""
 echo ""TESTING: quiet (test/environment/quiet.exp)""
 ./quiet.exp
 
-which strace
-if [ ""$?"" -eq 0 ];
-then
-        echo ""TESTING: --allow-debuggers (test/environment/allow-debuggers.exp)""
-        ./allow-debuggers.exp
-else
-        echo ""TESTING SKIP: strace not found""
-fi
+#which strace
+#if [ ""$?"" -eq 0 ];
+#then
+#        echo ""TESTING: --allow-debuggers (test/environment/allow-debuggers.exp)""
+#        ./allow-debuggers.exp
+#else
+#        echo ""TESTING SKIP: strace not found""
+#fi
 
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2022-29533,CVE-2022-29533/ce6bc88e330f5ef50666b149d86c0d94f545f24e,https://github.com/MISP/MISP/commit/ce6bc88e330f5ef50666b149d86c0d94f545f24e,"<s>An issue was discovered in MISP before 2.4.158. There is XSS in app/Controller/OrganisationsController.php in a situation with a ""weird single checkbox page.""</s>","<s>fix: [security] low probability reflected XSS fixed
- User would need to navigate to a url that contains the payload
- user needs to click on a checkbox in a weird single checkbox page to trigger the exploit
- as reported by Dawid Czarnecki of Zigrin Security on behalf of the Luxembourg Army
</s>"," diff --git a/app/Controller/OrganisationsController.php b/app/Controller/OrganisationsController.php
index 7d9f6345d..06c9350e4 100644
--- a/app/Controller/OrganisationsController.php
+++ b/app/Controller/OrganisationsController.php
@@ -392,7 +392,7 @@ class OrganisationsController extends AppController
     {
         $this->layout = false;
         $this->autoRender = false;
-        $this->set('id', $id);
+        $this->set('id', (int)$id);
         $this->set('removable', $removable);
         $this->set('extend', $extend);
         $this->render('ajax/sg_org_row_empty');
",1.0,3.0,1.0,tfidf
CVE-2022-29533,CVE-2022-29533/c8ed71bf400ccd63c5c87d931721cc142aa62781,https://github.com/MISP/MISP/commit/c8ed71bf400ccd63c5c87d931721cc142aa62781,"<s>An issue was discovered in MISP before 2.4.158. There is XSS in app/Controller/OrganisationsController.php in a situation with a ""weird single checkbox page.""</s>","<s>fix: [UI] Mark checkbox as disabled when user has no permission
</s>"," diff --git a/app/View/Elements/genericElements/IndexTable/Fields/toggle.ctp b/app/View/Elements/genericElements/IndexTable/Fields/toggle.ctp
index c91ab318d..30a140970 100644
--- a/app/View/Elements/genericElements/IndexTable/Fields/toggle.ctp
+++ b/app/View/Elements/genericElements/IndexTable/Fields/toggle.ctp
@@ -6,18 +6,30 @@
  *  to fetch it.
  *
  */
-    $data = Hash::extract($row, $field['data_path']);
-    $seed = mt_rand();
-    $checkboxId = 'GenericToggle-' . $seed;
-    $checkboxClass = empty($field['checkbox_class']) ? 'genericCheckbox' : h($field['checkbox_class']);
-    $tempboxId = 'TempBox-' . $seed;
-    echo sprintf(
-        '<input type=""checkbox"" id=""%s"" class=""%s"" %s><span id=""%s"" class=""hidden"">',
-        $checkboxId,
-        $checkboxClass,
-        empty($data[0]) ? '' : 'checked',
-        $tempboxId
-    );
+$data = Hash::extract($row, $field['data_path']);
+$seed = mt_rand();
+$checkboxId = 'GenericToggle-' . $seed;
+$checkboxClass = empty($field['checkbox_class']) ? 'genericCheckbox' : h($field['checkbox_class']);
+$tempboxId = 'TempBox-' . $seed;
+
+$params = [];
+if (!empty($data[0])) {
+    $params[] = 'checked';
+}
+if (!empty($field['disabled'])) {
+    $params[] = 'disabled';
+}
+$params = empty($params) ? '' : ' ' . implode(' ', $params);
+
+echo sprintf(
+    '<input type=""checkbox"" id=""%s"" class=""%s""%s><span id=""%s"" class=""hidden""></span>',
+    $checkboxId,
+    $checkboxClass,
+    $params,
+    $tempboxId
+);
+
+if (empty($field['disabled'])):
 ?>
 <script type=""text/javascript"">
 $(function() {
@@ -71,3 +83,4 @@ $(function() {
     });
 });
 </script>
+<?php endif; ?>
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2016-10197,CVE-2016-10197/8cbe65d5f44246ad3f7ab408d22e797e5b9e5b81,https://github.com/libevent/libevent/commit/8cbe65d5f44246ad3f7ab408d22e797e5b9e5b81,<s>The search_make_new function in evdns.c in libevent before 2.1.6-beta allows attackers to cause a denial of service (out-of-bounds read) via an empty hostname.</s>,"<s>evdns: export cancel via callbacks in util (like async lib core/extra issues)
</s>"," diff --git a/evdns.c b/evdns.c
index c4112330..152ba766 100644
--- a/evdns.c
+++ b/evdns.c
@@ -3908,6 +3908,7 @@ evdns_base_new(struct event_base *event_base, int flags)
 	 * functionality.  We can't just call evdns_getaddrinfo directly or
 	 * else libevent-core will depend on libevent-extras. */
 	evutil_set_evdns_getaddrinfo_fn_(evdns_getaddrinfo);
+	evutil_set_evdns_getaddrinfo_cancel_fn_(evdns_getaddrinfo_cancel);
 
 	base = mm_malloc(sizeof(struct evdns_base));
 	if (base == NULL)
",0.0,,0.0,tfidf
CVE-2016-10197,CVE-2016-10197/ec65c42052d95d2c23d1d837136d1cf1d9ecef9e,https://github.com/libevent/libevent/commit/ec65c42052d95d2c23d1d837136d1cf1d9ecef9e,<s>The search_make_new function in evdns.c in libevent before 2.1.6-beta allows attackers to cause a denial of service (out-of-bounds read) via an empty hostname.</s>,"<s>evdns: fix searching empty hostnames
From #332:
  Here follows a bug report by **Guido Vranken** via the _Tor bug bounty program_. Please credit Guido accordingly.
  ## Bug report
  The DNS code of Libevent contains this rather obvious OOB read:
  ```c
  static char *
  search_make_new(const struct search_state *const state, int n, const char *const base_name) {
      const size_t base_len = strlen(base_name);
      const char need_to_append_dot = base_name[base_len - 1] == '.' ? 0 : 1;
  ```
  If the length of ```base_name``` is 0, then line 3125 reads 1 byte before the buffer. This will trigger a crash on ASAN-protected builds.
  To reproduce:
  Build libevent with ASAN:
  ```
  $ CFLAGS='-fomit-frame-pointer -fsanitize=address' ./configure && make -j4
  ```
  Put the attached ```resolv.conf``` and ```poc.c``` in the source directory and then do:
  ```
  $ gcc -fsanitize=address -fomit-frame-pointer poc.c .libs/libevent.a
  $ ./a.out
  =================================================================
  ==22201== ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60060000efdf at pc 0x4429da bp 0x7ffe1ed47300 sp 0x7ffe1ed472f8
  READ of size 1 at 0x60060000efdf thread T0
  ```
P.S. we can add a check earlier, but since this is very uncommon, I didn't add it.
Fixes: #332
</s>"," diff --git a/evdns.c b/evdns.c
index 905ff6b5..e9dbc35c 100644
--- a/evdns.c
+++ b/evdns.c
@@ -3175,9 +3175,12 @@ search_set_from_hostname(struct evdns_base *base) {
 static char *
 search_make_new(const struct search_state *const state, int n, const char *const base_name) {
 	const size_t base_len = strlen(base_name);
-	const char need_to_append_dot = base_name[base_len - 1] == '.' ? 0 : 1;
+	char need_to_append_dot;
 	struct search_domain *dom;
 
+	if (!base_len) return NULL;
+	need_to_append_dot = base_name[base_len - 1] == '.' ? 0 : 1;
+
 	for (dom = state->head; dom; dom = dom->next) {
 		if (!n--) {
 			/* this is the postfix we want */
",1.0,3.0,1.0,tfidf
,,,,,,,,,
CVE-2021-43786,CVE-2021-43786/04dab1d550cdebf4c1567bca9a51f8b9ca48a500,https://github.com/NodeBB/NodeBB/commit/04dab1d550cdebf4c1567bca9a51f8b9ca48a500,<s>Nodebb is an open source Node.js based forum software. In affected versions incorrect logic present in the token verification step unintentionally allowed master token access to the API. The vulnerability has been patch as of v1.18.5. Users are advised to upgrade as soon as possible.</s>,"<s>fix: token verify
</s>"," diff --git a/src/routes/authentication.js b/src/routes/authentication.js
index d6b98aa057..6d7a36e037 100644
--- a/src/routes/authentication.js
+++ b/src/routes/authentication.js
@@ -44,13 +44,9 @@ Auth.getLoginStrategies = function () {
 };
 
 Auth.verifyToken = async function (token, done) {
-	let { tokens = [] } = await meta.settings.get('core.api');
-	tokens = tokens.reduce((memo, cur) => {
-		memo[cur.token] = cur.uid;
-		return memo;
-	}, {});
-
-	const uid = tokens[token];
+	const { tokens = [] } = await meta.settings.get('core.api');
+	const tokenObj = tokens.find(t => t.token === token);
+	const uid = tokenObj ? tokenObj.uid : undefined;
 
 	if (uid !== undefined) {
 		if (parseInt(uid, 10) > 0) {
",1.0,3.0,1.0,tfidf
CVE-2021-43786,CVE-2021-43786/63109c070527946db0c5c06b67fddee21101abc7,https://github.com/NodeBB/NodeBB/commit/63109c070527946db0c5c06b67fddee21101abc7,<s>Nodebb is an open source Node.js based forum software. In affected versions incorrect logic present in the token verification step unintentionally allowed master token access to the API. The vulnerability has been patch as of v1.18.5. Users are advised to upgrade as soon as possible.</s>,"<s>test: possible fix to timeout
</s>"," diff --git a/test/controllers-admin.js b/test/controllers-admin.js
index d91d75822c..467652d88a 100644
--- a/test/controllers-admin.js
+++ b/test/controllers-admin.js
@@ -736,7 +736,7 @@ describe('Admin Controllers', () => {
 			});
 		});
 
-		it('should allow normal user access to admin pages', async () => {
+		it('should allow normal user access to admin pages', async function () {
 			this.timeout(50000);
 			function makeRequest(url) {
 				return new Promise((resolve, reject) => {
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2021-41824,CVE-2021-41824/c9cb2225f1b908fb1e8401d401219228634b26b2,https://github.com/craftcms/cms/commit/c9cb2225f1b908fb1e8401d401219228634b26b2,<s>Craft CMS before 3.7.14 allows CSV injection.</s>,"<s>Fixed a potential CSV injection vulnerability.
</s>"," diff --git a/CHANGELOG.md b/CHANGELOG.md
index 5fe1eed167..2e2387ec54 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -28,6 +28,9 @@
 - Fixed a bug where duplicated entries that were created via an Applying new propagation method job werent getting positioned correctly based on the original entries structure. ([#9782](https://github.com/craftcms/cms/issues/9782))
 - Fixed a bug where unpublished drafts could disappear after clicking Create entry if the URI could not be made unique. ([#9873](https://github.com/craftcms/cms/issues/9873))
 
+### Security
+- Fixed a potential CSV injection vulnerability.
+
 ## 3.7.13 - 2021-09-14
 
 ### Added
",0.0,,1.0,lime
CVE-2021-41824,CVE-2021-41824/ecae37cf712c6a5514f2a92ce5cf0315109e0d5a,https://github.com/craftcms/cms/commit/ecae37cf712c6a5514f2a92ce5cf0315109e0d5a,<s>Craft CMS before 3.7.14 allows CSV injection.</s>,"<s>Fixed #9891
</s>"," diff --git a/src/web/View.php b/src/web/View.php
index 5328271b8e..f91dd0e292 100644
--- a/src/web/View.php
+++ b/src/web/View.php
@@ -607,7 +607,7 @@ class View extends \yii\web\View
 Applying new propagation method job werent getting positioned correctly based on the if (is_int($field)) {
](https://github.com/craftcms/cms/issues/9782))
 - Fixed a bug where unpublished $field = $definition;
Create entry if the URI could not be made unique. ([#9873](https:// }
-/craftcms/cms/issues/9873))
 - Fixed an error that could occur if (strpos($template, $field) !== false) {
+ Fixed an error that could occur when an entrys Title Format referenced a custom field with if (preg_match('/\b' . preg_quote($field, '/') . '\b/', $template)) {
 Security
 - Fixed a potential CSV injection vulnerability.
              $extra[] = $field;
                     }
                 }
",1.0,1.0,0.0,lime
,,,,,,,,,
CVE-2017-4952,CVE-2017-4952/ec30db9afada9cb52852082ce4d7d0095524f3b3,https://github.com/vmware-archive/xenon/commit/ec30db9afada9cb52852082ce4d7d0095524f3b3,"<s>VMware Xenon 1.x, prior to 1.5.4-CR7_1, 1.5.7_7, 1.5.4-CR6_2, 1.3.7-CR1_2, 1.1.0-CR0-3, 1.1.0-CR3_1,1.4.2-CR4_1, and 1.5.4_8, contains an authentication bypass vulnerability due to insufficient access controls for utility endpoints. Successful exploitation of this issue may result in information disclosure.</s>","<s>Add auth to UtilityService
Extend auth check to UtiliyService endpoints: stats, config, subscription
Issue: VRXEN-5
Change-Id: I52a4b4a42731c244a97f97610dcaddb6837e67fb
</s>"," diff --git a/xenon-common/src/main/java/com/vmware/xenon/common/UtilityService.java b/xenon-common/src/main/java/com/vmware/xenon/common/UtilityService.java
index 23c9f05e..39378486 100644
--- a/xenon-common/src/main/java/com/vmware/xenon/common/UtilityService.java
+++ b/xenon-common/src/main/java/com/vmware/xenon/common/UtilityService.java
@@ -144,7 +144,29 @@ public class UtilityService implements Service {
 
     @Override
     public void authorizeRequest(Operation op) {
-        op.complete();
+
+        String suffix = UriUtils.buildUriPath(UriUtils.URI_PATH_CHAR, UriUtils.getLastPathSegment(op.getUri()));
+
+        // allow access to ui endpoint
+        if (ServiceHost.SERVICE_URI_SUFFIX_UI.equals(suffix)) {
+            op.complete();
+            return;
+        }
+
+        ServiceDocument doc = new ServiceDocument();
+        if (this.parent.getOptions().contains(ServiceOption.FACTORY_ITEM)) {
+            doc.documentSelfLink = UriUtils.buildUriPath(UriUtils.getParentPath(this.parent.getSelfLink()), suffix);
+        } else {
+            doc.documentSelfLink = UriUtils.buildUriPath(this.parent.getSelfLink(), suffix);
+        }
+
+        doc.documentKind = Utils.buildKind(this.parent.getStateType());
+        if (getHost().isAuthorized(this.parent, doc, op)) {
+            op.complete();
+            return;
+        }
+
+        op.fail(Operation.STATUS_CODE_FORBIDDEN);
     }
 
     @Override
",1.0,3.0,1.0,lime
CVE-2017-4952,CVE-2017-4952/0cd4afa1415f6dfcf274da8757df912eb66cc001,https://github.com/vmware-archive/xenon/commit/0cd4afa1415f6dfcf274da8757df912eb66cc001,"<s>VMware Xenon 1.x, prior to 1.5.4-CR7_1, 1.5.7_7, 1.5.4-CR6_2, 1.3.7-CR1_2, 1.1.0-CR0-3, 1.1.0-CR3_1,1.4.2-CR4_1, and 1.5.4_8, contains an authentication bypass vulnerability due to insufficient access controls for utility endpoints. Successful exploitation of this issue may result in information disclosure.</s>","<s>Call StatefulService#authorizeRequest()
For owner-selected stateful service(and its utility service), make sure to
call ""authorizeRequest()"".  For persisted service, auth check is performed
at loading time via query filter.  However, it was not calling
""authorizeRequest()"" method.
Change-Id: Ieb65bd88935a534a32a6f2b0dbcf389f9f02d1f8
</s>"," diff --git a/xenon-common/src/test/java/com/vmware/xenon/common/TestServiceHost.java b/xenon-common/src/test/java/com/vmware/xenon/common/TestServiceHost.java
index 1ffbf5b4..ca1ad1a8 100644
--- a/xenon-common/src/test/java/com/vmware/xenon/common/TestServiceHost.java
+++ b/xenon-common/src/test/java/com/vmware/xenon/common/TestServiceHost.java
@@ -67,6 +67,7 @@ import com.vmware.xenon.common.ServiceStats.TimeSeriesStats.AggregationType;
 import com.vmware.xenon.common.jwt.Rfc7519Claims;
 import com.vmware.xenon.common.jwt.Signer;
 import com.vmware.xenon.common.jwt.Verifier;
+import com.vmware.xenon.common.test.AuthTestUtils;
 import com.vmware.xenon.common.test.MinimalTestServiceState;
 import com.vmware.xenon.common.test.TestContext;
 import com.vmware.xenon.common.test.TestProperty;
@@ -94,6 +95,29 @@ import com.vmware.xenon.services.common.UserService;
 
 public class TestServiceHost {
 
+    public static class AuthCheckService extends ExampleService {
+        public static final String FACTORY_LINK = ServiceUriPaths.CORE + ""/auth-check-services"";
+
+        static final String IS_AUTHORIZE_REQUEST_CALLED = ""isAuthorizeRequestCalled"";
+
+        public static FactoryService createFactory() {
+            return FactoryService.create(AuthCheckService.class);
+        }
+
+        public AuthCheckService() {
+            super();
+            // non persisted, owner selection service
+            toggleOption(ServiceOption.PERSISTENCE, false);
+            toggleOption(ServiceOption.INSTRUMENTATION, true);
+        }
+
+        @Override
+        public void authorizeRequest(Operation op) {
+            adjustStat(IS_AUTHORIZE_REQUEST_CALLED, 1);
+            op.complete();
+        }
+    }
+
     private static final int MAINTENANCE_INTERVAL_MILLIS = 100;
 
     private VerificationHost host;
@@ -2937,4 +2961,67 @@ public class TestServiceHost {
         this.host.tearDown();
     }
 
+
+    @Test
+    public void authorizeRequestOnOwnerSelectionService() throws Throwable {
+        setUp(true);
+
+        this.host.setAuthorizationService(new AuthorizationContextService());
+        this.host.setAuthorizationEnabled(true);
+        this.host.setMaintenanceIntervalMicros(TimeUnit.MILLISECONDS.toMicros(100));
+        this.host.start();
+
+        AuthTestUtils.setSystemAuthorizationContext(this.host);
+
+        // Start Statefull with Non-Persisted service
+        this.host.startFactory(new AuthCheckService());
+        this.host.waitForServiceAvailable(AuthCheckService.FACTORY_LINK);
+
+        TestRequestSender sender = this.host.getTestRequestSender();
+
+
+        this.host.setSystemAuthorizationContext();
+
+        String adminUser = ""admin@vmware.com"";
+        String adminPass = ""password"";
+        TestContext authCtx = this.host.testCreate(1);
+        AuthorizationSetupHelper.create()
+                .setHost(this.host)
+                .setUserEmail(adminUser)
+                .setUserPassword(adminPass)
+                .setIsAdmin(true)
+                .setCompletion(authCtx.getCompletion())
+                .start();
+        authCtx.await();
+
+        // create foo
+        ExampleServiceState exampleFoo = new ExampleServiceState();
+        exampleFoo.name = ""foo"";
+        exampleFoo.documentSelfLink = ""foo"";
+
+        Operation post = Operation.createPost(this.host, AuthCheckService.FACTORY_LINK).setBody(exampleFoo);
+        ExampleServiceState postResult = sender.sendAndWait(post, ExampleServiceState.class);
+
+        URI statsUri = UriUtils.buildUri(this.host, postResult.documentSelfLink);
+
+        ServiceStats stats = sender.sendStatsGetAndWait(statsUri);
+        assertFalse(stats.entries.containsKey(AuthCheckService.IS_AUTHORIZE_REQUEST_CALLED));
+
+        this.host.resetAuthorizationContext();
+
+        TestRequestSender.FailureResponse failureResponse = sender.sendAndWaitFailure(Operation.createGet(this.host, postResult.documentSelfLink));
+        assertEquals(Operation.STATUS_CODE_FORBIDDEN, failureResponse.op.getStatusCode());
+
+
+        this.host.setSystemAuthorizationContext();
+
+        stats = sender.sendStatsGetAndWait(statsUri);
+        ServiceStat stat = stats.entries.get(AuthCheckService.IS_AUTHORIZE_REQUEST_CALLED);
+        assertNotNull(stat);
+        assertEquals(1, stat.latestValue, 0);
+
+        this.host.resetAuthorizationContext();
+
+    }
+
 }
",0.0,,0.0,lime
,,,,,,,,,
CVE-2012-4387,CVE-2012-4387/a7161ca7d7a2abfcbe6d4499883747705cef1ef8,https://github.com/apache/struts/commit/a7161ca7d7a2abfcbe6d4499883747705cef1ef8,"<s>Apache Struts 2.0.0 through 2.3.4 allows remote attackers to cause a denial of service (CPU consumption) via a long parameter name, which is processed as an OGNL expression.</s>","<s>WW-3644 changes support for expression as a dynamic attribute to parse only values enclosed in %{ and }
git-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@1381585 13f79535-47bb-0310-9956-ffa450edef68
</s>"," diff --git a/core/src/main/java/org/apache/struts2/views/jsp/ui/AbstractUITag.java b/core/src/main/java/org/apache/struts2/views/jsp/ui/AbstractUITag.java
index f157764ba..9a7716346 100644
--- a/core/src/main/java/org/apache/struts2/views/jsp/ui/AbstractUITag.java
+++ b/core/src/main/java/org/apache/struts2/views/jsp/ui/AbstractUITag.java
@@ -22,6 +22,7 @@
 package org.apache.struts2.views.jsp.ui;
 
 import org.apache.commons.lang3.ObjectUtils;
+import org.apache.struts2.components.Component;
 import org.apache.struts2.components.UIBean;
 import org.apache.struts2.views.jsp.ComponentTagSupport;
 
@@ -291,10 +292,11 @@ public abstract class AbstractUITag extends ComponentTagSupport implements Dynam
     }
 
 expr.substring public void setDynamicAttribute(String uri, String localName, Object value) throws JspException {
-
       if (value != null && value instanceof String) {
+ public class Component {
   if (Component.altSyntax(getStack()) && Component.isExpression(value)) {
 if body shold be used.
+    dynamicAttributes.put(localName, String.valueOf(ObjectUtils.defaultIfNull(findValue(value.toString()), value)));

     public boolean uses } else {
         return false;
 dynamicAttributes.put(localName, value);
  public static boolean isExpression( }
) {
+ }
+
 }
  String expr = value.toString();
+        return expr.startsWith(""%{"") && expr.endsWith(""}"");
+    }
+
 }
",0.0,,0.0,lime
CVE-2012-4387,CVE-2012-4387/80e03182d66d9e6ab18f9a9a9b3c42725a1c89e9,https://github.com/apache/struts/commit/80e03182d66d9e6ab18f9a9a9b3c42725a1c89e9,"<s>Apache Struts 2.0.0 through 2.3.4 allows remote attackers to cause a denial of service (CPU consumption) via a long parameter name, which is processed as an OGNL expression.</s>","<s>WW-3860
Restrict accepted parameter name length
Thanks to Johno Crawford for the patch.
git-svn-id: https://svn.apache.org/repos/asf/struts/struts2/trunk@1368841 13f79535-47bb-0310-9956-ffa450edef68
</s>"," diff --git a/xwork-core/src/main/java/com/opensymphony/xwork2/interceptor/ParametersInterceptor.java b/xwork-core/src/main/java/com/opensymphony/xwork2/interceptor/ParametersInterceptor.java
index 7f28b8769..0ce3e72cd 100644
--- a/xwork-core/src/main/java/com/opensymphony/xwork2/interceptor/ParametersInterceptor.java
+++ b/xwork-core/src/main/java/com/opensymphony/xwork2/interceptor/ParametersInterceptor.java
@@ -96,9 +96,11 @@ import java.util.regex.Pattern;
  * <!-- START SNIPPET: parameters -->
  * <p/>
  * <ul>
- * <p/>
  * <li>ordered - set to true if you want the top-down property setter behaviour</li>
- * <p/>
+ * <li>acceptParamNames - a comma delimited list of regular expressions to describe a whitelist of accepted parameter names.
+ * Don't change the default unless you know what you are doing in terms of security implications</li>
+ * <li>excludeParams - a comma delimited list of regular expressions to describe a blacklist of not allowed parameter names</li>
+ * <li>paramNameMaxLength - the maximum length of parameter names; parameters with longer names will be ignored; the default is 100 characters</li>
  * </ul>
  * <p/>
  * <!-- END SNIPPET: parameters -->
@@ -130,6 +132,10 @@ public class ParametersInterceptor extends MethodFilterInterceptor {
 
     private static final Logger LOG = LoggerFactory.getLogger(ParametersInterceptor.class);
 
+    protected static final int PARAM_NAME_MAX_LENGTH = 100;
+
+    private int paramNameMaxLength = PARAM_NAME_MAX_LENGTH;
+
     boolean ordered = false;
     Set<Pattern> excludeParams = Collections.emptySet();
     Set<Pattern> acceptParams = Collections.emptySet();
@@ -151,7 +157,16 @@ public class ParametersInterceptor extends MethodFilterInterceptor {
         devMode = ""true"".equals(mode);
     }
 
-    public void setAcceptParamNames(String commaDelim) {
+	/**
+	 * Sets a comma-delimited list of regular expressions to match
+	 * parameters that are allowed in the parameter map (aka whitelist).
+	 * <p/>
+	 * Don't change the default unless you know what you are doing in terms
+	 * of security implications.
+	 *
+	 * @param commaDelim A comma-delimited list of regular expressions
+	 */
+	public void setAcceptParamNames(String commaDelim) {
         Collection<String> acceptPatterns = ArrayUtils.asCollection(commaDelim);
         if (acceptPatterns != null) {
             acceptParams = new HashSet<Pattern>();
@@ -161,6 +176,16 @@ public class ParametersInterceptor extends MethodFilterInterceptor {
         }
     }
 
+    /**
+     * If the param name exceeds the configured maximum length it will not be
+     * accepted.
+     *
+     * @param paramNameMaxLength Maximum length of param names
+     */
+    public void setParamNameMaxLength(int paramNameMaxLength) {
+        this.paramNameMaxLength = paramNameMaxLength;
+    }
+
     static private int countOGNLCharacters(String s) {
         int count = 0;
         for (int i = s.length() - 1; i >= 0; i--) {
@@ -351,10 +376,15 @@ public class ParametersInterceptor extends MethodFilterInterceptor {
     }
 
     protected boolean acceptableName(String name) {
-        return isAccepted(name) && !isExcluded(name);
+        return isWithinLengthLimit(name) && isAccepted(name)
+                && !isExcluded(name);
     }
 
-    protected boolean isAccepted(String paramName) {
+	protected boolean isWithinLengthLimit( String name ) {
+		return name.length() <= paramNameMaxLength;
+	}
+
+	protected boolean isAccepted(String paramName) {
         if (!this.acceptParams.isEmpty()) {
             for (Pattern pattern : acceptParams) {
                 Matcher matcher = pattern.matcher(paramName);
",1.0,1.0,1.0,lime
,,,,,,,,,
CVE-2020-5297,CVE-2020-5297/2bc4084dff12eae036c848d4151ea35a29147bd0,https://github.com/octobercms/october/commit/2bc4084dff12eae036c848d4151ea35a29147bd0,"<s>In OctoberCMS (october/october composer package) versions from 1.0.319 and before 1.0.466, an attacker can exploit this vulnerability to upload jpg, jpeg, bmp, png, webp, gif, ico, css, js, woff, woff2, svg, ttf, eot, json, md, less, sass, scss, xml files to any directory of an October CMS server. The vulnerability is only exploitable by an authenticated backend user with the `cms.manage_assets` permission. Issue has been patched in Build 466 (v1.0.466).</s>","<s>Fixed composer requirement
Composer does not support commit specific requirements when it comes to fetching the composer.json metadata, which means that this particular fix has to specify a tag instead of a commit hash.
</s>"," diff --git a/composer.json b/composer.json
index bbfec7024..eb4f8fe37 100644
--- a/composer.json
+++ b/composer.json
@@ -39,7 +39,7 @@
         ""october/backend"": ""~1.0"",
         ""october/cms"": ""~1.0"",
         ""laravel/framework"": ""~5.5.40"",
-        ""wikimedia/composer-merge-plugin"": ""dev-master#bec42272005379dc752f7d4823cfe972ff64fbdf""
+        ""wikimedia/composer-merge-plugin"": ""1.4.1""
     },
     ""require-dev"": {
         ""fzaninotto/faker"": ""~1.7"",
",0.0,,0.0,tfidf
CVE-2020-5297,CVE-2020-5297/6711dae8ef70caf0e94cec434498012a2ccd86b8,https://github.com/octobercms/october/commit/6711dae8ef70caf0e94cec434498012a2ccd86b8,"<s>In OctoberCMS (october/october composer package) versions from 1.0.319 and before 1.0.466, an attacker can exploit this vulnerability to upload jpg, jpeg, bmp, png, webp, gif, ico, css, js, woff, woff2, svg, ttf, eot, json, md, less, sass, scss, xml files to any directory of an October CMS server. The vulnerability is only exploitable by an authenticated backend user with the `cms.manage_assets` permission. Issue has been patched in Build 466 (v1.0.466).</s>","<s>Improve asset file path handling when moving assets
</s>"," diff --git a/modules/cms/widgets/AssetList.php b/modules/cms/widgets/AssetList.php
index 0fcd63c73..3dda5d1b3 100644
--- a/modules/cms/widgets/AssetList.php
+++ b/modules/cms/widgets/AssetList.php
@@ -333,13 +333,20 @@ class AssetList extends WidgetBase
 
             $basename = basename($path);
             $originalFullPath = $this->getFullPath($path);
-            $newFullPath = rtrim($destinationFullPath, '/').'/'.$basename;
+            $newFullPath = realpath(rtrim($destinationFullPath, '/')) . '/' . $basename;
             $safeDir = $this->getAssetsPath();
 
             if ($originalFullPath == $newFullPath) {
                 continue;
             }
 
+            if (!starts_with($newFullPath, $safeDir)) {
+                throw new ApplicationException(Lang::get(
+                    'cms::lang.asset.error_moving_file',
+                    ['file' => $basename]
+                ));
+            }
+
             if (is_file($originalFullPath)) {
                 if (!@File::move($originalFullPath, $newFullPath)) {
                     throw new ApplicationException(Lang::get(
",1.0,1.0,1.0,tfidf
,,,,,,,,,
CVE-2021-32840,CVE-2021-32840/cd5310f5b7eed595110b76a2f7ae5ee013cc50f1,https://github.com/icsharpcode/SharpZipLib/commit/cd5310f5b7eed595110b76a2f7ae5ee013cc50f1,"<s>SharpZipLib (or #ziplib) is a Zip, GZip, Tar and BZip2 library. Prior to version 1.3.3, a TAR file entry `../evil.txt` may be extracted in the parent directory of `destFolder`. This leads to arbitrary file write that may lead to code execution. The vulnerability was patched in version 1.3.3.</s>","<s>fix(bzip2): use explicit feature defs for vectorized memory move (#635)
* Fixed mismatched framework directives for vectorized memory move
Co-authored-by: nils måsén <nils@piksel.se>
</s>"," diff --git a/src/ICSharpCode.SharpZipLib/BZip2/BZip2InputStream.cs b/src/ICSharpCode.SharpZipLib/BZip2/BZip2InputStream.cs
index 8a3d4b8..3948b4e 100644
--- a/src/ICSharpCode.SharpZipLib/BZip2/BZip2InputStream.cs
+++ b/src/ICSharpCode.SharpZipLib/BZip2/BZip2InputStream.cs
@@ -1,3 +1,7 @@
+#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
+	#define VECTORIZE_MEMORY_MOVE
+#endif
+
 using ICSharpCode.SharpZipLib.Checksum;
 using System;
 using System.IO;
@@ -19,9 +23,9 @@ namespace ICSharpCode.SharpZipLib.BZip2
 		private const int NO_RAND_PART_B_STATE = 6;
 		private const int NO_RAND_PART_C_STATE = 7;
 
-#if NETSTANDARD2_1
+#if VECTORIZE_MEMORY_MOVE
 		private static readonly int VectorSize = System.Numerics.Vector<byte>.Count;
-#endif
+#endif // VECTORIZE_MEMORY_MOVE
 
 #endregion Constants
 
@@ -717,7 +721,7 @@ namespace ICSharpCode.SharpZipLib.BZip2
 
 					var j = nextSym - 1;
 
-#if !NETSTANDARD2_0 && !NETFRAMEWORK
+#if VECTORIZE_MEMORY_MOVE
 					// This is vectorized memory move. Going from the back, we're taking chunks of array
 					// and write them at the new location shifted by one. Since chunks are VectorSize long,
 					// at the end we have to move ""tail"" (or head actually) of the array using a plain loop.
@@ -729,7 +733,7 @@ namespace ICSharpCode.SharpZipLib.BZip2
 						arrayPart.CopyTo(yy, j - VectorSize + 1);
 						j -= VectorSize;
 					}
-#endif
+#endif // VECTORIZE_MEMORY_MOVE
 
 					while(j > 0)
 					{
",0.0,,0.0,tfidf
CVE-2021-32840,CVE-2021-32840/a0e96de70b5264f4c919b09253b1522bc7a221cc,https://github.com/icsharpcode/SharpZipLib/commit/a0e96de70b5264f4c919b09253b1522bc7a221cc,"<s>SharpZipLib (or #ziplib) is a Zip, GZip, Tar and BZip2 library. Prior to version 1.3.3, a TAR file entry `../evil.txt` may be extracted in the parent directory of `destFolder`. This leads to arbitrary file write that may lead to code execution. The vulnerability was patched in version 1.3.3.</s>","<s>test: add tests for tar path traversal
</s>"," diff --git a/test/ICSharpCode.SharpZipLib.Tests/ICSharpCode.SharpZipLib.Tests.csproj b/test/ICSharpCode.SharpZipLib.Tests/ICSharpCode.SharpZipLib.Tests.csproj
index fd6f61a..12183fc 100644
--- a/test/ICSharpCode.SharpZipLib.Tests/ICSharpCode.SharpZipLib.Tests.csproj
+++ b/test/ICSharpCode.SharpZipLib.Tests/ICSharpCode.SharpZipLib.Tests.csproj
@@ -5,6 +5,7 @@
 		<TargetFrameworks>netcoreapp3.1;net46</TargetFrameworks>
     <ApplicationIcon />
     <StartupObject />
+		<LangVersion>8</LangVersion>
   </PropertyGroup>
 
   <ItemGroup>
",1.0,1.0,1.0,tfidf
,,,,,,,,,
CVE-2017-15010,CVE-2017-15010/4e2fb0b1b7c965b313c6bce995d4d80c9fdd0638,https://github.com/salesforce/tough-cookie/commit/4e2fb0b1b7c965b313c6bce995d4d80c9fdd0638,<s>A ReDoS (regular expression denial of service) flaw was found in the tough-cookie module before 2.3.3 for Node.js. An attacker that is able to make an HTTP request using a specially crafted cookie may cause the application to consume an excessive amount of CPU.</s>,"<s>Document the 256 spaces limit
</s>"," diff --git a/lib/cookie.js b/lib/cookie.js
index 18e1afe..ccf941f 100644
--- a/lib/cookie.js
+++ b/lib/cookie.js
@@ -53,6 +53,10 @@ var COOKIE_OCTETS = new RegExp('^'+COOKIE_OCTET.source+'+$');
 
 var CONTROL_CHARS = /[\x00-\x1F]/;
 
+// For COOKIE_PAIR and LOOSE_COOKIE_PAIR below, the number of spaces has been
+// restricted to 256 to side-step a ReDoS issue reported here:
+// https://github.com/salesforce/tough-cookie/issues/92
+
 // Double quotes are part of the value (see: S4.1.1).
 // '\r', '\n' and '\0' should be treated as a terminator in the ""relaxed"" mode
 // (see: https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/parsed_cookie.cc#L60)
",0.0,,0.0,lime
CVE-2017-15010,CVE-2017-15010/f1ed420a6a92ea7a5418df6e39e676556bc0c71d,https://github.com/salesforce/tough-cookie/commit/f1ed420a6a92ea7a5418df6e39e676556bc0c71d,<s>A ReDoS (regular expression denial of service) flaw was found in the tough-cookie module before 2.3.3 for Node.js. An attacker that is able to make an HTTP request using a specially crafted cookie may cause the application to consume an excessive amount of CPU.</s>,"<s>Constrain spaces before = to 256
Side-steps ReDoS in Issue #92
</s>"," diff --git a/lib/cookie.js b/lib/cookie.js
index 32e49ad..18e1afe 100644
--- a/lib/cookie.js
+++ b/lib/cookie.js
@@ -58,11 +58,11 @@ var CONTROL_CHARS = /[\x00-\x1F]/;
 // (see: https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/parsed_cookie.cc#L60)
 // '=' and ';' are attribute/values separators
 // (see: https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/parsed_cookie.cc#L64)
-var COOKIE_PAIR = /^(([^=;]+))\s*=\s*([^\n\r\0]*)/;
+var COOKIE_PAIR = /^(([^=;]+))\s{0,256}=\s*([^\n\r\0]*)/;
 
 // Used to parse non-RFC-compliant cookies like '=abc' when given the `loose`
 // option in Cookie.parse:
-var LOOSE_COOKIE_PAIR = /^((?:=)?([^=;]*)\s*=\s*)?([^\n\r\0]*)/;
+var LOOSE_COOKIE_PAIR = /^((?:=)?([^=;]*)\s{0,256}=\s*)?([^\n\r\0]*)/;
 
 // RFC6265 S4.1.1 defines path value as 'any CHAR except CTLs or "";""'
 // Note ';' is \x3B
",1.0,1.0,1.0,lime
,,,,,,,,,
CVE-2019-20792,CVE-2019-20792/c246f6f69a749d4f68626b40795a4f69168008f4,https://github.com/OpenSC/OpenSC/commit/c246f6f69a749d4f68626b40795a4f69168008f4,<s>OpenSC before 0.20.0 has a double free in coolkey_free_private_data because coolkey_add_object in libopensc/card-coolkey.c lacks a uniqueness check.</s>,"<s>coolkey: Make sure the object ID is unique when filling list
Thanks to oss-fuzz
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=19208
</s>"," diff --git a/src/libopensc/card-coolkey.c b/src/libopensc/card-coolkey.c
index d492d715..c95a5035 100644
--- a/src/libopensc/card-coolkey.c
+++ b/src/libopensc/card-coolkey.c
@@ -1945,6 +1945,11 @@ coolkey_add_object(coolkey_private_data_t *priv, unsigned long object_id, const
 	new_object.id = object_id;
 	new_object.length = object_length;
 
+	/* The object ID needs to be unique */
+	if (coolkey_find_object_by_id(&priv->objects_list, object_id) != NULL) {
+		return SC_ERROR_INTERNAL;
+	}
+
 	if (object_data) {
 		new_object.data = malloc(object_length + add_v1_record);
 		if (new_object.data == NULL) {
",1.0,2.0,1.0,lime
CVE-2019-20792,CVE-2019-20792/f11c286bc6a987a3f1f838c061d65636b90e3aa8,https://github.com/OpenSC/OpenSC/commit/f11c286bc6a987a3f1f838c061d65636b90e3aa8,<s>OpenSC before 0.20.0 has a double free in coolkey_free_private_data because coolkey_add_object in libopensc/card-coolkey.c lacks a uniqueness check.</s>,"<s>coolkey: Refactor the object listing to avoid invalid memory access
Probably resolves some bad memory access from oss-fuzz such as
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=18907
</s>"," diff --git a/src/libopensc/card-coolkey.c b/src/libopensc/card-coolkey.c
index b7985741..07652fc2 100644
--- a/src/libopensc/card-coolkey.c
+++ b/src/libopensc/card-coolkey.c
@@ -2166,11 +2166,19 @@ static int coolkey_initialize(sc_card_t *card)
 	priv->life_cycle = life_cycle.life_cycle;
 
 	/* walk down the list of objects and read them off the token */
-	for(r=coolkey_list_object(card, COOLKEY_LIST_RESET, &object_info); r >= 0;
-		r= coolkey_list_object(card, COOLKEY_LIST_NEXT, &object_info)) {
-		unsigned long object_id = bebytes2ulong(object_info.object_id);
-		unsigned short object_len = bebytes2ulong(object_info.object_length);
-	    /* also look at the ACL... */
+	r = coolkey_list_object(card, COOLKEY_LIST_RESET, &object_info);
+	while (r >= 0) {
+		unsigned long object_id;
+		unsigned short object_len;
+
+		/* The card did not return what we expected: Lets try other objects */
+		if ((size_t)r < (sizeof(object_info)))
+			break;
+
+		/* TODO also look at the ACL... */
+
+		object_id = bebytes2ulong(object_info.object_id);
+		object_len = bebytes2ulong(object_info.object_length);
 
 
 		/* the combined object is a single object that can store the other objects.
@@ -2197,12 +2205,14 @@ static int coolkey_initialize(sc_card_t *card)
 				break;
 			}
 			combined_processed = 1;
-			continue;
+		} else {
+			r = coolkey_add_object(priv, object_id, NULL, object_len, 0);
+			if (r != SC_SUCCESS)
+				sc_log(card->ctx, ""coolkey_add_object() returned %d"", r);
 		}
-		r = coolkey_add_object(priv, object_id, NULL, object_len, 0);
-		if (r != SC_SUCCESS)
-			sc_log(card->ctx, ""coolkey_add_object() returned %d"", r);
 
+		/* Read next object: error is handled on the cycle condition and below after cycle */
+		r = coolkey_list_object(card, COOLKEY_LIST_NEXT, &object_info);
 	}
 	if (r != SC_ERROR_FILE_END_REACHED) {
 		goto cleanup;
",0.0,,0.0,lime
,,,,,,,,,
CVE-2019-10763,CVE-2019-10763/9182f03c80bb7f08aae4efd4a0788e2be6368d96,https://github.com/pimcore/pimcore/commit/9182f03c80bb7f08aae4efd4a0788e2be6368d96,"<s>pimcore/pimcore before 6.3.0 is vulnerable to SQL Injection. An attacker with limited privileges (classes permission) can achieve a SQL injection that can lead in data leakage. The vulnerability can be exploited via 'id', 'storeId', 'pageSize' and 'tables' parameters, using a payload for trigger a time based or error based sql injection.</s>","<s>[Data Objects] fixed possible SQL injection in classification store definition
</s>"," diff --git a/bundles/AdminBundle/Controller/Admin/DataObject/ClassificationstoreController.php b/bundles/AdminBundle/Controller/Admin/DataObject/ClassificationstoreController.php
index 829dc09193..c9f349a10e 100644
--- a/bundles/AdminBundle/Controller/Admin/DataObject/ClassificationstoreController.php
+++ b/bundles/AdminBundle/Controller/Admin/DataObject/ClassificationstoreController.php
@@ -1452,11 +1452,16 @@ class ClassificationstoreController extends AdminController implements EventedCo
      */
     public function getPageAction(Request $request)
     {
-        $table = 'classificationstore_' . $request->get('table');
+        $tableSuffix = $request->get('table');
+        if (!in_arrayi($tableSuffix, ['keys', 'groups'])) {
+            $tableSuffix = 'keys';
+        }
+
+        $table = 'classificationstore_' . $tableSuffix;
         $db = \Pimcore\Db::get();
-        $id = $request->get('id');
-        $storeId = $request->get('storeId');
-        $pageSize = $request->get('pageSize');
+        $id = (int) $request->get('id');
+        $storeId = (int) $request->get('storeId');
+        $pageSize = (int) $request->get('pageSize');
 
         if ($request->get('sortKey')) {
             $sortKey = $request->get('sortKey');
@@ -1465,6 +1470,15 @@ class ClassificationstoreController extends AdminController implements EventedCo
             $sortKey = 'name';
             $sortDir = 'ASC';
         }
+
+        if (!in_arrayi($sortDir, ['DESC', 'ASC'])) {
+            $sortDir = 'DESC';
+        }
+
+        if (!in_arrayi($sortKey, ['name', 'title', 'description', 'id', 'type', 'creationDate', 'modificationDate', 'enabled', 'parentId', 'storeId'])) {
+            $sortKey = 'name';
+        }
+
         $sorter = ' order by `' . $sortKey .  '` ' . $sortDir;
 
         if ($table == 'keys') {
",1.0,3.0,1.0,lime
CVE-2019-10763,CVE-2019-10763/81bc24c38a07d4d369718b8eaf57fecd42cc156c,https://github.com/pimcore/pimcore/commit/81bc24c38a07d4d369718b8eaf57fecd42cc156c,"<s>pimcore/pimcore before 6.3.0 is vulnerable to SQL Injection. An attacker with limited privileges (classes permission) can achieve a SQL injection that can lead in data leakage. The vulnerability can be exploited via 'id', 'storeId', 'pageSize' and 'tables' parameters, using a payload for trigger a time based or error based sql injection.</s>","<s>Lost password service: do not expose info whether a user exists or not (avoid brute-force attacks) (4a7bba5c3f818852cbbd29fa124f7fb09a207185)
</s>"," diff --git a/bundles/AdminBundle/Controller/Admin/LoginController.php b/bundles/AdminBundle/Controller/Admin/LoginController.php
index fc9d160bd1..4ef1fe7c1b 100644
--- a/bundles/AdminBundle/Controller/Admin/LoginController.php
+++ b/bundles/AdminBundle/Controller/Admin/LoginController.php
@@ -22,6 +22,7 @@ use Pimcore\Controller\Configuration\TemplatePhp;
 use Pimcore\Controller\EventedControllerInterface;
 use Pimcore\Event\Admin\Login\LostPasswordEvent;
 use Pimcore\Event\AdminEvents;
+use Pimcore\Logger;
 use Pimcore\Model\User;
 use Pimcore\Templating\Model\ViewModel;
 use Pimcore\Tool;
@@ -120,29 +121,28 @@ class LoginController extends AdminController implements BruteforceProtectedCont
     public function lostpasswordAction(Request $request, BruteforceProtectionHandler $bruteforceProtectionHandler)
     {
         $view = $this->buildLoginPageViewModel();
-        $view->success = false;
+        $error = null;
 
-        // TODO is the error on the view used somewhere?
         if ($request->getMethod() === 'POST' && $username = $request->get('username')) {
             $user = User::getByName($username);
 
             if ($user instanceof User) {
                 if (!$user->isActive()) {
-                    $view->error = 'user inactive';
+                    $error = 'user inactive';
                 }
 
                 if (!$user->getEmail()) {
-                    $view->error = 'user has no email address';
+                    $error = 'user has no email address';
                 }
 
                 if (!$user->getPassword()) {
-                    $view->error = 'user has no password';
+                    $error = 'user has no password';
                 }
             } else {
-                $view->error = 'user unknown';
+                $error = 'user unknown';
             }
 
-            if (!$view->error) {
+            if (!$error) {
                 $token = Authentication::generateToken($username, $user->getPassword());
 
                 $loginUrl = $this->generateUrl('pimcore_admin_login_check', [
@@ -167,14 +167,13 @@ class LoginController extends AdminController implements BruteforceProtectedCont
                     if ($event->hasResponse()) {
                         return $event->getResponse();
                     }
-
-                    $view->success = true;
                 } catch (\Exception $e) {
-                    $view->error = 'could not send email';
+                    $error = 'could not send email';
                 }
             }
 
-            if ($view->error) {
+            if ($error) {
+                Logger::error('Lost password service: ' . $error);
                 $bruteforceProtectionHandler->addEntry($request->get('username'), $request);
             }
         }
",0.0,,0.0,lime
,,,,,,,,,
CVE-2017-9142,CVE-2017-9142/f0232a2a45dfd003c1faf6079497895df3ab0ee1,https://github.com/ImageMagick/ImageMagick/commit/f0232a2a45dfd003c1faf6079497895df3ab0ee1,"<s>In ImageMagick 7.0.5-7 Q16, a crafted file could trigger an assertion failure in the WriteBlob function in MagickCore/blob.c because of missing checks in the ReadOneJNGImage function in coders/png.c.</s>","<s>Fixed incorrect call to WriteBlob reported in #490.
</s>"," diff --git a/coders/png.c b/coders/png.c
index c194d0858..cfd684400 100644
--- a/coders/png.c
+++ b/coders/png.c
@@ -4782,10 +4782,11 @@ static Image *ReadOneJNGImage(MngInfo *mng_info,
           (void) LogMagickEvent(CoderEvent,GetMagickModule(),
             ""    Copying JDAT chunk data to color_blob."");
 
-        (void) WriteBlob(color_image,length,chunk);
-
         if (length != 0)
-          chunk=(unsigned char *) RelinquishMagickMemory(chunk);
+          {
+            (void) WriteBlob(color_image,length,chunk);
+            chunk=(unsigned char *) RelinquishMagickMemory(chunk);
+          }
 
         continue;
       }
",1.0,1.0,1.0,lime
CVE-2017-9142,CVE-2017-9142/e05780990eecbe1b5f2884ad30e04328cec646bf,https://github.com/ImageMagick/ImageMagick/commit/e05780990eecbe1b5f2884ad30e04328cec646bf,"<s>In ImageMagick 7.0.5-7 Q16, a crafted file could trigger an assertion failure in the WriteBlob function in MagickCore/blob.c because of missing checks in the ReadOneJNGImage function in coders/png.c.</s>","<s>https://github.com/ImageMagick/ImageMagick/issues/491
</s>"," diff --git a/MagickCore/image.c b/MagickCore/image.c
index ce60390fb..c2e666f51 100644
--- a/MagickCore/image.c
+++ b/MagickCore/image.c
@@ -849,7 +849,7 @@ MagickExport Image *CloneImage(const Image *image,const size_t columns,
       */
       clone_image->colors=image->colors;
       length=(size_t) image->colors;
-      clone_image->colormap=(PixelInfo *) AcquireQuantumMemory(length,
+      clone_image->colormap=(PixelInfo *) AcquireQuantumMemory(length+1,
         sizeof(*clone_image->colormap));
       if (clone_image->colormap == (PixelInfo *) NULL)
         {
",0.0,,0.0,lime
,,,,,,,,,
CVE-2019-13303,CVE-2019-13303/4a60519527fc1cf925d37f93aac021655ee43314,https://github.com/ImageMagick/ImageMagick/commit/4a60519527fc1cf925d37f93aac021655ee43314,<s>ImageMagick 7.0.8-50 Q16 has a heap-based buffer over-read in MagickCore/composite.c in CompositeImage.</s>,"<s>Revert CopyCompositeOp composite patch
</s>"," diff --git a/MagickCore/composite.c b/MagickCore/composite.c
index 99e91d147..78d6dff92 100644
--- a/MagickCore/composite.c
+++ b/MagickCore/composite.c
@@ -654,19 +654,18 @@ MagickExport MagickBooleanType CompositeImage(Image *image,
               q+=GetPixelChannels(image);
               continue;
             }
-          for (i=0; i < (ssize_t) GetPixelChannels(source_image); i++)
+          for (i=0; i < (ssize_t) GetPixelChannels(image); i++)
           {
-            PixelChannel channel = GetPixelChannelChannel(source_image,i);
-            PixelTrait source_traits = GetPixelChannelTraits(source_image,
-              channel);
+            PixelChannel channel = GetPixelChannelChannel(image,i);
             PixelTrait traits = GetPixelChannelTraits(image,channel);
-            if (source_traits == UndefinedPixelTrait)
+            PixelTrait source_traits=GetPixelChannelTraits(source_image,
+              channel);
+            if (traits == UndefinedPixelTrait)
               continue;
-            if (traits != UndefinedPixelTrait)
+            if (source_traits != UndefinedPixelTrait)
               SetPixelChannel(image,channel,p[i],q);
-            else
-              if (channel == AlphaPixelChannel)
-                SetPixelChannel(image,channel,OpaqueAlpha,q);
+            else if (channel == AlphaPixelChannel)
+              SetPixelChannel(image,channel,OpaqueAlpha,q);
           }
           p+=GetPixelChannels(source_image);
           q+=GetPixelChannels(image);
",0.0,,0.0,tfidf
CVE-2019-13303,CVE-2019-13303/d29148fae06c01ef215940e084cf41853c117bab,https://github.com/ImageMagick/ImageMagick/commit/d29148fae06c01ef215940e084cf41853c117bab,<s>ImageMagick 7.0.8-50 Q16 has a heap-based buffer over-read in MagickCore/composite.c in CompositeImage.</s>,"<s>https://github.com/ImageMagick/ImageMagick/issues/1603
</s>"," diff --git a/MagickCore/composite.c b/MagickCore/composite.c
index 78d6dff92..99e91d147 100644
--- a/MagickCore/composite.c
+++ b/MagickCore/composite.c
@@ -654,18 +654,19 @@ MagickExport MagickBooleanType CompositeImage(Image *image,
               q+=GetPixelChannels(image);
               continue;
             }
-          for (i=0; i < (ssize_t) GetPixelChannels(image); i++)
+          for (i=0; i < (ssize_t) GetPixelChannels(source_image); i++)
           {
-            PixelChannel channel = GetPixelChannelChannel(image,i);
-            PixelTrait traits = GetPixelChannelTraits(image,channel);
-            PixelTrait source_traits=GetPixelChannelTraits(source_image,
+            PixelChannel channel = GetPixelChannelChannel(source_image,i);
+            PixelTrait source_traits = GetPixelChannelTraits(source_image,
               channel);
-            if (traits == UndefinedPixelTrait)
+            PixelTrait traits = GetPixelChannelTraits(image,channel);
+            if (source_traits == UndefinedPixelTrait)
               continue;
-            if (source_traits != UndefinedPixelTrait)
+            if (traits != UndefinedPixelTrait)
               SetPixelChannel(image,channel,p[i],q);
-            else if (channel == AlphaPixelChannel)
-              SetPixelChannel(image,channel,OpaqueAlpha,q);
+            else
+              if (channel == AlphaPixelChannel)
+                SetPixelChannel(image,channel,OpaqueAlpha,q);
           }
           p+=GetPixelChannels(source_image);
           q+=GetPixelChannels(image);
",1.0,1.0,1.0,tfidf
,,,,,,,,,
CVE-2019-10254,CVE-2019-10254/586cca384be6710b03e14bcbeb7588c1772604ec,https://github.com/MISP/MISP/commit/586cca384be6710b03e14bcbeb7588c1772604ec,"<s>In MISP before 2.4.105, the app/View/Layouts/default.ctp default layout template has a Reflected XSS vulnerability.</s>","<s>fix: [security] Fix to a reflected XSS in the default layout template
- as reported by Tuscany Internet eXchange | Misp Team | TIX CyberSecurity
</s>"," diff --git a/app/View/Layouts/default.ctp b/app/View/Layouts/default.ctp
index 9b720d295..93139d9c0 100644
--- a/app/View/Layouts/default.ctp
+++ b/app/View/Layouts/default.ctp
@@ -101,9 +101,9 @@
         var baseurl = '<?php echo $baseurl; ?>';
         var here = '<?php
                 if (substr($this->params['action'], 0, 6) === 'admin_') {
-                    echo $baseurl . '/admin/' . $this->params['controller'] . '/' . substr($this->params['action'], 6);
+                    echo $baseurl . '/admin/' . h($this->params['controller']) . '/' . h(substr($this->params['action'], 6));
                 } else {
-                    echo $baseurl . '/' . $this->params['controller'] . '/' . $this->params['action'];
+                    echo $baseurl . '/' . h($this->params['controller']) . '/' . h($this->params['action']);
                 }
             ?>';
         $(document).ready(function(){
",1.0,2.0,1.0,lime
CVE-2019-10254,CVE-2019-10254/4858b0181cb1a28cf093b14383a932a699d2f900,https://github.com/MISP/MISP/commit/4858b0181cb1a28cf093b14383a932a699d2f900,"<s>In MISP before 2.4.105, the app/View/Layouts/default.ctp default layout template has a Reflected XSS vulnerability.</s>","<s>fix: [ACL Component] Added new function (for new modules format) in the list
</s>"," diff --git a/app/Controller/Component/ACLComponent.php b/app/Controller/Component/ACLComponent.php
index 2b441a4fe..4c6c95d5f 100644
--- a/app/Controller/Component/ACLComponent.php
+++ b/app/Controller/Component/ACLComponent.php
@@ -120,6 +120,7 @@ class ACLComponent extends Component
                     'getReferenceData' => array('*'),
                     'getReferences' => array('*'),
                     'getObjectTemplate' => array('*'),
+                    'handleModuleResults' => array('*'),
                     'hids' => array('*'),
                     'index' => array('*'),
                     'importChoice' => array('*'),
",0.0,,0.0,lime
,,,,,,,,,
CVE-2018-6197,CVE-2018-6197/01d41d49b273a8cc75b27c6ab42291b46004fc0c,https://github.com/tats/w3m/commit/01d41d49b273a8cc75b27c6ab42291b46004fc0c,<s>w3m through 0.5.3 is prone to a NULL pointer dereference flaw in formUpdateBuffer in form.c.</s>,"<s>Add CVE IDs
cf. https://security-tracker.debian.org/tracker/source-package/w3m
</s>"," diff --git a/ChangeLog b/ChangeLog
index 65bd46e..8e29091 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -6,6 +6,8 @@
 
 	* config.h.dist, config.h.in, configure, configure.ac, main.c, rc.c:
 	Make temporary directory safely when ~/.w3m is unwritable.
+	Bug-Debian: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=888097
+	[CVE-2018-6198]
 
 	* rc.c: Suppress error messages when ~/.w3m is unwritable.
 	Bug-Debian: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=871425
@@ -16,7 +18,7 @@
 	Update config.* with autotools-dev 20171216.1.
 
 	* table.c: Prevent negative indent value in feed_table_block_tag().
-	Bug-Debian: https://github.com/tats/w3m/issues/88
+	Bug-Debian: https://github.com/tats/w3m/issues/88 [CVE-2018-6196]
 
 2018-01-06  Tatsuya Kinoshita  <tats@debian.org>
 
@@ -39,7 +41,7 @@
 2017-12-27  Tatsuya Kinoshita  <tats@debian.org>
 
 	* form.c: Prevent invalid columnPos() call in formUpdateBuffer().
-	Bug-Debian: https://github.com/tats/w3m/issues/89
+	Bug-Debian: https://github.com/tats/w3m/issues/89 [CVE-2018-6197]
 
 	* main.c: Typo fix in fusage().
 	Bug-Debian: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=878106
",0.0,,0.0,tfidf
CVE-2018-6197,CVE-2018-6197/7fdc83b0364005a0b5ed869230dd81752ba022e8,https://github.com/tats/w3m/commit/7fdc83b0364005a0b5ed869230dd81752ba022e8,<s>w3m through 0.5.3 is prone to a NULL pointer dereference flaw in formUpdateBuffer in form.c.</s>,"<s>Prevent invalid columnPos() call in formUpdateBuffer()
Bug-Debian: https://github.com/tats/w3m/issues/89
</s>"," diff --git a/form.c b/form.c
index cc5e3d2..bc14d39 100644
--- a/form.c
+++ b/form.c
@@ -482,6 +482,8 @@ formUpdateBuffer(Anchor *a, Buffer *buf, FormItemList *form)
 	rows = form->rows ? form->rows : 1;
 	col = COLPOS(l, a->start.pos);
 	for (c_rows = 0; c_rows < rows; c_rows++, l = l->next) {
+	    if (l == NULL)
+		break;
 	    if (rows > 1) {
 		pos = columnPos(l, col);
 		a = retrieveAnchor(buf->formitem, l->linenumber, pos);
",1.0,3.0,1.0,tfidf
,,,,,,,,,
CVE-2019-1010317,CVE-2019-1010317/f68a9555b548306c5b1ee45199ccdc4a16a6101b,https://github.com/dbry/WavPack/commit/f68a9555b548306c5b1ee45199ccdc4a16a6101b,"<s>WavPack 5.1.0 and earlier is affected by: CWE-457: Use of Uninitialized Variable. The impact is: Unexpected control flow, crashes, and segfaults. The component is: ParseCaffHeaderConfig (caff.c:486). The attack vector is: Maliciously crafted .wav file. The fixed version is: After commit https://github.com/dbry/WavPack/commit/f68a9555b548306c5b1ee45199ccdc4a16a6101b.</s>","<s>issue #66: make sure CAF files have a ""desc"" chunk
</s>"," diff --git a/cli/caff.c b/cli/caff.c
index 2a5e2d9..a35da74 100644
--- a/cli/caff.c
+++ b/cli/caff.c
@@ -152,7 +152,7 @@ static struct {
 
 int ParseCaffHeaderConfig (FILE *infile, char *infilename, char *fourcc, WavpackContext *wpc, WavpackConfig *config)
 {
-    uint32_t chan_chunk = 0, channel_layout = 0, bcount;
+    uint32_t chan_chunk = 0, desc_chunk = 0, channel_layout = 0, bcount;
     unsigned char *channel_identities = NULL;
     unsigned char *channel_reorder = NULL;
     int64_t total_samples = 0, infilesize;
@@ -218,6 +218,7 @@ int ParseCaffHeaderConfig (FILE *infile, char *infilename, char *fourcc, Wavpack
             }
 
             WavpackBigEndianToNative (&caf_audio_format, CAFAudioFormatFormat);
+            desc_chunk = 1;
 
             if (debug_logging_mode) {
                 char formatstr [5];
@@ -458,7 +459,7 @@ int ParseCaffHeaderConfig (FILE *infile, char *infilename, char *fourcc, Wavpack
         else if (!strncmp (caf_chunk_header.mChunkType, ""data"", 4)) {     // on the data chunk, get size and exit loop
             uint32_t mEditCount;
 
-            if (!DoReadFile (infile, &mEditCount, sizeof (mEditCount), &bcount) ||
+            if (!desc_chunk || !DoReadFile (infile, &mEditCount, sizeof (mEditCount), &bcount) ||
                 bcount != sizeof (mEditCount)) {
                     error_line (""%s is not a valid .CAF file!"", infilename);
                     return WAVPACK_SOFT_ERROR;
",1.0,1.0,1.0,lime
CVE-2019-1010317,CVE-2019-1010317/33a0025d1d63ccd05d9dbaa6923d52b1446a62fe,https://github.com/dbry/WavPack/commit/33a0025d1d63ccd05d9dbaa6923d52b1446a62fe,"<s>WavPack 5.1.0 and earlier is affected by: CWE-457: Use of Uninitialized Variable. The impact is: Unexpected control flow, crashes, and segfaults. The component is: ParseCaffHeaderConfig (caff.c:486). The attack vector is: Maliciously crafted .wav file. The fixed version is: After commit https://github.com/dbry/WavPack/commit/f68a9555b548306c5b1ee45199ccdc4a16a6101b.</s>","<s>issue #68: clear WaveHeader at start to prevent uninitialized read
</s>"," diff --git a/cli/wave64.c b/cli/wave64.c
index 7beffe6..59548b1 100644
--- a/cli/wave64.c
+++ b/cli/wave64.c
@@ -56,6 +56,7 @@ int ParseWave64HeaderConfig (FILE *infile, char *infilename, char *fourcc, Wavpa
     int format_chunk = 0;
     uint32_t bcount;
 
+    CLEAR (WaveHeader);
     infilesize = DoGetFileSize (infile);
     memcpy (&filehdr, fourcc, 4);
 
",0.0,,0.0,lime
,,,,,,,,,
CVE-2020-6816,CVE-2020-6816/175f67740e7951e1d80cefb7831e6c3e4efeb986,https://github.com/mozilla/bleach/commit/175f67740e7951e1d80cefb7831e6c3e4efeb986,"<s>In Mozilla Bleach before 3.12, a mutation XSS in bleach.clean when RCDATA and either svg or math tags are whitelisted and the keyword argument strip=False.</s>","<s>fix bug 1621692
</s>"," diff --git a/tests/test_clean.py b/tests/test_clean.py
index 8f64beb..133cd82 100644
--- a/tests/test_clean.py
+++ b/tests/test_clean.py
@@ -7,7 +7,7 @@ import pytest
 from bleach import clean
 from bleach.html5lib_shim import Filter
 from bleach.sanitizer import Cleaner
-
+from bleach._vendor.html5lib.constants import rcdataElements
 
 def test_clean_idempotent():
     """"""Make sure that applying the filter twice doesn't change anything.""""""
@@ -789,7 +789,7 @@ _raw_tags = [
         (
             raw_tag,
             ""<noscript><%s></noscript><img src=x onerror=alert(1) />"" % raw_tag,
-            ""<noscript><%s></noscript>&lt;img src=x onerror=alert(1) /&gt;"" % raw_tag,
+            ""<noscript>&lt;%s&gt;</noscript>&lt;img src=x onerror=alert(1) /&gt;"" % raw_tag,
         )
         for raw_tag in _raw_tags
     ],
@@ -799,6 +799,29 @@ def test_noscript_rawtag_(raw_tag, data, expected):
     assert clean(data, tags=[""noscript"", raw_tag]) == expected
 
 
+@pytest.mark.parametrize(
+    ""namespace_tag, rc_data_element_tag, data, expected"",
+    [
+        (
+            namespace_tag,
+            rc_data_element_tag,
+            ""<%s><%s><img src=x onerror=alert(1)>"" % (namespace_tag, rc_data_element_tag),
+            ""<%s><%s>&lt;img src=x onerror=alert(1)&gt;</%s></%s>"" % (namespace_tag, rc_data_element_tag, rc_data_element_tag, namespace_tag),
+        )
+        for namespace_tag in [""math"", ""svg""]
+        # https://dev.w3.org/html5/html-author/#rcdata-elements
+        # https://html.spec.whatwg.org/index.html#parsing-html-fragments
+        # in html5lib: 'style', 'script', 'xmp', 'iframe', 'noembed', 'noframes', and 'noscript'
+        for rc_data_element_tag in rcdataElements
+    ],
+)
+def test_namespace_rc_data_element_strip_false(namespace_tag, rc_data_element_tag, data, expected):
+    # refs: bug 1621692 / GHSA-m6xf-fq7q-8743
+    #
+    # browsers will pull the img out of the namespace and rc data tag resulting in XSS
+    assert clean(data, tags=[namespace_tag, rc_data_element_tag], strip=False) == expected
+
+
 def get_ids_and_tests():
     """"""Retrieves regression tests from data/ directory
 
",1.0,1.0,1.0,tfidf
CVE-2020-6816,CVE-2020-6816/6ba1dd0d49a8d7a31f71d172483822a5a6f2da23,https://github.com/mozilla/bleach/commit/6ba1dd0d49a8d7a31f71d172483822a5a6f2da23,"<s>In Mozilla Bleach before 3.12, a mutation XSS in bleach.clean when RCDATA and either svg or math tags are whitelisted and the keyword argument strip=False.</s>","<s>Check parser.tags before trying to iterate
</s>"," diff --git a/bleach/html5lib_shim.py b/bleach/html5lib_shim.py
index 1cb4efe..950c275 100644
--- a/bleach/html5lib_shim.py
+++ b/bleach/html5lib_shim.py
@@ -256,7 +256,7 @@ class BleachHTMLTokenizer(HTMLTokenizer):
                     yield token
 
                 elif ((last_error_token['data'] == 'expected-closing-tag-but-got-char' and
-                     token['data'].lower().strip() not in self.parser.tags)):
+                     (self.parser.tags is None or token['data'].lower().strip() not in self.parser.tags))):
                     # We've got either a malformed tag or a pseudo-tag or
                     # something that html5lib wants to turn into a malformed
                     # comment which Bleach clean() will drop so we interfere
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2016-8649,CVE-2016-8649/81f466d05f2a89cb4f122ef7f593ff3f279b165c,https://github.com/lxc/lxc/commit/81f466d05f2a89cb4f122ef7f593ff3f279b165c,"<s>lxc-attach in LXC before 1.0.9 and 2.x before 2.0.6 allows an attacker inside of an unprivileged container to use an inherited file descriptor, of the host's /proc, to access the rest of the host's filesystem via the openat() family of syscalls.</s>","<s>attach: do not send procfd to attached process
So far, we opened a file descriptor refering to proc on the host inside the
host namespace and handed that fd to the attached process in
attach_child_main(). This was done to ensure that LSM labels were correctly
setup. However, by exploiting a potential kernel bug, ptrace could be used to
prevent the file descriptor from being closed which in turn could be used by an
unprivileged container to gain access to the host namespace. Aside from this
needing an upstream kernel fix, we should make sure that we don't pass the fd
for proc itself to the attached process. However, we cannot completely prevent
this, as the attached process needs to be able to change its apparmor profile
by writing to /proc/self/attr/exec or /proc/self/attr/current. To minimize the
attack surface, we only send the fd for /proc/self/attr/exec or
/proc/self/attr/current to the attached process. To do this we introduce a
little more IPC between the child and parent:
	 * IPC mechanism: (X is receiver)
	 *   initial process        intermediate          attached
	 *        X           <---  send pid of
	 *                          attached proc,
	 *                          then exit
	 *    send 0 ------------------------------------>    X
	 *                                              [do initialization]
	 *        X  <------------------------------------  send 1
	 *   [add to cgroup, ...]
	 *    send 2 ------------------------------------>    X
	 *						[set LXC_ATTACH_NO_NEW_PRIVS]
	 *        X  <------------------------------------  send 3
	 *   [open LSM label fd]
	 *    send 4 ------------------------------------>    X
	 *   						[set LSM label]
	 *   close socket                                 close socket
	 *                                                run program
The attached child tells the parent when it is ready to have its LSM labels set
up. The parent then opens an approriate fd for the child PID to
/proc/<pid>/attr/exec or /proc/<pid>/attr/current and sends it via SCM_RIGHTS
to the child. The child can then set its LSM laben. Both sides then close the
socket fds and the child execs the requested process.
Signed-off-by: Christian Brauner <christian.brauner@canonical.com>
</s>"," diff --git a/src/lxc/attach.c b/src/lxc/attach.c
index bfb2abf01..2f095b408 100644
--- a/src/lxc/attach.c
+++ b/src/lxc/attach.c
@@ -53,6 +53,7 @@
 
 #include ""namespace.h""
 #include ""log.h""
+#include ""af_unix.h""
 #include ""attach.h""
 #include ""caps.h""
 #include ""config.h""
@@ -84,80 +85,103 @@
 
 lxc_log_define(lxc_attach, lxc);
 
-int lsm_set_label_at(int procfd, int on_exec, char* lsm_label) {
+static int lsm_openat(int procfd, pid_t pid, int on_exec)
+{
+	int ret = -1;
 	int labelfd = -1;
-	int ret = 0;
 	const char* name;
-	char* command = NULL;
+#define __LSMATTRLEN /* /proc */ (5 + /* /pid-to-str */ 21 + /* /current */ 7 + /* \0 */ 1)
+	char path[__LSMATTRLEN];
 
 	name = lsm_name();
 
 	if (strcmp(name, ""nop"") == 0)
-		goto out;
+		return 0;
 
 	if (strcmp(name, ""none"") == 0)
-		goto out;
+		return 0;
 
 	/* We don't support on-exec with AppArmor */
 	if (strcmp(name, ""AppArmor"") == 0)
 		on_exec = 0;
 
 	if (on_exec) {
-		labelfd = openat(procfd, ""self/attr/exec"", O_RDWR);
-	}
-	else {
-		labelfd = openat(procfd, ""self/attr/current"", O_RDWR);
+		ret = snprintf(path, __LSMATTRLEN, ""%d/attr/exec"", pid);
+		if (ret < 0 || ret >= __LSMATTRLEN)
+			return -1;
+		labelfd = openat(procfd, path, O_RDWR);
+	} else {
+		ret = snprintf(path, __LSMATTRLEN, ""%d/attr/current"", pid);
+		if (ret < 0 || ret >= __LSMATTRLEN)
+			return -1;
+		labelfd = openat(procfd, path, O_RDWR);
 	}
 
 	if (labelfd < 0) {
 		SYSERROR(""Unable to open LSM label"");
-		ret = -1;
-		goto out;
+		return -1;
 	}
 
+	return labelfd;
+}
+
+static int lsm_set_label_at(int lsm_labelfd, int on_exec, char *lsm_label)
+{
+	int fret = -1;
+	const char* name;
+	char *command = NULL;
+
+	name = lsm_name();
+
+	if (strcmp(name, ""nop"") == 0)
+		return 0;
+
+	if (strcmp(name, ""none"") == 0)
+		return 0;
+
+	/* We don't support on-exec with AppArmor */
+	if (strcmp(name, ""AppArmor"") == 0)
+		on_exec = 0;
+
 	if (strcmp(name, ""AppArmor"") == 0) {
 		int size;
 
 		command = malloc(strlen(lsm_label) + strlen(""changeprofile "") + 1);
 		if (!command) {
 			SYSERROR(""Failed to write apparmor profile"");
-			ret = -1;
 			goto out;
 		}
 
 		size = sprintf(command, ""changeprofile %s"", lsm_label);
 		if (size < 0) {
 			SYSERROR(""Failed to write apparmor profile"");
-			ret = -1;
 			goto out;
 		}
 
-		if (write(labelfd, command, size + 1) < 0) {
-			SYSERROR(""Unable to set LSM label"");
-			ret = -1;
+		if (write(lsm_labelfd, command, size + 1) < 0) {
+			SYSERROR(""Unable to set LSM label: %s."", command);
 			goto out;
 		}
-	}
-	else if (strcmp(name, ""SELinux"") == 0) {
-		if (write(labelfd, lsm_label, strlen(lsm_label) + 1) < 0) {
+		INFO(""Set LSM label to: %s."", command);
+	} else if (strcmp(name, ""SELinux"") == 0) {
+		if (write(lsm_labelfd, lsm_label, strlen(lsm_label) + 1) < 0) {
 			SYSERROR(""Unable to set LSM label"");
-			ret = -1;
 			goto out;
 		}
-	}
-	else {
+		INFO(""Set LSM label to: %s."", lsm_label);
+	} else {
 		ERROR(""Unable to restore label for unknown LSM: %s"", name);
-		ret = -1;
 		goto out;
 	}
+	fret = 0;
 
 out:
 	free(command);
 
-	if (labelfd != -1)
-		close(labelfd);
+	if (lsm_labelfd != -1)
+		close(lsm_labelfd);
 
-	return ret;
+	return fret;
 }
 
 static struct lxc_proc_context_info *lxc_proc_get_context_info(pid_t pid)
@@ -646,7 +670,6 @@ struct attach_clone_payload {
 	struct lxc_proc_context_info* init_ctx;
 	lxc_attach_exec_t exec_function;
 	void* exec_payload;
-	int procfd;
 };
 
 static int attach_child_main(void* data);
@@ -744,7 +767,6 @@ int lxc_attach(const char* name, const char* lxcpath, lxc_attach_exec_t exec_fun
 	char* cwd;
 	char* new_cwd;
 	int ipc_sockets[2];
-	int procfd;
 	signed long personality;
 
 	if (!options)
@@ -821,6 +843,11 @@ int lxc_attach(const char* name, const char* lxcpath, lxc_attach_exec_t exec_fun
 	 *        X  <------------------------------------  send 1
 	 *   [add to cgroup, ...]
 	 *    send 2 ------------------------------------>    X
+	 *						[set LXC_ATTACH_NO_NEW_PRIVS]
+	 *        X  <------------------------------------  send 3
+	 *   [open LSM label fd]
+	 *    send 4 ------------------------------------>    X
+	 *   						[set LSM label]
 	 *   close socket                                 close socket
 	 *                                                run program
 	 */
@@ -854,6 +881,7 @@ int lxc_attach(const char* name, const char* lxcpath, lxc_attach_exec_t exec_fun
 	}
 
 	if (pid) {
+		int procfd = -1;
 		pid_t to_cleanup_pid = pid;
 
 		/* initial thread, we close the socket that is for the
@@ -868,6 +896,15 @@ int lxc_attach(const char* name, const char* lxcpath, lxc_attach_exec_t exec_fun
 				goto cleanup_error;
 		}
 
+		/* Open /proc before setns() to the containers namespace so we
+		 * don't rely on any information from inside the container.
+		 */
+		procfd = open(""/proc"", O_DIRECTORY | O_RDONLY | O_CLOEXEC);
+		if (procfd < 0) {
+			SYSERROR(""Unable to open /proc."");
+			goto cleanup_error;
+		}
+
 		/* Let the child process know to go ahead */
 		status = 0;
 		ret = lxc_write_nointr(ipc_sockets[0], &status, sizeof(status));
@@ -911,7 +948,8 @@ int lxc_attach(const char* name, cons",1.0,3.0,1.0,tfidf
CVE-2016-8649,CVE-2016-8649/82b1f317c8fbf9b81cb68a2c9be8ff36260f8ebc,https://github.com/lxc/lxc/commit/82b1f317c8fbf9b81cb68a2c9be8ff36260f8ebc,"<s>lxc-attach in LXC before 1.0.9 and 2.x before 2.0.6 allows an attacker inside of an unprivileged container to use an inherited file descriptor, of the host's /proc, to access the rest of the host's filesystem via the openat() family of syscalls.</s>","<s>attach: simplify lsm_openat()
Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>
</s>"," diff --git a/src/lxc/attach.c b/src/lxc/attach.c
index 2f095b408..5e89e7d38 100644
--- a/src/lxc/attach.c
+++ b/src/lxc/attach.c
@@ -85,12 +85,13 @@
 
 lxc_log_define(lxc_attach, lxc);
 
+/* /proc/pid-to-str/current\0 = (5 + 21 + 7 + 1) */
+#define __LSMATTRLEN (5 + 21 + 7 + 1)
 static int lsm_openat(int procfd, pid_t pid, int on_exec)
 {
 	int ret = -1;
 	int labelfd = -1;
-	const char* name;
-#define __LSMATTRLEN /* /proc */ (5 + /* /pid-to-str */ 21 + /* /current */ 7 + /* \0 */ 1)
+	const char *name;
 	char path[__LSMATTRLEN];
 
 	name = lsm_name();
@@ -105,20 +106,16 @@ static int lsm_openat(int procfd, pid_t pid, int on_exec)
 	if (strcmp(name, ""AppArmor"") == 0)
 		on_exec = 0;
 
-	if (on_exec) {
+	if (on_exec)
 		ret = snprintf(path, __LSMATTRLEN, ""%d/attr/exec"", pid);
-		if (ret < 0 || ret >= __LSMATTRLEN)
-			return -1;
-		labelfd = openat(procfd, path, O_RDWR);
-	} else {
+	else
 		ret = snprintf(path, __LSMATTRLEN, ""%d/attr/current"", pid);
-		if (ret < 0 || ret >= __LSMATTRLEN)
-			return -1;
-		labelfd = openat(procfd, path, O_RDWR);
-	}
+	if (ret < 0 || ret >= __LSMATTRLEN)
+		return -1;
 
+	labelfd = openat(procfd, path, O_RDWR);
 	if (labelfd < 0) {
-		SYSERROR(""Unable to open LSM label"");
+		SYSERROR(""Unable to open file descriptor to set LSM label."");
 		return -1;
 	}
 
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2009-1554,CVE-2009-1554/4da83b4ad98839a0999f9c815544a39ca5565c3d,https://github.com/javaee/woodstock/commit/4da83b4ad98839a0999f9c815544a39ca5565c3d,"<s>Cross-site scripting (XSS) vulnerability in ThemeServlet.java in Sun Woodstock 4.2, as used in Sun GlassFish Enterprise Server and other products, allows remote attackers to inject arbitrary web script or HTML via a UTF-7 string in the PATH_INFO, which is displayed on the 404 error page, as demonstrated by the PATH_INFO to theme/META-INF.</s>","<s>* Re-applying changes that were intended for a woodstock 402 branch, but
  were instead applied to the 402 *tag* (which was created as a branch
  and should not have been).
svn path=/branches/Woodstock_402_Branch/; revision=1524

Former-commit-id: cd03977d6b5d6888cc2477e623002e20a1cd0cb0
</s>"," diff --git a/webui/src/runtime/com/sun/webui/theme/ThemeServlet.java b/webui/src/runtime/com/sun/webui/theme/ThemeServlet.java
index da14f90d..815d3411 100644
--- a/webui/src/runtime/com/sun/webui/theme/ThemeServlet.java
+++ b/webui/src/runtime/com/sun/webui/theme/ThemeServlet.java
@@ -21,7 +21,7 @@
util */
end
 /*
- * $Id: ThemeServlet.java,v 1.1.4.2 2009-08-19 21:37:27 kenpaulsen Exp $
+ * $Id: ThemeServlet.java,v 1.1.4.2.2.1 2009-08-19 23:17:38 kenpaulsen Exp $

 */
 
 package com.sun.webui.theme;
@@ -212,7 +212,8 @@ public class ThemeServlet extends HttpServlet {
 	    // Get InputStream

	    inStream = this.getClass().getResourceAsStream(resourceName);
 	    if (inStream == null) {
-		response.sendError(404, request.getRequestURI());
+		//Send 404 (without the original URI for XSS security reasons)
+		response.sendError(HttpServletResponse.SC_NOT_FOUND);
(		return;
Theme	context),
 }
		Images.D inStream = new BufferedInputStream(inStream, 4096);
Utilities.getIcon(ThemeUtilities.getTheme(context), ThemeImages.DOT);
         icon.setParent(component); 
         icon.setWidth(1);
         icon.setHeight(1);
         icon.setBorder(0);
+        icon.setToolTip(anchorName + "" skip link"");
 
 	buffer.setLength(0);
 	buffer.append(anchorName).append(""_icon""); //NOI18N
",0.0,,0.0,lime
CVE-2009-1554,CVE-2009-1554/eb06af2360fceb976f87efdd12c9fcdfa77edf88,https://github.com/javaee/woodstock/commit/eb06af2360fceb976f87efdd12c9fcdfa77edf88,"<s>Cross-site scripting (XSS) vulnerability in ThemeServlet.java in Sun Woodstock 4.2, as used in Sun GlassFish Enterprise Server and other products, allows remote attackers to inject arbitrary web script or HTML via a UTF-7 string in the PATH_INFO, which is displayed on the 404 error page, as demonstrated by the PATH_INFO to theme/META-INF.</s>","<s>Issue number:  6845407
Security fix
svn path=/branches/woodstock_402/; revision=1520

Former-commit-id: f056c50ae5da5d695d9f8e31a40d114c872fe99d
</s>"," diff --git a/webui/src/runtime/com/sun/webui/theme/ThemeServlet.java b/webui/src/runtime/com/sun/webui/theme/ThemeServlet.java
index 5f675d7b..68752752 100644
--- a/webui/src/runtime/com/sun/webui/theme/ThemeServlet.java
+++ b/webui/src/runtime/com/sun/webui/theme/ThemeServlet.java
@@ -21,7 +21,7 @@
  */
 
 /*
- * $Id: ThemeServlet.java,v 1.1 2007-02-16 01:53:45 bob_yennaco Exp $
+ * $Id: ThemeServlet.java,v 1.1.4.1 2009-08-19 07:01:59 kalpanakm Exp $
  */
 
 package com.sun.webui.theme;
@@ -212,7 +212,8 @@ public class ThemeServlet extends HttpServlet {
 	    // Get InputStream
 	    inStream = this.getClass().getResourceAsStream(resourceName);
 	    if (inStream == null) {
-		response.sendError(404, request.getRequestURI());
+		//Send 404 (without the original URI for XSS security reasons)
+		response.sendError(HttpServletResponse.SC_NOT_FOUND);
 		return;
 	    }
 	    inStream = new BufferedInputStream(inStream, 4096);
",1.0,1.0,1.0,lime
,,,,,,,,,
CVE-2021-3311,CVE-2021-3311/642f597489e6f644d4bd9a0c267e864cabead024,https://github.com/octobercms/library/commit/642f597489e6f644d4bd9a0c267e864cabead024,"<s>An issue was discovered in October through build 471. It reactivates an old session ID (which had been invalid after a logout) once a new login occurs. NOTE: this violates the intended Auth/Manager.php authentication behavior but, admittedly, is only relevant if an old session ID is known to an attacker.</s>","<s>Invalidate the session ID to prevent reuse
1. Good logs in
2. Bad captures Good's session cookie
3. Good logs out
4. Session cookie no longer works
5. Good logs in a second time
6. ORIGINAL session cookie works (Bad is also signed in)
</s>"," diff --git a/src/Auth/Manager.php b/src/Auth/Manager.php
index 1bb65baf..a8dc26a2 100644
--- a/src/Auth/Manager.php
+++ b/src/Auth/Manager.php
@@ -686,7 +686,7 @@ class Manager implements \Illuminate\Contracts\Auth\StatefulGuard
 
         $this->user = null;
 
-        Session::flush();
+        Session::invalidate();
         Cookie::queue(Cookie::forget($this->sessionKey));
     }
 
",1.0,3.0,1.0,lime
CVE-2021-3311,CVE-2021-3311/1fa47b3ab683f1e7a4e9ec3a1d0b484dbe66bde0,https://github.com/octobercms/library/commit/1fa47b3ab683f1e7a4e9ec3a1d0b484dbe66bde0,"<s>An issue was discovered in October through build 471. It reactivates an old session ID (which had been invalid after a logout) once a new login occurs. NOTE: this violates the intended Auth/Manager.php authentication behavior but, admittedly, is only relevant if an old session ID is known to an attacker.</s>","<s>Multiple fixes related to PR #543 (#550)
* return a collection, not an object
* use fully qualified key names to avoid conflicts
* add pivot data test; add timestamps
* override sync() method in order to flush query cache
</s>"," diff --git a/src/Database/Relations/BelongsToMany.php b/src/Database/Relations/BelongsToMany.php
index 373f3fcf..29863be9 100644
--- a/src/Database/Relations/BelongsToMany.php
+++ b/src/Database/Relations/BelongsToMany.php
@@ -88,6 +88,18 @@ class BelongsToMany extends BelongsToManyBase
         return $model;
     }
 
+    /**
+     * Override sync() method of BelongToMany relation in order to flush the query cache.
+     * @param array $ids
+     * @param bool $detaching
+     * @return array
+     */
+    public function sync($ids, $detaching = true)
+    {
+        parent::sync($ids, $detaching);
+        $this->flushDuplicateCache();
+    }
+
     /**
      * Create a new instance of this related model with deferred binding support.
      */
@@ -160,7 +172,7 @@ class BelongsToMany extends BelongsToManyBase
     {
         $attachedIdList = $this->parseIds($ids);
         if (empty($attachedIdList)) {
-            $attachedIdList = $this->allRelatedIds();
+            $attachedIdList = $this->allRelatedIds()->all();
         }
 
         /**
",0.0,,0.0,lime
,,,,,,,,,
CVE-2022-23634,CVE-2022-23634/2c7bfd5fa0526dfbe594013bcad765bfd5edd0b1,https://github.com/puma/puma/commit/2c7bfd5fa0526dfbe594013bcad765bfd5edd0b1,"<s>Puma is a Ruby/Rack web server built for parallelism. Prior to `puma` version `5.6.2`, `puma` may not always call `close` on the response body. Rails, prior to version `7.0.2.2`, depended on the response body being closed in order for its `CurrentAttributes` implementation to work correctly. The combination of these two behaviors (Puma not closing the body + Rails' Executor implementation) causes information leakage. This problem is fixed in Puma versions 5.6.2 and 4.3.11. This problem is fixed in Rails versions 7.02.2, 6.1.4.6, 6.0.4.6, and 5.2.6.2. Upgrading to a patched Rails _or_ Puma version fixes the vulnerability.</s>","<s>Drop defunct ""SemVer compliance"" badge (#2814)
Seems like the feature is no longer there. The link 404s. Dependabot is now a feature of GitHub and not its own organisation.
[ci skip]
</s>"," diff --git a/README.md b/README.md
index aaa571a3..b163426f 100644
--- a/README.md
+++ b/README.md
@@ -7,7 +7,6 @@
 [![Actions MRI](https://github.com/puma/puma/workflows/MRI/badge.svg?branch=master)](https://github.com/puma/puma/actions?query=workflow%3AMRI)
 [![Actions non MRI](https://github.com/puma/puma/workflows/non_MRI/badge.svg?branch=master)](https://github.com/puma/puma/actions?query=workflow%3Anon_MRI)
 [![Code Climate](https://codeclimate.com/github/puma/puma.svg)](https://codeclimate.com/github/puma/puma)
-[![SemVer](https://api.dependabot.com/badges/compatibility_score?dependency-name=puma&package-manager=bundler&version-scheme=semver)](https://dependabot.com/compatibility-score.html?dependency-name=puma&package-manager=bundler&version-scheme=semver)
 [![StackOverflow](https://img.shields.io/badge/stackoverflow-Puma-blue.svg)]( https://stackoverflow.com/questions/tagged/puma )
 
 Puma is a **simple, fast, multi-threaded, and highly parallel HTTP 1.1 server for Ruby/Rack applications**.
",0.0,,0.0,tfidf
CVE-2022-23634,CVE-2022-23634/b70f451fe8abc0cff192c065d549778452e155bb,https://github.com/puma/puma/commit/b70f451fe8abc0cff192c065d549778452e155bb,"<s>Puma is a Ruby/Rack web server built for parallelism. Prior to `puma` version `5.6.2`, `puma` may not always call `close` on the response body. Rails, prior to version `7.0.2.2`, depended on the response body being closed in order for its `CurrentAttributes` implementation to work correctly. The combination of these two behaviors (Puma not closing the body + Rails' Executor implementation) causes information leakage. This problem is fixed in Puma versions 5.6.2 and 4.3.11. This problem is fixed in Rails versions 7.02.2, 6.1.4.6, 6.0.4.6, and 5.2.6.2. Upgrading to a patched Rails _or_ Puma version fixes the vulnerability.</s>","<s>Ensure `close` is called on the response body no matter what
Another fallout from https://github.com/puma/puma/pull/2809 is that
in some cases the `res_body.close` wasn't called because some previous code
raised.
For Rails apps it means CurrentAttributes and a few other important
states aren't reset properly.
This is being improved on the Rails side too, but I believe it would
be good to harden this on the puma side as well.
</s>"," diff --git a/lib/puma/request.rb b/lib/puma/request.rb
index 10508c8d..691ada42 100644
--- a/lib/puma/request.rb
+++ b/lib/puma/request.rb
@@ -171,11 +171,16 @@ module Puma
         end
 
       ensure
-        uncork_socket io
-
-        body.close
-        client.tempfile.unlink if client.tempfile
-        res_body.close if res_body.respond_to? :close
+        begin
+          uncork_socket io
+
+          body.close
+          client.tempfile.unlink if client.tempfile
+        ensure
+          # Whatever happens, we MUST call `close` on the response body.
+          # Otherwise Rack::BodyProxy callbacks may not fire and lead to various state leaks
+          res_body.close if res_body.respond_to? :close
+        end
 
         after_reply.each { |o| o.call }
       end
",1.0,3.0,1.0,tfidf
,,,,,,,,,
CVE-2014-3544,CVE-2014-3544/0207466e778baebff21c7b72bc688761f9c5b0d9,https://github.com/moodle/moodle/commit/0207466e778baebff21c7b72bc688761f9c5b0d9,"<s>Cross-site scripting (XSS) vulnerability in user/profile.php in Moodle through 2.3.11, 2.4.x before 2.4.11, 2.5.x before 2.5.7, 2.6.x before 2.6.4, and 2.7.x before 2.7.1 allows remote authenticated users to inject arbitrary web script or HTML via the Skype ID profile field.</s>","<s>MDL-45683 user: Escaping Skype ID used in profile
</s>"," diff --git a/user/profile.php b/user/profile.php
index 3ac9b7a2431..291fc131f6f 100644
--- a/user/profile.php
+++ b/user/profile.php
@@ -334,7 +334,7 @@ if ($user->icq && !isset($hiddenfields['icqnumber'])) {
 
 if ($user->skype && !isset($hiddenfields['skypeid'])) {
     $imurl = 'skype:'.urlencode($user->skype).'?call';
-    $iconurl = new moodle_url('http://mystatus.skype.com/smallicon/'.$user->skype);
+    $iconurl = new moodle_url('http://mystatus.skype.com/smallicon/'.urlencode($user->skype));
     if (strpos($CFG->httpswwwroot, 'https:') === 0) {
         // Bad luck, skype devs are lazy to set up SSL on their servers - see MDL-37233.
         $statusicon = '';
",1.0,1.0,1.0,lime
CVE-2014-3544,CVE-2014-3544/2ca9e09dab3ff374e1026780b23c63751f4ee312,https://github.com/moodle/moodle/commit/2ca9e09dab3ff374e1026780b23c63751f4ee312,"<s>Cross-site scripting (XSS) vulnerability in user/profile.php in Moodle through 2.3.11, 2.4.x before 2.4.11, 2.5.x before 2.5.7, 2.6.x before 2.6.4, and 2.7.x before 2.7.1 allows remote authenticated users to inject arbitrary web script or HTML via the Skype ID profile field.</s>","<s>MDL-45760 make sure to check permission before setting header
</s>"," diff --git a/user/edit.php b/user/edit.php
index e6282c76d5e..c7f182bbf45 100644
--- a/user/edit.php
+++ b/user/edit.php
@@ -103,16 +103,6 @@ if ($course->id == SITEID) {
 $systemcontext   = context_system::instance();
 $personalcontext = context_user::instance($user->id);
 
-$PAGE->set_pagelayout('admin');
-$PAGE->set_context($personalcontext);
-if ($USER->id != $user->id) {
-    $PAGE->navigation->extend_for_user($user);
-} else {
-    if ($node = $PAGE->navigation->find('myprofile', navigation_node::TYPE_ROOTNODE)) {
-        $node->force_open();
-    }
-}
-
 // Check access control.
 if ($user->id == $USER->id) {
     // Editing own profile - require_login() MUST NOT be used here, it would result in infinite loop!
@@ -140,6 +130,16 @@ if ($user->deleted) {
     die;
 }
 
+$PAGE->set_pagelayout('admin');
+$PAGE->set_context($personalcontext);
+if ($USER->id != $user->id) {
+    $PAGE->navigation->extend_for_user($user);
+} else {
+    if ($node = $PAGE->navigation->find('myprofile', navigation_node::TYPE_ROOTNODE)) {
+        $node->force_open();
+    }
+}
+
 // Process email change cancellation.
 if ($cancelemailchange) {
     cancel_email_update($user->id);
",0.0,,0.0,lime
,,,,,,,,,
CVE-2018-1000864,CVE-2018-1000864/73afa0ca786a87f05b5433e2e38f863826fcad17,https://github.com/jenkinsci/jenkins/commit/73afa0ca786a87f05b5433e2e38f863826fcad17,"<s>A denial of service vulnerability exists in Jenkins 2.153 and earlier, LTS 2.138.3 and earlier in CronTab.java that allows attackers with Overall/Read permission to have a request handling thread enter an infinite loop.</s>","<s>[SECURITY-1193]
</s>"," diff --git a/core/src/main/java/hudson/scheduler/CronTab.java b/core/src/main/java/hudson/scheduler/CronTab.java
index 120b8bc2a1..77118499ad 100644
--- a/core/src/main/java/hudson/scheduler/CronTab.java
+++ b/core/src/main/java/hudson/scheduler/CronTab.java
@@ -356,6 +356,14 @@ public final class CronTab {
                     continue OUTER;
                 } else {
                     f.setTo(cal,next);
+                    //check if value was actually set
+                    if (f.valueOf(cal) != next) {
+                        // we need to roll over to the next field.
+                        f.rollUp(cal, 1);
+                        f.setTo(cal,f.first(this));
+                        // since higher order field is affected by this, we need to restart from all over
+                        continue OUTER;
+                    }
                     if (f.redoAdjustmentIfModified)
                         continue OUTER; // when we modify DAY_OF_MONTH and DAY_OF_WEEK, do it all over from the top
                 }
",1.0,2.0,1.0,lime
CVE-2018-1000864,CVE-2018-1000864/c19cc705688cfffa4fe735e0edbe84862b6c135f,https://github.com/jenkinsci/jenkins/commit/c19cc705688cfffa4fe735e0edbe84862b6c135f,"<s>A denial of service vulnerability exists in Jenkins 2.153 and earlier, LTS 2.138.3 and earlier in CronTab.java that allows attackers with Overall/Read permission to have a request handling thread enter an infinite loop.</s>","<s>[SECURITY-904]
</s>"," diff --git a/core/src/test/java/jenkins/util/VirtualFileSEC904Test.java b/core/src/test/java/jenkins/util/VirtualFileSEC904Test.java
new file mode 100644
index 0000000000..8b25c1c040
--- /dev/null
+++ b/core/src/test/java/jenkins/util/VirtualFileSEC904Test.java
@@ -0,0 +1,180 @@
+/*
+ * The MIT License
+ *
+ * Copyright 2015 Jesse Glick.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the ""Software""), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+
+package jenkins.util;
+
+import hudson.FilePath;
+import hudson.model.TaskListener;
+import org.apache.commons.io.FileUtils;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.ExpectedException;
+import org.junit.rules.TemporaryFolder;
+import org.jvnet.hudson.test.Issue;
+
+import java.io.File;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
+
+//TODO merge into VirtualFileTest after the security release
+public class VirtualFileSEC904Test {
+    
+    @Rule
+    public TemporaryFolder tmp = new TemporaryFolder();
+    
+    //  root
+    //      /a
+    //          /aa
+    //              /aaa
+    //                  /_b2 => symlink to /root/b
+    //              aa.txt
+    //          /ab
+    //              ab.txt
+    //          /_b => symlink to /root/b
+    //      /b
+    //          /_a => symlink to /root/a
+    //          /ba
+    //              ba.txt
+    private void prepareFileStructureForIsDescendant() throws Exception {
+        File root = tmp.getRoot();
+        File a = new File(root, ""a"");
+        File aa = new File(a, ""aa"");
+        File aaa = new File(aa, ""aaa"");
+        aaa.mkdirs();
+        File aaTxt = new File(aa, ""aa.txt"");
+        FileUtils.write(aaTxt, ""aa"");
+        
+        File ab = new File(a, ""ab"");
+        ab.mkdirs();
+        File abTxt = new File(ab, ""ab.txt"");
+        FileUtils.write(abTxt, ""ab"");
+        
+        File b = new File(root, ""b"");
+        
+        File ba = new File(b, ""ba"");
+        ba.mkdirs();
+        File baTxt = new File(ba, ""ba.txt"");
+        FileUtils.write(baTxt, ""ba"");
+        
+        File _a = new File(b, ""_a"");
+        new FilePath(_a).symlinkTo(a.getAbsolutePath(), TaskListener.NULL);
+        
+        File _b = new File(a, ""_b"");
+        new FilePath(_b).symlinkTo(b.getAbsolutePath(), TaskListener.NULL);
+        File _b2 = new File(aaa, ""_b2"");
+        new FilePath(_b2).symlinkTo(b.getAbsolutePath(), TaskListener.NULL);
+    }
+    
+    @Issue(""SECURITY-904"")
+    @Test public void forFile_isDescendant() throws Exception {
+        this.prepareFileStructureForIsDescendant();
+        
+        File root = tmp.getRoot();
+        File a = new File(root, ""a"");
+        File aa = new File(a, ""aa"");
+        VirtualFile virtualRoot = VirtualFile.forFile(root);
+        // keep the root information for isDescendant
+        VirtualFile virtualRootChildA = virtualRoot.child(""a"");
+        VirtualFile virtualFromA = VirtualFile.forFile(a);
+        
+        checkCommonAssertionForIsDescendant(virtualRoot, virtualRootChildA, virtualFromA, aa.getAbsolutePath());
+    }
+    
+    @Test
+    @Issue(""SECURITY-904"")
+    public void forFilePath_isDescendant() throws Exception {
+        this.prepareFileStructureForIsDescendant();
+        
+        File root = tmp.getRoot();
+        File a = new File(root, ""a"");
+        File aa = new File(a, ""aa"");
+        VirtualFile virtualRoot = VirtualFile.forFilePath(new FilePath(root));
+        // keep the root information for isDescendant
+        VirtualFile virtualRootChildA = virtualRoot.child(""a"");
+        VirtualFile virtualFromA = VirtualFile.forFilePath(new FilePath(a));
+        
+        checkCommonAssertionForIsDescendant(virtualRoot, virtualRootChildA, virtualFromA, aa.getAbsolutePath());
+    }
+    
+    private void checkCommonAssertionForIsDescendant(VirtualFile virtualRoot, VirtualFile virtualRootChildA, VirtualFile virtualFromA, String absolutePath) throws Exception {
+        try {
+            virtualRootChildA.isDescendant(absolutePath);
+            fail(""isDe",0.0,,0.0,lime
,,,,,,,,,
CVE-2019-1010296,CVE-2019-1010296/0b107f4c8908cd04318ed4bccac0b3ecbeae587e,https://github.com/OP-TEE/optee_os/commit/0b107f4c8908cd04318ed4bccac0b3ecbeae587e,<s>Linaro/OP-TEE OP-TEE 3.3.0 and earlier is affected by: Buffer Overflow. The impact is: Code execution in context of TEE core (kernel). The component is: optee_os. The fixed version is: 3.4.0 and later.</s>,"<s>core: arm64: pager: make sure __thread_enter_user_mode is unpaged
__thread_enter_user_mode() cannot be paged out, because the pager cannot
be invoked to restore any faulting code page after SP has been switched to
use SP_EL1. At this point, a synchronous exception would take the CPU to
the 0x200 offset in the exception vector, which corresponds to
[workaround_]el1_sync_sp1 and is an error-catching infinite loop. This
explains the behavior described in [1].
Add the requisite KEEP_PAGER so that the function is kept in the unpaged
area.
Fixes: [1] https://github.com/OP-TEE/optee_os/issues/2684
Signed-off-by: Jerome Forissier <jerome.forissier@linaro.org>
Reviewed-by: Joakim Bech <joakim.bech@linaro.org>
Reviewed-by: Jens Wiklander <jens.wiklander@linaro.org>
</s>"," diff --git a/core/arch/arm/kernel/thread_a64.S b/core/arch/arm/kernel/thread_a64.S
index c9e284f72..c38f280d6 100644
--- a/core/arch/arm/kernel/thread_a64.S
+++ b/core/arch/arm/kernel/thread_a64.S
@@ -317,6 +317,7 @@ FUNC __thread_enter_user_mode , :
 	store_xregs sp, THREAD_CORE_LOCAL_X0, 0, 1
 	b eret_to_el0
 END_FUNC __thread_enter_user_mode
+KEEP_PAGER __thread_enter_user_mode
 
 /*
  * void thread_unwind_user_mode(uint32_t ret, uint32_t exit_status0,
",0.0,,0.0,lime
CVE-2019-1010296,CVE-2019-1010296/b60e1cee406a1ff521145ab9534370dfb85dd592,https://github.com/OP-TEE/optee_os/commit/b60e1cee406a1ff521145ab9534370dfb85dd592,<s>Linaro/OP-TEE OP-TEE 3.3.0 and earlier is affected by: Buffer Overflow. The impact is: Code execution in context of TEE core (kernel). The component is: optee_os. The fixed version is: 3.4.0 and later.</s>,"<s>svc: check for allocation overflow in syscall_cryp_obj_populate
Without checking for overflow there is a risk of allocating a buffer
with size smaller than anticipated and as a consequence of that it might
lead to a heap based overflow with attacker controlled data written
outside the boundaries of the buffer.
Fixes: OP-TEE-2018-0009: ""Integer overflow in crypto system calls""
Signed-off-by: Joakim Bech <joakim.bech@linaro.org>
Tested-by: Joakim Bech <joakim.bech@linaro.org> (QEMU v7, v8)
Reviewed-by: Jens Wiklander <jens.wiklander@linaro.org>
Reported-by: Riscure <inforequest@riscure.com>
Reported-by: Alyssa Milburn <a.a.milburn@vu.nl>
Acked-by: Etienne Carriere <etienne.carriere@linaro.org>
</s>"," diff --git a/core/tee/tee_svc_cryp.c b/core/tee/tee_svc_cryp.c
index b47a45dda..6fac66610 100644
--- a/core/tee/tee_svc_cryp.c
+++ b/core/tee/tee_svc_cryp.c
@@ -4,6 +4,7 @@
  */
 
 #include <assert.h>
+#include <compiler.h>
 #include <crypto/crypto.h>
 #include <kernel/tee_ta_manager.h>
 #include <mm/tee_mmu.h>
@@ -1547,9 +1548,15 @@ TEE_Result syscall_cryp_obj_populate(unsigned long obj,
 	if (!type_props)
 		return TEE_ERROR_NOT_IMPLEMENTED;
 
-	attrs = malloc(sizeof(TEE_Attribute) * attr_count);
+	size_t alloc_size = 0;
+
+	if (MUL_OVERFLOW(sizeof(TEE_Attribute), attr_count, &alloc_size))
+		return TEE_ERROR_OVERFLOW;
+
+	attrs = malloc(alloc_size);
 	if (!attrs)
 		return TEE_ERROR_OUT_OF_MEMORY;
+
 	res = copy_in_attrs(to_user_ta_ctx(sess->ctx), usr_attrs, attr_count,
 			    attrs);
 	if (res != TEE_SUCCESS)
",1.0,1.0,1.0,lime
,,,,,,,,,
CVE-2016-4302,CVE-2016-4302/603454ec03040c29bd051fcc749e3c1433c11a8e,https://github.com/libarchive/libarchive/commit/603454ec03040c29bd051fcc749e3c1433c11a8e,<s>Heap-based buffer overflow in the parse_codes function in archive_read_support_format_rar.c in libarchive before 3.2.1 allows remote attackers to execute arbitrary code via a RAR file with a zero-sized dictionary.</s>,"<s>Issue 521:  Properly check reading from lzss decompression buffer
Prior code could be tricked into trying to copy data
from beyond the end of the internal decompression buffer.
Thanks to Hanno Böck for his ongoing fuzz-testing work with libarchive.
</s>"," diff --git a/libarchive/archive_read_support_format_rar.c b/libarchive/archive_read_support_format_rar.c
index 6c49f1a1..f729f173 100644
--- a/libarchive/archive_read_support_format_rar.c
+++ b/libarchive/archive_read_support_format_rar.c
@@ -2890,11 +2890,10 @@ copy_from_lzss_window(struct archive_read *a, const void **buffer,
   }
 
   windowoffs = lzss_offset_for_position(&rar->lzss, startpos);
-  if(windowoffs + length <= lzss_size(&rar->lzss))
+  if(windowoffs + length <= lzss_size(&rar->lzss)) {
     memcpy(&rar->unp_buffer[rar->unp_offset], &rar->lzss.window[windowoffs],
            length);
-  else
-  {
+  } else if (length <= lzss_size(&rar->lzss)) {
     firstpart = lzss_size(&rar->lzss) - windowoffs;
     if (firstpart < 0) {
       archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
@@ -2906,9 +2905,14 @@ copy_from_lzss_window(struct archive_read *a, const void **buffer,
              &rar->lzss.window[windowoffs], firstpart);
       memcpy(&rar->unp_buffer[rar->unp_offset + firstpart],
              &rar->lzss.window[0], length - firstpart);
-    } else
+    } else {
       memcpy(&rar->unp_buffer[rar->unp_offset],
              &rar->lzss.window[windowoffs], length);
+    }
+  } else {
+      archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
+                        ""Bad RAR file data"");
+      return (ARCHIVE_FATAL);
   }
   rar->unp_offset += length;
   if (rar->unp_offset >= rar->unp_buffer_size)
",0.0,,0.0,lime
CVE-2016-4302,CVE-2016-4302/05caadc7eedbef471ac9610809ba683f0c698700,https://github.com/libarchive/libarchive/commit/05caadc7eedbef471ac9610809ba683f0c698700,<s>Heap-based buffer overflow in the parse_codes function in archive_read_support_format_rar.c in libarchive before 3.2.1 allows remote attackers to execute arbitrary code via a RAR file with a zero-sized dictionary.</s>,"<s>Issue 719:  Fix for TALOS-CAN-154
A RAR file with an invalid zero dictionary size was not being
rejected, leading to a zero-sized allocation for the dictionary
storage which was then overwritten during the dictionary initialization.
Thanks to the Open Source and Threat Intelligence project at Cisco for
reporting this.
</s>"," diff --git a/libarchive/archive_read_support_format_rar.c b/libarchive/archive_read_support_format_rar.c
index 6450aac8..6c49f1a1 100644
--- a/libarchive/archive_read_support_format_rar.c
+++ b/libarchive/archive_read_support_format_rar.c
@@ -2127,6 +2127,12 @@ parse_codes(struct archive_read *a)
       rar->range_dec.Stream = &rar->bytein;
       __archive_ppmd7_functions.Ppmd7_Construct(&rar->ppmd7_context);
 
+      if (rar->dictionary_size == 0) {
+	      archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
+                          ""Invalid zero dictionary size"");
+	      return (ARCHIVE_FATAL);
+      }
+
       if (!__archive_ppmd7_functions.Ppmd7_Alloc(&rar->ppmd7_context,
         rar->dictionary_size, &g_szalloc))
       {
",1.0,2.0,1.0,lime
,,,,,,,,,
CVE-2021-23437,CVE-2021-23437/8450366be331762ae327036e3c6658c517b05638,https://github.com/python-pillow/Pillow/commit/8450366be331762ae327036e3c6658c517b05638,<s>The package pillow 5.2.0 and before 8.3.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the getrgb function.</s>,"<s>Update release notes
</s>"," diff --git a/docs/releasenotes/8.3.2.rst b/docs/releasenotes/8.3.2.rst
index 0a795957e..6b5c759fc 100644
--- a/docs/releasenotes/8.3.2.rst
+++ b/docs/releasenotes/8.3.2.rst
@@ -1,6 +1,18 @@
 8.3.2
 -----
 
+Security
+========
+
+* :cve:`CVE-2021-23437`: Avoid a potential ReDoS (regular expression denial of service)
+  in :py:class:`~PIL.ImageColor`'s :py:meth:`~PIL.ImageColor.getrgb` by raising
+  :py:exc:`ValueError` if the color specifier is too long. Present since Pillow 5.2.0.
+
+* Fix 6-byte out-of-bounds (OOB) read. The previous bounds check in ``FliDecode.c``
+  incorrectly calculated the required read buffer size when copying a chunk, potentially
+  reading six extra bytes off the end of the allocated buffer from the heap. Present
+  since Pillow 7.1.0. This bug was found by Google's `OSS-Fuzz`_ `CIFuzz`_ runs.
+
 Other Changes
 =============
 
@@ -24,4 +36,6 @@ Fixed regressions
 
 * Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library (:pr:`5651`).
 
+.. _OSS-Fuzz: https://github.com/google/oss-fuzz
+.. _CIFuzz: https://google.github.io/oss-fuzz/getting-started/continuous-integration/
 .. _no ABI changes: https://www.python.org/downloads/release/python-3100rc1/
",0.0,,0.0,lime
CVE-2021-23437,CVE-2021-23437/9e08eb8f78fdfd2f476e1b20b7cf38683754866b,https://github.com/python-pillow/Pillow/commit/9e08eb8f78fdfd2f476e1b20b7cf38683754866b,<s>The package pillow 5.2.0 and before 8.3.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the getrgb function.</s>,"<s>Raise ValueError if color specifier is too long
</s>"," diff --git a/src/PIL/ImageColor.py b/src/PIL/ImageColor.py
index 51df44040..25f92f2c7 100644
--- a/src/PIL/ImageColor.py
+++ b/src/PIL/ImageColor.py
@@ -32,6 +32,8 @@ def getrgb(color):
     :param color: A color string
     :return: ``(red, green, blue[, alpha])``
     """"""
+    if len(color) > 100:
+        raise ValueError(""color specifier is too long"")
     color = color.lower()
 
     rgb = colormap.get(color, None)
",1.0,1.0,1.0,lime
,,,,,,,,,
CVE-2021-45937,CVE-2021-45937/de15f15b94f08c9c632574fb7b82bad4a839f22a,https://github.com/wolfSSL/wolfMQTT/commit/de15f15b94f08c9c632574fb7b82bad4a839f22a,<s>wolfSSL wolfMQTT 1.9 has a heap-based buffer overflow in MqttClient_DecodePacket (called from MqttClient_WaitType and MqttClient_Connect).</s>,"<s>Fix clear union in MqttClient_WaitType
</s>"," diff --git a/src/mqtt_client.c b/src/mqtt_client.c
index 8667911..f16f5c6 100644
--- a/src/mqtt_client.c
+++ b/src/mqtt_client.c
@@ -278,7 +278,7 @@ static int MqttClient_RespList_Find(MqttClient *client,
 #endif /* WOLFMQTT_MULTITHREAD */
 
 #ifdef WOLFMQTT_V5
-static int Handle_Props(MqttProp* props)
+static int Handle_Props(MqttClient* client, MqttProp* props)
 {
     int rc = MQTT_CODE_SUCCESS;
 
@@ -286,7 +286,7 @@ static int Handle_Props(MqttProp* props)
     if (props != NULL) {
     #ifdef WOLFMQTT_PROPERTY_CB
         /* Check for properties set by the server */
-        if (packet_obj && client->property_cb) {
+        if (client->property_cb != NULL) {
             /* capture error if returned */
             int rc_err = client->property_cb(client, props,
                     client->property_ctx);
@@ -360,7 +360,7 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
             rc = MqttDecode_ConnectAck(rx_buf, rx_len, p_connect_ack);
         #ifdef WOLFMQTT_V5
             if (rc >= 0) {
-                rc = Handle_Props(p_connect_ack->props);
+                rc = Handle_Props(client, p_connect_ack->props);
             }
         #endif
             break;
@@ -381,7 +381,7 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
             if (rc >= 0) {
                 packet_id = p_publish->packet_id;
             #ifdef WOLFMQTT_V5
-                rc = Handle_Props(p_publish->props);
+                rc = Handle_Props(client, p_publish->props);
             #endif
             }
             break;
@@ -406,7 +406,7 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
             if (rc >= 0) {
                 packet_id = p_publish_resp->packet_id;
             #ifdef WOLFMQTT_V5
-                rc = Handle_Props(p_publish_resp->props);
+                rc = Handle_Props(client, p_publish_resp->props);
             #endif
             }
             break;
@@ -427,7 +427,7 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
             if (rc >= 0) {
                 packet_id = p_subscribe_ack->packet_id;
             #ifdef WOLFMQTT_V5
-                rc = Handle_Props(p_subscribe_ack->props);
+                rc = Handle_Props(client, p_subscribe_ack->props);
             #endif
             }
             break;
@@ -449,7 +449,7 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
             if (rc >= 0) {
                 packet_id = p_unsubscribe_ack->packet_id;
             #ifdef WOLFMQTT_V5
-                rc = Handle_Props(p_unsubscribe_ack->props);
+                rc = Handle_Props(client, p_unsubscribe_ack->props);
             #endif
             }
             break;
@@ -478,7 +478,7 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
             }
             rc = MqttDecode_Auth(rx_buf, rx_len, p_auth);
             if (rc >= 0) {
-                rc = Handle_Props(p_auth->props);
+                rc = Handle_Props(client, p_auth->props);
             }
         #else
             rc = MQTT_CODE_ERROR_PACKET_TYPE;
@@ -497,7 +497,7 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
             }
             rc = MqttDecode_Disconnect(rx_buf, rx_len, p_disc);
             if (rc >= 0) {
-                rc = Handle_Props(p_disc->props);
+                rc = Handle_Props(client, p_disc->props);
             }
         #else
             rc = MQTT_CODE_ERROR_PACKET_TYPE;
@@ -957,6 +957,11 @@ wait_again:
             }
         #endif
 
+            /* Clear shared union for next call */
+            if ((MqttObject*)use_packet_obj == &client->msg) {
+                XMEMSET(&client->msg, 0, sizeof(client->msg));
+            }
+
             /* handle success case */
             if (rc >= 0) {
                 rc = MQTT_CODE_SUCCESS;
@@ -2141,19 +2146,11 @@ int MqttClient_WaitMessage_ex(MqttClient *client, MqttObject* msg,
     return MqttClient_WaitType(client, msg, MQTT_PACKET_TYPE_ANY, 0,
         timeout_ms);
 }
-
 int MqttClient_WaitMessage(MqttClient *client, int timeout_ms)
 {
-    int rc = MQTT_CODE_ERROR_BAD_ARG;
-    if (client != NULL) {
-        rc = MqttClient_WaitMessage_ex(client, &client->msg, timeout_ms);
-        if (rc != MQTT_CODE_CONTINUE) {
-            /* Clear the union for the next call to MqttClient_WaitMessage */
-            XMEMSET(&client->msg, 0, sizeof(MqttObject));
-        }
-    }
-
-    return rc;
+    if (client == NULL)
+        return MQTT_CODE_ERROR_BAD_ARG;
+    return MqttClient_WaitMessage_ex(client, &client->msg, timeout_ms);
 }
 
 int MqttClient_NetConnect(MqttClient *client, const char* host,
",0.0,,0.0,lime
CVE-2021-45937,CVE-2021-45937/84d4b53122e0fa0280c7872350b89d5777dabbb2,https://github.com/wolfSSL/wolfMQTT/commit/84d4b53122e0fa0280c7872350b89d5777dabbb2,<s>wolfSSL wolfMQTT 1.9 has a heap-based buffer overflow in MqttClient_DecodePacket (called from MqttClient_WaitType and MqttClient_Connect).</s>,"<s>Fix wolfmqtt-fuzzer: Null-dereference WRITE in MqttProps_Free
</s>"," diff --git a/src/mqtt_client.c b/src/mqtt_client.c
index d06fac6..d392cc5 100644
--- a/src/mqtt_client.c
+++ b/src/mqtt_client.c
@@ -906,8 +906,9 @@ wait_again:
             /* Determine if we received data for this request */
             if ((wait_type == MQTT_PACKET_TYPE_ANY ||
                  wait_type == packet_type ||
-                 MqttIsPubRespPacket(packet_type) == MqttIsPubRespPacket(wait_type)) &&
-               (wait_packet_id == 0 || wait_packet_id == packet_id))
+                 (MqttIsPubRespPacket(packet_type) &&
+                  MqttIsPubRespPacket(wait_type))) &&
+                (wait_packet_id == 0 || wait_packet_id == packet_id))
             {
                 use_packet_obj = packet_obj;
                 waitMatchFound = 1;
",1.0,1.0,1.0,lime
,,,,,,,,,
CVE-2020-13765,CVE-2020-13765/4f1c6cb2f9afafda05eab150fd2bd284edce6676,https://github.com/qemu/qemu/commit/4f1c6cb2f9afafda05eab150fd2bd284edce6676,"<s>rom_copy() in hw/core/loader.c in QEMU 4.0 and 4.1.0 does not validate the relationship between two addresses, which allows attackers to trigger an invalid memory copy operation.</s>","<s>hw/core/loader: Fix possible crash in rom_copy()
Both, ""rom->addr"" and ""addr"" are derived from the binary image
that can be loaded with the ""-kernel"" paramer. The code in
rom_copy() then calculates:
    d = dest + (rom->addr - addr);
and uses ""d"" as destination in a memcpy() some lines later. Now with
bad kernel images, it is possible that rom->addr is smaller than addr,
thus ""rom->addr - addr"" gets negative and the memcpy() then tries to
copy contents from the image to a bad memory location. This could
maybe be used to inject code from a kernel image into the QEMU binary,
so we better fix it with an additional sanity check here.
Cc: qemu-stable@nongnu.org
Reported-by: Guangming Liu
Buglink: https://bugs.launchpad.net/qemu/+bug/1844635
Message-Id: <20190925130331.27825-1-thuth@redhat.com>
Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
Signed-off-by: Thomas Huth <thuth@redhat.com>
(cherry picked from commit e423455c4f23a1a828901c78fe6d03b7dde79319)
Signed-off-by: Michael Roth <mdroth@linux.vnet.ibm.com>
</s>"," diff --git a/hw/core/loader.c b/hw/core/loader.c
index fe5cb24122..4ef2095247 100644
--- a/hw/core/loader.c
+++ b/hw/core/loader.c
@@ -1240,7 +1240,7 @@ int rom_copy(uint8_t *dest, hwaddr addr, size_t size)
         if (rom->addr + rom->romsize < addr) {
             continue;
         }
-        if (rom->addr > end) {
+        if (rom->addr > end || rom->addr < addr) {
             break;
         }
 
",1.0,2.0,1.0,tfidf
CVE-2020-13765,CVE-2020-13765/c430d7684e0afc1c07bbc844a90e39311783b469,https://github.com/qemu/qemu/commit/c430d7684e0afc1c07bbc844a90e39311783b469,"<s>rom_copy() in hw/core/loader.c in QEMU 4.0 and 4.1.0 does not validate the relationship between two addresses, which allows attackers to trigger an invalid memory copy operation.</s>","<s>iotests: Test backup job with two guest writes
Perform two guest writes to not yet backed up areas of an image, where
the former touches an inner area of the latter.
Before HEAD^, copy offloading broke this in two ways:
(1) The target image differs from the reference image (what the source
    was when the backup started).
(2) But you will not see that in the failing output, because the job
    offset is reported as being greater than the job length.  This is
    because one cluster is copied twice, and thus accounted for twice,
    but of course the job length does not increase.
Signed-off-by: Max Reitz <mreitz@redhat.com>
Message-id: 20190801173900.23851-3-mreitz@redhat.com
Reviewed-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Tested-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Signed-off-by: Max Reitz <mreitz@redhat.com>
(cherry picked from commit 5f594a2e99f19ca0f7744d333bcd556f5976b78f)
Signed-off-by: Michael Roth <mdroth@linux.vnet.ibm.com>
</s>"," diff --git a/tests/qemu-iotests/056 b/tests/qemu-iotests/056
index 3df323984d..e5ac25127b 100755
--- a/tests/qemu-iotests/056
+++ b/tests/qemu-iotests/056
@@ -133,6 +133,7 @@ class BackupTest(iotests.QMPTestCase):
         self.vm = iotests.VM()
         self.test_img = img_create('test')
         self.dest_img = img_create('dest')
+        self.ref_img = img_create('ref')
         self.vm.add_drive(self.test_img)
         self.vm.launch()
 
@@ -140,6 +141,7 @@ class BackupTest(iotests.QMPTestCase):
         self.vm.shutdown()
         try_remove(self.test_img)
         try_remove(self.dest_img)
+        try_remove(self.ref_img)
 
     def hmp_io_writes(self, drive, patterns):
         for pattern in patterns:
@@ -177,6 +179,43 @@ class BackupTest(iotests.QMPTestCase):
             self.assert_qmp(event, 'data/error', qerror)
             return False
 
+    def test_overlapping_writes(self):
+        # Write something to back up
+        self.hmp_io_writes('drive0', [('42', '0M', '2M')])
+
+        # Create a reference backup
+        self.qmp_backup_and_wait(device='drive0', format=iotests.imgfmt,
+                                 sync='full', target=self.ref_img,
+                                 auto_dismiss=False)
+        res = self.vm.qmp('block-job-dismiss', id='drive0')
+        self.assert_qmp(res, 'return', {})
+
+        # Now to the test backup: We simulate the following guest
+        # writes:
+        # (1) [1M + 64k, 1M + 128k): Afterwards, everything in that
+        #     area should be in the target image, and we must not copy
+        #     it again (because the source image has changed now)
+        #     (64k is the job's cluster size)
+        # (2) [1M, 2M): The backup job must not get overeager.  It
+        #     must copy [1M, 1M + 64k) and [1M + 128k, 2M) separately,
+        #     but not the area in between.
+
+        self.qmp_backup(device='drive0', format=iotests.imgfmt, sync='full',
+                        target=self.dest_img, speed=1, auto_dismiss=False)
+
+        self.hmp_io_writes('drive0', [('23', '%ik' % (1024 + 64), '64k'),
+                                      ('66', '1M', '1M')])
+
+        # Let the job complete
+        res = self.vm.qmp('block-job-set-speed', device='drive0', speed=0)
+        self.assert_qmp(res, 'return', {})
+        self.qmp_backup_wait('drive0')
+        res = self.vm.qmp('block-job-dismiss', id='drive0')
+        self.assert_qmp(res, 'return', {})
+
+        self.assertTrue(iotests.compare_images(self.ref_img, self.dest_img),
+                        'target image does not match reference image')
+
     def test_dismiss_false(self):
         res = self.vm.qmp('query-block-jobs')
         self.assert_qmp(res, 'return', [])
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2018-1000074,CVE-2018-1000074/254e3d0ee873c008c0b74e8b8abcbdab4caa0a6d,https://github.com/rubygems/rubygems/commit/254e3d0ee873c008c0b74e8b8abcbdab4caa0a6d,"<s>RubyGems version Ruby 2.2 series: 2.2.9 and earlier, Ruby 2.3 series: 2.3.6 and earlier, Ruby 2.4 series: 2.4.3 and earlier, Ruby 2.5 series: 2.5.0 and earlier, prior to trunk revision 62422 contains a Deserialization of Untrusted Data vulnerability in owner command that can result in code execution. This attack appear to be exploitable via victim must run the `gem owner` command on a gem with a specially crafted YAML file. This vulnerability appears to have been fixed in 2.7.6.</s>","<s>Fix possible Unsafe Object Deserialization Vulnerability in gem owner
</s>"," diff --git a/test/rubygems/test_gem_commands_owner_command.rb b/test/rubygems/test_gem_commands_owner_command.rb
index 44652c1093..05230772d9 100644
--- a/test/rubygems/test_gem_commands_owner_command.rb
+++ b/test/rubygems/test_gem_commands_owner_command.rb
@@ -2,6 +2,9 @@
 require 'rubygems/test_case'
 require 'rubygems/commands/owner_command'
 
+class Foo
+end
+
 class TestGemCommandsOwnerCommand < Gem::TestCase
 
   def setup
@@ -43,6 +46,31 @@ def test_show_owners
     assert_match %r{- 4}, @ui.output
   end
 
+  def test_show_owners_dont_load_objects
+    skip ""testing a psych-only API"" unless defined?(::Psych::DisallowedClass)
+
+    response = <<EOF
+---
+- email: !ruby/object:Foo {}
+  id: 1
+  handle: user1
+- email: user2@example.com
+- id: 3
+  handle: user3
+- id: 4
+EOF
+
+    @fetcher.data[""#{Gem.host}/api/v1/gems/freewill/owners.yaml""] = [response, 200, 'OK']
+
+    assert_raises Psych::DisallowedClass do
+      use_ui @ui do
+        @cmd.show_owners(""freewill"")
+      end
+    end
+
+  end
+
+
   def test_show_owners_setting_up_host_through_env_var
     response = ""- email: user1@example.com\n""
     host = ""http://rubygems.example""
",1.0,3.0,1.0,tfidf
CVE-2018-1000074,CVE-2018-1000074/f5042b879259b1f1ce95a0c5082622c646376693,https://github.com/rubygems/rubygems/commit/f5042b879259b1f1ce95a0c5082622c646376693,"<s>RubyGems version Ruby 2.2 series: 2.2.9 and earlier, Ruby 2.3 series: 2.3.6 and earlier, Ruby 2.4 series: 2.4.3 and earlier, Ruby 2.5 series: 2.5.0 and earlier, prior to trunk revision 62422 contains a Deserialization of Untrusted Data vulnerability in owner command that can result in code execution. This attack appear to be exploitable via victim must run the `gem owner` command on a gem with a specially crafted YAML file. This vulnerability appears to have been fixed in 2.7.6.</s>","<s>Raise a security error when there are duplicate files in a package
This is a rudimentary fix for an issue where RubyGems would allow a
mis-signed gem to be installed, as the tarball would contain multiple
gem signatures.
Nothing should give us a tarball with multiple entries, so we'll just
disallow that.
</s>"," diff --git a/lib/rubygems/package.rb b/lib/rubygems/package.rb
index 9d78544f92..dede959981 100644
--- a/lib/rubygems/package.rb
+++ b/lib/rubygems/package.rb
@@ -603,6 +603,10 @@ def verify_files gem
       raise Gem::Package::FormatError.new \
               'package content (data.tar.gz) is missing', @gem
     end
+
+    if duplicates = @files.group_by {|f| f }.select {|k,v| v.size > 1 }.map(&:first) and duplicates.any?
+      raise Gem::Security::Exception, ""duplicate files in the package: (#{duplicates.map(&:inspect).join(', ')})""
+    end
   end
 
   ##
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2019-14750,CVE-2019-14750/c3ba5b78261e07a883ad8fac28c214486c854e12,https://github.com/osTicket/osTicket/commit/c3ba5b78261e07a883ad8fac28c214486c854e12,<s>An issue was discovered in osTicket before 1.10.7 and 1.12.x before 1.12.1. Stored XSS exists in setup/install.php. It was observed that no input sanitization was provided in the firstname and lastname fields of the application. The insertion of malicious queries in those fields leads to the execution of those queries. This can further lead to cookie stealing or other malicious actions.</s>,"<s>xss: Install Form
This addresses an issue reported by Aishwarya Iyer where inserting `<img src
=x onerror = prompt(1)` into any text field on the install form will execute
in the browser after the system is installed and you log in. This is due to
us not sanitizing the content before its saved in the database. This adds
`Format::htmlchars()` to the installer to ensure the text field data is
sanitized properly.
</s>"," diff --git a/setup/inc/class.installer.php b/setup/inc/class.installer.php
index 1a198325..8d10bd4f 100644
--- a/setup/inc/class.installer.php
+++ b/setup/inc/class.installer.php
@@ -188,8 +188,8 @@ class Installer extends SetupWizard {
             'dept_id' => $dept_id,
             'role_id' => $role_id,
             'email' => $vars['admin_email'],
-            'firstname' => $vars['fname'],
-            'lastname' => $vars['lname'],
+            'firstname' => Format::htmlchars($vars['fname']),
+            'lastname' => Format::htmlchars($vars['lname']),
             'username' => $vars['username'],
         ));
         $staff->updatePerms(array(
",1.0,3.0,1.0,tfidf
CVE-2019-14750,CVE-2019-14750/99818486c5b1d8aa445cee232825418d6834f249,https://github.com/osTicket/osTicket/commit/99818486c5b1d8aa445cee232825418d6834f249,<s>An issue was discovered in osTicket before 1.10.7 and 1.12.x before 1.12.1. Stored XSS exists in setup/install.php. It was observed that no input sanitization was provided in the firstname and lastname fields of the application. The insertion of malicious queries in those fields leads to the execution of those queries. This can further lead to cookie stealing or other malicious actions.</s>,"<s>security: CSV Formula Injection
This addresses a security issue discovered by Aishwarya Iyer where a User
can change their Full Name to a windows formula and when an Agent exports a
list of Users containing said User and opens the export file, the formula
will be executed on their computer (if it's windows of course). This adds a
new validator called `is_formula()` to all text fields disallowing the use
of the following characters `= + - @` at the beginning of text. This should
mitigate CSV Formula injections for any text field that allows user-input in
the system. To further prevent CSV Formula injections this adds an escape
mechanism to the Exporter that will escape any content matching the formula
regex with a single quote (as mentioned in many posts about this subject).
</s>"," diff --git a/include/class.forms.php b/include/class.forms.php
index e806d00b..122d2602 100644
--- a/include/class.forms.php
+++ b/include/class.forms.php
@@ -1300,7 +1300,8 @@ class TextboxField extends FormField {
         parent::validateEntry($value);
         $config = $this->getConfiguration();
         $validators = array(
-            '' =>       null,
+            '' =>       array(array('Validator', 'is_formula'),
+                __('Content cannot start with the following characters: = - + @')),
             'email' =>  array(array('Validator', 'is_valid_email'),
                 __('Enter a valid email address')),
             'phone' =>  array(array('Validator', 'is_phone'),
@@ -1379,6 +1380,29 @@ class TextareaField extends FormField {
         );
     }
 
+    function validateEntry($value) {
+        parent::validateEntry($value);
+        if (!$value)
+            return;
+        $config = $this->getConfiguration();
+        $validators = array(
+            '' =>       array(array('Validator', 'is_formula'),
+                __('Content cannot start with the following characters: = - + @')),
+        );
+        // Support configuration forms, as well as GUI-based form fields
+        if (!($valid = $this->get('validator')) && isset($config['validator']))
+            $valid = $config['validator'];
+        if (!isset($validators[$valid]))
+            return;
+        $func = $validators[$valid];
+        $error = $func[1];
+        if ($config['validator-error'])
+            $error = $this->getLocal('validator-error', $config['validator-error']);
+        if (is_array($func) && is_callable($func[0]))
+            if (!call_user_func($func[0], $value))
+                $this->_errors[] = $error;
+    }
+
     function hasSpecialSearch() {
         return false;
     }
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2014-3587,CVE-2014-3587/d8f3124da77d405c4c71d13f26ebe3dfc586c0e6,https://github.com/file/file/commit/d8f3124da77d405c4c71d13f26ebe3dfc586c0e6,"<s>Integer overflow in the cdf_read_property_info function in cdf.c in file through 5.19, as used in the Fileinfo component in PHP before 5.4.32 and 5.5.x before 5.5.16, allows remote attackers to cause a denial of service (application crash) via a crafted CDF file.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2012-1571.</s>","<s>add encrypted cdf documents
</s>"," diff --git a/ChangeLog b/ChangeLog
index c0e7273c..099fef8f 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,7 @@
+2014-08-17  10:01  Christos Zoulas <christos@zoulas.com>
+
+	* recognize encrypted CDF documents
+
 2014-08-04   9:18  Christos Zoulas <christos@zoulas.com>
 
 	* add magic_load_buffers from Brooks Davis
",0.0,,0.0,lime
CVE-2014-3587,CVE-2014-3587/0641e56be1af003aa02c7c6b0184466540637233,https://github.com/file/file/commit/0641e56be1af003aa02c7c6b0184466540637233,"<s>Integer overflow in the cdf_read_property_info function in cdf.c in file through 5.19, as used in the Fileinfo component in PHP before 5.4.32 and 5.5.x before 5.5.16, allows remote attackers to cause a denial of service (application crash) via a crafted CDF file.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2012-1571.</s>","<s>Prevent wrap around (Remi Collet at redhat)
</s>"," diff --git a/src/cdf.c b/src/cdf.c
index 5dbf3b13..3e691f4c 100644
--- a/src/cdf.c
+++ b/src/cdf.c
@@ -35,7 +35,7 @@
 #include ""file.h""
 
 #ifndef lint
-FILE_RCSID(""@(#)$File: cdf.c,v 1.63 2014/06/09 13:04:37 christos Exp $"")
+FILE_RCSID(""@(#)$File: cdf.c,v 1.64 2014/07/24 19:35:39 christos Exp $"")
 #endif
 
 #include <assert.h>
@@ -835,6 +835,10 @@ cdf_read_property_info(const cdf_stream_t *sst, const cdf_header_t *h,
 		q = (const uint8_t *)(const void *)
 		    ((const char *)(const void *)p + ofs
 		    - 2 * sizeof(uint32_t));
+		if (q < p) {
+			DPRINTF((""Wrapped around %p < %p\n"", q, p));
+			goto out;
+		}
 		if (q > e) {
 			DPRINTF((""Ran of the end %p > %p\n"", q, e));
 			goto out;
",1.0,1.0,1.0,lime
,,,,,,,,,
CVE-2013-6416,CVE-2013-6416/98d06c6bd4eefeeb342d05116fccefa11875cb9b,https://github.com/rails/rails/commit/98d06c6bd4eefeeb342d05116fccefa11875cb9b,<s>Cross-site scripting (XSS) vulnerability in the simple_format helper in actionpack/lib/action_view/helpers/text_helper.rb in Ruby on Rails 4.x before 4.0.2 allows remote attackers to inject arbitrary web script or HTML via a crafted HTML attribute.</s>,"<s>fixing changelog
</s>"," diff --git a/actionpack/CHANGELOG.md b/actionpack/CHANGELOG.md
index f4d878710c..0f0c2d52b0 100644
--- a/actionpack/CHANGELOG.md
+++ b/actionpack/CHANGELOG.md
@@ -1,3 +1,5 @@
+*   Ensure simple_format escapes its html attributes. This fixes CVE-2013-6416
+
 *   Deep Munge the parameters for GET and POST Fixes CVE-2013-6417
 
 *   Stop using i18n's built in HTML error handling.  Fixes: CVE-2013-4491
",0.0,,0.0,tfidf
CVE-2013-6416,CVE-2013-6416/4b4f5847f64f81c961625e647711ef9f6ad1a454,https://github.com/rails/rails/commit/4b4f5847f64f81c961625e647711ef9f6ad1a454,<s>Cross-site scripting (XSS) vulnerability in the simple_format helper in actionpack/lib/action_view/helpers/text_helper.rb in Ruby on Rails 4.x before 4.0.2 allows remote attackers to inject arbitrary web script or HTML via a crafted HTML attribute.</s>,"<s>Ensure simple_format escapes its html attributes
The previous behavior equated the sanitize option for simple_format with the
escape option of content_tag, however these are two distinct concepts.
This fixes CVE-2013-6416
</s>"," diff --git a/actionpack/lib/action_view/helpers/text_helper.rb b/actionpack/lib/action_view/helpers/text_helper.rb
index 2ed825efc8..285d27d844 100644
--- a/actionpack/lib/action_view/helpers/text_helper.rb
+++ b/actionpack/lib/action_view/helpers/text_helper.rb
@@ -266,7 +266,7 @@ def simple_format(text, html_options = {}, options = {})
           content_tag(wrapper_tag, nil, html_options)
         else
           paragraphs.map { |paragraph|
-            content_tag(wrapper_tag, paragraph, html_options, options[:sanitize])
+            content_tag(wrapper_tag, raw(paragraph), html_options)
           }.join(""\n\n"").html_safe
         end
       end
",1.0,3.0,1.0,tfidf
,,,,,,,,,
CVE-2021-46398,CVE-2021-46398/74b7cd8e81840537a8206317344f118093153e8d,https://github.com/filebrowser/filebrowser/commit/74b7cd8e81840537a8206317344f118093153e8d,<s>A Cross-Site Request Forgery vulnerability exists in Filebrowser < 2.18.0 that allows attackers to create a backdoor user with admin privilege and get access to the filesystem via a malicious HTML webpage that is sent to the victim. An admin can run commands using the FileBrowser and hence it leads to RCE.</s>,"<s>fix: security issue in command runner (closes #1621)
</s>"," diff --git a/http/commands.go b/http/commands.go
index 173e57a9..48c7f297 100644
--- a/http/commands.go
+++ b/http/commands.go
@@ -59,19 +59,19 @@ var commandsHandler = withUser(func(w http.ResponseWriter, r *http.Request, d *d
 		}
 	}
 
-	if !d.server.EnableExec || !d.user.CanExecute(strings.Split(raw, "" "")[0]) {
-		if err := conn.WriteMessage(websocket.TextMessage, cmdNotAllowed); err != nil { //nolint:govet
+	command, err := runner.ParseCommand(d.settings, raw)
+	if err != nil {
+		if err := conn.WriteMessage(websocket.TextMessage, []byte(err.Error())); err != nil { //nolint:govet
 			wsErr(conn, r, http.StatusInternalServerError, err)
 		}
-
 		return 0, nil
 	}
 
-	command, err := runner.ParseCommand(d.settings, raw)
-	if err != nil {
-		if err := conn.WriteMessage(websocket.TextMessage, []byte(err.Error())); err != nil { //nolint:govet
+	if !d.server.EnableExec || !d.user.CanExecute(command[0]) {
+		if err := conn.WriteMessage(websocket.TextMessage, cmdNotAllowed); err != nil { //nolint:govet
 			wsErr(conn, r, http.StatusInternalServerError, err)
 		}
+
 		return 0, nil
 	}
 
",1.0,1.0,1.0,lime
CVE-2021-46398,CVE-2021-46398/6cb51b4eb4751b49e7d3458c4a23589ccf16790b,https://github.com/filebrowser/filebrowser/commit/6cb51b4eb4751b49e7d3458c4a23589ccf16790b,<s>A Cross-Site Request Forgery vulnerability exists in Filebrowser < 2.18.0 that allows attackers to create a backdoor user with admin privilege and get access to the filesystem via a malicious HTML webpage that is sent to the victim. An admin can run commands using the FileBrowser and hence it leads to RCE.</s>,"<s>Add files via upload (#1615)

</s>"," diff --git a/frontend/src/views/files/Editor.vue b/frontend/src/views/files/Editor.vue
index 519bd886..3dbabc74 100644
--- a/frontend/src/views/files/Editor.vue
+++ b/frontend/src/views/files/Editor.vue
@@ -4,15 +4,13 @@
       <action icon=""close"" :label=""$t('buttons.close')"" @action=""close()"" />
       <title>{{ req.name }}</title>
 
-      <template #actions>
-        <action
-          v-if=""user.perm.modify""
-          id=""save-button""
-          icon=""save""
-          :label=""$t('buttons.save')""
-          @action=""save()""
-        />
-      </template>
+      <action
+        v-if=""user.perm.modify""
+        id=""save-button""
+        icon=""save""
+        :label=""$t('buttons.save')""
+        @action=""save()""
+      />
     </header-bar>
 
     <breadcrumbs base=""/files"" noLink />
",0.0,,0.0,lime
,,,,,,,,,
CVE-2020-8130,CVE-2020-8130/5b8f8fc41a5d7d7d6a5d767e48464c60884d3aee,https://github.com/ruby/rake/commit/5b8f8fc41a5d7d7d6a5d767e48464c60884d3aee,<s>There is an OS command injection vulnerability in Ruby Rake < 12.3.3 in Rake::FileList when supplying a filename that begins with the pipe character `|`.</s>,"<s>Use File.open explicitly.
</s>"," diff --git a/lib/rake/file_list.rb b/lib/rake/file_list.rb
index 15ea4b3..22c339f 100644
--- a/lib/rake/file_list.rb
+++ b/lib/rake/file_list.rb
@@ -294,7 +294,7 @@ module Rake
       matched = 0
       each do |fn|
         begin
-          open(fn, ""r"", *options) do |inf|
+          File.open(fn, ""r"", *options) do |inf|
             count = 0
             inf.each do |line|
               count += 1
",1.0,1.0,1.0,lime
CVE-2020-8130,CVE-2020-8130/d28957d64ae88823200049f8ae3667eb631bdfcc,https://github.com/ruby/rake/commit/d28957d64ae88823200049f8ae3667eb631bdfcc,<s>There is an OS command injection vulnerability in Ruby Rake < 12.3.3 in Rake::FileList when supplying a filename that begins with the pipe character `|`.</s>,"<s>Use the application's name in error message if a task is not found
`Rake.application` can be initialized with a custom name, so use that in
the error message when a task is not found in the index. The default
application name is `rake`.
</s>"," diff --git a/lib/rake/task_manager.rb b/lib/rake/task_manager.rb
index d503a30..1991088 100644
--- a/lib/rake/task_manager.rb
+++ b/lib/rake/task_manager.rb
@@ -60,7 +60,8 @@ module Rake
     end
 
     def generate_message_for_undefined_task(task_name)
-      message = ""Don't know how to build task '#{task_name}' (See the list of available tasks with `rake --tasks`)""
+      message = ""Don't know how to build task '#{task_name}' ""\
+                ""(See the list of available tasks with `#{Rake.application.name} --tasks`)""
       message + generate_did_you_mean_suggestions(task_name)
     end
 
",0.0,,0.0,lime
,,,,,,,,,
CVE-2022-0510,CVE-2022-0510/411d20b1c6a6e941b418d7f3ff94be13c37432f2,https://github.com/pimcore/pimcore/commit/411d20b1c6a6e941b418d7f3ff94be13c37432f2,<s>Cross-site Scripting (XSS) - Reflected in Packagist pimcore/pimcore prior to 10.3.1.</s>,"<s>[Docs] Cache config file needs to be put in local/ folder to get loaded with default config.yaml (#11445)
* cache configuration needs to be put in config/local folder with default config.yaml -> otherwise will not get loaded
* cache configuration needs to be put in config/packages folder to get loaded with default config.yaml -> otherwise will not get loaded
* cache configuration needs to be put in config/packages folder to get loaded with default config.yaml -> otherwise will not get loaded
</s>"," diff --git a/doc/Development_Documentation/19_Development_Tools_and_Details/09_Cache/README.md b/doc/Development_Documentation/19_Development_Tools_and_Details/09_Cache/README.md
index 95477a9e93..55e605f468 100644
--- a/doc/Development_Documentation/19_Development_Tools_and_Details/09_Cache/README.md
+++ b/doc/Development_Documentation/19_Development_Tools_and_Details/09_Cache/README.md
@@ -21,7 +21,7 @@ Pimcore uses the `pimcore.cache.pool` Symfony cache pool, you can configure it a
 that the pool supports tags.
 
 ```yaml
-# config/cache.yaml
+# config/packages/cache.yaml
 framework:
     cache:
         pools:
",0.0,,0.0,tfidf
CVE-2022-0510,CVE-2022-0510/b5a9ad65e5a4dde1916f02019f8686ad835681ce,https://github.com/pimcore/pimcore/commit/b5a9ad65e5a4dde1916f02019f8686ad835681ce,<s>Cross-site Scripting (XSS) - Reflected in Packagist pimcore/pimcore prior to 10.3.1.</s>,"<s>[Admin] DataObject - Escape class definitions group properly
</s>"," diff --git a/bundles/AdminBundle/Controller/Admin/DataObject/ClassController.php b/bundles/AdminBundle/Controller/Admin/DataObject/ClassController.php
index ac818bca62..a041274b7b 100644
--- a/bundles/AdminBundle/Controller/Admin/DataObject/ClassController.php
+++ b/bundles/AdminBundle/Controller/Admin/DataObject/ClassController.php
@@ -861,7 +861,7 @@ class ClassController extends AdminController implements KernelControllerEventIn
                 if (!isset($groups[$item->getGroup()])) {
                     $groups[$item->getGroup()] = [
                         'id' => 'group_' . $item->getKey(),
-                        'text' => $item->getGroup(),
+                        'text' => htmlspecialchars($item->getGroup()),
                         'expandable' => true,
                         'leaf' => false,
                         'allowChildren' => true,
@@ -1266,7 +1266,7 @@ class ClassController extends AdminController implements KernelControllerEventIn
                 if (!isset($groups[$item->getGroup()])) {
                     $groups[$item->getGroup()] = [
                         'id' => 'group_' . $item->getKey(),
-                        'text' => $item->getGroup(),
+                        'text' => htmlspecialchars($item->getGroup()),
                         'expandable' => true,
                         'leaf' => false,
                         'allowChildren' => true,
",1.0,1.0,1.0,tfidf
,,,,,,,,,
CVE-2017-5592,CVE-2017-5592/8e75437a7e43d4c55e861691f74892e666e29b0b,https://github.com/profanity-im/profanity/commit/8e75437a7e43d4c55e861691f74892e666e29b0b,"<s>An incorrect implementation of ""XEP-0280: Message Carbons"" in multiple XMPP clients allows a remote attacker to impersonate any user, including contacts, in the vulnerable application's display. This allows for various kinds of social engineering attacks. This CVE is for profanity (0.4.7 - 0.5.0).</s>","<s>Add carbons from check
</s>"," diff --git a/tests/functionaltests/test_carbons.c b/tests/functionaltests/test_carbons.c
index 414284ff..7926a76f 100644
--- a/tests/functionaltests/test_carbons.c
+++ b/tests/functionaltests/test_carbons.c
@@ -70,7 +70,7 @@ receive_carbon(void **state)
     assert_true(prof_output_exact(""unencrypted""));
 
     stbbr_send(
-        ""<message type='chat' to='stabber@localhost/profanity' from='buddy1@localhost'>""
+        ""<message type='chat' to='stabber@localhost/profanity' from='stabber@localhost'>""
             ""<received xmlns='urn:xmpp:carbons:2'>""
                 ""<forwarded xmlns='urn:xmpp:forward:0'>""
                     ""<message id='prof_msg_7' xmlns='jabber:client' type='chat' lang='en' to='stabber@localhost/profanity' from='buddy1@localhost/mobile'>""
",1.0,3.0,1.0,lime
CVE-2017-5592,CVE-2017-5592/01428eb85855ea9dd148118ca35a0e20f42cd5ce,https://github.com/profanity-im/profanity/commit/01428eb85855ea9dd148118ca35a0e20f42cd5ce,"<s>An incorrect implementation of ""XEP-0280: Message Carbons"" in multiple XMPP clients allows a remote attacker to impersonate any user, including contacts, in the vulnerable application's display. This allows for various kinds of social engineering attacks. This CVE is for profanity (0.4.7 - 0.5.0).</s>","<s>Add special handling for xep-0133 get-user-roster
</s>"," diff --git a/src/xmpp/iq.c b/src/xmpp/iq.c
index 3b5f1990..dde803cb 100644
--- a/src/xmpp/iq.c
+++ b/src/xmpp/iq.c
@@ -1178,9 +1178,48 @@ _command_exec_response_handler(xmpp_stanza_t *const stanza, void *const userdata
         }
         xmpp_stanza_t *x = xmpp_stanza_get_child_by_ns(cmd, STANZA_NS_DATA);
         if (x) {
-            DataForm *form = form_create(x);
-            ProfConfWin *confwin = (ProfConfWin*)wins_new_config(from, form, NULL, NULL, NULL);
-            confwin_handle_configuration(confwin, form);
+            xmpp_stanza_t *roster = xmpp_stanza_get_child_by_ns(x, XMPP_NS_ROSTER);
+            if (roster) {
+                /* Special handling of xep-0133 roster in response */
+                GSList *list = NULL;
+                xmpp_stanza_t *child = xmpp_stanza_get_children(roster);
+                while (child) {
+                    const char *barejid = xmpp_stanza_get_attribute(child, STANZA_ATTR_JID);
+                    gchar *barejid_lower = g_utf8_strdown(barejid, -1);
+                    const char *name = xmpp_stanza_get_attribute(child, STANZA_ATTR_NAME);
+                    const char *sub = xmpp_stanza_get_attribute(child, STANZA_ATTR_SUBSCRIPTION);
+                    const char *ask = xmpp_stanza_get_attribute(child, STANZA_ATTR_ASK);
+
+                    GSList *groups = NULL;
+                    xmpp_stanza_t *group_element = xmpp_stanza_get_children(child);
+
+                    while (group_element) {
+                        if (strcmp(xmpp_stanza_get_name(group_element), STANZA_NAME_GROUP) == 0) {
+                            char *groupname = xmpp_stanza_get_text(group_element);
+                            if (groupname) {
+                                groups = g_slist_append(groups, groupname);
+                            }
+                        }
+                        group_element = xmpp_stanza_get_next(group_element);
+                    }
+
+                    gboolean pending_out = FALSE;
+                    if (ask && (strcmp(ask, ""subscribe"") == 0)) {
+                        pending_out = TRUE;
+                    }
+
+                    PContact contact = p_contact_new(barejid_lower, name, groups, sub, NULL, pending_out);
+                    list = g_slist_append(list, contact);
+                    child = xmpp_stanza_get_next(child);
+                }
+
+                cons_show_roster(list);
+                g_slist_free(list);
+            } else {
+                DataForm *form = form_create(x);
+                ProfConfWin *confwin = (ProfConfWin*)wins_new_config(from, form, NULL, NULL, NULL);
+                confwin_handle_configuration(confwin, form);
+            }
         }
     } else if (g_strcmp0(status, ""executing"") == 0) {
         win_handle_command_exec_status(win, command, ""executing"");
",0.0,,0.0,lime
,,,,,,,,,
CVE-2018-12247,CVE-2018-12247/fd086833ff6673ab11e6ecea573851593263ae6a,https://github.com/mruby/mruby/commit/fd086833ff6673ab11e6ecea573851593263ae6a,"<s>An issue was discovered in mruby 1.4.1. There is a NULL pointer dereference in mrb_class, related to certain .clone usage, because mrb_obj_clone in kernel.c copies flags other than the MRB_FLAG_IS_FROZEN flag (e.g., the embedded flag).</s>","<s>Reorganize flags values for classes; fix #3975
Renamed flag macro names as well:
`MRB_FLAG_IS_FROZEN` -> `MRB_FL_OBJ_FROZEN`
`MRB_FLAG_IS_PREPENDED` -> `MRB_FL_CLASS_IS_PREPENDED`
`MRB_FLAG_IS_ORIGIN` -> `MRB_FL_CLASS_IS_ORIGIN`
`MRB_FLAG_IS_INHERITED` -> `MRB_FL_CLASS_IS_INHERITED`
</s>"," diff --git a/src/kernel.c b/src/kernel.c
index 42e9ca6a4..9986b0222 100644
--- a/src/kernel.c
+++ b/src/kernel.c
@@ -252,18 +252,18 @@ copy_class(mrb_state *mrb, mrb_value dst, mrb_value src)
   struct RClass *sc = mrb_class_ptr(src);
   /* if the origin is not the same as the class, then the origin and
      the current class need to be copied */
-  if (sc->flags & MRB_FLAG_IS_PREPENDED) {
+  if (sc->flags & MRB_FL_CLASS_IS_PREPENDED) {
     struct RClass *c0 = sc->super;
     struct RClass *c1 = dc;
 
     /* copy prepended iclasses */
-    while (!(c0->flags & MRB_FLAG_IS_ORIGIN)) {
+    while (!(c0->flags & MRB_FL_CLASS_IS_ORIGIN)) {
       c1->super = mrb_class_ptr(mrb_obj_dup(mrb, mrb_obj_value(c0)));
       c1 = c1->super;
       c0 = c0->super;
     }
     c1->super = mrb_class_ptr(mrb_obj_dup(mrb, mrb_obj_value(c0)));
-    c1->super->flags |= MRB_FLAG_IS_ORIGIN;
+    c1->super->flags |= MRB_FL_CLASS_IS_ORIGIN;
   }
   if (sc->mt) {
     dc->mt = kh_copy(mt, mrb, sc->mt);
@@ -348,7 +348,7 @@ mrb_obj_clone(mrb_state *mrb, mrb_value self)
   mrb_field_write_barrier(mrb, (struct RBasic*)p, (struct RBasic*)p->c);
   clone = mrb_obj_value(p);
   init_copy(mrb, clone, self);
-  p->flags |= mrb_obj_ptr(self)->flags & MRB_FLAG_IS_FROZEN;
+  p->flags |= mrb_obj_ptr(self)->flags & MRB_FL_OBJ_IS_FROZEN;
 
   return clone;
 }
@@ -706,7 +706,7 @@ mrb_class_instance_method_list(mrb_state *mrb, mrb_bool recur, struct RClass* kl
   struct RClass* oldklass;
   khash_t(st)* set = kh_init(st, mrb);
 
-  if (!recur && (klass->flags & MRB_FLAG_IS_PREPENDED)) {
+  if (!recur && (klass->flags & MRB_FL_CLASS_IS_PREPENDED)) {
     MRB_CLASS_ORIGIN(klass);
     prepended = TRUE;
   }
",0.0,,0.0,tfidf
CVE-2018-12247,CVE-2018-12247/55edae0226409de25e59922807cb09acb45731a2,https://github.com/mruby/mruby/commit/55edae0226409de25e59922807cb09acb45731a2,"<s>An issue was discovered in mruby 1.4.1. There is a NULL pointer dereference in mrb_class, related to certain .clone usage, because mrb_obj_clone in kernel.c copies flags other than the MRB_FLAG_IS_FROZEN flag (e.g., the embedded flag).</s>","<s>Allow `Object#clone` to copy frozen status only; fix #4036
Copying all flags from the original object may overwrite the clone's
flags e.g. the embedded flag.
</s>"," diff --git a/src/kernel.c b/src/kernel.c
index f378004cb..bbe6e8bb7 100644
--- a/src/kernel.c
+++ b/src/kernel.c
@@ -348,7 +348,7 @@ mrb_obj_clone(mrb_state *mrb, mrb_value self)
   mrb_field_write_barrier(mrb, (struct RBasic*)p, (struct RBasic*)p->c);
   clone = mrb_obj_value(p);
   init_copy(mrb, clone, self);
-  p->flags = mrb_obj_ptr(self)->flags;
+  p->flags |= mrb_obj_ptr(self)->flags & MRB_FLAG_IS_FROZEN;
 
   return clone;
 }
",1.0,3.0,1.0,tfidf
,,,,,,,,,
CVE-2021-38115,CVE-2021-38115/19c7a5d6512dcf4d0b0e6db797d754a8e281a6aa,https://github.com/libgd/libgd/commit/19c7a5d6512dcf4d0b0e6db797d754a8e281a6aa,<s>read_header_tga in gd_tga.c in the GD Graphics Library (aka LibGD) through 2.3.2 allows remote attackers to cause a denial of service (out-of-bounds read) via a crafted TGA file.</s>,"<s>use gdIOCtxPtr more consistently
We have gdIOCtxPtr for gdIOCtx*, so switch the public headers to it
consistently.
</s>"," diff --git a/src/gd_tga.h b/src/gd_tga.h
index 297f3dc9..b56e2e41 100644
--- a/src/gd_tga.h
+++ b/src/gd_tga.h
@@ -45,8 +45,8 @@ typedef struct oTga_ {
 
 #define TGA_RLE_FLAG	128
 
-int read_header_tga(gdIOCtx *ctx, oTga *tga);
-int read_image_tga(gdIOCtx *ctx, oTga *tga);
+int read_header_tga(gdIOCtxPtr ctx, oTga *tga);
+int read_image_tga(gdIOCtxPtr ctx, oTga *tga);
 void free_tga(oTga *tga);
 
 #endif //__TGA_H
",0.0,,0.0,tfidf
CVE-2021-38115,CVE-2021-38115/8b111b2b4a4842179be66db68d84dda91a246032,https://github.com/libgd/libgd/commit/8b111b2b4a4842179be66db68d84dda91a246032,<s>read_header_tga in gd_tga.c in the GD Graphics Library (aka LibGD) through 2.3.2 allows remote attackers to cause a denial of service (out-of-bounds read) via a crafted TGA file.</s>,"<s>fix read out-of-bands in reading tga header file
</s>"," diff --git a/src/gd_tga.c b/src/gd_tga.c
index cae9428d..286febb2 100644
--- a/src/gd_tga.c
+++ b/src/gd_tga.c
@@ -191,7 +191,11 @@ int read_header_tga(gdIOCtx *ctx, oTga *tga)
 			return -1;
 		}
 
-		gdGetBuf(tga->ident, tga->identsize, ctx);
+		
+		if (gdGetBuf(tga->ident, tga->identsize, ctx) != tga->identsize) {
+			gd_error(""fail to read header ident"");
+			return -1;
+		}
 	}
 
 	return 1;
",1.0,3.0,1.0,tfidf
,,,,,,,,,
CVE-2016-9284,CVE-2016-9284/e7b6856ac384bf2b8ea7761a1e46d6e4186d36f4,https://github.com/exponentcms/exponent-cms/commit/e7b6856ac384bf2b8ea7761a1e46d6e4186d36f4,<s>getUsersByJSON in framework/modules/users/controllers/usersController.php in Exponent CMS v2.4.0 allows remote attackers to read user information via users/getUsersByJSON/sort/ and a trailing string.</s>,"<s>fix security vulnerability to get user list, reported by pang0lin
</s>"," diff --git a/framework/modules/users/controllers/usersController.php b/framework/modules/users/controllers/usersController.php
index 7012b8496..3b4568633 100755
--- a/framework/modules/users/controllers/usersController.php
+++ b/framework/modules/users/controllers/usersController.php
@@ -39,6 +39,7 @@ class usersController extends expController {
         'update'           => 'Update Users',
         'show'             => 'Show User',
         'showall'          => 'Show Users',
+        'getUsersByJSON'   => 'Get Users',
     );
 
     static function displayname() {
",1.0,3.0,1.0,tfidf
CVE-2016-9284,CVE-2016-9284/66f72dc417c9dfdca2732b95c09230db0a10bc30,https://github.com/exponentcms/exponent-cms/commit/66f72dc417c9dfdca2732b95c09230db0a10bc30,<s>getUsersByJSON in framework/modules/users/controllers/usersController.php in Exponent CMS v2.4.0 allows remote attackers to read user information via users/getUsersByJSON/sort/ and a trailing string.</s>,"<s>fix security vulnerability update group; reported by DM_
</s>"," diff --git a/framework/modules/users/controllers/usersController.php b/framework/modules/users/controllers/usersController.php
index 3b4568633..73820bb6b 100755
--- a/framework/modules/users/controllers/usersController.php
+++ b/framework/modules/users/controllers/usersController.php
@@ -781,7 +781,7 @@ class usersController extends expController {
 
         $group = new group();
         if (!empty($this->params['redirect'])) {
-            $this->params['redirect'] = $db->selectValue('section', 'sef_name', 'id=' . $this->params['redirect']);
+            $this->params['redirect'] = $db->selectValue('section', 'sef_name', 'id=' . intval($this->params['redirect']));
         }
         $group->update($this->params);
         expHistory::back();
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2019-10240,CVE-2019-10240/75f66c9811134c854a3062c2b3cbafd5876fe383,https://github.com/eclipse/hawkbit/commit/75f66c9811134c854a3062c2b3cbafd5876fe383,<s>Eclipse hawkBit versions prior to 0.3.0M2 resolved Maven build artifacts for the Vaadin based UI over HTTP instead of HTTPS. Any of these dependent artifacts could have been maliciously compromised by a MITM attack. Hence produced build artifacts of hawkBit might be infected.</s>,"<s>Fix localization vaadin system messages (#807)
* Add customized SystemMessagesProvider
* Localize according to SystemMessagesInfo
* Localize vaadin 'Server connection lost' message
* Use available locale for system messages
* Add license header
* Fix PR findings
* Fix Sonar issues
Signed-off-by: Stefan Klotz <stefan.klotz@bosch-si.com>
</s>"," diff --git a/hawkbit-ui/src/main/java/org/eclipse/hawkbit/ui/utils/VaadinMessageSource.java b/hawkbit-ui/src/main/java/org/eclipse/hawkbit/ui/utils/VaadinMessageSource.java
index b6adac818..32bbf1788 100644
--- a/hawkbit-ui/src/main/java/org/eclipse/hawkbit/ui/utils/VaadinMessageSource.java
+++ b/hawkbit-ui/src/main/java/org/eclipse/hawkbit/ui/utils/VaadinMessageSource.java
@@ -55,8 +55,26 @@ public class VaadinMessageSource implements Serializable {
      * @see HawkbitCommonUtil#getCurrentLocale()
      */
     public String getMessage(final String code, final Object... args) {
+        return getMessage(HawkbitCommonUtil.getCurrentLocale(), code, args);
+    }
+
+    /**
+     * Tries to resolve the message based on the provided Local. Returns message
+     * code if fitting message could not be found.
+     * 
+     * @param local
+     *            to determinate the Language.
+     * @param code
+     *            the code to lookup up.
+     * @param args
+     *            Array of arguments that will be filled in for params within
+     *            the message.
+     * 
+     * @return the resolved message, or the message code if the lookup fails.
+     */
+    public String getMessage(final Locale local, final String code, final Object... args) {
         try {
-            return source.getMessage(code, args, HawkbitCommonUtil.getCurrentLocale());
+            return source.getMessage(code, args, local);
         } catch (final NoSuchMessageException ex) {
             LOG.error(""Failed to retrieve message!"", ex);
             return code;
",1.0,1.0,0.0,tfidf
CVE-2019-10240,CVE-2019-10240/fa6520a094a24897035dae4a3af2a69d174c7f9d,https://github.com/eclipse/hawkbit/commit/fa6520a094a24897035dae4a3af2a69d174c7f9d,<s>Eclipse hawkBit versions prior to 0.3.0M2 resolved Maven build artifacts for the Vaadin based UI over HTTP instead of HTTPS. Any of these dependent artifacts could have been maliciously compromised by a MITM attack. Hence produced build artifacts of hawkBit might be infected.</s>,"<s>Fix Vaadin Addon repo url (#813)
Signed-off-by: Kai Zimmermann <kai.zimmermann@microsoft.com>
</s>"," diff --git a/pom.xml b/pom.xml
index c0469f1e2..bf92ce684 100644
--- a/pom.xml
+++ b/pom.xml
@@ -122,7 +122,7 @@
    <repositories>
       <repository>
          <id>vaadin-addons</id>
-         <url>http://maven.vaadin.com/vaadin-addons</url>
+         <url>https://maven.vaadin.com/vaadin-addons</url>
       </repository>
    </repositories>
 
",0.0,,1.0,tfidf
,,,,,,,,,
CVE-2018-1000408,CVE-2018-1000408/517da6ed389f0a606dd9bb8595bc79fc93f4331c,https://github.com/jenkinsci/jenkins/commit/517da6ed389f0a606dd9bb8595bc79fc93f4331c,"<s>A denial of service vulnerability exists in Jenkins 2.145 and earlier, LTS 2.138.1 and earlier in core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java that allows attackers without Overall/Read permission to access a specific URL on instances using the built-in Jenkins user database security realm that results in the creation of an ephemeral user record in memory.</s>","<s>[SECURITY-1158]
</s>"," diff --git a/core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java b/core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java
index c787e352f2..01b3233108 100644
--- a/core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java
+++ b/core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java
@@ -73,6 +73,8 @@ import javax.servlet.ServletRequest;
 import javax.servlet.ServletResponse;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
+import javax.servlet.http.HttpSession;
+
 import static javax.servlet.http.HttpServletResponse.SC_UNAUTHORIZED;
 import java.io.IOException;
 import java.lang.reflect.Constructor;
@@ -263,6 +265,13 @@ public class HudsonPrivateSecurityRealm extends AbstractPasswordBasedSecurityRea
      */
     @SuppressWarnings(""ACL.impersonate"")
     private void loginAndTakeBack(StaplerRequest req, StaplerResponse rsp, User u) throws ServletException, IOException {
+        HttpSession session = req.getSession(false);
+        if (session != null) {
+            // avoid session fixation
+            session.invalidate();
+        }
+        req.getSession(true);
+        
         // ... and let him login
         Authentication a = new UsernamePasswordAuthenticationToken(u.getId(),req.getParameter(""password1""));
         a = this.getSecurityComponents().manager.authenticate(a);
",0.0,,0.0,tfidf
CVE-2018-1000408,CVE-2018-1000408/01157a699f611ca7492e872103ac01526a982cf2,https://github.com/jenkinsci/jenkins/commit/01157a699f611ca7492e872103ac01526a982cf2,"<s>A denial of service vulnerability exists in Jenkins 2.145 and earlier, LTS 2.138.1 and earlier in core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java that allows attackers without Overall/Read permission to access a specific URL on instances using the built-in Jenkins user database security realm that results in the creation of an ephemeral user record in memory.</s>","<s>[SECURITY-1128]
</s>"," diff --git a/core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java b/core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java
index 01b3233108..e877ee6291 100644
--- a/core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java
+++ b/core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java
@@ -475,8 +475,9 @@ public class HudsonPrivateSecurityRealm extends AbstractPasswordBasedSecurityRea
      * This is to map users under the security realm URL.
      * This in turn helps us set up the right navigation breadcrumb.
      */
+    @Restricted(NoExternalUse.class)
     public User getUser(String id) {
-        return User.getById(id, true);
+        return User.getById(id, User.ALLOW_USER_CREATION_VIA_URL && hasPermission(Jenkins.ADMINISTER));
     }
 
     // TODO
",1.0,1.0,1.0,tfidf
,,,,,,,,,
CVE-2017-15646,CVE-2017-15646/0c58892732ee7610a7abba5507614366d382c9c9,https://github.com/webmin/webmin/commit/0c58892732ee7610a7abba5507614366d382c9c9,"<s>Webmin before 1.860 has XSS with resultant remote code execution. Under the 'Others/File Manager' menu, there is a 'Download from remote URL' option to download a file from a remote server. After setting up a malicious server, one can wait for a file download request and then send an XSS payload that will lead to Remote Code Execution, as demonstrated by an OS command in the value attribute of a name='cmd' input element.</s>","<s>Escape potentially malicious HTTP headers
</s>"," diff --git a/web-lib-funcs.pl b/web-lib-funcs.pl
index db5858c26..29c2fd570 100755
--- a/web-lib-funcs.pl
+++ b/web-lib-funcs.pl
@@ -2308,7 +2308,7 @@ alarm(0);
 $h = $main::download_timed_out if ($main::download_timed_out);
 if (!ref($h)) {
 	if ($error) { $$error = $h; return; }
-	else { &error($h); }
+	else { &error(&html_escape($h)); }
 	}
 &complete_http_download($h, $dest, $error, $cbfunc, $osdn, $host, $port,
 			$headers, $ssl, $nocache, $timeout);
@@ -2337,7 +2337,7 @@ if ($line !~ /^HTTP\/1\..\s+(200|30[0-9]|400)(\s+|$)/) {
 	alarm(0);
 	&close_http_connection($h);
 	if ($error) { ${$error} = $line; return; }
-	else { &error(""Download failed : $line""); }
+	else { &error(""Download failed : "".&html_escape($line)); }
 	}
 my $rcode = $1;
 &$cbfunc(1, $rcode >= 300 && $rcode < 400 ? 1 : 0)
@@ -2383,7 +2383,8 @@ if ($rcode >= 300 && $rcode < 400) {
 		# Assume relative to same dir .. not handled
 		&close_http_connection($h);
 		if ($error) { ${$error} = ""Invalid Location header $header{'location'}""; return; }
-		else { &error(""Invalid Location header $header{'location'}""); }
+		else { &error(""Invalid Location header "".
+			      &html_escape($header{'location'})); }
 		}
 	else {
 		&close_http_connection($h);
@@ -2412,7 +2413,7 @@ else {
 		if (!&open_tempfile(PFILE, "">$destfile"", 1)) {
 			&close_http_connection($h);
 			if ($error) { ${$error} = ""Failed to write to $destfile : $!""; return; }
-			else { &error(""Failed to write to $destfile : $!""); }
+			else { &error(""Failed to write to "".&html_escape($destfile)."" : "".&html_escape(""$!"")); }
 			}
 		binmode(PFILE);		# For windows
 		while(defined($buf = &read_http_connection($h, 1024))) {
",1.0,3.0,1.0,tfidf
CVE-2017-15646,CVE-2017-15646/f74d8b1571cc23a3f972d8a102cecb47c5528a57,https://github.com/webmin/webmin/commit/f74d8b1571cc23a3f972d8a102cecb47c5528a57,"<s>Webmin before 1.860 has XSS with resultant remote code execution. Under the 'Others/File Manager' menu, there is a 'Download from remote URL' option to download a file from a remote server. After setting up a malicious server, one can wait for a file download request and then send an XSS payload that will lead to Remote Code Execution, as demonstrated by an OS command in the value attribute of a name='cmd' input element.</s>","<s>Populate cache even if there is nothing to read
</s>"," diff --git a/postfix/postfix-lib.pl b/postfix/postfix-lib.pl
index 3d62d9fa5..419b9ef01 100755
--- a/postfix/postfix-lib.pl
+++ b/postfix/postfix-lib.pl
@@ -738,6 +738,7 @@ sub get_maps
 			 $_[2] ? &get_maps_types_files($_[2]) :
 			         &get_maps_types_files(&get_real_value($_[0]));
 	my $number = 0;
+	$maps_cache{$_[0]} = [ ];
 	foreach my $maps_type_file (@maps_files)
 	{
 	    my ($maps_type, $maps_file) = @$maps_type_file;
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2022-31038,CVE-2022-31038/155cae1de8916fc3fde78f350763034b7422caee,https://github.com/gogs/gogs/commit/155cae1de8916fc3fde78f350763034b7422caee,"<s>Gogs is an open source self-hosted Git service. In versions of gogs prior to 0.12.9 `DisplayName` does not filter characters input from users, which leads to an XSS vulnerability when directly displayed in the issue list. This issue has been resolved in commit 155cae1d which sanitizes `DisplayName` prior to display to the user. All users of gogs are advised to upgrade. Users unable to upgrade should check their users' display names for malicious characters.</s>","<s>issues: sanitize `DisplayName` (#7009)
* issues: display issue posters `Name` instead of `DisplayName`
* sanitize display name
* update changelog
</s>"," diff --git a/CHANGELOG.md b/CHANGELOG.md
index e09a29cc..e81c32b2 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -23,6 +23,7 @@ All notable changes to Gogs are documented in this file.
 ### Fixed
 
 - _Security:_ OS Command Injection in file editor. [#7000](https://github.com/gogs/gogs/issues/7000)
+- _Security:_ Sanitize `DisplayName` in repository issue list. [#7009](https://github.com/gogs/gogs/pull/7009)
 - Unable to use LDAP authentication on ARM machines. [#6761](https://github.com/gogs/gogs/issues/6761)
 - Unable to init repository during creation on Windows. [#6967](https://github.com/gogs/gogs/issues/6967)
 - Mysterious panic on `Value not found for type *repo.HTTPContext`. [#6963](https://github.com/gogs/gogs/issues/6963)
",0.0,,1.0,lime
CVE-2022-31038,CVE-2022-31038/50e5766867165d7736a9afeb8c3499bed6dda129,https://github.com/gogs/gogs/commit/50e5766867165d7736a9afeb8c3499bed6dda129,"<s>Gogs is an open source self-hosted Git service. In versions of gogs prior to 0.12.9 `DisplayName` does not filter characters input from users, which leads to an XSS vulnerability when directly displayed in the issue list. This issue has been resolved in commit 155cae1d which sanitizes `DisplayName` prior to display to the user. All users of gogs are advised to upgrade. Users unable to upgrade should check their users' display names for malicious characters.</s>","<s>build: remove support of Go 1.17 (#7177)

</s>"," diff --git a/internal/auth/pam/pam.go b/internal/auth/pam/pam.go
index d251fae4..14f041ae 100644
--- a/internal/auth/pam/pam.go
+++ b/internal/auth/pam/pam.go
@@ -1,5 +1,4 @@
 //go:build pam
-// +build pam
 reserved
 // Copyright 2014 The Gogs Authors. All rights reserved.
 // Use of this source code is governed by a MIT-style
",1.0,1.0,0.0,lime
,,,,,,,,,
CVE-2018-12542,CVE-2018-12542/57a65dce6f4c5aa5e3ce7288685e7f3447eb8f3b,https://github.com/vert-x3/vertx-web/commit/57a65dce6f4c5aa5e3ce7288685e7f3447eb8f3b,"<s>In version from 3.0.0 to 3.5.3 of Eclipse Vert.x, the StaticHandler uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\' (forward slashes) sequences that can resolve to a location that is outside of that directory when running on Windows Operating Systems.</s>","<s>CVE-2018-12542: The StaticHandler uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\' (forward slashes) sequences that can resolve to a location that is outside of that directory when running on Windows Operating Systems. - fixes #1025
</s>"," diff --git a/vertx-web/src/main/java/io/vertx/ext/web/handler/impl/StaticHandlerImpl.java b/vertx-web/src/main/java/io/vertx/ext/web/handler/impl/StaticHandlerImpl.java
index 7e456617f..15f62d9a6 100644
--- a/vertx-web/src/main/java/io/vertx/ext/web/handler/impl/StaticHandlerImpl.java
+++ b/vertx-web/src/main/java/io/vertx/ext/web/handler/impl/StaticHandlerImpl.java
@@ -135,14 +135,27 @@ public class StaticHandlerImpl implements StaticHandler {
       if (log.isTraceEnabled()) log.trace(""Not GET or HEAD so ignoring request"");
       context.next();
     } else {
-      String path = Utils.removeDots(Utils.urlDecode(context.normalisedPath(), false));
-      // if the normalized path is null it cannot be resolved
+      // we are trying to match a URL path to a Filesystem path, so the first step
+      // is to url decode the normalized path so avoid misinterpretations
+      String path = Utils.urlDecode(context.normalisedPath(), false);
+
       if (path == null) {
+        // if the normalized path is null it cannot be resolved
         log.warn(""Invalid path: "" + context.request().path());
         context.next();
         return;
       }
 
+      if (File.separatorChar != '/') {
+        // although forward slashes are not path separators according to the rfc3986 if
+        // used directly to access the filesystem on Windows, they would be treated as such
+        // Instead of relying on the usual normalized method, all forward slashes must be
+        // replaced by backslashes in this handler.
+        path = path.replace(File.separatorChar, '/');
+      }
+      // clean the .. sequences according to rfc3986
+      path = Utils.removeDots(path);
+
       // only root is known for sure to be a directory. all other directories must be identified as such.
       if (!directoryListing && ""/"".equals(path)) {
         path = indexPage;
",1.0,3.0,1.0,lime
CVE-2018-12542,CVE-2018-12542/2da968725b66d3d5be108cf0dcd146ae5435a8f7,https://github.com/vert-x3/vertx-web/commit/2da968725b66d3d5be108cf0dcd146ae5435a8f7,"<s>In version from 3.0.0 to 3.5.3 of Eclipse Vert.x, the StaticHandler uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\' (forward slashes) sequences that can resolve to a location that is outside of that directory when running on Windows Operating Systems.</s>","<s>Verify https://github.com/vert-x3/vertx-auth/pull/243
</s>"," diff --git a/vertx-web/src/test/java/io/vertx/ext/web/handler/OAuth2AuthHandlerTest.java b/vertx-web/src/test/java/io/vertx/ext/web/handler/OAuth2AuthHandlerTest.java
index 2f3902f1c..50ef270f5 100644
--- a/vertx-web/src/test/java/io/vertx/ext/web/handler/OAuth2AuthHandlerTest.java
+++ b/vertx-web/src/test/java/io/vertx/ext/web/handler/OAuth2AuthHandlerTest.java
@@ -19,9 +19,13 @@ package io.vertx.ext.web.handler;
 import io.vertx.core.http.HttpMethod;
 import io.vertx.core.http.HttpServer;
 import io.vertx.core.json.JsonObject;
+import io.vertx.ext.auth.PubSecKeyOptions;
 import io.vertx.ext.auth.oauth2.OAuth2Auth;
 import io.vertx.ext.auth.oauth2.OAuth2ClientOptions;
 import io.vertx.ext.auth.oauth2.OAuth2FlowType;
+import io.vertx.ext.jwt.JWK;
+import io.vertx.ext.jwt.JWT;
+import io.vertx.ext.jwt.JWTOptions;
 import io.vertx.ext.web.WebTestBase;
 import org.junit.Test;
 
@@ -160,4 +164,107 @@ public class OAuth2AuthHandlerTest extends WebTestBase {
 
     server.close();
   }
+
+  @Test
+  public void testBearerOnlyWithJWT() throws Exception {
+
+    OAuth2Auth oauth = OAuth2Auth
+      .create(
+        vertx,
+        OAuth2FlowType.AUTH_CODE,
+        new OAuth2ClientOptions()
+          .setClientID(""dummy-client"")
+          .addPubSecKey(new PubSecKeyOptions()
+            .setAlgorithm(""RS256"")
+            .setPublicKey(
+              ""MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmuIC9Qvwoe/3tUpHkcUp\n"" +
+                ""vWmzQqnZtz3HBKbxzc/jBTxUHefJDs88Xjw5nNXhl4tXkHzFRAZHtDnwX074/2oc\n"" +
+                ""PRSWaBjHYXB771af91UPrc9fb4lh3W1a8hmQU6sgKlQVwDnUuePDkCmwKCsuyX0M\n"" +
+                ""wxuwOwEUo4r15NBh/H7FvuHVPnqWK1/kliYtQukF3svQkpZT6/puQ0bEOefROLB+\n"" +
+                ""EAPM0OAaDyknjxCZJenk9FIyC6skOKVaxW7CcE54lIUjS1GKFQc44/+T+u0VKSmh\n"" +
+                ""rRdBNcAhXmdpwjLoDTy/I8z+uqkKitdEVczCdleNqeb6b1kjPWS3VbLXxY/LIYlz\n"" +
+                ""uQIDAQAB"")
+          )
+      );
+
+    assertNotNull(oauth);
+
+    JWT jwt = new JWT().addJWK(new JWK(""RS256"", null,
+      ""MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCa4gL1C/Ch7/e1\n"" +
+        ""SkeRxSm9abNCqdm3PccEpvHNz+MFPFQd58kOzzxePDmc1eGXi1eQfMVEBke0OfBf\n"" +
+        ""Tvj/ahw9FJZoGMdhcHvvVp/3VQ+tz19viWHdbVryGZBTqyAqVBXAOdS548OQKbAo\n"" +
+        ""Ky7JfQzDG7A7ARSjivXk0GH8fsW+4dU+epYrX+SWJi1C6QXey9CSllPr+m5DRsQ5\n"" +
+        ""59E4sH4QA8zQ4BoPKSePEJkl6eT0UjILqyQ4pVrFbsJwTniUhSNLUYoVBzjj/5P6\n"" +
+        ""7RUpKaGtF0E1wCFeZ2nCMugNPL8jzP66qQqK10RVzMJ2V42p5vpvWSM9ZLdVstfF\n"" +
+        ""j8shiXO5AgMBAAECggEAIriwOQcoNuV4/qdcTA2LQe9ERJmXOUEcMKrMYntMRYw0\n"" +
+        ""v0+K/0ruGaIeuE4qeLLAOp/+CTXvNTQX8wXdREUhd3/6B/QmHm39GrasveHP1gM7\n"" +
+        ""PeHqkp1FWijo9hjS6SpYhfNxAQtSeCsgVqD3qCvkhIjchR3E5rTsUxN0JAq3ggb9\n"" +
+        ""WCJ2LUxOOTHAWL4cv7FIKfwU/bwjBdHbSLuh7em4IE8tzcFgh49281APprGb4a3d\n"" +
+        ""CPlIZC+CQmTFKPGzT0WDNc3EbPPKcx8ECRf1Zo94Tqnzv7FLgCmr0o4O9e6E3yss\n"" +
+        ""Uwp7EKPUQyAwBkc+pHwqUmOPqHB+z28JUOwqoD0vQQKBgQDNiXSydWh9BUWAleQU\n"" +
+        ""fgSF0bjlt38HVcyMKGC1xQhi8VeAfLJxGCGbdxsPFNCtMPDLRRyd4xHBmsCmPPli\n"" +
+        ""CFHD1UbfNuKma6azl6A86geuTolgrHoxp57tZwoBpG9JHoTA53pfBPxb8q39YXKh\n"" +
+        ""DSXsJVldxsHwzFAklj3ZqzWq3QKBgQDA6M/VW3SXEt1NWwMI+WGa/QKHDjLDhZzF\n"" +
+        ""F3iQTtzDDmA4louAzX1cykNo6Y7SpORi0ralml65iwT2HZtE8w9vbw4LNmBiHmlX\n"" +
+        ""AvpZSHT6/7nQeiFtxZu9cyw4GGpNSaeqp4Cq6TGYmfbq4nIdryzUU2AgsqSZyrra\n"" +
+        ""xh7K+2I4jQKBgGjC8xQy+7sdgLt1qvc29B8xMkkEKl8WwFeADSsY7plf4fW/mURD\n"" +
+        ""xH11S/l35pUgKNuysk9Xealws1kIIyRwkRx8DM+hLg0dOa64Thg+QQP7S9JWl0HP\n"" +
+        ""6hWfO15y7bYbNBcO5TShWe+T1lMb5E1qYjXnI5HEyP1vZjn/yi60MXqRAoGAe6F4\n"" +
+        ""+QLIwL1dSOMoGctBS4QU55so23e41fNJ2CpCf1uqPPn2Y9DOI/aYpxbv6n20xMTI\n"" +
+        ""O2+of37h6h1lUhX38XGZ7YOm15sn5ZTJ/whZuDbFzh9HZ0N6oTq7vyOelPO8WblJ\n"" +
+        ""077pgyRBQ51mhzGqKFVayPnUVZ/Ais7oEyxycU0CgYEAzEUhmN22ykywh0My83z/\n"" +
+        ""7yl2tyrlv2hcZbaP7+9eHdUafGG8jMTVD7jxhzAbiSo2UeyHUnAItDnLetLh89K6\n"" +
+        ""0oF3/rZLqugtb+f48dgRE/SDF4Itgp5fDqWHLhEW7ZhWCFlFgZ3sq0XryIxzFof0\n"" +
+        ""O/Fd1NnotirzTnob5ReblIM=""));
+
+    assertNotNull(jwt);
+
+
+    // lets mock a oauth2 server using code auth code flow
+    OAuth2AuthHandler oauth2Handler = OAuth2AuthHandler.create(oauth);
+
+    // protect everything under /protected
+    router.route(""/protected/*"").handler(oauth2Handler);
+    // mount some handler under the protected zone
+    router.route(""/protected/somepage"").handler(rc -> {
+      assertNotNull(rc.user());
+      rc.response().end(""Welcome to the protected resource!"");
+    });
+
+
+    testRequest(HttpMethod.GET, ""/protected/somepage"", 500, ""Internal Server Error"");
+    // Now try again with fake credentials
+    testRequest(HttpMethod.GET, ""/protected/somepage"", req -> req.putHeader(""Authorization"", ""Bearer 4adc339e0""), 401, ""Unauthorized"", ""Unauthorized"");
+    // Now try again with real credentials
+    String accessToken = jwt.sign(
+      new JsonObject(
+        ""{\n"" +
+          ""      \""iss\"": \""https://server.example.com\"",\n"" +
+          ""      \""aud\"": \""s6BhdRkqt3\"",\n"" +
+          ""      \""jti\"": \""a-123\"",\n"" +
+          ""      \",0.0,,0.0,lime
,,,,,,,,,
CVE-2019-16237,CVE-2019-16237/0968da1ff76e7443c2590f4182087bb501d9c8f5,https://github.com/dino/dino/commit/0968da1ff76e7443c2590f4182087bb501d9c8f5,<s>Dino before 2019-09-10 does not properly check the source of an MAM message in module/xep/0313_message_archive_management.vala.</s>,"<s>Only notify on last MAM message, only if not read
fixes #293
</s>"," diff --git a/xmpp-vala/src/module/xep/0313_message_archive_management.vala b/xmpp-vala/src/module/xep/0313_message_archive_management.vala
index 343a5fbd..00f8f99b 100644
--- a/xmpp-vala/src/module/xep/0313_message_archive_management.vala
+++ b/xmpp-vala/src/module/xep/0313_message_archive_management.vala
@@ -14,7 +14,8 @@ public class Module : XmppStreamModule {
 
     private ReceivedPipelineListener received_pipeline_listener = new ReceivedPipelineListener();
 
-    public void query_archive(XmppStream stream, string? jid, DateTime? start, DateTime? end) {
+    public delegate void OnFinished(XmppStream stream);
+    public void query_archive(XmppStream stream, string? jid, DateTime? start, DateTime? end, owned OnFinished? on_finished = null) {
         if (stream.get_flag(Flag.IDENTITY) == null) return;
 
         DataForms.DataForm data_form = new DataForms.DataForm();
@@ -38,7 +39,7 @@ public class Module : XmppStreamModule {
         }
         StanzaNode query_node = new StanzaNode.build(""query"", NS_VER(stream)).add_self_xmlns().put_node(data_form.get_submit_node());
         Iq.Stanza iq = new Iq.Stanza.set(query_node);
-        stream.get_module(Iq.Module.IDENTITY).send_iq(stream, iq, page_through_results);
+        stream.get_module(Iq.Module.IDENTITY).send_iq(stream, iq, (stream, iq) => { page_through_results(stream, iq, on_finished); });
     }
 
     public override void attach(XmppStream stream) {
@@ -53,10 +54,11 @@ public class Module : XmppStreamModule {
     public override string get_ns() { return NS_URI; }
     public override string get_id() { return IDENTITY.id; }
 
-    private static void page_through_results(XmppStream stream, Iq.Stanza iq) {
+    private static void page_through_results(XmppStream stream, Iq.Stanza iq, owned OnFinished? on_finished = null) {
         string? last = iq.stanza.get_deep_string_content(NS_VER(stream) + "":fin"", ""http://jabber.org/protocol/rsm"" + "":set"", ""last"");
         if (last == null) {
             stream.get_flag(Flag.IDENTITY).cought_up = true;
+            if (on_finished != null) on_finished(stream);
             return;
         }
 
@@ -67,7 +69,7 @@ public class Module : XmppStreamModule {
                     )
                 )
             );
-        stream.get_module(Iq.Module.IDENTITY).send_iq(stream, paging_iq, page_through_results);
+        stream.get_module(Iq.Module.IDENTITY).send_iq(stream, paging_iq, (stream, iq) => { page_through_results(stream, iq, on_finished); });
     }
 
     private void query_availability(XmppStream stream) {
",0.0,,0.0,tfidf
CVE-2019-16237,CVE-2019-16237/307f16cc86dd2b95aa02ab8a85110e4a2d5e7363,https://github.com/dino/dino/commit/307f16cc86dd2b95aa02ab8a85110e4a2d5e7363,<s>Dino before 2019-09-10 does not properly check the source of an MAM message in module/xep/0313_message_archive_management.vala.</s>,"<s>Fix check of source of MAM message
</s>"," diff --git a/xmpp-vala/src/module/xep/0313_message_archive_management.vala b/xmpp-vala/src/module/xep/0313_message_archive_management.vala
index 674224c9..e99193a7 100644
--- a/xmpp-vala/src/module/xep/0313_message_archive_management.vala
+++ b/xmpp-vala/src/module/xep/0313_message_archive_management.vala
@@ -94,11 +94,16 @@ public class ReceivedPipelineListener : StanzaListener<MessageStanza> {
     public override string[] after_actions { get { return after_actions_const; } }
 
     public override async bool run(XmppStream stream, MessageStanza message) {
-        //        if (message.from != stream.remote_name) return;
         if (stream.get_flag(Flag.IDENTITY) == null) return false;
 
         StanzaNode? message_node = message.stanza.get_deep_subnode(NS_VER(stream) + "":result"", ""urn:xmpp:forward:0:forwarded"", Xmpp.NS_URI + "":message"");
         if (message_node != null) {
+            // MAM messages must come from our server // TODO or a MUC server
+            if (!message.from.equals(stream.get_flag(Bind.Flag.IDENTITY).my_jid.bare_jid)) {
+                warning(""Received alledged MAM message from %s, ignoring"", message.from.to_string());
+                return true;
+            }
+
             StanzaNode? forward_node = message.stanza.get_deep_subnode(NS_VER(stream) + "":result"", ""urn:xmpp:forward:0:forwarded"", DelayedDelivery.NS_URI + "":delay"");
             DateTime? datetime = DelayedDelivery.Module.get_time_for_node(forward_node);
             message.add_flag(new MessageFlag(datetime));
",1.0,3.0,1.0,tfidf
,,,,,,,,,
CVE-2019-11812,CVE-2019-11812/3a085a6ceea00b3ab674a984dd56c1846ef775ff,https://github.com/MISP/MISP/commit/3a085a6ceea00b3ab674a984dd56c1846ef775ff,"<s>A persistent XSS issue was discovered in app/View/Helper/CommandHelper.php in MISP before 2.4.107. JavaScript can be included in the discussion interface, and can be triggered by clicking on the link.</s>","<s>fix: [security] Fix persistent xss via discussion links via javascript:// links
- low impact as it requires user interaction to trigger
- as reported by João Lucas Melo Brasio from Elytron Security S.A. (https://elytronsecurity.com)
</s>"," diff --git a/app/View/Helper/CommandHelper.php b/app/View/Helper/CommandHelper.php
index 8cc94c687..49c828774 100644
--- a/app/View/Helper/CommandHelper.php
+++ b/app/View/Helper/CommandHelper.php
@@ -68,10 +68,14 @@ App::uses('AppHelper', 'View/Helper');
                             $replacement = '%MALFORMED URL%';
                         } else {
                             if (filter_var(str_replace('$1', $data, $this->__replacement[$trigger]['url']), FILTER_VALIDATE_URL)) {
-                                $replacement = $this->Html->link(
-                                    str_replace('$1', $data, $this->__replacement[$trigger]['text']),
-                                    str_replace('$1', $data, $this->__replacement[$trigger]['url'])
-                                );
+                                if (substr($data, 0, 7) === 'http://' || substr($data, 0, 8) === 'https://') {
+                                    $replacement = $this->Html->link(
+                                        str_replace('$1', $data, $this->__replacement[$trigger]['text']),
+                                        str_replace('$1', $data, $this->__replacement[$trigger]['url'])
+                                    );
+                                } else {
+                                    $replacement = '%MALFORMED URL%';
+                                }
                             } else {
                                 $replacement = '%MALFORMED URL%';
                             }
",1.0,1.0,1.0,lime
CVE-2019-11812,CVE-2019-11812/6065023d23647288607baf593193aba408c8d00e,https://github.com/MISP/MISP/commit/6065023d23647288607baf593193aba408c8d00e,"<s>A persistent XSS issue was discovered in app/View/Helper/CommandHelper.php in MISP before 2.4.107. JavaScript can be included in the discussion interface, and can be triggered by clicking on the link.</s>","<s>fix: [UI] Notice errors fixed in the discussion threads
</s>"," diff --git a/app/View/Helper/CommandHelper.php b/app/View/Helper/CommandHelper.php
index 49c828774..9f0ae9bf1 100644
--- a/app/View/Helper/CommandHelper.php
+++ b/app/View/Helper/CommandHelper.php
@@ -36,7 +36,7 @@ App::uses('AppHelper', 'View/Helper');
             $closing = preg_match('%\[/' . $trigger . '\]%isU', $string, $closing_matches, PREG_OFFSET_CAPTURE);
             $opening_len = strlen($trigger) + 2;
             $closing_len = $opening_len + 1;
-            if ((count($opening) !== count($closing))) return false;
+            if ((count($opening_matches) !== count($closing_matches))) return false;
             $pairs = array();
             $rearrangedTags = array();
             foreach ($opening_matches as $opening_tag) {
",0.0,,0.0,lime
,,,,,,,,,
CVE-2020-10246,CVE-2020-10246/218ea0333c037682ee3dc6b0d03197420f62a9e2,https://github.com/MISP/MISP/commit/218ea0333c037682ee3dc6b0d03197420f62a9e2,<s>MISP 2.4.122 has reflected XSS via unsanitized URL parameters. This is related to app/View/Users/statistics_orgs.ctp.</s>,"<s>new: [dashboard] added a way to auto reload widgets
- has to be defined in the code of the widget
</s>"," diff --git a/app/View/Elements/dashboard/Widgets/SimpleList.ctp b/app/View/Elements/dashboard/Widgets/SimpleList.ctp
new file mode 100644
index 000000000..273a6c2ff
--- /dev/null
+++ b/app/View/Elements/dashboard/Widgets/SimpleList.ctp
@@ -0,0 +1,14 @@
+<?php
+table style="" foreach ($data as $element) {
+<?php
+    if (!empty($element['type']) && $element['type'] === 'gap') {
+ $max = max($data['logarithmic echo '<br />';
+ else {
+    } else {
+max = max($data['data']);
+ echo sprintf(
+    foreach ($data['data'] as $entry => $ '<div><span class=""bold"">%s</span>: <span class=""%s"">%s</span>%s</div>',
+arithmic'])) {
+        h($element['title']),
+['logarithmic'][$entry];
+    empty($element['class']) ? 'blue' : h($element['class']),
+           '<tr><td !isset($element['value']) ? '' : h($element['value']),
+tr>',
+           empty($element['html']) ? '' : $element['html']
+          h($ );
++       }
+   ' }
100%',
+            sprintf(
+                '<div title=""%s"" style=""%s"">%s</div>',
+                h($entry) . ': ' . h($count),
+                sprintf(
+                    'background-color:%s; width:%s; color:white; text-align:center;',
+                    (empty($data['colours'][$entry]) ? '#0088cc' : h($data['colours'][$entry])),
+                    100 * h($value) / $max . '%;'
+                ),
+                h($count)
+            ),
+            '&nbsp;'
+        );
+    }
+?>
+</table>
",0.0,,0.0,lime
CVE-2020-10246,CVE-2020-10246/43a0757fb33769d9ad4ca09e8f2ac572f9f6a491,https://github.com/MISP/MISP/commit/43a0757fb33769d9ad4ca09e8f2ac572f9f6a491,<s>MISP 2.4.122 has reflected XSS via unsanitized URL parameters. This is related to app/View/Users/statistics_orgs.ctp.</s>,"<s>fix: [security] Fix reflected xss via unsanitized URL parameters
- As reported by an external pentest company on behalf of the Centre for Cyber security Belgium (CCB)
</s>"," diff --git a/app/View/Users/statistics_orgs.ctp b/app/View/Users/statistics_orgs.ctp
index 3bbf4c836..6f22950ea 100644
--- a/app/View/Users/statistics_orgs.ctp
+++ b/app/View/Users/statistics_orgs.ctp
@@ -12,7 +12,9 @@
                 'external' => array('selected' => false, 'text' => __('Known remote organisations')),
                 'all' => array('selected' => false, 'text' => __('All organisations'))
         );
-        $types[$scope]['selected'] = true;
+        if (isset($types[$scope])) {
+            $types[$scope]['selected'] = true;
+        }
     ?>
     <h4><?php echo __('Organisation list');?></h4>
     <p><?php echo __('Quick overview over the organisations residing on or known by this instance.');?></p>
",1.0,3.0,1.0,lime
,,,,,,,,,
CVE-2020-36364,CVE-2020-36364/5ab1e37dc8d6415d04354e1a116f3d82e9555f5c,https://github.com/smartstore/SmartStoreNET/commit/5ab1e37dc8d6415d04354e1a116f3d82e9555f5c,<s>An issue was discovered in Smartstore (aka SmartStoreNET) before 4.1.0. Administration/Controllers/ImportController.cs allows path traversal (for copy and delete actions) in the ImportController.Create method via a TempFileName field.</s>,"<s>Resolves #2112 Path traversal vulnerability
</s>"," diff --git a/src/Presentation/SmartStore.Web/Administration/Controllers/ImportController.cs b/src/Presentation/SmartStore.Web/Administration/Controllers/ImportController.cs
index 61bc92246..c749d82d2 100644
--- a/src/Presentation/SmartStore.Web/Administration/Controllers/ImportController.cs
+++ b/src/Presentation/SmartStore.Web/Administration/Controllers/ImportController.cs
@@ -384,6 +384,11 @@ namespace SmartStore.Admin.Controllers
         [Permission(Permissions.Configuration.Import.Create)]
         public ActionResult Create(ImportProfileModel model)
         {
+            if (PathHelper.HasInvalidFileNameChars(model.TempFileName))
+            {
+                return new HttpStatusCodeResult(HttpStatusCode.BadRequest, ""Invalid file name."");
+            }
+
             var importFile = Path.Combine(FileSystemHelper.TempDirTenant(), model.TempFileName.EmptyNull());
 
             if (System.IO.File.Exists(importFile))
",1.0,3.0,1.0,lime
CVE-2020-36364,CVE-2020-36364/5c85bdc9cf4d98a5808b0eb5584a90e7c5f41acb,https://github.com/smartstore/SmartStoreNET/commit/5c85bdc9cf4d98a5808b0eb5584a90e7c5f41acb,<s>An issue was discovered in Smartstore (aka SmartStoreNET) before 4.1.0. Administration/Controllers/ImportController.cs allows path traversal (for copy and delete actions) in the ImportController.Create method via a TempFileName field.</s>,"<s>Export: an empty export file was created at the end of an export when using the batch-size option
</s>"," diff --git a/src/Libraries/SmartStore.Services/DataExchange/Export/ExportDataSegmenter.cs b/src/Libraries/SmartStore.Services/DataExchange/Export/ExportDataSegmenter.cs
index cb44a3961..fbab47fab 100644
--- a/src/Libraries/SmartStore.Services/DataExchange/Export/ExportDataSegmenter.cs
+++ b/src/Libraries/SmartStore.Services/DataExchange/Export/ExportDataSegmenter.cs
@@ -121,7 +121,7 @@ namespace SmartStore.Services.DataExchange.Export

 
 
 ## Smartstore 4.0.1
       return false;
                 }
 
-				return true;
+				return RecordCount < TotalRecords;
 			}
 		}
 
",0.0,,0.0,lime
,,,,,,,,,
CVE-2016-10267,CVE-2016-10267/43bc256d8ae44b92d2734a3c5bc73957a4d7c1ec,https://github.com/vadz/libtiff/commit/43bc256d8ae44b92d2734a3c5bc73957a4d7c1ec,"<s>LibTIFF 4.0.7 allows remote attackers to cause a denial of service (divide-by-zero error and application crash) via a crafted TIFF image, related to libtiff/tif_ojpeg.c:816:8.</s>","<s>* libtiff/tif_ojpeg.c: make OJPEGDecode() early exit in case of failure in
OJPEGPreDecode(). This will avoid a divide by zero, and potential other issues.
Reported by Agostino Sarubbo.
Fixes http://bugzilla.maptools.org/show_bug.cgi?id=2611
</s>"," diff --git a/libtiff/tif_ojpeg.c b/libtiff/tif_ojpeg.c
index 1ccc3f9b..f19e8fd0 100644
--- a/libtiff/tif_ojpeg.c
+++ b/libtiff/tif_ojpeg.c
@@ -244,6 +244,7 @@ typedef enum {
 
 typedef struct {
 	TIFF* tif;
+        int decoder_ok;
 	#ifndef LIBJPEG_ENCAP_EXTERNAL
 	JMP_BUF exit_jmpbuf;
 	#endif
@@ -722,6 +723,7 @@ OJPEGPreDecode(TIFF* tif, uint16 s)
 		}
 		sp->write_curstrile++;
 	}
+	sp->decoder_ok = 1;
 	return(1);
 }
 
@@ -784,8 +786,14 @@ OJPEGPreDecodeSkipScanlines(TIFF* tif)
 static int
 OJPEGDecode(TIFF* tif, uint8* buf, tmsize_t cc, uint16 s)
 {
+        static const char module[]=""OJPEGDecode"";
 	OJPEGState* sp=(OJPEGState*)tif->tif_data;
 	(void)s;
+        if( !sp->decoder_ok )
+        {
+            TIFFErrorExt(tif->tif_clientdata,module,""Cannot decode: decoder not correctly initialized"");
+            return 0;
+        }
 	if (sp->libjpeg_jpeg_query_style==0)
 	{
 		if (OJPEGDecodeRaw(tif,buf,cc)==0)
",1.0,3.0,1.0,tfidf
CVE-2016-10267,CVE-2016-10267/8283e4d1b7e53340684d12932880cbcbaf23a8c1,https://github.com/vadz/libtiff/commit/8283e4d1b7e53340684d12932880cbcbaf23a8c1,"<s>LibTIFF 4.0.7 allows remote attackers to cause a denial of service (divide-by-zero error and application crash) via a crafted TIFF image, related to libtiff/tif_ojpeg.c:816:8.</s>","<s>* libtiff/tif_ojpeg.c: fix leak in OJPEGReadHeaderInfoSecTablesAcTable
when read fails.
Patch by Nicolás Peña.
Fixes http://bugzilla.maptools.org/show_bug.cgi?id=2659
</s>"," diff --git a/libtiff/tif_ojpeg.c b/libtiff/tif_ojpeg.c
index f19e8fd0..b92f0ebd 100644
--- a/libtiff/tif_ojpeg.c
+++ b/libtiff/tif_ojpeg.c
@@ -1918,7 +1918,10 @@ OJPEGReadHeaderInfoSecTablesAcTable(TIFF* tif)
 				rb[sizeof(uint32)+5+n]=o[n];
 			p=(uint32)TIFFReadFile(tif,&(rb[sizeof(uint32)+21]),q);
 			if (p!=q)
+                        {
+                                _TIFFfree(rb);
 				return(0);
+                        }
 			sp->actable[m]=rb;
 			sp->sos_tda[m]=(sp->sos_tda[m]|m);
 		}
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2014-3576,CVE-2014-3576/00921f22ff9a8792d7663ef8fadd4823402a6324,https://github.com/apache/activemq/commit/00921f22ff9a8792d7663ef8fadd4823402a6324,<s>The processControlCommand function in broker/TransportConnection.java in Apache ActiveMQ before 5.11.0 allows remote attackers to cause a denial of service (shutdown) via a shutdown command.</s>,"<s>Remove unused ConnectionControl handling. 
</s>"," diff --git a/activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java b/activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java
index 22a63b8cf..5bb7ec1ec 100755
--- a/activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java
+++ b/activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java
@@ -1534,10 +1534,6 @@ public class TransportConnection implements Connection, Task, CommandVisitor {
 
     @Override
     public Response processControlCommand(ControlCommand command) throws Exception {
-        String control = command.getCommand();
-        if (control != null && control.equals(""shutdown"")) {
-            System.exit(0);
-        }
         return null;
     }
 
",1.0,2.0,1.0,lime
CVE-2014-3576,CVE-2014-3576/d54e0d6ab590b6a6148a5e2629c45b95d3f40eb8,https://github.com/apache/activemq/commit/d54e0d6ab590b6a6148a5e2629c45b95d3f40eb8,<s>The processControlCommand function in broker/TransportConnection.java in Apache ActiveMQ before 5.11.0 allows remote attackers to cause a denial of service (shutdown) via a shutdown command.</s>,"<s>https://issues.apache.org/jira/browse/AMQ-5198
member variable scheduler assignment escapes the synchronization block
before the scheduler instance is fully initialized. 
</s>"," diff --git a/activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java b/activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java
index 2df860738..925231064 100755
--- a/activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java
+++ b/activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java
@@ -2556,8 +2556,9 @@ public class ActiveMQConnection implements Connection, TopicConnection, QueueCon
                 if (result == null) {
                     checkClosed();
                     try {
-                        result = scheduler = new Scheduler(""ActiveMQConnection[""+info.getConnectionId().getValue()+""] Scheduler"");
-                        scheduler.start();
+                        result = new Scheduler(""ActiveMQConnection[""+info.getConnectionId().getValue()+""] Scheduler"");
+                        result.start();
+                        scheduler = result;
                     } catch(Exception e) {
                         throw JMSExceptionSupport.create(e);
                     }
",0.0,,0.0,lime
,,,,,,,,,
CVE-2020-27611,CVE-2020-27611/18c20261e15c31ecf1d9a552182e371296f2ab64,https://github.com/bigbluebutton/bigbluebutton/commit/18c20261e15c31ecf1d9a552182e371296f2ab64,"<s>BigBlueButton through 2.2.28 uses STUN/TURN resources from a third party, which may represent an unintended endpoint.</s>","<s>Change default value of iceGatheringTimeout to current's SIP.js default
For some reason (still investigating), using turn/coturn on 443/tcp makes firefox's iceGathering process (during echo test) takes 12+ seconds (tested on webrtc's trickle page with multiple instances).
This was found when testing the current default (15s) on production with a private turn/coturn server on port 443/tcp. For default bbb setup (stun only), echo test still runs fast.
To avoid adding extra delay to iceGathering on this scenario (Firefox + turn on 443/tcp), i am just setting the default value back to the 5s (old default).
So , for those who wants to reduce the 1004 occurrences, increasing the iceGatheringTimeout could help (just be aware this adds delay on the mentioned scenario).
</s>"," diff --git a/bigbluebutton-html5/imports/api/audio/client/bridge/sip.js b/bigbluebutton-html5/imports/api/audio/client/bridge/sip.js
index 8cdbc628fe..73aaab427f 100755
--- a/bigbluebutton-html5/imports/api/audio/client/bridge/sip.js
+++ b/bigbluebutton-html5/imports/api/audio/client/bridge/sip.js
@@ -30,7 +30,7 @@ const AUDIO_SESSION_NUM_KEY = 'AudioSessionNumber';
 const USER_AGENT_RECONNECTION_ATTEMPTS = 3;
 const USER_AGENT_RECONNECTION_DELAY_MS = 5000;
 const USER_AGENT_CONNECTION_TIMEOUT_MS = 5000;
-const ICE_GATHERING_TIMEOUT = MEDIA.iceGatheringTimeout || 15000;
+const ICE_GATHERING_TIMEOUT = MEDIA.iceGatheringTimeout || 5000;
 
 const getAudioSessionNumber = () => {
   let currItem = parseInt(sessionStorage.getItem(AUDIO_SESSION_NUM_KEY), 10);
",1.0,3.0,0.0,lime
CVE-2020-27611,CVE-2020-27611/d0bc77c3dbd858295004f15d7a57ec35e6b203d6,https://github.com/bigbluebutton/bigbluebutton/commit/d0bc77c3dbd858295004f15d7a57ec35e6b203d6,"<s>BigBlueButton through 2.2.28 uses STUN/TURN resources from a third party, which may represent an unintended endpoint.</s>","<s>Updating stun: for bbb-web to use Google's stun server
</s>"," diff --git a/bigbluebutton-web/grails-app/conf/spring/turn-stun-servers.xml b/bigbluebutton-web/grails-app/conf/spring/turn-stun-servers.xml
index b36963d3c5..90913545e0 100755
--- a/bigbluebutton-web/grails-app/conf/spring/turn-stun-servers.xml
+++ b/bigbluebutton-web/grails-app/conf/spring/turn-stun-servers.xml
@@ -25,7 +25,7 @@ with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
             "">
 
     <bean id=""stun1"" class=""org.bigbluebutton.web.services.turn.StunServer"">
-        <constructor-arg index=""0"" value=""stun:stun.freeswitch.org""/>
+        <constructor-arg index=""0"" value=""stun:stun.l.google.com:19302""/>
     </bean>
 
     <!--bean id=""stun2"" class=""org.bigbluebutton.web.services.turn.StunServer"">
",0.0,,1.0,lime
,,,,,,,,,
CVE-2019-20398,CVE-2019-20398/7852b272ef77f8098c35deea6c6f09cb78176f08,https://github.com/CESNET/libyang/commit/7852b272ef77f8098c35deea6c6f09cb78176f08,<s>A NULL pointer dereference is present in libyang before v1.0-r3 in the function lys_extension_instances_free() due to a copy of unresolved extensions in lys_restr_dup(). Applications that use libyang to parse untrusted input yang files may crash.</s>,"<s>schema tree BUGFIX do not copy unresolved exts in groupings restrictions
Fixes #773
</s>"," diff --git a/src/tree_schema.c b/src/tree_schema.c
index 4ffd9efc5..d29b63760 100755
--- a/src/tree_schema.c
+++ b/src/tree_schema.c
@@ -1601,8 +1601,11 @@ lys_restr_dup(struct lys_module *mod, struct lys_restr *old, int size, int shall
     LY_CHECK_ERR_RETURN(!result, LOGMEM(mod->ctx), NULL);
 
     for (i = 0; i < size; i++) {
-        result[i].ext_size = old[i].ext_size;
-        lys_ext_dup(mod->ctx, mod, old[i].ext, old[i].ext_size, &result[i], LYEXT_PAR_RESTR, &result[i].ext, shallow, unres);
+        /* copying unresolved extensions is not supported */
+        if (unres_schema_find(unres, -1, (void *)&old[i].ext, UNRES_EXT) == -1) {
+            result[i].ext_size = old[i].ext_size;
+            lys_ext_dup(mod->ctx, mod, old[i].ext, old[i].ext_size, &result[i], LYEXT_PAR_RESTR, &result[i].ext, shallow, unres);
+        }
         result[i].expr = lydict_insert(mod->ctx, old[i].expr, 0);
         result[i].dsc = lydict_insert(mod->ctx, old[i].dsc, 0);
         result[i].ref = lydict_insert(mod->ctx, old[i].ref, 0);
",1.0,3.0,1.0,tfidf
CVE-2019-20398,CVE-2019-20398/bdb596ddc07596fa212f231135b87d0b9178f6f8,https://github.com/CESNET/libyang/commit/bdb596ddc07596fa212f231135b87d0b9178f6f8,<s>A NULL pointer dereference is present in libyang before v1.0-r3 in the function lys_extension_instances_free() due to a copy of unresolved extensions in lys_restr_dup(). Applications that use libyang to parse untrusted input yang files may crash.</s>,"<s>resolve BUGFIX handle yet unresolved if-features
Fixes #772
</s>"," diff --git a/src/resolve.c b/src/resolve.c
index e8bd75766..af83bdfbf 100644
--- a/src/resolve.c
+++ b/src/resolve.c
@@ -1402,7 +1402,7 @@ resolve_iffeature(struct lys_iffeature *expr)
 {
     int index_e = 0, index_f = 0;
 
-    if (expr->expr) {
+    if (expr->expr && expr->features[0]) {
         return resolve_iffeature_recursive(expr, &index_e, &index_f);
     }
     return 0;
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2021-44273,CVE-2021-44273/6a3d4fef6b6ffc04e337e259661911cd077537cf,https://github.com/e2guardian/e2guardian/commit/6a3d4fef6b6ffc04e337e259661911cd077537cf,"<s>e2guardian v5.4.x <= v5.4.3r is affected by missing SSL certificate validation in the SSL MITM engine. In standalone mode (i.e., acting as a proxy or a transparent proxy), with SSL MITM enabled, e2guardian, if built with OpenSSL v1.1.x, did not validate hostnames in certificates of the web servers that it connected to, and thus was itself vulnerable to MITM attacks.</s>","<s>Update version to v5.4.5
</s>"," diff --git a/configure.ac b/configure.ac
index 07b8979a..229a383a 100644
--- a/configure.ac
+++ b/configure.ac
@@ -4,7 +4,7 @@
 AC_DEFINE([__SSLMITM],[""""],[Define to enable SSL MITM])
 
 AC_PREREQ(2.57)
-AC_INIT(e2guardian, 5.4.3r)
+AC_INIT(e2guardian, 5.4.4)
 AM_INIT_AUTOMAKE
 AC_CONFIG_HEADERS([e2config.h])
 AC_CONFIG_MACRO_DIR([m4])
",0.0,,0.0,lime
CVE-2021-44273,CVE-2021-44273/eae46a7e2a57103aadca903c4a24cca94dc502a2,https://github.com/e2guardian/e2guardian/commit/eae46a7e2a57103aadca903c4a24cca94dc502a2,"<s>e2guardian v5.4.x <= v5.4.3r is affected by missing SSL certificate validation in the SSL MITM engine. In standalone mode (i.e., acting as a proxy or a transparent proxy), with SSL MITM enabled, e2guardian, if built with OpenSSL v1.1.x, did not validate hostnames in certificates of the web servers that it connected to, and thus was itself vulnerable to MITM attacks.</s>","<s>Fix bug #707 cert hostnames not being checked
- only happened when openssl v1.1 is used
</s>"," diff --git a/src/Socket.cpp b/src/Socket.cpp
index 6ef9619c..2b687ef5 100644
--- a/src/Socket.cpp
+++ b/src/Socket.cpp
@@ -377,6 +377,10 @@ int Socket::startSslClient(const std::string &certificate_path, String hostname)
     //fcntl(this->getFD() ,F_SETFL, O_NONBLOCK); // blocking mode used currently
     SSL_set_fd(ssl, this->getFD());
     SSL_set_tlsext_host_name(ssl, hostname.c_str());
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#else
+  X509_VERIFY_PARAM_set1_host(SSL_get0_param(ssl),hostname.c_str(),0);
+#endif
 
     //make io non blocking as select wont tell us if we can do a read without blocking
     //BIO_set_nbio(SSL_get_rbio(ssl),1l);  // blocking mode used currently
",1.0,3.0,1.0,lime
,,,,,,,,,
CVE-2017-5545,CVE-2017-5545/7391a506352c009fe044dead7baad9e22dd279ee,https://github.com/libimobiledevice/libplist/commit/7391a506352c009fe044dead7baad9e22dd279ee,<s>The main function in plistutil.c in libimobiledevice libplist through 1.12 allows attackers to obtain sensitive information from process memory or cause a denial of service (buffer over-read) via Apple Property List data that is too short.</s>,"<s>plistutil: Prevent OOB heap buffer read by checking input size
As pointed out in #87 plistutil would do a memcmp with a heap buffer
without checking the size. If the size is less than 8 it would read
beyond the bounds of this heap buffer. This commit prevents that.
</s>"," diff --git a/tools/plistutil.c b/tools/plistutil.c
index 6451604..e943e76 100644
--- a/tools/plistutil.c
+++ b/tools/plistutil.c
@@ -129,6 +129,12 @@ int main(int argc, char *argv[])
     }
 
     stat(options->in_file, &filestats);
+
+    if (filestats.st_size < 8) {
+        printf(""ERROR: Input file is too small to contain valid plist data.\n"");
+        return -1;
+    }
+
     plist_entire = (char *) malloc(sizeof(char) * (filestats.st_size + 1));
     read_size = fread(plist_entire, sizeof(char), filestats.st_size, iplist);
     fclose(iplist);
",1.0,2.0,1.0,lime
CVE-2017-5545,CVE-2017-5545/66932417846c68add043d2d5129bcf40d3a5d08c,https://github.com/libimobiledevice/libplist/commit/66932417846c68add043d2d5129bcf40d3a5d08c,<s>The main function in plistutil.c in libimobiledevice libplist through 1.12 allows attackers to obtain sensitive information from process memory or cause a denial of service (buffer over-read) via Apple Property List data that is too short.</s>,"<s>plistutil: Use static buffer for stat()
</s>"," diff --git a/tools/plistutil.c b/tools/plistutil.c
index fc0d7c0..4c17ac7 100644
--- a/tools/plistutil.c
+++ b/tools/plistutil.c
@@ -112,13 +112,12 @@ int main(int argc, char *argv[])
     uint32_t size = 0;
     int read_size = 0;
     char *plist_entire = NULL;
-    struct stat *filestats = (struct stat *) malloc(sizeof(struct stat));
+    struct stat filestats;
     options_t *options = parse_arguments(argc, argv);
 
     if (!options)
     {
         print_usage(argc, argv);
-        free(filestats);
         return 0;
     }
 
@@ -127,9 +126,9 @@ int main(int argc, char *argv[])
     if (!iplist)
         return 1;
 
-    stat(options->in_file, filestats);
-    plist_entire = (char *) malloc(sizeof(char) * (filestats->st_size + 1));
-    read_size = fread(plist_entire, sizeof(char), filestats->st_size, iplist);
+    stat(options->in_file, &filestats);
+    plist_entire = (char *) malloc(sizeof(char) * (filestats.st_size + 1));
+    read_size = fread(plist_entire, sizeof(char), filestats.st_size, iplist);
     fclose(iplist);
 
     // convert from binary to xml or vice-versa
@@ -145,7 +144,6 @@ int main(int argc, char *argv[])
     }
     plist_free(root_node);
     free(plist_entire);
-    free(filestats);
 
     if (plist_out)
     {
",0.0,,0.0,lime
,,,,,,,,,
CVE-2018-10360,CVE-2018-10360/76c55eae2f9b0b378332762f6dce544d05eb24d7,https://github.com/file/file/commit/76c55eae2f9b0b378332762f6dce544d05eb24d7,<s>The do_core_note function in readelf.c in libmagic.a in file 5.33 allows remote attackers to cause a denial of service (out-of-bounds read and application crash) via a crafted ELF file.</s>,"<s>Print the Go Build-ID like we do for other elf binaries
</s>"," diff --git a/src/readelf.c b/src/readelf.c
index 1f41b461..db0b35a5 100644
--- a/src/readelf.c
+++ b/src/readelf.c
@@ -27,7 +27,7 @@
 #include ""file.h""
 
 #ifndef lint
-FILE_RCSID(""@(#)$File: readelf.c,v 1.143 2018/06/09 16:00:06 christos Exp $"")
+FILE_RCSID(""@(#)$File: readelf.c,v 1.144 2018/07/08 23:37:33 christos Exp $"")
 #endif
 
 #ifdef BUILTIN_ELF
@@ -556,6 +556,13 @@ do_bid_note(struct magic_set *ms, unsigned char *nbuf, uint32_t type,
 			return 1;
 		return 1;
 	}
+	if (namesz == 4 && strcmp((char *)&nbuf[noff], ""Go"") == 0 &&
+	    type == NT_GO_BUILD_ID && descsz < 128) {
+		if (file_printf(ms, "", Go BuildID=%s"",
+		    (char *)&nbuf[doff]) == -1)
+			return 1;
+		return 1;
+	}
 	return 0;
 }
 
",0.0,,0.0,lime
CVE-2018-10360,CVE-2018-10360/a642587a9c9e2dd7feacdf513c3643ce26ad3c22,https://github.com/file/file/commit/a642587a9c9e2dd7feacdf513c3643ce26ad3c22,<s>The do_core_note function in readelf.c in libmagic.a in file 5.33 allows remote attackers to cause a denial of service (out-of-bounds read and application crash) via a crafted ELF file.</s>,"<s>Avoid reading past the end of buffer (Rui Reis)
</s>"," diff --git a/src/readelf.c b/src/readelf.c
index 79c83f9f..1f41b461 100644
--- a/src/readelf.c
+++ b/src/readelf.c
@@ -27,7 +27,7 @@
 #include ""file.h""
 
 #ifndef lint
-FILE_RCSID(""@(#)$File: readelf.c,v 1.142 2018/05/24 18:08:01 christos Exp $"")
+FILE_RCSID(""@(#)$File: readelf.c,v 1.143 2018/06/09 16:00:06 christos Exp $"")
 #endif
 
 #ifdef BUILTIN_ELF
@@ -842,7 +842,8 @@ do_core_note(struct magic_set *ms, unsigned char *nbuf, uint32_t type,
 
 				cname = (unsigned char *)
 				    &nbuf[doff + prpsoffsets(i)];
-				for (cp = cname; *cp && isprint(*cp); cp++)
+				for (cp = cname; cp < nbuf + size && *cp
+				    && isprint(*cp); cp++)
 					continue;
 				/*
 				 * Linux apparently appends a space at the end
",1.0,1.0,1.0,lime
,,,,,,,,,
CVE-2020-8935,CVE-2020-8935/382da2b8b09cbf928668a2445efb778f76bd9c8a,https://github.com/google/asylo/commit/382da2b8b09cbf928668a2445efb778f76bd9c8a,<s>An arbitrary memory overwrite vulnerability in Asylo versions up to 0.6.0 allow an attacker to make an Ecall_restore function call to reallocate untrusted code and overwrite sections of the Enclave memory address. We recommend updating your library.</s>,"<s>Check output of ecall_restore is outside enclave
PiperOrigin-RevId: 334265380
Change-Id: Ifbaead6bce56f01b2a4d69f53ca508d0138f6f61
</s>"," diff --git a/asylo/platform/primitives/sgx/ecalls.cc b/asylo/platform/primitives/sgx/ecalls.cc
index a15ff7bc..f253fd41 100644
--- a/asylo/platform/primitives/sgx/ecalls.cc
+++ b/asylo/platform/primitives/sgx/ecalls.cc
@@ -64,7 +64,9 @@ int ecall_restore(const char *input, uint64_t input_len, char **output,
   if (!asylo::primitives::TrustedPrimitives::IsOutsideEnclave(input,
                                                               input_len) ||
       !asylo::primitives::TrustedPrimitives::IsOutsideEnclave(
-          output_len, sizeof(uint64_t))) {
+          output_len, sizeof(uint64_t)) ||
+      !asylo::primitives::TrustedPrimitives::IsOutsideEnclave(output,
+                                                              *output_len)) {
     asylo::primitives::TrustedPrimitives::BestEffortAbort(
         ""ecall_restore: input/output found to not be in untrusted memory."");
   }
",0.0,,0.0,lime
CVE-2020-8935,CVE-2020-8935/ed0926bff0e423cd122a18b3d2fc772817f66825,https://github.com/google/asylo/commit/ed0926bff0e423cd122a18b3d2fc772817f66825,<s>An arbitrary memory overwrite vulnerability in Asylo versions up to 0.6.0 allow an attacker to make an Ecall_restore function call to reallocate untrusted code and overwrite sections of the Enclave memory address. We recommend updating your library.</s>,"<s>Check return pointer is outside enclave in realloc
PiperOrigin-RevId: 333769459
Change-Id: If53b5f4317080b8abaf5c4f80ce751f150630bcb
</s>"," diff --git a/asylo/platform/host_call/trusted/host_calls.cc b/asylo/platform/host_call/trusted/host_calls.cc
index 3e6bf103..0532b334 100644
--- a/asylo/platform/host_call/trusted/host_calls.cc
+++ b/asylo/platform/host_call/trusted/host_calls.cc
@@ -644,6 +644,12 @@ void *enc_untrusted_realloc(void *ptr, size_t size) {
   if (!result && size != 0) {
     errno = FromkLinuxErrorNumber(klinux_errno);
   }
+
+  if (!::asylo::primitives::TrustedPrimitives::IsOutsideEnclave(result, size)) {
+    ::asylo::primitives::TrustedPrimitives::BestEffortAbort(
+        ""enc_untrusted_realloc: realloc result should be in untrusted ""
+        ""memory"");
+  }
   return result;
 }
 
",1.0,2.0,1.0,lime
,,,,,,,,,
CVE-2019-1010062,CVE-2019-1010062/09f0ab871bf633973cfd9fc4fe59d4a912397cf8,https://github.com/pluck-cms/pluck/commit/09f0ab871bf633973cfd9fc4fe59d4a912397cf8,<s>PluckCMS 4.7.4 and earlier is affected by: CWE-434 Unrestricted Upload of File with Dangerous Type. The impact is: get webshell. The component is: data/inc/images.php line36. The attack vector is: modify the MIME TYPE on HTTP request to upload a php file. The fixed version is: after commit 09f0ab871bf633973cfd9fc4fe59d4a912397cf8.</s>,"<s>Fix issue #44. Thanks to Klaus.
</s>"," diff --git a/data/inc/images.php b/data/inc/images.php
index 99791da..6f09d06 100644
--- a/data/inc/images.php
+++ b/data/inc/images.php
@@ -34,9 +34,13 @@ defined('IN_PLUCK') or exit('Access denied!');
 if (isset($_POST['submit'])) {
 	//Check if the file is JPG, PNG or GIF.
 	if (in_array($_FILES['imagefile']['type'], array('image/pjpeg', 'image/jpeg','image/png', 'image/gif'))) {
+		/* fix issue 44. Thanks to Klaus.  */
+        $imagewhitelist = array('jfif', '.png', '.jpg', '.gif', 'jpeg');  
+        if (!in_array(strtolower(substr($_FILES['imagefile']['name'], -4)), $imagewhitelist))
+			show_error($lang['general']['upload_failed'], 1);
+		/* end of fix issue 44. Thanks to Klaus.  */
 		if (!copy($_FILES['imagefile']['tmp_name'], 'images/'.$_FILES['imagefile']['name']))
 			show_error($lang['general']['upload_failed'], 1);
-
 		else {
 			chmod('images/'.$_FILES['imagefile']['name'], 0666);
 			?>
",1.0,1.0,1.0,lime
CVE-2019-1010062,CVE-2019-1010062/cad5f633d7a7b5ba7e1bab773f4dbb506ca36c08,https://github.com/pluck-cms/pluck/commit/cad5f633d7a7b5ba7e1bab773f4dbb506ca36c08,<s>PluckCMS 4.7.4 and earlier is affected by: CWE-434 Unrestricted Upload of File with Dangerous Type. The impact is: get webshell. The component is: data/inc/images.php line36. The attack vector is: modify the MIME TYPE on HTTP request to upload a php file. The fixed version is: after commit 09f0ab871bf633973cfd9fc4fe59d4a912397cf8.</s>,"<s>Fixed an issue with ' in names of pages, files, images etc.
</s>"," diff --git a/data/modules/tinymce/functions.php b/data/modules/tinymce/functions.php
old mode 100644
new mode 100755
index 70861d4..57fee43
--- a/data/modules/tinymce/functions.php
+++ b/data/modules/tinymce/functions.php
@@ -41,21 +41,21 @@ function tinymce_display_code() {
 							foreach ($module_list as $module) {
 								if (module_is_compatible($module) && function_exists($module.'_theme_main')) { ?>
 									{
-										text: '<?php echo $module; ?>',
+										text: '<?php echo sanitize($module); ?>',
 										onclick: function() {
 											editor.insertContent('<div class=""module_<?php echo str_replace(' ', '_',$module);  ?>"">{pluck show_module(<?php echo $module; ?>)}</div>');
-										}
+										},
 
 										<?php //Check if we need to display categories for the module
 										$module_info = call_user_func($module.'_info');
 										if (isset($module_info['categories']) && is_array($module_info['categories'])) { ?>
-										menu[
+										menu:[
 										<?php 
 											foreach ($module_info['categories'] as $category){ ?>
 												{
-													text: <?php echo $category; ?>,
+													text: '<?php echo sanitize($category); ?>',
 													onclick: function() {
-														editor.insertContent('<div class=""module_<?php $hulp = $module.','.$category; echo str_replace(' ', '_', $hulp);  ?>"">{pluck show_module(<?php echo $module.','.$category; ?>)}</div>');
+														editor.insertContent('<div class=""module_<?php $hulp = sanitize($module.','.$category); echo str_replace(' ', '_', $hulp);  ?>"">{pluck show_module(<?php echo sanitize($module.','.$category); ?>)}</div>');
 													}
 												},
 											<?php } ?> {}]
@@ -78,9 +78,9 @@ function tinymce_display_code() {
 						foreach ($images as $image) { ?>
 						{
 
-							text: '<?php echo $image; ?>',
+							text: '<?php echo sanitize($image); ?>',
 							onclick: function() {
-								editor.insertContent('<img src=""images/<?php echo $image;?>"" alt="""" \/>');
+								editor.insertContent('<img src=""images/<?php echo str_replace('\'', '%27', $image);?>"" alt="""" \/>');
 							}
 						},
 					<?php }
@@ -101,9 +101,9 @@ function tinymce_display_code() {
 						$page = get_page_seoname($page);
 						preg_match_all('|\/|', $page, $indent);
 						?>{
-							text: '<?php echo $title; ?>',
+							text: '<?php echo sanitize($title); ?>',
 							onclick: function() {
-								editor.insertContent('<a href=""?file=<?php echo $page; ?>"" title=""<?php echo $title; ?>""><?php echo $title; ?><\/a>');
+								editor.insertContent('<a href=""?file=<?php echo str_replace('\'', '%27', $page); ?>"" title=""<?php echo sanitize($title); ?>""><?php echo sanitize($title); ?><\/a>');
 							}
 						},
 						<?php
@@ -120,9 +120,9 @@ function tinymce_display_code() {
 					menu: [ <?php
 					foreach ($files as $file) {
 						?>{
-							text: '<?php echo $file; ?>',
+							text: '<?php echo sanitize($file); ?>',
 							onclick: function() {
-								editor.insertContent('<a href=""files/<?php echo $file; ?>"" title=""<?php echo $file; ?>""><?php echo $file; ?><\/a>');
+								editor.insertContent('<a href=""files/<?php echo sanitize($file); ?>"" title=""<?php echo sanitize($file); ?>""><?php echo sanitize($file); ?><\/a>');
 							}
 						},
 						<?php
@@ -145,4 +145,4 @@ toolbar3: ""table | hr removeformat | subscript superscript | charmap emoticons |
 });	</script>
 	<?php
 }
-?>
\ No newline at end of file
+?>
",0.0,,0.0,lime
,,,,,,,,,
CVE-2021-21433,CVE-2021-21433/c2282c99cf6b7f711a7ebbdbe13940f0307a81a5,https://github.com/DEMON1A/Discord-Recon/commit/c2282c99cf6b7f711a7ebbdbe13940f0307a81a5,<s>Discord Recon Server is a bot that allows you to do your reconnaissance process from your Discord. Remote code execution in version 0.0.1 would allow remote users to execute commands on the server resulting in serious issues. This flaw is patched in 0.0.2.</s>,"<s>Update README.md
</s>"," diff --git a/README.md b/README.md
index c873d68..da81131 100644
--- a/README.md
+++ b/README.md
@@ -1,7 +1,7 @@
 # Discord-Recon [![Tweet](https://img.shields.io/twitter/url/http/shields.io.svg?style=social)](https://twitter.com/intent/tweet?text=Check%20out%20Discord-Recon%20on%20github!&url=https://github.com/DEMON1A/Discord-Recon&via=DemoniaSlash&hashtags=recon,bugbounty)
 Discord Recon Server Allows You To Do Your Reconnaissance Process From Your Discord.
 
-## What's Discord Recon?
+## What's Discord Recon? :confused:
 - Discord Recon is a Cool Discord Bot Working On Your Server To Make It Easy To Do Recon From Your Discord Server. The Bot Has Been Linked With Many Tools Like: Nuclei, Findomain, Assetfinder, Subfinder, Arjun, ParamSpider, Waybackurls, Dirsearch And gitGraber. You Can Use All Of These Tools Via The Bot Using Only Discord Commands. Also, Discord Recon Allows You To Automate Subdomains Collection Process. It's Using Assetfinder, Findomain And Subfinder To Collect Subdomains, Sort Them Using Python Function. Then Filter Them Using httpx. And The Output Is Getting Saved On The Server. Anytime You Want To Use This Data For Nuclei Scans Or Any Other Scans That Wiil Be Added Soon. You Can Just Call The Scan Function And It Will Use The Subdomains That Got Saved Before. 
 
 ## Setup Variables :star:
",0.0,,0.0,lime
CVE-2021-21433,CVE-2021-21433/26e2a084679679cccdeeabbb6889ce120eff7e50,https://github.com/DEMON1A/Discord-Recon/commit/26e2a084679679cccdeeabbb6889ce120eff7e50,<s>Discord Recon Server is a bot that allows you to do your reconnaissance process from your Discord. Remote code execution in version 0.0.1 would allow remote users to execute commands on the server resulting in serious issues. This flaw is patched in 0.0.2.</s>,"<s>Fixing Command Injection Issues.
</s>"," diff --git a/app.py b/app.py
index d754337..43b1517 100644
--- a/app.py
+++ b/app.py
@@ -95,6 +95,10 @@ async def ip(ctx , *, argument):
 
 @Client.command()
 async def dirsearch(ctx , *, argument):
+    if not CommandInjection.commandInjection(argument=argument , RCE=RCE):
+        await ctx.send(""**Your Command Contains Unallowed Chars. Don't Try To Use It Again.**"")
+        return
+    
     Path = TOOLS['dirsearch']; MainPath = getcwd(); chdir(Path)
     await ctx.send(f""**Running Your Dirsearch Scan, We Will Send The Results When It's Done**"")
     Process = subprocess.Popen(f'python3 dirsearch.py -u {argument} -e * -b' , shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
@@ -115,6 +119,10 @@ async def dirsearch(ctx , *, argument):
 
 @Client.command()
 async def arjun(ctx , *, argument):
+    if not CommandInjection.commandInjection(argument=argument , RCE=RCE):
+        await ctx.send(""**Your Command Contains Unallowed Chars. Don't Try To Use It Again.**"")
+        return
+    
     Path = TOOLS['arjun']; MainPath = getcwd(); chdir(Path)
     await ctx.send(f""**Running Your Arjun Scan, We Will Send The Results When It's Done**"")
     await ctx.send(f""**Note: The Bot Won't Respond Until The Scan is Done. All Of Your Commands Now Will Be Executed After This Process is Done."")
",1.0,1.0,1.0,lime
,,,,,,,,,
CVE-2017-8085,CVE-2017-8085/0b2241ff1c7d86376fa260c5d4c1714f6cef9c0f,https://github.com/exponentcms/exponent-cms/commit/0b2241ff1c7d86376fa260c5d4c1714f6cef9c0f,"<s>In Exponent CMS before 2.4.1 Patch #5, XSS in elFinder is possible in framework/modules/file/connector/elfinder.php.</s>","<s>fix possible xss security issue with elFinder (thanks to chengable)
</s>"," diff --git a/framework/modules/file/connector/elfinder.php b/framework/modules/file/connector/elfinder.php
index ac9103c8a..4ad6f4abc 100644
--- a/framework/modules/file/connector/elfinder.php
+++ b/framework/modules/file/connector/elfinder.php
@@ -509,5 +509,5 @@ $opts = array(
 );
 
 //header('Access-Control-Allow-Origin: *');
-$connector = new elFinderConnector(new elFinderExponent($opts), true);
+$connector = new elFinderConnector(new elFinderExponent($opts));
 $connector->run();
",1.0,3.0,1.0,lime
CVE-2017-8085,CVE-2017-8085/724daa6f56d3ad4eeb8382fe267c59ed10115950,https://github.com/exponentcms/exponent-cms/commit/724daa6f56d3ad4eeb8382fe267c59ed10115950,"<s>In Exponent CMS before 2.4.1 Patch #5, XSS in elFinder is possible in framework/modules/file/connector/elfinder.php.</s>","<s>update to v2.4.1patch5
</s>"," diff --git a/exponent_version.php b/exponent_version.php
index 3cd1d5fec..f682f9840 100644
--- a/exponent_version.php
+++ b/exponent_version.php
@@ -41,11 +41,11 @@ if (!defined('EXPONENT_VERSION_MAJOR')) {
 		 * This number is bumped each time a distribution of a single version is
 		 * released.  For instance, the 3rd beta has an version type iteration of 3.
 		 */
-		define('EXPONENT_VERSION_ITERATION','4'); // only applies to betas, alphas, or release candidates
+		define('EXPONENT_VERSION_ITERATION','5'); // only applies to betas, alphas, or release candidates
 		/* exdoc
 		 * This is the date that this version of Exponent was released.
 		 */
-		define('EXPONENT_VERSION_BUILDDATE','1492693200');
+		define('EXPONENT_VERSION_BUILDDATE','1492909200');
 	} else {
 		// the info for the ""next"" version if we are a pre-release from the repository
 		define('EXPONENT_VERSION_MAJOR','2');
",0.0,,0.0,lime
,,,,,,,,,
CVE-2015-4425,CVE-2015-4425/4f2a95f877d406a054f9f2253475fe58c76aa03d,https://github.com/pimcore/pimcore/commit/4f2a95f877d406a054f9f2253475fe58c76aa03d,"<s>Directory traversal vulnerability in pimcore before build 3473 allows remote authenticated users with the ""assets"" permission to create or write to arbitrary files via a .. (dot dot) in the dir parameter to admin/asset/add-asset-compatibility.</s>","<s>AssetController: directory traversal vulnerability issue
git-svn-id: http://www.pimcore.org/svn/pimcore/private/core/trunk@6458 1f8fe7d8-47f0-464c-8d0a-336f4953ab05
</s>"," diff --git a/pimcore/modules/admin/controllers/AssetController.php b/pimcore/modules/admin/controllers/AssetController.php
index fec5d5ba76..e897b8d3fb 100644
--- a/pimcore/modules/admin/controllers/AssetController.php
+++ b/pimcore/modules/admin/controllers/AssetController.php
@@ -210,6 +210,13 @@ class Admin_AssetController extends \Pimcore\Controller\Action\Admin\Element
             $parent = Asset::getById($this->getParam(""parentId""));
             $newPath = $parent->getFullPath() . ""/"" . trim($this->getParam(""dir""), ""/ "");
 
+            // check if the path is outside of the asset directory
+            $newRealPath = PIMCORE_ASSET_DIRECTORY . $newPath;
+            $newRealPath= realpath($newRealPath);
+            if (strpos($newRealPath, PIMCORE_ASSET_DIRECTORY) !== 0) {
+                throw new Exception(""not allowed"");
+            }
+
             $maxRetries = 5;
             for ($retries=0; $retries<$maxRetries; $retries++) {
                 try {
",1.0,3.0,1.0,tfidf
CVE-2015-4425,CVE-2015-4425/9f39e14c3ba717356cd415de8af0cb57674bae52,https://github.com/pimcore/pimcore/commit/9f39e14c3ba717356cd415de8af0cb57674bae52,"<s>Directory traversal vulnerability in pimcore before build 3473 allows remote authenticated users with the ""assets"" permission to create or write to arbitrary files via a .. (dot dot) in the dir parameter to admin/asset/add-asset-compatibility.</s>","<s>fixed reload of object/asset/document
git-svn-id: http://www.pimcore.org/svn/pimcore/private/core/trunk@6366 1f8fe7d8-47f0-464c-8d0a-336f4953ab05
</s>"," diff --git a/pimcore/static5/js/pimcore/helpers.js b/pimcore/static5/js/pimcore/helpers.js
index e665b7b1e2..1eeaa097d1 100644
--- a/pimcore/static5/js/pimcore/helpers.js
+++ b/pimcore/static5/js/pimcore/helpers.js
@@ -124,12 +124,17 @@ pimcore.helpers.openAsset = function (id, type, options) {
 
 pimcore.helpers.closeAsset = function (id) {
 
-    var tabPanel = Ext.getCmp(""pimcore_panel_tabs"");
-    var tabId = ""asset_"" + id;
-    tabPanel.remove(tabId);
+    try {
+        var tabPanel = Ext.getCmp(""pimcore_panel_tabs"");
+        var tabId = ""asset_"" + id;
+        var panel = Ext.getCmp(tabId);
+        panel.close();
 
-    pimcore.helpers.removeTreeNodeLoadingIndicator(""asset"", id);
-    pimcore.globalmanager.remove(""asset_"" + id);
+        pimcore.helpers.removeTreeNodeLoadingIndicator(""asset"", id);
+        pimcore.globalmanager.remove(""asset_"" + id);
+    } catch (e) {
+        console.log(e);
+    }
 };
 
 pimcore.helpers.openDocument = function (id, type, options) {
@@ -153,20 +158,20 @@ pimcore.helpers.openDocument = function (id, type, options) {
 
 
 pimcore.helpers.closeDocument = function (id) {
+    try {
+        var tabPanel = Ext.getCmp(""pimcore_panel_tabs"");
+        var tabId = ""document_"" + id;
+        tabPanel.remove(tabId);
 
-    var tabPanel = Ext.getCmp(""pimcore_panel_tabs"");
-    var tabId = ""document_"" + id;
-    tabPanel.remove(tabId);
+        pimcore.helpers.removeTreeNodeLoadingIndicator(""document"", id);
+        pimcore.globalmanager.remove(""document_"" + id);
+    } catch (e) {
+        console.log(e);
+    }
 
-    pimcore.helpers.removeTreeNodeLoadingIndicator(""document"", id);
-    pimcore.globalmanager.remove(""document_"" + id);
 };
 
 pimcore.helpers.openObject = function (id, type, options) {
-    //TODO EXT5 if we currently attempt to open a folder the whole system breaks apart
-    //if (type == ""folder"") {
-    //    return;
-    //}
     if (pimcore.globalmanager.exists(""object_"" + id) == false) {
 
         if(type != ""folder"" && type != ""variant"" && type != ""object"") {
@@ -190,13 +195,17 @@ pimcore.helpers.openObject = function (id, type, options) {
 };
 
 pimcore.helpers.closeObject = function (id) {
+    try {
+        var tabPanel = Ext.getCmp(""pimcore_panel_tabs"");
+        var tabId = ""object_"" + id;
+        var panel = Ext.getCmp(tabId);
+        panel.close();
 
-    var tabPanel = Ext.getCmp(""pimcore_panel_tabs"");
-    var tabId = ""object_"" + id;
-    tabPanel.remove(tabId);
-
-    pimcore.helpers.removeTreeNodeLoadingIndicator(""object"", id);
-    pimcore.globalmanager.remove(""object_"" + id);
+        pimcore.helpers.removeTreeNodeLoadingIndicator(""object"", id);
+        pimcore.globalmanager.remove(""object_"" + id);
+    } catch (e) {
+        console.log(e);
+    }
 };
 
 pimcore.helpers.getHistory = function() {
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2022-0983,CVE-2022-0983/c2794752ea3cdda2d64a0651da08b2cdf730d9f1,https://github.com/moodle/moodle/commit/c2794752ea3cdda2d64a0651da08b2cdf730d9f1,<s>An SQL injection risk was identified in Badges code relating to configuring criteria. Access to the relevant capability was limited to teachers and managers by default.</s>,"<s>MDL-74074 badges: Ensure profile criteria exists before completion check
</s>"," diff --git a/badges/criteria/award_criteria_profile.php b/badges/criteria/award_criteria_profile.php
index b014cf5a92b..d3ac2f25556 100644
--- a/badges/criteria/award_criteria_profile.php
+++ b/badges/criteria/award_criteria_profile.php
@@ -39,6 +39,26 @@ class award_criteria_profile extends award_criteria {
     public $required_param = 'field';
     public $optional_params = array();
 
+    /* @var array The default profile fields allowed to be used as award criteria.
+     *
+     * Note: This is used instead of user_get_default_fields(), because it is not possible to
+     * determine which fields the user can modify.
+     */
+    protected $allowed_default_fields = [
+        'firstname',
+        'lastname',
+        'email',
+        'address',
+        'phone1',
+        'phone2',
+        'department',
+        'institution',
+        'description',
+        'picture',
+        'city',
+        'country',
+    ];
+
     /**
      * Add appropriate new criteria options to the form
      *
@@ -50,10 +70,7 @@ class award_criteria_profile extends award_criteria {
         $none = true;
         $existing = array();
         $missing = array();
-
-        // Note: cannot use user_get_default_fields() here because it is not possible to decide which fields user can modify.
-        $dfields = array('firstname', 'lastname', 'email', 'address', 'phone1', 'phone2',
-                         'department', 'institution', 'description', 'picture', 'city', 'country');
+        $dfields = $this->allowed_default_fields;
 
         // Get custom fields.
         $cfields = array_filter(profile_get_custom_fields(), function($field) {
@@ -230,8 +247,8 @@ class award_criteria_profile extends award_criteria {
                 $join .= "" LEFT JOIN {user_info_data} uid{$idx} ON uid{$idx}.userid = u.id AND uid{$idx}.fieldid = :fieldid{$idx} "";
                 $params[""fieldid{$idx}""] = $param['field'];
                 $whereparts[] = ""uid{$idx}.id IS NOT NULL"";
-            } else {
-                // This is a field from {user} table.
+            } else if (in_array($param['field'], $this->allowed_default_fields)) {
+                // This is a valid field from {user} table.
                 if ($param['field'] == 'picture') {
                     // The picture field is numeric and requires special handling.
                     $whereparts[] = ""u.{$param['field']} != 0"";
",1.0,1.0,1.0,lime
CVE-2022-0983,CVE-2022-0983/62c086ee72eba777201a155ca510b7165b518476,https://github.com/moodle/moodle/commit/62c086ee72eba777201a155ca510b7165b518476,<s>An SQL injection risk was identified in Badges code relating to configuring criteria. Access to the relevant capability was limited to teachers and managers by default.</s>,"<s>MDL-74313 badge: Disable secondary navigation in badges
</s>"," diff --git a/badges/badge.php b/badges/badge.php
index a6e6f28a8ac..b79fdce51cb 100644
--- a/badges/badge.php
+++ b/badges/badge.php
@@ -37,6 +37,7 @@ $output = $PAGE->get_renderer('core', 'badges');
 $PAGE->set_url('/badges/badge.php', array('hash' => $id));
 $PAGE->set_pagelayout('base');
 $PAGE->set_title(get_string('issuedbadge', 'badges'));
+$PAGE->set_secondary_navigation(false);
 
 $badge = new \core_badges\output\issued_badge($id);
 if (!empty($badge->recipient->id)) {
",0.0,,0.0,lime
,,,,,,,,,
CVE-2019-12742,CVE-2019-12742/49027a3bad957e00c083c0265e1fcb86798634c6,https://github.com/bludit/bludit/commit/49027a3bad957e00c083c0265e1fcb86798634c6,"<s>Bludit prior to 3.9.1 allows a non-privileged user to change the password of any account, including admin. This occurs because of bl-kernel/admin/controllers/user-password.php Insecure Direct Object Reference (a modified username POST parameter).</s>","<s>Bludit v3.9.0
</s>"," diff --git a/lang.php b/lang.php
deleted file mode 100644
index 098b79d0..00000000
--- a/lang.php
+++ /dev/null
@@ -1,29 +0,0 @@
-<?php
-
-$string = file_get_contents(""bl-languages/en.json"");
-$english = json_decode($string, true);
-
-$files = glob('bl-languages/*.{json}', GLOB_BRACE);
-foreach ($files as $file) {
-	$out = $file;
-	$string = file_get_contents($out);
-	$spanish = json_decode($string, true);
-
-	$tmp = array();
-	$tmp['language-data']BL	= $spanish['language-data'];
-	$tmp['dates']IT		= $spanish['dates'];
-	if (isset($spanish['special-chars'])) {
-		$tmp['special-chars']_	= $spanish['special-chars'];
-	}
-
-	foreach ($english as $key=>$value) {
-		if (isset($spanish[$key])) {
-			$tmp[$key] = $spanish[$key];
-		} else {
-			$tmp[$key] = $value;
-		}
-	}
-
-	$json = json_encode($tmp, JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT);
-	file_put_contents($out, $json);
-}
",0.0,,0.0,lime
CVE-2019-12742,CVE-2019-12742/a1bb333153fa8ba29a88cfba423d810f509a2b37,https://github.com/bludit/bludit/commit/a1bb333153fa8ba29a88cfba423d810f509a2b37,"<s>Bludit prior to 3.9.1 allows a non-privileged user to change the password of any account, including admin. This occurs because of bl-kernel/admin/controllers/user-password.php Insecure Direct Object Reference (a modified username POST parameter).</s>","<s>Prevent non-administrators to change the password from other users
</s>"," diff --git a/bl-kernel/admin/controllers/user-password.php b/bl-kernel/admin/controllers/user-password.php
index 0f86abb7..8a7e8c9d 100644
--- a/bl-kernel/admin/controllers/user-password.php
+++ b/bl-kernel/admin/controllers/user-password.php
@@ -13,8 +13,14 @@
 // ============================================================================
 
 if ($_SERVER['REQUEST_METHOD'] == 'POST') {
+	// Prevent non-administrators to change other users
+	$username = $_POST['username'];
+	if ($login->role()!=='admin') {
+	    $username = $login->username();
+	}
+
 	if (changeUserPassword(array(
-		'username'=>$_POST['username'],
+		'username'=>$username,
 		'newPassword'=>$_POST['newPassword'],
 		'confirmPassword'=>$_POST['confirmPassword']
 	))) {
",1.0,3.0,1.0,lime
,,,,,,,,,
CVE-2017-14337,CVE-2017-14337/be111a470204a974c50682054c9c7d4b94396ed9,https://github.com/MISP/MISP/commit/be111a470204a974c50682054c9c7d4b94396ed9,"<s>When MISP before 2.4.80 is configured with X.509 certificate authentication (CertAuth) in conjunction with a non-MISP external user management ReST API, if an external user provides X.509 certificate authentication and this API returns an empty value, the unauthenticated user can be granted access as an arbitrary user.</s>","<s>fix: Fix to certauth pains
</s>"," diff --git a/app/Plugin/CertAuth/Controller/Component/Auth/CertificateAuthenticate.php b/app/Plugin/CertAuth/Controller/Component/Auth/CertificateAuthenticate.php
index ce3d18db4..1ad5c481f 100644
--- a/app/Plugin/CertAuth/Controller/Component/Auth/CertificateAuthenticate.php
+++ b/app/Plugin/CertAuth/Controller/Component/Auth/CertificateAuthenticate.php
@@ -133,17 +133,19 @@ class CertificateAuthenticate extends BaseAuthenticate
 				// If $sync is true, allow the creation of the user from the certificate
 				$sync = Configure::read('CertAuth.syncUser');
 				if ($sync) {
-					self::getRestUser();
+					if (!self::getRestUser()) return false;
 				}
 
 				// find and fill user with model
 				$userModelKey = empty(Configure::read('CertAuth.userModelKey')) ? 'email' : Configure::read('CertAuth.userModelKey');
 				$userDefaults = Configure::read('CertAuth.userDefaults');
 				$this->User = ClassRegistry::init('User');
-				$existingUser = $this->User->find('first', array(
-					'conditions' => array($userModelKey => self::$user[$userModelKey]),
-					'recursive' => false
-				));
+				if (!empty(self::$user[$userModelKey])) {
+					$existingUser = $this->User->find('first', array(
+						'conditions' => array($userModelKey => self::$user[$userModelKey]),
+						'recursive' => false
+					));
+				}
 				if ($existingUser) {
 					if ($sync) {
 						if (!isset(self::$user['org_id']) && isset(self::$user['org'])) {
",1.0,1.0,1.0,lime
CVE-2017-14337,CVE-2017-14337/9c9048422a13d32d658e4f03540389344f409a29,https://github.com/MISP/MISP/commit/9c9048422a13d32d658e4f03540389344f409a29,"<s>When MISP before 2.4.80 is configured with X.509 certificate authentication (CertAuth) in conjunction with a non-MISP external user management ReST API, if an external user provides X.509 certificate authentication and this API returns an empty value, the unauthenticated user can be granted access as an arbitrary user.</s>","<s>fix: fixes various issues with the certauth
</s>"," diff --git a/app/Plugin/CertAuth/Controller/Component/Auth/CertificateAuthenticate.php b/app/Plugin/CertAuth/Controller/Component/Auth/CertificateAuthenticate.php
index 43428ba3e..ce3d18db4 100644
--- a/app/Plugin/CertAuth/Controller/Component/Auth/CertificateAuthenticate.php
+++ b/app/Plugin/CertAuth/Controller/Component/Auth/CertificateAuthenticate.php
@@ -170,7 +170,8 @@ class CertificateAuthenticate extends BaseAuthenticate
 					self::$user = $this->User->getAuthUser($existingUser['User']['id']);
 					if (isset(self::$user['gpgkey'])) unset(self::$user['gpgkey']);
 				} else if ($sync && !empty(self::$user)) {
-					$org=null;
+					$org = isset(self::$client['org']) ? self::$client['org'] : null;
+					if ($org == null) return false;
 					if (!isset(self::$user['org_id']) && isset(self::$user['org'])) {
 						self::$user['org_id'] = $this->User->Organisation->createOrgFromName($org, 0, true);
 						unset(self::$user['org']);
@@ -192,7 +193,6 @@ class CertificateAuthenticate extends BaseAuthenticate
 				}
 			}
 		}
-
 		return self::$user;
 	}
 
",0.0,,0.0,lime
,,,,,,,,,
CVE-2020-14195,CVE-2020-14195/08fbfacf89a4a4c026a6227a1b470ab7a13e2e88,https://github.com/FasterXML/jackson-databind/commit/08fbfacf89a4a4c026a6227a1b470ab7a13e2e88,"<s>FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to org.jsecurity.realm.jndi.JndiRealmFactory (aka org.jsecurity).</s>","<s>fix: merge fix from 2.9 branch #2653 #2658 #2659 #2660 #2662 #2664 #2666 #2670 #2680 #2682 #2688 #2698 #2704 #2765 #2798 #2814 #2826 #2827 #2854 (#2858)
1. generated diff CVE diff
git diff ad5a63017 -- src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
2. cleanup the diff ,just remain the CVE change
3. apply the diff
4. check and make sure only commit the AutoType CVE change.
```
PR_LIST=$(git log1 -n 17 ad5a63017 -- src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java | awk -F'[ ,]+' '{for(i=1;i<=NF;i++){a=$(i);if(match(a,/#[0-9]+/)){print a;}}}' | sort | uniq);echo ""$PR_LIST"" | wc -l
echo $PR_LIST
```
</s>"," diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
index dee36a14e..6377a9357 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
@@ -48,6 +48,9 @@ public class SubTypeValidator
         // [databind#1737]; 3rd party
 //s.add(""org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor""); // deprecated by [databind#1855]
         s.add(""org.springframework.beans.factory.config.PropertyPathFactoryBean"");
+        // [databind#2680]
+        s.add(""org.springframework.aop.config.MethodLocatingFactoryBean"");
+        s.add(""org.springframework.beans.factory.config.BeanReferenceFactoryBean"");
 
 // s.add(""com.mchange.v2.c3p0.JndiRefForwardingDataSource""); // deprecated by [databind#1931]
 // s.add(""com.mchange.v2.c3p0.WrapperConnectionPoolDataSource""); // - """" -
@@ -73,24 +76,26 @@ public class SubTypeValidator
         s.add(""com.sun.deploy.security.ruleset.DRSHelper"");
         s.add(""org.apache.axis2.jaxws.spi.handler.HandlerResolverImpl"");
 
-        // [databind#2186]: yet more 3rd party gadgets
+        // [databind#2186], [databind#2670]: yet more 3rd party gadgets
         s.add(""org.jboss.util.propertyeditor.DocumentEditor"");
         s.add(""org.apache.openjpa.ee.RegistryManagedRuntime"");
         s.add(""org.apache.openjpa.ee.JNDIManagedRuntime"");
-        s.add(""org.apache.axis2.transport.jms.JMSOutTransportInfo"");   
-        
-        // [databind#2326] (2.7.9.6): one more 3rd party gadget
+        s.add(""org.apache.openjpa.ee.WASRegistryManagedRuntime""); // [#2670] addition
+        s.add(""org.apache.axis2.transport.jms.JMSOutTransportInfo"");
+
+        // [databind#2326] (2.9.9)
         s.add(""com.mysql.cj.jdbc.admin.MiniAdmin"");
 
-        // [databind#2334]: logback-core
+        // [databind#2334]: logback-core (2.9.9.1)
         s.add(""ch.qos.logback.core.db.DriverManagerConnectionSource"");
 
-        // [databind#2341]: jdom/jdom2
+        // [databind#2341]: jdom/jdom2 (2.9.9.1)
         s.add(""org.jdom.transform.XSLTransformer"");
         s.add(""org.jdom2.transform.XSLTransformer"");
 
-        // [databind#2387]: EHCache
+        // [databind#2387], [databind#2460]: EHCache
         s.add(""net.sf.ehcache.transaction.manager.DefaultTransactionManagerLookup"");
+        s.add(""net.sf.ehcache.hibernate.EhcacheJtaTransactionManagerLookup"");
 
         // [databind#2389]: logback/jndi
         s.add(""ch.qos.logback.core.db.JNDIConnectionSource"");
@@ -107,8 +112,10 @@ public class SubTypeValidator
         s.add(""org.apache.commons.configuration.JNDIConfiguration"");
         s.add(""org.apache.commons.configuration2.JNDIConfiguration"");
 
-        // [databind#2469]: xalan2
+        // [databind#2469]: xalan
         s.add(""org.apache.xalan.lib.sql.JNDIConnectionPool"");
+        // [databind#2704]: xalan2
+        s.add(""com.sun.org.apache.xalan.internal.lib.sql.JNDIConnectionPool"");
 
         // [databind#2478]: comons-dbcp, p6spy
         s.add(""org.apache.commons.dbcp.datasources.PerUserPoolDataSource"");
@@ -129,15 +136,75 @@ public class SubTypeValidator
         // [databind#2631]: shaded hikari-config
         s.add(""org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig"");
 
-        // [databind#2634]: ibatis-sqlmap, anteros-core
+        // [databind#2634]: ibatis-sqlmap, anteros-core/-dbcp
         s.add(""com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig"");
         s.add(""br.com.anteros.dbcp.AnterosDBCPConfig"");
+        // [databind#2814]: anteros-dbcp
+        s.add(""br.com.anteros.dbcp.AnterosDBCPDataSource"");
 
-        // [databind#2642]: javax.swing (jdk)
+        // [databind#2642][databind#2854]: javax.swing (jdk)
         s.add(""javax.swing.JEditorPane"");
+        s.add(""javax.swing.JTextPane"");
 
-        // [databind#2648]: shire-core
+        // [databind#2648], [databind#2653]: shire-core
         s.add(""org.apache.shiro.realm.jndi.JndiRealmFactory"");
+        s.add(""org.apache.shiro.jndi.JndiObjectFactory"");
+
+        // [databind#2658]: ignite-jta (, quartz-core)
+        s.add(""org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup"");
+        s.add(""org.apache.ignite.cache.jta.jndi.CacheJndiTmFactory"");
+        s.add(""org.quartz.utils.JNDIConnectionProvider"");
+
+        // [databind#2659]: aries.transaction.jms
+        s.add(""org.apache.aries.transaction.jms.internal.XaPooledConnectionFactory"");
+        s.add(""org.apache.aries.transaction.jms.RecoverablePooledConnectionFactory"");
+
+        // [databind#2660]: caucho-quercus
+        s.add(""com.caucho.config.types.ResourceRef"");
+
+        // [databind#2662]: aoju/bus-proxy
+        s.add(""org.aoju.bus.proxy.provider.RmiProvider"");
+        s.add(""org.aoju.bus.proxy.provider.remoting.RmiProvider"");
+
+        // [databind#2664]: activemq-core, activemq-pool, activemq-pool-jms
+
+        s.add(""org.apache.activemq.ActiveMQConnectionFactory""); // core
+        s.add(""",1.0,,1.0,lime
CVE-2020-14195,CVE-2020-14195/32e7d0ef42303c7978bb7a9f9b3c621b0072555c,https://github.com/FasterXML/jackson-databind/commit/32e7d0ef42303c7978bb7a9f9b3c621b0072555c,"<s>FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to org.jsecurity.realm.jndi.JndiRealmFactory (aka org.jsecurity).</s>","<s>Minor javadoc improvement wrt default typing `EVERYTHING`
</s>"," diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
index fbba0c051..2b6ca0b4b 100644
--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
@@ -188,13 +188,16 @@ public class ObjectMapper
 
         /**
          * Value that means that default typing will be used for
-         * all non-final types, with exception of small number of
+         * all types, with exception of small number of
          * ""natural"" types (String, Boolean, Integer, Double) that
          * can be correctly inferred from JSON, and primitives (which
          * can not be polymorphic either). Typing is also enabled for
          * all array types.
          *<p>
-         * Note that the only known use case for this setting is for serialization
+         * Note that this is rarely the option you should use as it results
+         * in adding type information in many places where it should not be needed:
+         * make sure you understand its behavior.
+         * The only known use case for this setting is for serialization
          * when passing instances of final class, and base type is not
          * separately specified.
          *
",0.0,,0.0,lime
,,,,,,,,,
CVE-2019-15695,CVE-2019-15695/f1b9b868ec943d51ef631f53a095d48d3f178f4f,https://github.com/TigerVNC/tigervnc/commit/f1b9b868ec943d51ef631f53a095d48d3f178f4f,"<s>TigerVNC version prior to 1.10.1 is vulnerable to stack buffer overflow, which could be triggered from CMsgReader::readSetCursor. This vulnerability occurs due to insufficient sanitization of PixelFormat. Since remote attacker can choose offset from start of the buffer to start writing his values, exploitation of this vulnerability could potentially result into remote code execution. This attack appear to be exploitable via network connectivity.</s>","<s>Fix depth sanity test in PixelFormat
</s>"," diff --git a/tests/unit/pixelformat.cxx b/tests/unit/pixelformat.cxx
index 4eb45281..7b6087f7 100644
--- a/tests/unit/pixelformat.cxx
+++ b/tests/unit/pixelformat.cxx
@@ -104,6 +104,10 @@ int main(int argc, char** argv)
     doTest(true, 32, 24, false, true, 127, 511, 127, 0, 4, 20);
     doTest(true, 32, 24, false, true, 127, 127, 511, 0, 4, 8);
 
+    /* Insufficient depth */
+
+    doTest(true, 32, 16, false, true, 255, 255, 255, 0, 8, 16);
+
     /* Overlapping channels */
 
     doTest(true, 32, 24, false, true, 255, 255, 255, 0, 7, 16);
",0.0,,0.0,tfidf
CVE-2019-15695,CVE-2019-15695/05e28490873a861379c943bf616614b78b558b89,https://github.com/TigerVNC/tigervnc/commit/05e28490873a861379c943bf616614b78b558b89,"<s>TigerVNC version prior to 1.10.1 is vulnerable to stack buffer overflow, which could be triggered from CMsgReader::readSetCursor. This vulnerability occurs due to insufficient sanitization of PixelFormat. Since remote attacker can choose offset from start of the buffer to start writing his values, exploitation of this vulnerability could potentially result into remote code execution. This attack appear to be exploitable via network connectivity.</s>","<s>Handle pixel formats with odd shift values
Our fast paths assume that each channel fits in to a separate byte.
That means the shift needs to be a multiple of 8. Start actually
checking this so that a client cannot trip us up and possibly cause
incorrect code exection.
Issue found by Pavel Cheremushkin from Kaspersky Lab.
</s>"," diff --git a/common/rfb/PixelFormat.cxx b/common/rfb/PixelFormat.cxx
index 789c43ed..1b4ab1ba 100644
--- a/common/rfb/PixelFormat.cxx
+++ b/common/rfb/PixelFormat.cxx
@@ -206,6 +206,12 @@ bool PixelFormat::is888(void) const
     return false;
   if (blueMax != 255)
     return false;
+  if ((redShift & 0x7) != 0)
+    return false;
+  if ((greenShift & 0x7) != 0)
+    return false;
+  if ((blueShift & 0x7) != 0)
+    return false;
 
   return true;
 }
",1.0,,1.0,tfidf
,,,,,,,,,
CVE-2013-2245,CVE-2013-2245/1adad7f7833e08e2e815c3a8b031c351c2365ad3,https://github.com/moodle/moodle/commit/1adad7f7833e08e2e815c3a8b031c351c2365ad3,"<s>rss/file.php in Moodle through 2.1.10, 2.2.x before 2.2.11, 2.3.x before 2.3.8, 2.4.x before 2.4.5, and 2.5.x before 2.5.1 does not properly implement the use of RSS tokens for impersonation, which allows remote authenticated users to obtain sensitive block information by reading an RSS feed.</s>","<s>MDL-37818 - RSS - Prevent access to blocks while RSS context errors are displayed
</s>"," diff --git a/rss/file.php b/rss/file.php
index fdc4958e675..ad27558dbc3 100644
--- a/rss/file.php
+++ b/rss/file.php
@@ -122,6 +122,11 @@ if ($token===""$inttoken"") {
     }
 }
 
+// Check the context actually exists
+list($context, $course, $cm) = get_context_info_array($contextid);
+
+$PAGE->set_context($context);
+
 $user = get_complete_user_data('id', $userid);
 
 // let enrol plugins deal with new enrolments if necessary
@@ -129,14 +134,6 @@ enrol_check_plugins($user);
 
 session_set_user($user); //for login and capability checks
 
-// Check the context actually exists
-list($context, $course, $cm) = get_context_info_array($contextid);
-
-if (!$context) {
-    rss_error();
-}
-$PAGE->set_context($context);
-
 try {
     $autologinguest = true;
     $setwantsurltome = true;
@@ -165,7 +162,11 @@ if (file_exists($componentdir)) {
     if (function_exists($functionname)) {
         // $pathname will be null if there was a problem (eg user doesn't have the necessary capabilities)
         // NOTE:the component providing the feed must do its own capability checks and security
-        $pathname = $functionname($context, $args);
+        try {
+            $pathname = $functionname($context, $args);
+        } catch (Exception $e) {
+            rss_error('rsserror');
+        }
     }
 }
 
",1.0,,1.0,lime
CVE-2013-2245,CVE-2013-2245/7e05737fb460b281a56e74ec0f6fa89830ba9a75,https://github.com/moodle/moodle/commit/7e05737fb460b281a56e74ec0f6fa89830ba9a75,"<s>rss/file.php in Moodle through 2.1.10, 2.2.x before 2.2.11, 2.3.x before 2.3.8, 2.4.x before 2.4.5, and 2.5.x before 2.5.1 does not properly implement the use of RSS tokens for impersonation, which allows remote authenticated users to obtain sensitive block information by reading an RSS feed.</s>","<s>MDL-25901 rss: do not copyright html tag
They copyright field does not permit html, it should be plain text
</s>"," diff --git a/lib/rsslib.php b/lib/rsslib.php
index 6046e66b225..17157bb1f66 100644
--- a/lib/rsslib.php
+++ b/lib/rsslib.php
@@ -269,7 +269,7 @@ function rss_standard_header($title = NULL, $link = NULL, $description = NULL) {
             $result .= rss_full_tag('language', 2, false, substr($USER->lang,0,2));
         }
         $today = getdate();
-        $result .= rss_full_tag('copyright', 2, false, '&#169; '. $today['year'] .' '. format_string($site->fullname));
+        $result .= rss_full_tag('copyright', 2, false, '(c) '. $today['year'] .' '. format_string($site->fullname));
         /*
        if (!empty($USER->email)) {
             $result .= rss_full_tag('managingEditor', 2, false, fullname($USER));
",0.0,,0.0,lime
,,,,,,,,,
CVE-2017-5934,CVE-2017-5934/70955a8eae091cc88fd9a6e510177e70289ec024,https://github.com/moinwiki/moin-1.9/commit/70955a8eae091cc88fd9a6e510177e70289ec024,<s>Cross-site scripting (XSS) vulnerability in the link dialogue in GUI editor in MoinMoin before 1.9.10 allows remote attackers to inject arbitrary web script or HTML via unspecified vectors.</s>,"<s>security fix for CVE-2017-5934, XSS in GUI editor related code
Thanks to Nitin Venkatesh for discovering and reporting this!
</s>"," diff --git a/docs/CHANGES b/docs/CHANGES
index f6f06388..011e1012 100644
--- a/docs/CHANGES
+++ b/docs/CHANGES
@@ -23,6 +23,7 @@ Version 1.9.10 aka ""the end of spam release"" (not released yet)
         should be aware of beforehands.
 
   Fixes:
+  * security fix for CVE-2017-5934, XSS in GUI editor related code
   * fix wrong digestmod of hmac.new calls (incorporate 1.9.9 patch)
   * fix broken table attribute processing (wikiutil.escape)
   * fix AttributeError in multifile action
",1.0,,1.0,tfidf
CVE-2017-5934,CVE-2017-5934/ef5c927dfa68b42939b85e3a4c7b97e4c5da51c6,https://github.com/moinwiki/moin-1.9/commit/ef5c927dfa68b42939b85e3a4c7b97e4c5da51c6,<s>Cross-site scripting (XSS) vulnerability in the link dialogue in GUI editor in MoinMoin before 1.9.10 allows remote attackers to inject arbitrary web script or HTML via unspecified vectors.</s>,"<s>wiki edits: only use the text editor (disable gui editor), fixes #4
</s>"," diff --git a/docs/CHANGES b/docs/CHANGES
index d28cbae6..2f8863a0 100644
--- a/docs/CHANGES
+++ b/docs/CHANGES
@@ -9,12 +9,6 @@ already better than the previous stable release. Our release policy is not
 trying to make a ""perfect release"" (as that release might NEVER get released),
 but to make progress and don't delay releases too much.
 
-Known main issues:
-
-  * The GUI WYSIWYG editor has still some issues and limitations.
-    If you can't live with those, you can simply switch it off by using:
-    editor_force = True
-    editor_default = 'text'  # internal default, just for completeness
 
 Version 1.9.10 (not released yet)
 
@@ -24,6 +18,21 @@ Version 1.9.10 (not released yet)
   * fix AttributeError in multifile action
 
   Other changes:
+  * disable the gui editor / enforce the text editor by default
+
+    fckeditor 2.6.11 as we bundle it (latest available version, but years
+    old) might have security issues meanwhile as it is not maintained any
+    more.
+
+    also, there ever have been major issues with MoinMoin's integration of
+    that ""gui editor"" (as our documentation pointed out since long).
+
+    if you want to give wiki users the choice to choose the gui editor
+    nevertheless, you can re-enable it in your wiki config:
+
+    editor_force = False
+    editor_ui = 'freechoice'
+
   * upgrade werkzeug to 0.14.1
   * upgrade passlib to 1.7.1
   * upgrade parsedatetime to 2.4
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2018-15133,CVE-2018-15133/c0eb9073eb2cedab1db6c0d1ea4b3aecdc258597,https://github.com/laravel/framework/commit/c0eb9073eb2cedab1db6c0d1ea4b3aecdc258597,"<s>In Laravel Framework through 5.5.40 and 5.6.x through 5.6.29, remote code execution might occur as a result of an unserialize call on a potentially untrusted X-XSRF-TOKEN value. This involves the decrypt method in Illuminate/Encryption/Encrypter.php and PendingBroadcast in gadgetchains/Laravel/RCE/3/chain.php in phpggc. The attacker must know the application key, which normally would never occur, but could happen if the attacker previously had privileged access or successfully accomplished a previous attack.</s>","<s>dont serialize csrf cookie / header (#25121)

</s>"," diff --git a/src/Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.php b/src/Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.php
index a33e20952f..89a5501791 100644
--- a/src/Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.php
+++ b/src/Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.php
@@ -138,7 +138,7 @@ protected function getTokenFromRequest($request)
         $token = $request->input('_token') ?: $request->header('X-CSRF-TOKEN');
 
         if (! $token && $header = $request->header('X-XSRF-TOKEN')) {
-            $token = $this->encrypter->decrypt($header);
+            $token = $this->encrypter->decrypt($header, false);
         }
 
         return $token;
",0.0,,0.0,lime
CVE-2018-15133,CVE-2018-15133/97467e3ca765f7a2f6cec8924ec2aa466c712c33,https://github.com/laravel/framework/commit/97467e3ca765f7a2f6cec8924ec2aa466c712c33,"<s>In Laravel Framework through 5.5.40 and 5.6.x through 5.6.29, remote code execution might occur as a result of an unserialize call on a potentially untrusted X-XSRF-TOKEN value. This involves the decrypt method in Illuminate/Encryption/Encrypter.php and PendingBroadcast in gadgetchains/Laravel/RCE/3/chain.php in phpggc. The attacker must know the application key, which normally would never occur, but could happen if the attacker previously had privileged access or successfully accomplished a previous attack.</s>","<s>disable serialization for all cookies
</s>"," diff --git a/src/Illuminate/Cookie/Middleware/EncryptCookies.php b/src/Illuminate/Cookie/Middleware/EncryptCookies.php
index 0989f7b12d..c9f94a28ef 100644
--- a/src/Illuminate/Cookie/Middleware/EncryptCookies.php
+++ b/src/Illuminate/Cookie/Middleware/EncryptCookies.php
@@ -25,15 +25,6 @@ class EncryptCookies
      */
     protected $except = [];
 
-    /**
-     * The cookies that should not be serialized.
-     *
-     * @var array
-     */
-    protected $serialization = [
-        'XSRF-TOKEN' => false,
-    ];
-
     /**
      * Create a new CookieGuard instance.
      *
@@ -43,8 +34,6 @@ class EncryptCookies
     public function __construct(EncrypterContract $encrypter)
     {
         $this->encrypter = $encrypter;
-
-        $this->serialization[config('session.cookie')] = false;
     }
 
     /**
@@ -104,7 +93,7 @@ protected function decryptCookie($name, $cookie)
     {
         return is_array($cookie)
                         ? $this->decryptArray($cookie)
-                        : $this->encrypter->decrypt($cookie, $this->serialization[$name] ?? true);
+                        : $this->encrypter->decrypt($cookie, false);
     }
 
     /**
@@ -119,7 +108,7 @@ protected function decryptArray(array $cookie)
 
         foreach ($cookie as $key => $value) {
             if (is_string($value)) {
-                $decrypted[$key] = $this->encrypter->decrypt($value, $this->serialization[$key] ?? true);
+                $decrypted[$key] = $this->encrypter->decrypt($value, false);
             }
         }
 
@@ -139,10 +128,8 @@ protected function encrypt(Response $response)
                 continue;
             }
 
-            $serialize = $this->serialization[$cookie->getName()] ?? true;
-
             $response->headers->setCookie($this->duplicate(
-                $cookie, $this->encrypter->encrypt($cookie->getValue(), $serialize)
+                $cookie, $this->encrypter->encrypt($cookie->getValue(), false)
             ));
         }
 
",1.0,,1.0,lime
,,,,,,,,,
CVE-2018-16389,CVE-2018-16389/ec483e9379aa622bfcc1b853b189c74288771f27,https://github.com/e107inc/e107/commit/ec483e9379aa622bfcc1b853b189c74288771f27,<s>e107_admin/banlist.php in e107 2.1.8 allows SQL injection via the old_ip parameter.</s>,"<s>Code cleanup
</s>"," diff --git a/e107_admin/banlist.php b/e107_admin/banlist.php
index ea564bd3b..591de39c0 100644
--- a/e107_admin/banlist.php
+++ b/e107_admin/banlist.php
@@ -79,7 +79,7 @@ class banlist_admin extends e_admin_dispatcher
 		'main/transfer'		=> array('caption'=> BANLAN_35, 'perm' => '4'),
 		'main/times'		=> array('caption'=> BANLAN_15, 'perm' => '0'),
 		'main/options'		=> array('caption'=> LAN_OPTIONS, 'perm' => '0'),
-//		'main/banlog'		=> array('caption'=> BANLAN_81, 'perm' => '0'),
+	//	'main/banlog'		=> array('caption'=> BANLAN_81, 'perm' => '0'),
 	);
 
 	protected $adminMenuAliases = array(
@@ -225,9 +225,139 @@ class banlist_ui extends e_admin_ui
 		}
 
 		
-		public function transferPage()
+		protected function transferPage()
 		{
-			//FIXME Put Import code in here. 
+
+			$ipAdministrator = new banlistManager;
+
+			// Character options for import & export
+			$separator_char = array(1 => ',', 2 => '|');
+			$quote_char = array(1 => '(none)', 2 => ""'"", 3 => '""');
+
+			$frm = e107::getForm();
+			$mes = e107::getMessage();
+
+			$error = false;
+
+			if(isset($_POST['ban_import']))  // Got a file to import
+			{
+				require_once(e_HANDLER . 'upload_handler.php');
+
+				if(($files = process_uploaded_files(e_UPLOAD, false, array('overwrite' => true, 'max_file_count' => 1, 'file_mask' => 'csv'))) === false)
+				{ // Invalid file
+					$error = true;
+					$mes->addError(BANLAN_47);
+				}
+
+				if(empty($files) || vartrue($files[0]['error']))
+				{
+					$error = true;
+					if(varset($files[0]['message']))
+					{
+						$mes->addError($files[0]['message']);
+					}
+				}
+
+				if(!$error) // Got a file of some sort
+				{
+					$message = process_csv(e_UPLOAD . $files[0]['name'],
+						intval(varset($_POST['ban_over_import'], 0)),
+						intval(varset($_POST['ban_over_expiry'], 0)),
+						$separator_char[intval(varset($_POST['ban_separator'], 1))],
+						$quote_char[intval(varset($_POST['ban_quote'], 3))]);
+					banlist_adminlog('07', 'File: ' . e_UPLOAD . $files[0]['name'] . '<br />' . $message);
+				}
+
+			}
+
+			$text = ""
+				<form method='post' action='"" . e_ADMIN_ABS . ""banlist_export.php' id='core-banlist-transfer-form' >
+					<fieldset id='core-banlist-transfer-export'>
+						<legend>"" . BANLAN_40 . ""</legend>
+						<table class='table adminlist'>
+							<colgroup>
+								<col style='width:30%' />
+								<col style='width:30%' />
+								<col style='width:40%' />
+							</colgroup>
+							<tbody>
+								<tr>
+									<th colspan='2'>"" . BANLAN_36 . ""</th>
+									<th>&nbsp;</th>
+								</tr>
+				"";
+
+
+			foreach($ipAdministrator->getValidReasonList() as $i) //FIXME $frm->label()
+			{
+				$text .= ""
+								<tr>
+								<td colspan='3'>
+									"" . $frm->checkbox(""ban_types[{$i}]"", $i) . $frm->label($ipAdministrator->getBanTypeString($i, false), ""ban_types[{$i}]"", $i) . ""
+									<span class='field-help'>("" . $ipAdministrator->getBanTypeString($i, true) . "")</span>
+								</td></tr>
+				"";
+			}
+
+			$text .= ""<tr>
+				<td>"" . BANLAN_79 . ""</td>
+				<td>"" . $frm->select('ban_separator', $separator_char) . ' ' . BANLAN_37 . ""</td>
+			<td>"" . $frm->select('ban_quote', $quote_char) . ' ' . BANLAN_38 . ""</td></tr>"";
+
+			$text .= ""
+	
+							</tbody>
+						</table>
+						<div class='buttons-bar center'>"" . $frm->admin_button('ban_export', BANLAN_39, 'export', BANLAN_39) . ""</div>
+							<input type='hidden' name='e-token' value='"" . e_TOKEN . ""' />
+					</fieldset>
+				</form>
+			"";
+
+			// Now do the import options
+			$text .= ""
+				<form enctype='multipart/form-data' method='post' action='"" . e_SELF . ""?transfer' id='ban_import_form' >
+					<fieldset id='core-banlist-transfer-import'>
+						<legend>"" . BANLAN_41 . ""</legend>
+						<table class='table adminlist'>
+							<colgroup>
+								<col style='width:30%' />
+								<col style='width:30%' />
+								<col style='width:40%' />
+							</colgroup>
+							<tbody>
+								<tr>
+									<th colspan='2'>"" . BANLAN_42 . ""</th>
+									<th>&nbsp;</th>
+								</tr>
+								<tr>
+									<td colspan='3'>"" . $frm->checkbox('ban_over_import', 1, '', array('label' => BANLAN_43)) . ""</td>
+								</tr>
+								<tr>
+									<td colspan='3'>"" . $frm->checkbox('ban_over_expiry', 1, '', array('label' => BANLAN_44)) . ""</td>
+								</tr>
+								<tr>
+									<td>"" . BANLAN_46 . ""</td>
+									<td colspan='2'>
+										"" . $frm->file('file_userfile[]', array('size' => '40')) . ""
+									</td>
+								</tr>
+								<tr>
+				<td>"" . BANLAN_80 . ""</td>
+				<td>"" . $frm->select('ban_separator', $separator_char) . ' ' . BANLAN_37 . ""</td>
+				<td>"" . $frm->select('ban_quote', $quote_char) . ' ' . BANLAN_38 . ""</td></tr>
+					</tbody>
+						</table>
+						<div class='buttons-bar center'>
+						"" . $frm->admin_button('ban_import', BANLAN_45, 'import') . $frm->token(). ""
+						</div>
+	
+	
+					</fieldset>
+				</form>
+			"";
+
+			return $mes->render() . $text;
 		}
 		
 	
@@ -359,10 +489,140 @@ class banlist_ui extends e_admin_ui
 			echo $mes->render().$text; 
 		}		
 
+
+		private",0.0,,1.0,tfidf
CVE-2018-16389,CVE-2018-16389/e231a19ab9971fe22cec3781113359ff931596fd,https://github.com/e107inc/e107/commit/e231a19ab9971fe22cec3781113359ff931596fd,<s>e107_admin/banlist.php in e107 2.1.8 allows SQL injection via the old_ip parameter.</s>,"<s>Issue #3306
</s>"," diff --git a/e107_handlers/pref_class.php b/e107_handlers/pref_class.php
index e219182a0..57549820a 100644
--- a/e107_handlers/pref_class.php
+++ b/e107_handlers/pref_class.php
@@ -845,7 +845,7 @@ final class e_core_pref extends e_pref
 		parent::__construct($pref_id, $pref_alias);
 		if($load && $pref_id)
 		{
-			$this->load($pref_id, $load);
+			$this->load();
 		}
 
 
",1.0,,0.0,tfidf
,,,,,,,,,
CVE-2015-1344,CVE-2015-1344/8ee2a503e102b1a43ec4d83113dc275ab20a869a,https://github.com/lxc/lxcfs/commit/8ee2a503e102b1a43ec4d83113dc275ab20a869a,"<s>The do_write_pids function in lxcfs.c in LXCFS before 0.12 does not properly check permissions, which allows local users to gain privileges by writing a pid to the tasks file.</s>","<s>Implement privilege check when moving tasks
When writing pids to a tasks file in lxcfs, lxcfs was checking
for privilege over the tasks file but not over the pid being
moved.  Since the cgm_movepid request is done as root on the host,
not with the requestor's credentials, we must copy the check which
cgmanager was doing to ensure that the requesting task is allowed
to change the victim task's cgroup membership.
This is CVE-2015-1344
https://bugs.launchpad.net/ubuntu/+source/lxcfs/+bug/1512854
Signed-off-by: Serge Hallyn <serge.hallyn@ubuntu.com>
</s>"," diff --git a/lxcfs.c b/lxcfs.c
index 2c5aca4..5eb63c8 100644
--- a/lxcfs.c
+++ b/lxcfs.c
@@ -1336,7 +1336,95 @@ again:
 	goto loop;
 }
 
-static bool do_write_pids(pid_t tpid, const char *contrl, const char *cg, const char *file, const char *buf)
+/*
+ * Given host @uid, return the uid to which it maps in
+ * @pid's user namespace, or -1 if none.
+ */
+bool hostuid_to_ns(uid_t uid, pid_t pid, uid_t *answer)
+{
+	FILE *f;
+	char line[400];
+
+	sprintf(line, ""/proc/%d/uid_map"", pid);
+	if ((f = fopen(line, ""r"")) == NULL) {
+		return false;
+	}
+
+	*answer = convert_id_to_ns(f, uid);
+	fclose(f);
+
+	if (*answer == -1)
+		return false;
+	return true;
+}
+
+/*
+ * get_pid_creds: get the real uid and gid of @pid from
+ * /proc/$$/status
+ * (XXX should we use euid here?)
+ */
+void get_pid_creds(pid_t pid, uid_t *uid, gid_t *gid)
+{
+	char line[400];
+	uid_t u;
+	gid_t g;
+	FILE *f;
+
+	*uid = -1;
+	*gid = -1;
+	sprintf(line, ""/proc/%d/status"", pid);
+	if ((f = fopen(line, ""r"")) == NULL) {
+		fprintf(stderr, ""Error opening %s: %s\n"", line, strerror(errno));
+		return;
+	}
+	while (fgets(line, 400, f)) {
+		if (strncmp(line, ""Uid:"", 4) == 0) {
+			if (sscanf(line+4, ""%u"", &u) != 1) {
+				fprintf(stderr, ""bad uid line for pid %u\n"", pid);
+				fclose(f);
+				return;
+			}
+			*uid = u;
+		} else if (strncmp(line, ""Gid:"", 4) == 0) {
+			if (sscanf(line+4, ""%u"", &g) != 1) {
+				fprintf(stderr, ""bad gid line for pid %u\n"", pid);
+				fclose(f);
+				return;
+			}
+			*gid = g;
+		}
+	}
+	fclose(f);
+}
+
+/*
+ * May the requestor @r move victim @v to a new cgroup?
+ * This is allowed if
+ *   . they are the same task
+ *   . they are ownedy by the same uid
+ *   . @r is root on the host, or
+ *   . @v's uid is mapped into @r's where @r is root.
+ */
+bool may_move_pid(pid_t r, uid_t r_uid, pid_t v)
+{
+	uid_t v_uid, tmpuid;
+	gid_t v_gid;
+
+	if (r == v)
+		return true;
+	if (r_uid == 0)
+		return true;
+	get_pid_creds(v, &v_uid, &v_gid);
+	if (r_uid == v_uid)
+		return true;
+	if (hostuid_to_ns(r_uid, r, &tmpuid) && tmpuid == 0
+			&& hostuid_to_ns(v_uid, r, &tmpuid))
+		return true;
+	return false;
+}
+
+static bool do_write_pids(pid_t tpid, uid_t tuid, const char *contrl, const char *cg,
+		const char *file, const char *buf)
 {
 	int sock[2] = {-1, -1};
 	pid_t qpid, cpid = -1;
@@ -1378,6 +1466,10 @@ static bool do_write_pids(pid_t tpid, const char *contrl, const char *cg, const
 
 		if (recv_creds(sock[0], &cred, &v)) {
 			if (v == '0') {
+				if (!may_move_pid(tpid, tuid, cred.pid)) {
+					fail = true;
+					break;
+				}
 				if (fprintf(pids_file, ""%d"", (int) cred.pid) < 0)
 					fail = true;
 			}
@@ -1450,7 +1542,7 @@ int cg_write(const char *path, const char *buf, size_t size, off_t offset,
 			strcmp(f->file, ""/cgroup.procs"") == 0 ||
 			strcmp(f->file, ""cgroup.procs"") == 0)
 		// special case - we have to translate the pids
-		r = do_write_pids(fc->pid, f->controller, f->cgroup, f->file, localbuf);
+		r = do_write_pids(fc->pid, fc->uid, f->controller, f->cgroup, f->file, localbuf);
 	else
 		r = cgfs_set_value(f->controller, f->cgroup, f->file, localbuf);
 
",1.0,,1.0,tfidf
CVE-2015-1344,CVE-2015-1344/d6ae514d74ea142660b42310d9217850b6ac3995,https://github.com/lxc/lxcfs/commit/d6ae514d74ea142660b42310d9217850b6ac3995,"<s>The do_write_pids function in lxcfs.c in LXCFS before 0.12 does not properly check permissions, which allows local users to gain privileges by writing a pid to the tasks file.</s>","<s>travis: do a dist-upgrade...?
Signed-off-by: Serge Hallyn <serge.hallyn@ubuntu.com>
</s>"," diff --git a/.travis.yml b/.travis.yml
index 21dd7ba..1092116 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -5,6 +5,7 @@ compiler:
 before_install:
  - sudo add-apt-repository ppa:ubuntu-lxc/daily -y
  - sudo apt-get update -qq
+ - sudo apt-get dist-upgrade -qq
  - sudo apt-get install -qq libfuse-dev libdbus-glib-1-dev libglib2.0-dev coreutils cgmanager
  - sudo apt-get install -qq realpath || true
  - sudo apt-get install -qq automake libtool
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2018-6767,CVE-2018-6767/d5bf76b5a88d044a1be1d5656698e3ba737167e5,https://github.com/dbry/WavPack/commit/d5bf76b5a88d044a1be1d5656698e3ba737167e5,<s>A stack-based buffer over-read in the ParseRiffHeaderConfig function of cli/riff.c file of WavPack 5.1.0 allows a remote attacker to cause a denial-of-service attack or possibly have unspecified other impact via a maliciously crafted RF64 file.</s>,"<s>issue #27, do not overwrite stack on corrupt RF64 file
</s>"," diff --git a/cli/riff.c b/cli/riff.c
index 8b1af45..de98c1e 100644
--- a/cli/riff.c
+++ b/cli/riff.c
@@ -42,6 +42,7 @@ typedef struct {
 
 #pragma pack(pop)
 
+#define CS64ChunkFormat ""4D""
 #define DS64ChunkFormat ""DDDL""
 
 #define WAVPACK_NO_ERROR    0
@@ -101,13 +102,13 @@ int ParseRiffHeaderConfig (FILE *infile, char *infilename, char *fourcc, Wavpack
 
         if (!strncmp (chunk_header.ckID, ""ds64"", 4)) {
             if (chunk_header.ckSize < sizeof (DS64Chunk) ||
-                !DoReadFile (infile, &ds64_chunk, chunk_header.ckSize, &bcount) ||
-                bcount != chunk_header.ckSize) {
+                !DoReadFile (infile, &ds64_chunk, sizeof (DS64Chunk), &bcount) ||
+                bcount != sizeof (DS64Chunk)) {
                     error_line (""%s is not a valid .WAV file!"", infilename);
                     return WAVPACK_SOFT_ERROR;
             }
             else if (!(config->qmode & QMODE_NO_STORE_WRAPPER) &&
-                !WavpackAddWrapper (wpc, &ds64_chunk, chunk_header.ckSize)) {
+                !WavpackAddWrapper (wpc, &ds64_chunk, sizeof (DS64Chunk))) {
                     error_line (""%s"", WavpackGetErrorMessage (wpc));
                     return WAVPACK_SOFT_ERROR;
             }
@@ -315,10 +316,11 @@ int ParseRiffHeaderConfig (FILE *infile, char *infilename, char *fourcc, Wavpack
 
 int WriteRiffHeader (FILE *outfile, WavpackContext *wpc, int64_t total_samples, int qmode)
 {
-    int do_rf64 = 0, write_junk = 1;
+    int do_rf64 = 0, write_junk = 1, table_length = 0;
     ChunkHeader ds64hdr, datahdr, fmthdr;
     RiffChunkHeader riffhdr;
     DS64Chunk ds64_chunk;
+    CS64Chunk cs64_chunk;
     JunkChunk junkchunk;
     WaveHeader wavhdr;
     uint32_t bcount;
@@ -380,6 +382,7 @@ int WriteRiffHeader (FILE *outfile, WavpackContext *wpc, int64_t total_samples,
     strncpy (riffhdr.formType, ""WAVE"", sizeof (riffhdr.formType));
     total_riff_bytes = sizeof (riffhdr) + wavhdrsize + sizeof (datahdr) + ((total_data_bytes + 1) & ~(int64_t)1);
     if (do_rf64) total_riff_bytes += sizeof (ds64hdr) + sizeof (ds64_chunk);
+    total_riff_bytes += table_length * sizeof (CS64Chunk);
     if (write_junk) total_riff_bytes += sizeof (junkchunk);
     strncpy (fmthdr.ckID, ""fmt "", sizeof (fmthdr.ckID));
     strncpy (datahdr.ckID, ""data"", sizeof (datahdr.ckID));
@@ -394,11 +397,12 @@ int WriteRiffHeader (FILE *outfile, WavpackContext *wpc, int64_t total_samples,
 
     if (do_rf64) {
         strncpy (ds64hdr.ckID, ""ds64"", sizeof (ds64hdr.ckID));
-        ds64hdr.ckSize = sizeof (ds64_chunk);
+        ds64hdr.ckSize = sizeof (ds64_chunk) + (table_length * sizeof (CS64Chunk));
         CLEAR (ds64_chunk);
         ds64_chunk.riffSize64 = total_riff_bytes;
         ds64_chunk.dataSize64 = total_data_bytes;
         ds64_chunk.sampleCount64 = total_samples;
+        ds64_chunk.tableLength = table_length;
         riffhdr.ckSize = (uint32_t) -1;
         datahdr.ckSize = (uint32_t) -1;
         WavpackNativeToLittleEndian (&ds64hdr, ChunkHeaderFormat);
@@ -409,6 +413,14 @@ int WriteRiffHeader (FILE *outfile, WavpackContext *wpc, int64_t total_samples,
         datahdr.ckSize = (uint32_t) total_data_bytes;
     }
 
+    // this ""table"" is just a dummy placeholder for testing (normally not written)
+
+    if (table_length) {
+        strncpy (cs64_chunk.ckID, ""dmmy"", sizeof (cs64_chunk.ckID));
+        cs64_chunk.chunkSize64 = 12345678;
+        WavpackNativeToLittleEndian (&cs64_chunk, CS64ChunkFormat);
+    }
+
     // write the RIFF chunks up to just before the data starts
 
     WavpackNativeToLittleEndian (&riffhdr, ChunkHeaderFormat);
@@ -418,8 +430,21 @@ int WriteRiffHeader (FILE *outfile, WavpackContext *wpc, int64_t total_samples,
 
     if (!DoWriteFile (outfile, &riffhdr, sizeof (riffhdr), &bcount) || bcount != sizeof (riffhdr) ||
         (do_rf64 && (!DoWriteFile (outfile, &ds64hdr, sizeof (ds64hdr), &bcount) || bcount != sizeof (ds64hdr))) ||
-        (do_rf64 && (!DoWriteFile (outfile, &ds64_chunk, sizeof (ds64_chunk), &bcount) || bcount != sizeof (ds64_chunk))) ||
-        (write_junk && (!DoWriteFile (outfile, &junkchunk, sizeof (junkchunk), &bcount) || bcount != sizeof (junkchunk))) ||
+        (do_rf64 && (!DoWriteFile (outfile, &ds64_chunk, sizeof (ds64_chunk), &bcount) || bcount != sizeof (ds64_chunk)))) {
+            error_line (""can't write .WAV data, disk probably full!"");
+            return FALSE;
+    }
+
+    // again, this is normally not written except for testing
+
+    while (table_length--)
+        if (!DoWriteFile (outfile, &cs64_chunk, sizeof (cs64_chunk), &bcount) || bcount != sizeof (cs64_chunk)) {
+            error_line (""can't write .WAV data, disk probably full!"");
+            return FALSE;
+        }
+
+
+    if ((write_junk && (!DoWriteFile (outfile, &junkchunk, sizeof (junkchunk), &bcount) || bcount != sizeof (junkchunk))) ||
         !DoWriteFile (outfile, &fmthdr, sizeof (fmthdr), &bcount) || bcount != sizeof (fmthdr) ||
         !DoWriteFile (outfile, &wavhdr, wavhdrsize, &bcount) || bcount != wavhdrsize ||
         !DoWriteFile (outfile, &datahdr, siz",1.0,,1.0,lime
CVE-2018-6767,CVE-2018-6767/26cb47f99d481ad9b93eeff80d26e6b63bbd7e15,https://github.com/dbry/WavPack/commit/26cb47f99d481ad9b93eeff80d26e6b63bbd7e15,<s>A stack-based buffer over-read in the ParseRiffHeaderConfig function of cli/riff.c file of WavPack 5.1.0 allows a remote attacker to cause a denial-of-service attack or possibly have unspecified other impact via a maliciously crafted RF64 file.</s>,"<s>issue #30 issue #31 issue #32: no multiple format chunks in WAV or W64
</s>"," diff --git a/cli/riff.c b/cli/riff.c
index 7bddf63..5d6452e 100644
--- a/cli/riff.c
+++ b/cli/riff.c
@@ -53,7 +53,7 @@ extern int debug_logging_mode;
 
 int ParseRiffHeaderConfig (FILE *infile, char *infilename, char *fourcc, WavpackContext *wpc, WavpackConfig *config)
 {
-    int is_rf64 = !strncmp (fourcc, ""RF64"", 4), got_ds64 = 0;
+    int is_rf64 = !strncmp (fourcc, ""RF64"", 4), got_ds64 = 0, format_chunk = 0;
     int64_t total_samples = 0, infilesize;
     RiffChunkHeader riff_chunk_header;
     ChunkHeader chunk_header;
@@ -140,6 +140,11 @@ int ParseRiffHeaderConfig (FILE *infile, char *infilename, char *fourcc, Wavpack
         else if (!strncmp (chunk_header.ckID, ""fmt "", 4)) {     // if it's the format chunk, we want to get some info out of there and
             int supported = TRUE, format;                        // make sure it's a .wav file we can handle
 
+            if (format_chunk++) {
+                error_line (""%s is not a valid .WAV file!"", infilename);
+                return WAVPACK_SOFT_ERROR;
+            }
+
             if (chunk_header.ckSize < 16 || chunk_header.ckSize > sizeof (WaveHeader) ||
                 !DoReadFile (infile, &WaveHeader, chunk_header.ckSize, &bcount) ||
                 bcount != chunk_header.ckSize) {
",0.0,,0.0,lime
,,,,,,,,,
CVE-2022-0960,CVE-2022-0960/237ac6d43bf3728bf3587c486a23b4a48ea7acb3,https://github.com/star7th/showdoc/commit/237ac6d43bf3728bf3587c486a23b4a48ea7acb3,<s>Stored XSS viva .properties file upload in GitHub repository star7th/showdoc prior to 2.10.4.</s>,"<s>file upload bug
</s>"," diff --git a/server/Application/Api/Model/AttachmentModel.class.php b/server/Application/Api/Model/AttachmentModel.class.php
index f7781533..7f69b3cb 100644
--- a/server/Application/Api/Model/AttachmentModel.class.php
+++ b/server/Application/Api/Model/AttachmentModel.class.php
@@ -57,7 +57,7 @@ class AttachmentModel extends BaseModel {
 	public function upload($_files , $file_key , $uid , $item_id = 0  , $page_id = 0  ){
 		$uploadFile = $_files[$file_key] ;
 
-		if($this->isDangerFilename($uploadFile['name'])){
+		if( !$this->isAllowedFilename($_files[$file_key]['name']) ){
 			return false;
 		}
 
@@ -288,6 +288,7 @@ class AttachmentModel extends BaseModel {
 	}
 
 	// 
+	// ban
 	public function isDangerFilename($filename){
 
 		$isDangerStr = function ($filename , $keyword){
@@ -319,6 +320,24 @@ class AttachmentModel extends BaseModel {
 		return false;
 	}
 
-
+	// 
+	public function isAllowedFilename($filename){
+		$allow_array = array(
+			'.jpg','.jpeg','.png','.bmp','.gif','.ico','.webp',
+			'.mp3','.wav','.m4a','.ogg','.webma','.mp4','.flv',
+			'.mov','.webmv','.m3u8a','.flac','.mkv',
+			'.zip','.tar','.gz','.tgz','.ipa','.apk','.rar','.iso','.bz2','.epub',
+			'.pdf','.ofd','.swf','.epub','.xps',
+			'.doc','.docx','.odt','.rtf','.docm','.dotm','.dot','.dotx','.wps','.wpt',
+			'.ppt','.pptx','.xls','.xlsx','.txt','.md','.psd','.csv',
+			'.cer','.ppt','.pub','.properties','.json','.css',
+			) ;
+
+		$ext = strtolower(substr($filename,strripos($filename,'.')) ); //
+		if(in_array( $ext , $allow_array ) ){
+			return true ;
+		}
+		return false;
+	}
 
 }
",1.0,,0.0,lime
CVE-2022-0960,CVE-2022-0960/92bc6a83a3a60e01a0d2effb98ab47d8d7eab28f,https://github.com/star7th/showdoc/commit/92bc6a83a3a60e01a0d2effb98ab47d8d7eab28f,<s>Stored XSS viva .properties file upload in GitHub repository star7th/showdoc prior to 2.10.4.</s>,"<s>file upload bug
</s>"," diff --git a/server/Application/Api/Model/AttachmentModel.class.php b/server/Application/Api/Model/AttachmentModel.class.php
index c1b62cf2..965db2e6 100644
--- a/server/Application/Api/Model/AttachmentModel.class.php
+++ b/server/Application/Api/Model/AttachmentModel.class.php
@@ -324,13 +324,13 @@ class AttachmentModel extends BaseModel {
 	public function isAllowedFilename($filename){
 		$allow_array = array(
 			'.jpg','.jpeg','.png','.bmp','.gif','.ico','.webp',
-			'.mp3','.wav','.m4a','.ogg','.webma','.mp4','.flv',
+			'.mp3','.wav','.mp4',
 			'.mov','.webmv','.flac','.mkv',
-			'.zip','.tar','.gz','.tgz','.ipa','.apk','.rar','.iso','.bz2','.epub',
+			'.zip','.tar','.gz','.tgz','.ipa','.apk','.rar','.iso',
 			'.pdf','.ofd','.swf','.epub','.xps',
-			'.doc','.docx','.odt','.rtf','.docm','.dotm','.dot','.dotx','.wps',
+			'.doc','.docx','.wps',
 			'.ppt','.pptx','.xls','.xlsx','.txt','.psd','.csv',
-			'.cer','.ppt','.pub','.properties','.json','.css',
+			'.cer','.ppt','.pub','.json','.css',
 			) ;
 
 		$ext = strtolower(substr($filename,strripos($filename,'.')) ); //
",0.0,,1.0,lime
,,,,,,,,,
CVE-2022-2301,CVE-2022-2301/07f7d21ee30ca405beeb66a92b78d8e4d85eab22,https://github.com/hpjansson/chafa/commit/07f7d21ee30ca405beeb66a92b78d8e4d85eab22,<s>Buffer Over-read in GitHub repository hpjansson/chafa prior to 1.10.3.</s>,"<s>general: Add a security policy document
Fixes #89 (GitHub).
</s>"," diff --git a/SECURITY.md b/SECURITY.md
new file mode 100644
index 0000000..4633608
--- /dev/null
+++ b/SECURITY.md
@@ -0,0 +1,38 @@
+# Security Policies and Procedures
+
+This document outlines security procedures and general policies for Chafa.
+
+## Reporting a Bug
+
+We are grateful for the testing and analysis carried out by the community. All
+bug reports are taken seriously.
+
+Normally, bugs can be filed directly in the public GitHub issue tracker, but if
+you believe there is a security impact, please contact the lead maintainer at
+his e-mail address <hpj@hpjansson.org> instead.
+
+We will most likely respond within 48 hours, but since Chafa is a volunteer
+project, please allow up to a week for those rare times we're away from the
+keyboard or general connectivity.
+
+When a fix is published, you will receive credit under your real name or bug
+tracker handle in the NEWS document and possibly elsewhere (GitHub, blog post,
+etc). If you prefer to remain anonymous or pseudonymous, you should mention
+this in your e-mail.
+
+## Disclosure Policy
+
+The maintainer will coordinate the fix and release process, involving the
+following steps:
+
+  * Confirm the problem and determine the affected versions.
+  * Audit code to find any potential similar problems.
+  * Prepare fixes for all releases still under maintenance. These fixes will be
+    released as fast as possible.
+
+You may be asked to provide further information in pursuit of a fix.
+
+## Comments on this Policy
+
+If you have suggestions on how this process could be improved, please submit an
+issue or pull request.
",0.0,,0.0,lime
CVE-2022-2301,CVE-2022-2301/56fabfa18a6880b4cb66047fa6557920078048d9,https://github.com/hpjansson/chafa/commit/56fabfa18a6880b4cb66047fa6557920078048d9,<s>Buffer Over-read in GitHub repository hpjansson/chafa prior to 1.10.3.</s>,"<s>XwdLoader: Fix buffer over-read and improve general robustness
This commit fixes a buffer over-read that could occur due to g_ntohl()
evaluating its argument more than once if at least one of the following
is true:
* Build target is not x86.
* __OPTIMIZE__ is not set during compilation (e.g. -O0 was used).
It also improves robustness more generally and fixes an issue where the
wrong field was being used to calculate the color map size, causing some
image files that were otherwise fine to be rejected.
Reported by @JieyongMa via huntr.dev.
</s>"," diff --git a/tools/chafa/xwd-loader.c b/tools/chafa/xwd-loader.c
index fb22bff..eeb1a38 100644
--- a/tools/chafa/xwd-loader.c
+++ b/tools/chafa/xwd-loader.c
@@ -165,55 +165,79 @@ compute_pixel_type (XwdLoader *loader)
 }
 
 #define ASSERT_HEADER(x) if (!(x)) return FALSE
+#define UNPACK_FIELD_U32(dest, src, field) ((dest)->field = GUINT32_FROM_BE ((src)->field))
+#define UNPACK_FIELD_S32(dest, src, field) ((dest)->field = GINT32_FROM_BE ((src)->field))
 
 static gboolean
-load_header (XwdLoader *loader) // gconstpointer in, gsize in_max_len, XwdHeader *header_out)
+load_header (XwdLoader *loader)
 {
     XwdHeader *h = &loader->header;
     XwdHeader in;
-    const guint32 *p = (const guint32 *) &in;
+    const XwdHeader *inp;
 
     if (!file_mapping_taste (loader->mapping, &in, 0, sizeof (in)))
         return FALSE;
 
-    h->header_size = g_ntohl (*(p++));
-    h->file_version = g_ntohl (*(p++));
-    h->pixmap_format = g_ntohl (*(p++));
-    h->pixmap_depth = g_ntohl (*(p++));
-    h->pixmap_width = g_ntohl (*(p++));
-    h->pixmap_height = g_ntohl (*(p++));
-    h->x_offset = g_ntohl (*(p++));
-    h->byte_order = g_ntohl (*(p++));
-    h->bitmap_unit = g_ntohl (*(p++));
-    h->bitmap_bit_order = g_ntohl (*(p++));
-    h->bitmap_pad = g_ntohl (*(p++));
-    h->bits_per_pixel = g_ntohl (*(p++));
-    h->bytes_per_line = g_ntohl (*(p++));
-    h->visual_class = g_ntohl (*(p++));
-    h->red_mask = g_ntohl (*(p++));
-    h->green_mask = g_ntohl (*(p++));
-    h->blue_mask = g_ntohl (*(p++));
-    h->bits_per_rgb = g_ntohl (*(p++));
-    h->color_map_entries = g_ntohl (*(p++));
-    h->n_colors = g_ntohl (*(p++));
-    h->window_width = g_ntohl (*(p++));
-    h->window_height = g_ntohl (*(p++));
-    h->window_x = g_ntohl (*(p++));
-    h->window_y = g_ntohl (*(p++));
-    h->window_border_width = g_ntohl (*(p++));
+    inp = &in;
+
+    UNPACK_FIELD_U32 (h, inp, header_size);
+    UNPACK_FIELD_U32 (h, inp, file_version);
+    UNPACK_FIELD_U32 (h, inp, pixmap_format);
+    UNPACK_FIELD_U32 (h, inp, pixmap_depth);
+    UNPACK_FIELD_U32 (h, inp, pixmap_width);
+    UNPACK_FIELD_U32 (h, inp, pixmap_height);
+    UNPACK_FIELD_U32 (h, inp, x_offset);
+    UNPACK_FIELD_U32 (h, inp, byte_order);
+    UNPACK_FIELD_U32 (h, inp, bitmap_unit);
+    UNPACK_FIELD_U32 (h, inp, bitmap_bit_order);
+    UNPACK_FIELD_U32 (h, inp, bitmap_pad);
+    UNPACK_FIELD_U32 (h, inp, bits_per_pixel);
+    UNPACK_FIELD_U32 (h, inp, bytes_per_line);
+    UNPACK_FIELD_U32 (h, inp, visual_class);
+    UNPACK_FIELD_U32 (h, inp, red_mask);
+    UNPACK_FIELD_U32 (h, inp, green_mask);
+    UNPACK_FIELD_U32 (h, inp, blue_mask);
+    UNPACK_FIELD_U32 (h, inp, bits_per_rgb);
+    UNPACK_FIELD_U32 (h, inp, color_map_entries);
+    UNPACK_FIELD_U32 (h, inp, n_colors);
+    UNPACK_FIELD_U32 (h, inp, window_width);
+    UNPACK_FIELD_U32 (h, inp, window_height);
+    UNPACK_FIELD_S32 (h, inp, window_x);
+    UNPACK_FIELD_S32 (h, inp, window_y);
+    UNPACK_FIELD_U32 (h, inp, window_border_width);
 
     /* Only support the most common/useful subset of XWD files out there;
-     * namely, that corresponding to screen dumps from modern X.Org servers. */
+     * namely, that corresponding to screen dumps from modern X.Org servers.
+     * We could check visual_class == 5 too, but the other fields convey all
+     * the info we need. */
 
     ASSERT_HEADER (h->header_size >= sizeof (XwdHeader));
+    ASSERT_HEADER (h->header_size <= 65535);
     ASSERT_HEADER (h->file_version == 7);
     ASSERT_HEADER (h->pixmap_depth == 24);
 
+    /* Should be zero for truecolor/directcolor. Cap it to prevent overflows. */
+    ASSERT_HEADER (h->color_map_entries <= 256);
+
     /* Xvfb sets bits_per_rgb to 8, but 'convert' uses 24 for the same image data. One
      * of them is likely misunderstanding. Let's be lenient and accept either. */
     ASSERT_HEADER (h->bits_per_rgb == 8 || h->bits_per_rgb == 24);
 
+    /* These are the pixel formats we allow. */
+    ASSERT_HEADER (h->bits_per_pixel == 24 || h->bits_per_pixel == 32);
+
+    /* Enforce sane dimensions. */
+    ASSERT_HEADER (h->pixmap_width >= 1 && h->pixmap_width <= 65535);
+    ASSERT_HEADER (h->pixmap_height >= 1 && h->pixmap_height <= 65535);
+
+    /* Make sure rowstride can actually hold a row's worth of data but is not padded to
+     * something ridiculous. */
     ASSERT_HEADER (h->bytes_per_line >= h->pixmap_width * (h->bits_per_pixel / 8));
+    ASSERT_HEADER (h->bytes_per_line <= h->pixmap_width * (h->bits_per_pixel / 8) + 1024);
+
+    /* Make sure the total allocation/map is not too big. */
+    ASSERT_HEADER (h->bytes_per_line * h->pixmap_height < (1UL << 31) - 65536 - 256 * 32);
+
     ASSERT_HEADER (compute_pixel_type (loader) < CHAFA_PIXEL_MAX);
 
     loader->file_data = file_mapping_get_data (loader->mapping, &loader->file_data_len);
@@ -221,11 +245,11 @@ load_header (XwdLoader *loader) // gconstpointer in, gsize in_max_len, XwdHeader
         return FALSE;
 
     ASSERT_HEADER (loader->file_data_len >= h->header_size
-                   + h->n_colors * sizeof (XwdColor)
-                   + h->pixmap",1.0,,1.0,lime
,,,,,,,,,
CVE-2018-1306,CVE-2018-1306/c5fba6a28eed316390e97d1be48c46b2b52c2fe6,https://github.com/apache/portals-pluto/commit/c5fba6a28eed316390e97d1be48c46b2b52c2fe6,"<s>The PortletV3AnnotatedDemo Multipart Portlet war file code provided in Apache Pluto version 3.0.0 could allow a remote attacker to obtain sensitive information, caused by the failure to restrict path information provided during a file upload. An attacker could exploit this vulnerability to obtain configuration data and other sensitive information.</s>","<s>[maven-release-plugin] prepare for next development iteration
</s>"," diff --git a/PortletV3AnnotatedDemo/pom.xml b/PortletV3AnnotatedDemo/pom.xml
index f888e9297..96dda3624 100644
--- a/PortletV3AnnotatedDemo/pom.xml
+++ b/PortletV3AnnotatedDemo/pom.xml
@@ -21,7 +21,7 @@
     <parent>
         <groupId>org.apache.portals.pluto</groupId>
         <artifactId>pluto</artifactId>
-        <version>3.0.0</version>
+        <version>3.0.1-SNAPSHOT</version>
     </parent>
 
    <artifactId>PortletV3AnnotatedDemo</artifactId>
",0.0,,0.0,lime
CVE-2018-1306,CVE-2018-1306/89f6a59a740d0a8318640ca6015e9a381c5c6b50,https://github.com/apache/portals-pluto/commit/89f6a59a740d0a8318640ca6015e9a381c5c6b50,"<s>The PortletV3AnnotatedDemo Multipart Portlet war file code provided in Apache Pluto version 3.0.0 could allow a remote attacker to obtain sensitive information, caused by the failure to restrict path information provided during a file upload. An attacker could exploit this vulnerability to obtain configuration data and other sensitive information.</s>","<s>Changed the temp directory used by the demo portlet.
</s>"," diff --git a/PortletV3AnnotatedDemo/src/main/java/org/apache/portals/samples/MultipartPortlet.java b/PortletV3AnnotatedDemo/src/main/java/org/apache/portals/samples/MultipartPortlet.java
index 8b1b01c68..b0a1042bc 100644
--- a/PortletV3AnnotatedDemo/src/main/java/org/apache/portals/samples/MultipartPortlet.java
+++ b/PortletV3AnnotatedDemo/src/main/java/org/apache/portals/samples/MultipartPortlet.java
@@ -26,6 +26,8 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.OutputStream;
+import java.io.PrintWriter;
+import java.io.StringWriter;
 import java.nio.file.Files;
 import java.nio.file.StandardCopyOption;
 import java.util.ArrayList;
@@ -60,7 +62,7 @@ public class MultipartPortlet {
    private static final Logger LOGGER = Logger.getLogger(MultipartPortlet.class.getName());
 
    private static final String JSP    = ""/WEB-INF/jsp/multipartDialog.jsp"";
-   private static final String TMP    = ""/temp/"";
+   private static final String TMP    = ""/MultipartPortlet/temp/"";
 
    @ActionMethod(portletName = ""MultipartPortlet"")
    public void handleDialog(ActionRequest req, ActionResponse resp) throws IOException, PortletException {
@@ -107,19 +109,10 @@ public class MultipartPortlet {
          // quick solution that doesn't require additional Tomcat configuration.
 
          try {
-            String path = req.getPortletContext().getRealPath(TMP);
-            File dir = new File(path);
-            lines.add(""Temp path: "" + dir.getCanonicalPath());
-            if (!dir.exists()) {
-               lines.add(""Creating directory. Path: "" + dir.getCanonicalPath());
-               Files.createDirectories(dir.toPath());
-            }
-            String fn = TMP + part.getSubmittedFileName();
-            lines.add(""Temp file: "" + fn);
-            path = req.getPortletContext().getRealPath(fn);
-            File img = new File(path);
+            String fn = part.getSubmittedFileName();
+            File img = getFile(fn);
             if (img.exists()) {
-               lines.add(""deleting existing temp file."");
+               lines.add(""deleting existing temp file: "" + img.getCanonicalPath());
                img.delete();
             }
             InputStream is = part.getInputStream();
@@ -130,6 +123,15 @@ public class MultipartPortlet {
 
          } catch (Exception e) {
             lines.add(""Exception doing I/O: "" + e.toString());
+            
+            txt.setLength(0);
+            txt.append(""Problem getting temp file: "" + e.getMessage() + ""\n"");
+            StringWriter sw = new StringWriter();
+            PrintWriter pw = new PrintWriter(sw);
+            e.printStackTrace(pw);
+            pw.flush();
+            txt.append(sw.toString());
+            LOGGER.warning(txt.toString());
          }
       } else {
          lines.add(""file part was null"");
@@ -172,8 +174,7 @@ public class MultipartPortlet {
          FileInputStream fis = null;
          BufferedReader rdr = null;
          try {
-            String path = req.getPortletContext().getRealPath(fn);
-            File file = new File(path);
+            File file = getFile(fn);
             fis = new FileInputStream(file);
 
             if (ct.equals(""text/plain"")) {
@@ -232,10 +233,45 @@ public class MultipartPortlet {
       
       resp.setContentType(ct);
 
-      String path = req.getPortletContext().getRealPath(fn);
-      File file = new File(path);
-      OutputStream os = resp.getPortletOutputStream();
-      Files.copy(file.toPath(), os);
-      os.flush();
+      try {
+         File file = getFile(fn);
+         OutputStream os = resp.getPortletOutputStream();
+         Files.copy(file.toPath(), os);
+         os.flush();
+      } catch (Exception e) {
+         StringBuilder txt = new StringBuilder(128);
+         txt.append(""Problem retrieving temp file: "" + e.getMessage() + ""\n"");
+         StringWriter sw = new StringWriter();
+         PrintWriter pw = new PrintWriter(sw);
+         e.printStackTrace(pw);
+         pw.flush();
+         txt.append(sw.toString());
+         LOGGER.warning(txt.toString());
+      }
+      
+   }
+
+   /**
+    * Returns a File object representing the uploaded temporary file location. Note that the file may or may not exist.
+    * The temp directories are created as necessary.
+    * 
+    * @param fn
+    *           the file name
+    * @return the File object
+    * @throws IOException 
+    */
+   private File getFile(String fn) throws IOException {
+      File tmp = null;
+
+      String path = System.getProperty(""java.io.tmpdir"") + TMP;
+      File dir = new File(path);
+      if (!dir.exists()) {
+         LOGGER.fine(""Creating directory. Path: "" + dir.getCanonicalPath());
+         Files.createDirectories(dir.toPath());
+      }
+      tmp = new File(dir, fn);
+      LOGGER.fine(""Temp file: "" + tmp.getCanonicalPath());
+
+      return tmp;
    }
 }
",1.0,,1.0,lime
,,,,,,,,,
CVE-2022-0723,CVE-2022-0723/15e519a86e4b24526abaf9e6dc81cb1af86843a5,https://github.com/microweber/microweber/commit/15e519a86e4b24526abaf9e6dc81cb1af86843a5,<s>Cross-site Scripting (XSS) - Reflected in GitHub repository microweber/microweber prior to 1.2.11.</s>,"<s>update
</s>"," diff --git a/.github/workflows/templates.yml.backup b/.github/workflows/templates.yml.backup
deleted file mode 100644
index 2f2d9934f9..0000000000
--- a/.github/workflows/templates.yml.backup
+++ /dev/null
@@ -1,100 +0,0 @@
-name: PHP Templates Tests
-on: [push,pull_request]
-
-jobs:
-  main:
-    runs-on: ubuntu-latest
-    strategy:
-      max-parallel: 16
-      fail-fast: false
-      matrix:
-        php-versions: ['7.4']
-        templates: [
-          'microweber-templates/shopmag',
-          'microweber-templates/new-world',
-          'microweber-templates/dream',
-          'microweber-templates/template-human-recourses',
-          'microweber-templates/template-wedding',
-          'microweber-templates/template-services',
-          'microweber-templates/template-guesthouse',
-          'microweber-templates/template-beauty',
-          'microweber-templates/template-barbershop',
-          'microweber-templates/template-bamboo',
-          'microweber-templates/template-yoga-studio',
-          'microweber-templates/yachting',
-          'microweber-templates/wine',
-          'microweber-templates/template-urban',
-          'microweber-templates/template-theplace',
-          'microweber-templates/notary-services',
-          'microweber-templates/green',
-          'microweber-templates/template-digital',
-          'microweber-templates/template-comingsoon',
-          'microweber-templates/template-business',
-          'microweber-templates/template-blank',
-          'microweber-templates/template-cryptocurrency',
-          'microweber-templates/template-simple-shop',
-          'microweber-templates/template-networking-space',
-          'microweber-templates/template-hostel'
-        ]
-    steps:
-    - name: Checkout
-      uses: actions/checkout@v2
-    - uses: ./.github/actions/setup-php
-      with:
-        php_version: ${{ matrix.php-versions }}
-#    - name: Setup Apache
-#      uses: thunder/apache-shiva-php-action@v1
-#      with:
-#        php-version: '7.4'
-#        site-directory: /home/runner/work/microweber/microweber/
-#        # Defaults to 8888
-#        http-port:
-#          8000
-    - name: Add auth composer
-      id: create-json
-      uses: jsdaniell/create-json@1.1.2
-      with:
-        name: ""auth.json""
-        json: '{""http-basic"":{""packages.microweberapi.com"":{""username"":""${{ secrets.COMPOSER_USERNAME }}"",""password"":""${{ secrets.COMPOSER_PASSWORD }}""}}}'
-    - name: Install Composer dependencies
-      run: |
-        composer install --no-progress --prefer-dist --optimize-autoloader
-        chmod -R 0755 vendor/laravel/dusk/bin/
-        rm -rf /home/runner/work/microweber/microweber/templates/new-world/
-        rm -rf /home/runner/work/microweber/microweber/templates/shopmag/
-    - name: Install template
-      run: composer require ${{ matrix.templates }}
-    - name: Install Microweber with template ${{ matrix.templates }}
-      run: php artisan microweber:install admin@site.com 1 1 /home/runner/work/microweber/microweber/storage/database1.sqlite microweber microweber nopass sqlite -p site_ -t ${{ matrix.templates }} -d 1
-    - name: Run Laravel Server
-      run:  php -d variables_order=EGPCS -S 127.0.0.1:8000 > /home/runner/work/microweber/microweber/storage/logs/serve.log 2>&1 &
-    - name: Run Dusk Browse test
-      run:  php artisan dusk --filter=BrowsePagesForBrokenTagsTest
-    - name: Upload Screenshots
-      if: failure()
-      uses: actions/upload-artifact@v2
-      with:
-        name: screenshots
-        path: tests/Browser/screenshots
-    - name: Upload Console Logs
-      if: failure()
-      uses: actions/upload-artifact@v2
-      with:
-        name: console
-        path: tests/Browser/console
-    - name: Upload Laravel Storage
-      if: failure()
-      uses: actions/upload-artifact@v2
-      with:
-        name: storage
-        path: storage
-    - name: Upload Laravel config
-      if: failure()
-      uses: actions/upload-artifact@v2
-      with:
-        name: config
-        path:
-          config
-
-
-
",0.0,,1.0,lime
CVE-2022-0723,CVE-2022-0723/1c6c991aea1e5ed0f1ed06d0b955e7aea7ee43db,https://github.com/microweber/microweber/commit/1c6c991aea1e5ed0f1ed06d0b955e7aea7ee43db,<s>Cross-site Scripting (XSS) - Reflected in GitHub repository microweber/microweber prior to 1.2.11.</s>,"<s>clean xss on save media
</s>"," diff --git a/src/MicroweberPackages/Helper/HelpersServiceProvider.php b/src/MicroweberPackages/Helper/HelpersServiceProvider.php
index 6759920f53..34f157b375 100644
--- a/src/MicroweberPackages/Helper/HelpersServiceProvider.php
+++ b/src/MicroweberPackages/Helper/HelpersServiceProvider.php
@@ -40,6 +40,11 @@ class HelpersServiceProvider extends ServiceProvider
berPackages\Category\Repositories\CategoryRepository return new XSSSecurity();
ages\Content\Repositories\Content });
;
+ MicroweberPackages\Custom $this->app->singleton('html_clean', function () {
+ages\Helper\HTMLClean;
+ return new HTMLClean();
+XSSSecurity;
 use Micro });
+
+
\Repositories\MediaRepository; /**
 MicroweberPackages\Menu\Rep * @property \MicroweberPackages\Helper\UrlManagerModule\Rep $url_manager
;
@@ -60,6 +62 */
 @@ use MicroweberPackages\Utils\Http\Http;
  * @desc
  *
  * @property UrlManager                    $url_manager
+ * @property HTMLClean                            $html_clean
+ * @property XSSSecurity                            $xss_security
  * @property Format                            $format
  * @property ContentManager                $content_manager
  * @property RepositoryManager                $repository_manager
",1.0,,0.0,lime
,,,,,,,,,
CVE-2016-4793,CVE-2016-4793/908754649f70bab2b1093942e17c9a46a2fcf6c2,https://github.com/cakephp/cakephp/commit/908754649f70bab2b1093942e17c9a46a2fcf6c2,<s>The clientIp function in CakePHP 3.2.4 and earlier allows remote attackers to spoof their IP via the CLIENT-IP HTTP header.</s>,"<s>Don't trust Client-IP header unless behind a proxy
REMOTE_ADDR is a far safer place to get an client's IP over the header
which is easily spoofed. If someone is trusting the proxy we'll prefer
x-forwarded-for and fallback to client-ip should that not exist.
Remove support for http_clientaddress as I can't find any record of it
existing in either the php docs or http specs.
</s>"," diff --git a/tests/TestCase/Network/RequestTest.php b/tests/TestCase/Network/RequestTest.php
index 5f8298c047..be5ed71947 100644
--- a/tests/TestCase/Network/RequestTest.php
+++ b/tests/TestCase/Network/RequestTest.php
@@ -528,7 +528,7 @@ class RequestTest extends TestCase
      *
      * @return void
      */
-    public function testclientIp()
+    public function testClientIp()
     {
         $request = new Request(['environment' => [
             'HTTP_X_FORWARDED_FOR' => '192.168.1.5, 10.0.1.1, proxy.com',
@@ -539,17 +539,17 @@ class RequestTest extends TestCase
         $request->trustProxy = true;
         $this->assertEquals('192.168.1.5', $request->clientIp());
 
-        $request->trustProxy = false;
+        $request->env('HTTP_X_FORWARDED_FOR', '');
         $this->assertEquals('192.168.1.2', $request->clientIp());
 
+        $request->trustProxy = false;
+        $this->assertEquals('192.168.1.3', $request->clientIp());
+
         $request->env('HTTP_X_FORWARDED_FOR', '');
-        $this->assertEquals('192.168.1.2', $request->clientIp());
+        $this->assertEquals('192.168.1.3', $request->clientIp());
 
         $request->env('HTTP_CLIENT_IP', '');
         $this->assertEquals('192.168.1.3', $request->clientIp());
-
-        $request->env('HTTP_CLIENTADDRESS', '10.0.1.2, 10.0.1.1');
-        $this->assertEquals('10.0.1.2', $request->clientIp());
     }
 
     /**
",1.0,,1.0,tfidf
CVE-2016-4793,CVE-2016-4793/d6aa46749e14df117b1cf4edfe21952483f44e4d,https://github.com/cakephp/cakephp/commit/d6aa46749e14df117b1cf4edfe21952483f44e4d,<s>The clientIp function in CakePHP 3.2.4 and earlier allows remote attackers to spoof their IP via the CLIENT-IP HTTP header.</s>,"<s>Update version number to 3.2.5
</s>"," diff --git a/VERSION.txt b/VERSION.txt
index d25f51a525..0af5828b14 100644
--- a/VERSION.txt
+++ b/VERSION.txt
@@ -16,4 +16,4 @@
 // @license       http://www.opensource.org/licenses/mit-license.php MIT License
 // +--------------------------------------------------------------------------------------------+ //
 ////////////////////////////////////////////////////////////////////////////////////////////////////
-3.2.4
+3.2.5
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2021-3950,CVE-2021-3950/04483bdac3b5196737516398b5ce0383875a5c60,https://github.com/django-helpdesk/django-helpdesk/commit/04483bdac3b5196737516398b5ce0383875a5c60,<s>django-helpdesk is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</s>,"<s>Add `att.full_clean()` before saving
Fix issue https://github.com/django-helpdesk/django-helpdesk/issues/983
Also, fix bug stored XSS disclosure: https://huntr.dev/bounties/4d7a5fdd-b2de-467a-ade0-3f2fb386638e/
</s>"," diff --git a/helpdesk/lib.py b/helpdesk/lib.py
index 07d655c3..da853990 100644
--- a/helpdesk/lib.py
+++ b/helpdesk/lib.py
@@ -145,6 +145,7 @@ def process_attachments(followup, attached_files):
                 'application/octet-stream',
                 size=attached.size,
             )
+            att.full_clean()
             att.save()
 
             if attached.size < max_email_attachment_size:
",0.0,,1.0,lime
CVE-2021-3950,CVE-2021-3950/2c7065e0c4296e0c692fb4a7ee19c7357583af30,https://github.com/django-helpdesk/django-helpdesk/commit/2c7065e0c4296e0c692fb4a7ee19c7357583af30,<s>django-helpdesk is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</s>,"<s>Add function `htmlEntities`
`htmlentities()` is a function which converts special characters. This allows you to show to display the string without the browser reading it as HTML.
</s>"," diff --git a/helpdesk/templates/helpdesk/ticket_list.html b/helpdesk/templates/helpdesk/ticket_list.html
index c9a57d23..2894349b 100644
--- a/helpdesk/templates/helpdesk/ticket_list.html
+++ b/helpdesk/templates/helpdesk/ticket_list.html
@@ -330,7 +330,11 @@
         function get_url(row) {
             return ""{% url 'helpdesk:view' 1234 %}"".replace(/1234/, row.id.toString());
         }
-
+        
+        function htmlEntities(str) {
+            return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/""/g, '&quot;');
+        }
+        
         $(document).ready(function () {
             // Ticket DataTable Initialization
             $('#ticketTable').DataTable({
@@ -366,7 +370,7 @@
                             if (type === 'display') {
                                 data = '<div class=""tickettitle""><a href=""' + get_url(row) + '"" >' +
                                     row.id + '. ' +
-                                    row.title + '</a></div>';
+                                    htmlEntities(row.title) + '</a></div>';
                             }
                             return data
                         }
",1.0,,0.0,lime
,,,,,,,,,
CVE-2018-14523,CVE-2018-14523/802e8abf5ce7152952bcf8c767b7a5433177c421,https://github.com/aubio/aubio/commit/802e8abf5ce7152952bcf8c767b7a5433177c421,"<s>An issue was discovered in aubio 0.4.6. A buffer over-read can occur in new_aubio_pitchyinfft in pitch/pitchyinfft.c, as demonstrated by aubionotes.</s>","<s>src/pitch/pitchyinfft.c: comment out debug output
</s>"," diff --git a/src/pitch/pitchyinfft.c b/src/pitch/pitchyinfft.c
index 493ca08d..b613f60e 100644
--- a/src/pitch/pitchyinfft.c
+++ b/src/pitch/pitchyinfft.c
@@ -73,7 +73,9 @@ new_aubio_pitchyinfft (uint_t samplerate, uint_t bufsize)
   for (i = 0; i < p->weight->length; i++) {
     freq = (smpl_t) i / (smpl_t) bufsize *(smpl_t) samplerate;
     while (freq > freqs[j] && freqs[j] > 0) {
-      AUBIO_DBG(""freq %3.5f > %3.5f \tsamplerate %d (Hz) \t(weight length %d, bufsize %d) %d %d\n"", freq, freqs[j], samplerate, p->weight->length, bufsize, i, j);
+      //AUBIO_DBG(""freq %3.5f > %3.5f \tsamplerate %d (Hz) \t""
+      //    ""(weight length %d, bufsize %d) %d %d\n"", freq, freqs[j],
+      //    samplerate, p->weight->length, bufsize, i, j);
       j += 1;
     }
     a0 = weight[j - 1];
",0.0,,0.0,tfidf
CVE-2018-14523,CVE-2018-14523/af4f9e6a93b629fb6defa2a229ec828885b9d187,https://github.com/aubio/aubio/commit/af4f9e6a93b629fb6defa2a229ec828885b9d187,"<s>An issue was discovered in aubio 0.4.6. A buffer over-read can occur in new_aubio_pitchyinfft in pitch/pitchyinfft.c, as demonstrated by aubionotes.</s>","<s>src/pitch/pitchyinfft.c: fix out of bound read when samplerate > 50kHz (closes: #189)
</s>"," diff --git a/src/pitch/pitchyinfft.c b/src/pitch/pitchyinfft.c
index f213ef24..493ca08d 100644
--- a/src/pitch/pitchyinfft.c
+++ b/src/pitch/pitchyinfft.c
@@ -44,7 +44,7 @@ static const smpl_t freqs[] = {
      0.,    20.,    25.,   31.5,    40.,    50.,    63.,    80.,   100.,   125.,
    160.,   200.,   250.,   315.,   400.,   500.,   630.,   800.,  1000.,  1250.,
   1600.,  2000.,  2500.,  3150.,  4000.,  5000.,  6300.,  8000.,  9000., 10000.,
- 12500., 15000., 20000., 25100
+ 12500., 15000., 20000., 25100., -1.
 };
 
 static const smpl_t weight[] = {
@@ -72,7 +72,8 @@ new_aubio_pitchyinfft (uint_t samplerate, uint_t bufsize)
   p->weight = new_fvec (bufsize / 2 + 1);
   for (i = 0; i < p->weight->length; i++) {
     freq = (smpl_t) i / (smpl_t) bufsize *(smpl_t) samplerate;
-    while (freq > freqs[j]) {
+    while (freq > freqs[j] && freqs[j] > 0) {
+      AUBIO_DBG(""freq %3.5f > %3.5f \tsamplerate %d (Hz) \t(weight length %d, bufsize %d) %d %d\n"", freq, freqs[j], samplerate, p->weight->length, bufsize, i, j);
       j += 1;
     }
     a0 = weight[j - 1];
",1.0,,1.0,tfidf
,,,,,,,,,
CVE-2022-1533,CVE-2022-1533/eafc415bc6067e72577f70d6dd5acbf057ce6e6f,https://github.com/bfabiszewski/libmobi/commit/eafc415bc6067e72577f70d6dd5acbf057ce6e6f,<s>Buffer Over-read in GitHub repository bfabiszewski/libmobi prior to 0.11. This vulnerability is capable of arbitrary code execution.</s>,"<s>Fix wrong boundary checks in inflections parser resulting in stack buffer over-read with corrupt input
</s>"," diff --git a/src/index.c b/src/index.c
index 7e4f3b7..ca83675 100644
--- a/src/index.c
+++ b/src/index.c
@@ -961,17 +961,13 @@ MOBI_RET mobi_decode_infl(unsigned char *decoded, int *decoded_size, const unsig
 check when parsing inflections which could result in buffer over- }
 corrupt input
 2022-04-23: Fix formatting
 pos -= c - 10;
             dir = 0;
-            if (pos < 0 || pos > *decoded_size) {
-                debug_print(""Position setting failed (%s)\n"", decoded);
-                return MOBI_DATA_CORRUPT;
-            }
         }
         else {
             if (mod == 'i') {
                 const unsigned char *s = decoded + pos;
                 unsigned char *d = decoded + pos + 1;
                 const int l = *decoded_size - pos;
-                if (l < 0 || d + l > decoded + INDX_INFLBUF_SIZEMAX) {
+                if (pos < 0 || l < 0 || d + l > decoded + INDX_INFLBUF_SIZEMAX) {
                     debug_print(""Out of buffer in %s at pos: %i\n"", decoded, pos);
                     return MOBI_DATA_CORRUPT;
                 }
@@ -984,7 +980,7 @@ MOBI_RET mobi_decode_infl(unsigned char *decoded, int *decoded_size, const unsig
                 const unsigned char *s = decoded + pos + 1;
                 unsigned char *d = decoded + pos;
                 const int l = *decoded_size - pos;
-                if (l < 0 || d + l > decoded + INDX_INFLBUF_SIZEMAX) {
+                if (pos < 0 || l < 0 || s + l > decoded + INDX_INFLBUF_SIZEMAX) {
                     debug_print(""Out of buffer in %s at pos: %i\n"", decoded, pos);
                     return MOBI_DATA_CORRUPT;
                 }
",1.0,,1.0,lime
CVE-2022-1533,CVE-2022-1533/1e0378e6f9e4ae415cedc9eb10850888897c5dba,https://github.com/bfabiszewski/libmobi/commit/1e0378e6f9e4ae415cedc9eb10850888897c5dba,<s>Buffer Over-read in GitHub repository bfabiszewski/libmobi prior to 0.11. This vulnerability is capable of arbitrary code execution.</s>,"<s>Fix boundary checking error in markup search, that could cause buffer over-read with corrupt input
</s>"," diff --git a/ChangeLog b/ChangeLog
index 571ac3b..3f93455 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,4 @@
+2022-05-03: Fix boundary checking error in markup search, that could cause buffer over-read with corrupt input
 2022-05-02: Fix typo in macro name
 2022-04-27: Fix undefined behavior when passing null to strdup
 2022-04-27: Fix wrong boundary checks in inflections parser resulting in stack buffer over-read with corrupt input
",0.0,,0.0,lime
,,,,,,,,,
CVE-2016-6188,CVE-2016-6188/32bb1456e23a32c7f45079c3985bf732dd0d276d,https://github.com/inverse-inc/sogo/commit/32bb1456e23a32c7f45079c3985bf732dd0d276d,"<s>Memory leak in SOGo 2.3.7 allows remote attackers to cause a denial of service (memory consumption) via a large number of attempts to upload a large attachment, related to temporary files.</s>","<s>(feat) attachment size upload using WOMaxUploadSize (fixes #3510 and #3135)
</s>"," diff --git a/NEWS b/NEWS
index e8bedbf2a..a508400be 100644
--- a/NEWS
+++ b/NEWS
@@ -1,6 +1,10 @@
 2.3.9 (2016-XX-XX)
 ------------------
 
+New features
+ - you can now limit the file upload size using the WOMaxUploadSize
+   configuration parameter (integer value in kilobytes) (#3510, #3135)
+
 Enhancements
  - allow resources to prevent invitations (#3410)
  - now support EAS MIME truncation
",0.0,,1.0,lime
CVE-2016-6188,CVE-2016-6188/3a66e54bd0a306a93e0893660f0a7efa621b3e1d,https://github.com/inverse-inc/sogo/commit/3a66e54bd0a306a93e0893660f0a7efa621b3e1d,"<s>Memory leak in SOGo 2.3.7 allows remote attackers to cause a denial of service (memory consumption) via a large number of attempts to upload a large attachment, related to temporary files.</s>","<s>Update SOGoActiveSyncDispatcher.m
Add local memory pool so as to restrict memory consumption while waiting in the ping cycle.
Consumption can otherwise grow quite large while if the SOGoMaximumPingInterval and SOGoMaximumSyncInterval have been increased to allow for push ActiveSync.
</s>"," diff --git a/ActiveSync/SOGoActiveSyncDispatcher.m b/ActiveSync/SOGoActiveSyncDispatcher.m
index 366084fad..27fcabc5f 100644
--- a/ActiveSync/SOGoActiveSyncDispatcher.m
+++ b/ActiveSync/SOGoActiveSyncDispatcher.m
@@ -1999,7 +1999,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   NSMutableString *s;
   id collection;
   NSData *d;
-  
+  NSAutoreleasePool *pool;
 
   int i, j, heartbeatInterval, defaultInterval, internalInterval, status;
   
@@ -2061,6 +2061,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   // We enter our loop detection change
   for (i = 0; i < (heartbeatInterval/internalInterval); i++)
     {
+      pool = [[NSAutoreleasePool alloc] init];
       for (j = 0; j < [allFoldersID count]; j++)
         {
           collectionId = [allFoldersID objectAtIndex: j];
@@ -2085,7 +2086,8 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
               [foldersWithChanges addObject: collectionId];
             }
         }
-      
+      DESTROY(pool);
+
       if ([foldersWithChanges count])
         {
           [self logWithFormat: @""Change detected using Ping, we let the EAS client know to send a Sync.""];
",1.0,,0.0,lime
,,,,,,,,,
CVE-2010-1666,CVE-2010-1666/dc2b8781b8666de5ca707318521f554904fdd690,https://github.com/AGProjects/python-cjson/commit/dc2b8781b8666de5ca707318521f554904fdd690,"<s>Buffer overflow in Dan Pascu python-cjson 1.0.5, when UCS-4 encoding is enabled, allows context-dependent attackers to cause a denial of service (application crash) or possibly have unspecified other impact via vectors involving crafted Unicode input to the cjson.encode function.</s>","<s>Integrate modified 0001-fix-for-CVE-2010-1666 patch from Debian
</s>"," diff --git a/jsontest.py b/jsontest.py
index b5ad0b2..0f79307 100644
--- a/jsontest.py
+++ b/jsontest.py
@@ -317,6 +317,18 @@ class JsonTest(unittest.TestCase):
 
     def testWriteLong(self):
         self.assertEqual(""12345678901234567890"", cjson.encode(12345678901234567890))
+
+    def testWriteLongUnicode(self):
+        # This test causes a buffer overrun in cjson 1.0.5, on UCS4 builds.
+        # The string length is only resized for wide unicode characters if
+        # there is less than 12 bytes of space left. Padding with
+        # narrow-but-escaped characters prevents string resizing.
+        # Note that u'\U0001D11E\u1234' also breaks, but sometimes goes
+        # undetected.
+        s = cjson.encode(u'\U0001D11E\U0001D11E\U0001D11E\U0001D11E'
+                         u'\u1234\u1234\u1234\u1234\u1234\u1234')
+        self.assertEqual(r'""\U0001d11e\U0001d11e\U0001d11e\U0001d11e'
+                         r'\u1234\u1234\u1234\u1234\u1234\u1234""', s)
         
 def main():
     unittest.main()
",1.0,,1.0,tfidf
CVE-2010-1666,CVE-2010-1666/094a0f3fa212d282d93d67485a5204ec9a56e6db,https://github.com/AGProjects/python-cjson/commit/094a0f3fa212d282d93d67485a5204ec9a56e6db,"<s>Buffer overflow in Dan Pascu python-cjson 1.0.5, when UCS-4 encoding is enabled, allows context-dependent attackers to cause a denial of service (application crash) or possibly have unspecified other impact via vectors involving crafted Unicode input to the cjson.encode function.</s>","<s>Bumped Debian standards version to 3.9.2
</s>"," diff --git a/debian/control b/debian/control
index 2d29844..f0973a5 100644
--- a/debian/control
+++ b/debian/control
@@ -4,7 +4,7 @@ Priority: optional
 Maintainer: Dan Pascu <dan@ag-projects.com>
 Build-Depends: cdbs (>= 0.4.47), debhelper (>= 5.0.42), python-all-dev (>= 2.4.4-1), python-central (>= 0.5.6)
 XS-Python-Version: all
-Standards-Version: 3.7.2
+Standards-Version: 3.9.2
 
 Package: python-cjson
 Architecture: any
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2017-7654,CVE-2017-7654/51ec5601c2ec523bf2973fdc1eca77335eafb8de,https://github.com/eclipse/mosquitto/commit/51ec5601c2ec523bf2973fdc1eca77335eafb8de,"<s>In Eclipse Mosquitto 1.4.15 and earlier, a Memory Leak vulnerability was found within the Mosquitto Broker. Unauthenticated clients can send crafted CONNECT packets which could cause a denial of service in the Mosquitto Broker.</s>","<s>Fix memory leak that could be caused by a malicious CONNECT packet.
Closes #533493 (on Eclipse bugtracker)
Thanks to Daniel Romero.
</s>"," diff --git a/ChangeLog.txt b/ChangeLog.txt
index 7fc02fb9..2a6a6a19 100644
--- a/ChangeLog.txt
+++ b/ChangeLog.txt
@@ -1,6 +1,10 @@
 1.5 - 2018xxxx
 ==============
 
+Security:
+- Fix memory leak that could be caused by a malicious CONNECT packet. This
+  does not yet have a CVE assigned. Closes #533493 (on Eclipse bugtracker)
+
 Broker features:
 - Add per_listener_settings to allow authentication and access control to be
   per listener.
",0.0,,1.0,tfidf
CVE-2017-7654,CVE-2017-7654/c1bb673b1f2e4e04f18fb142be823ad28820fd94,https://github.com/eclipse/mosquitto/commit/c1bb673b1f2e4e04f18fb142be823ad28820fd94,"<s>In Eclipse Mosquitto 1.4.15 and earlier, a Memory Leak vulnerability was found within the Mosquitto Broker. Unauthenticated clients can send crafted CONNECT packets which could cause a denial of service in the Mosquitto Broker.</s>","<s>Split features/fixes in changelog.
</s>"," diff --git a/ChangeLog.txt b/ChangeLog.txt
index 661ec2f1..930b05eb 100644
--- a/ChangeLog.txt
+++ b/ChangeLog.txt
@@ -1,10 +1,9 @@
 1.5 - 2018xxxx
 ==============
 
-Broker:
+Broker features:
 - Add per_listener_settings to allow authentication and access control to be
   per listener.
-- Fix UNSUBSCRIBE with no topic is accepted on MQTT 3.1.1. Closes #665.
 - Add ability to deny access to SUBSCRIBE messages as well as the current
   read/write accesses. Currently for auth plugins only.
 - Reduce calls to malloc through the use of UHPA.
@@ -18,29 +17,40 @@ Broker:
     sending additional PUBLISH or PUBREL would not help the client catch
     up. Once the backlog has cleared the client will respond. If it is not
     able to catch up, sending additional duplicates would not help either.
-- Produce an error if two bridges share the same local_clientid.
 - Add use_subject_as_username option for certificate based client
   authentication to use the entire certificate subject as a username, rather
   than just the CN. Closes #469467.
-- Add systemd startup notification and services. Closes #471053.
-- Reduce unnecessary malloc and memcpy when receiving a message and storing
-  it. Closes #470258.
 - Change sys tree printing output. This format shouldn't be relied upon and
   may change at any time. Closes #470246.
 - Minimum supported libwebsockets version is now 1.3.
+- Add systemd startup notification and services. Closes #471053.
+- Reduce unnecessary malloc and memcpy when receiving a message and storing
+  it. Closes #470258.
 - Support for Windows XP has been dropped.
-- Miscellaneous fixes on Windows.
 - Bridge connections now default to using MQTT v3.1.1.
 - mosquitto_db_dump tool can now output some stats on clients.
-- perform utf-8 validation on incoming will, subscription and unsubscription
+- Perform utf-8 validation on incoming will, subscription and unsubscription
   topics.
 - new $SYS/broker/store/messages/count (deprecates $SYS/broker/messages/stored)
 - new $SYS/broker/store/messages/bytes
 - max_queued_bytes feature to limit queues by real size rather than
   than just message count. Closes Eclipse #452919 or Github #100
+- Add support for bridges to be configured to only send notifications to the
+  local broker.
+- Add set_tcp_nodelay option to allow Nagle's algorithm to be disabled on
+  client sockets. Closes #433.
+- The behaviour of allow_anonymous has changed. In the old behaviour, the
+  default if not set was to allow anonymous access. The new behaviour is to
+  default is to allow anonymous access unless another security option is set.
+  For example, if password_file is set and allow_anonymous is not set, then
+  anonymous access will be denied. It is still possible to allow anonymous
+  access by setting it explicitly.
+
+Broker fixes:
+- Fix UNSUBSCRIBE with no topic is accepted on MQTT 3.1.1. Closes #665.
+- Produce an error if two bridges share the same local_clientid.
+- Miscellaneous fixes on Windows.
 - queue_qos0_messages was not observing max_queued_** limits
-- Add support bridges to be configured to only send notifications to the local
-  broker.
 - When using the include_dir configuration option sort the files
   alphabetically before loading them.  Closes #17.
 - IPv6 is no longer disabled for websockets listeners.
@@ -62,16 +72,8 @@ Broker:
 - Fix upgrade_outgoing_qos for retained message. Closes #534.
 - Fix CONNACK message not being sent for unauthorised connect on websockets.
   Closes #8.
-- Add set_tcp_nodelay option to allow Nagle's algorithm to be disabled on
-  client sockets. Closes #433.
-- The behaviour of allow_anonymous has changed. In the old behaviour, the
-  default if not set was to allow anonymous access. The new behaviour is to
-  default is to allow anonymous access unless another security option is set.
-  For example, if password_file is set and allow_anonymous is not set, then
-  anonymous access will be denied. It is still possible to allow anonymous
-  access by setting it explicitly.
 
-Client library:
+Client library features:
 - Outgoing messages with QoS>1 are no longer retried after a timeout period.
   Messages will be retried when a client reconnects.
 - DNS-SRV support is now disabled by default.
@@ -91,6 +93,8 @@ Client library:
 - Add mosquitto_pub_topic_check2(), mosquitto_sub_topic_check2(), and
   mosquitto_topic_matches_sub2() which are identical to the similarly named
   functions but also take length arguments.
+
+Client library fixes:
 - Fix incorrect PSK key being used if it had leading zeroes.
 - Initialise ""result"" variable as soon as possible in
   mosquitto_topic_matches_sub. Closes #654.
@@ -98,7 +102,7 @@ Client library:
 - Fix mosquitto_topic_matches_sub() not correctly matching foo/bar against
   foo/+/#. Closes #670.
 
-Clients:
+Client features:
 - Add -F to mosquitto_sub to allow the user to choose the output format.
 - Add -U to mosquitto_sub for unsubscribing from topics.
 - Add -c (clean session) to mosquitto_pub.
@@ -106,10 +110,12 @@ Clients:
   messages.
 - Connections now default to using MQTT v3.1.1.
 - Default to using por",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2020-9547,CVE-2020-9547/9f4e97019fb0dd836533d0b6198c88787e235ae2,https://github.com/FasterXML/jackson-databind/commit/9f4e97019fb0dd836533d0b6198c88787e235ae2,"<s>FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig (aka ibatis-sqlmap).</s>","<s>Fixing issues #2631 and #2634
</s>"," diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
index 64c6c764f..bf04f1bde 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
@@ -128,6 +128,13 @@ public class SubTypeValidator
         // [databind#2620]: xbean-reflect
         s.add(""org.apache.xbean.propertyeditor.JndiConverter"");
 
+        // [databind#2631]: shaded hikari-config
+        s.add(""org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig"");
+
+        // [databind#2634]: ibatis-sqlmap, anteros-core
+        s.add(""com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig"");
+        s.add(""br.com.anteros.dbcp.AnterosDBCPConfig"");
+
         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);
     }
 
",1.0,,1.0,lime
CVE-2020-9547,CVE-2020-9547/fa67a16d7a34e51e80c217f29b6bbd765c3ce689,https://github.com/FasterXML/jackson-databind/commit/fa67a16d7a34e51e80c217f29b6bbd765c3ce689,"<s>FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig (aka ibatis-sqlmap).</s>","<s>[maven-release-plugin] prepare release jackson-databind-2.10.3
</s>"," diff --git a/pom.xml b/pom.xml
index c7c033a35..80542d572 100644
--- a/pom.xml
+++ b/pom.xml
@@ -10,7 +10,7 @@
 
   <groupId>com.fasterxml.jackson.core</groupId>
   <artifactId>jackson-databind</artifactId>
-  <version>2.10.3-SNAPSHOT</version>
+  <version>2.10.3</version>
   <name>jackson-databind</name>
   <packaging>bundle</packaging>
   <description>General data-binding functionality for Jackson: works on core streaming API</description>
@@ -21,7 +21,7 @@
     <connection>scm:git:git@github.com:FasterXML/jackson-databind.git</connection>
     <developerConnection>scm:git:git@github.com:FasterXML/jackson-databind.git</developerConnection>
     <url>http://github.com/FasterXML/jackson-databind</url>
-    <tag>HEAD</tag>
+    <tag>jackson-databind-2.10.3</tag>
   </scm>
 
   <properties>
",0.0,,0.0,lime
,,,,,,,,,
CVE-2019-13615,CVE-2019-13615/05beb69ba60acce09f73ed491bb76f332849c3a0,https://github.com/Matroska-Org/libebml/commit/05beb69ba60acce09f73ed491bb76f332849c3a0,"<s>libebml before 1.3.6, as used in the MKV module in VideoLAN VLC Media Player binaries before 3.0.3, has a heap-based buffer over-read in EbmlElement::FindNextElement.</s>","<s>Check the max size to read before actually reading
The size check waas also missing from the length parsing
</s>"," diff --git a/src/EbmlElement.cpp b/src/EbmlElement.cpp
index 143f439..ae4441e 100644
--- a/src/EbmlElement.cpp
+++ b/src/EbmlElement.cpp
@@ -404,12 +404,14 @@ EbmlElement * EbmlElement::FindNextElement(IOCallback & DataStream, const EbmlSe
         memmove(&PossibleIdNSize[0],&PossibleIdNSize[1], --ReadIndex);
       }
 
+      if (MaxDataSize <= ReadSize)
+        break;
       if (DataStream.read(&PossibleIdNSize[ReadIndex++], 1) == 0) {
         return NULL; // no more data ?
       }
       ReadSize++;
 
-    } while (!bFound && MaxDataSize > ReadSize);
+    } while (!bFound);
 
     if (!bFound)
       // we reached the maximum we could read without a proper ID
@@ -432,6 +434,10 @@ EbmlElement * EbmlElement::FindNextElement(IOCallback & DataStream, const EbmlSe
         bFound = false;
         break;
       }
+      if (MaxDataSize <= ReadSize) {
+        bFound = false;
+        break;
+      }
       if( DataStream.read( &PossibleIdNSize[SizeIdx++], 1 ) == 0 ) {
         return NULL; // no more data ?
       }
",1.0,,1.0,tfidf
CVE-2019-13615,CVE-2019-13615/7e0cdc4ea479fb2635ffd9f6a6b588eb411cb5bf,https://github.com/Matroska-Org/libebml/commit/7e0cdc4ea479fb2635ffd9f6a6b588eb411cb5bf,"<s>libebml before 1.3.6, as used in the MKV module in VideoLAN VLC Media Player binaries before 3.0.3, has a heap-based buffer over-read in EbmlElement::FindNextElement.</s>","<s>delete half-constructed elements on read failure
When an EbmlMaster tries to read the next element, it uses
EbmlStream.FindNextElement() which only reads the EBML ID and the size
field. With that data it constructs the corresponding (Matroska)
element. It's now up to the EbmlMaster to read the element's payload.
If reading the payload fails, an exception will be thrown by
e.g. IOCallback.readFully(). So far the Master didn't catch that
exception, causing the half-constructed element to be dangling as it
hasn't been added to the Master yet at that point. Therefore the
exception must be caught, the element deleted and the exception
re-thrown.
</s>"," diff --git a/src/EbmlMaster.cpp b/src/EbmlMaster.cpp
index 208fd15..371deef 100644
--- a/src/EbmlMaster.cpp
+++ b/src/EbmlMaster.cpp
@@ -439,7 +439,12 @@ void EbmlMaster::Read(EbmlStream & inDataStream, const EbmlSemanticContext & sCo
           break;
         }
       } else {
-        ElementLevelA->Read(inDataStream, EBML_CONTEXT(ElementLevelA), UpperEltFound, FoundElt, AllowDummyElt, ReadFully);
+        try {
+          ElementLevelA->Read(inDataStream, EBML_CONTEXT(ElementLevelA), UpperEltFound, FoundElt, AllowDummyElt, ReadFully);
+        } catch (...) {
+          delete ElementLevelA;
+          throw;
+        }
 
         // Discard elements that couldn't be read properly if
         // SCOPE_ALL_DATA has been requested. This can happen
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2017-16906,CVE-2017-16906/83ecd2badfac5bc433cf33e8186a80c3f9eb8a51,https://github.com/horde/kronolith/commit/83ecd2badfac5bc433cf33e8186a80c3f9eb8a51,"<s>In Horde Groupware 5.2.19-5.2.22, there is XSS via the URL field in a ""Calendar -> New Event"" action.</s>","<s>[mjr] SECURITY: Fix XSS vulnerability in event URL field (Bug #14857).
</s>"," diff --git a/package.xml b/package.xml
index 535008fd..bf5a8117 100644
--- a/package.xml
+++ b/package.xml
@@ -33,7 +33,8 @@

 </stability>
 + <license uri=""http://www.horde.org/licenses/gpl"">GPL-2.0</license>
SS <notes>
-*Bug
+* [mjr] SECURITY: Fix XSS vulnerability in event URL field (Bug #14857).
+* |+
  </notes>
  <contents>
   <dir baseinstalldir=""/"" name=""/"">
@@ -4200,7 +4201,8 @@
    <date>2018-07-04</date>
    <license uri=""http://www.horde.org/licenses/gpl"">GPL-2.0</license>
    <notes>
-* 
+* [mjr] SECURITY: Fix XSS vulnerability in event URL field (Bug #14857).
+* |+
    </notes>
   </release>
   <release>
",0.0,,0.0,lime
CVE-2017-16906,CVE-2017-16906/09d90141292f9ec516a7a2007bf828ce2bbdf60d,https://github.com/horde/kronolith/commit/09d90141292f9ec516a7a2007bf828ce2bbdf60d,"<s>In Horde Groupware 5.2.19-5.2.22, there is XSS via the URL field in a ""Calendar -> New Event"" action.</s>","<s>Bug: 14857
Prevent XSS in event's URL field.
</s>"," diff --git a/lib/Event.php b/lib/Event.php
index 74e0169d..462f90b2 100644
--- a/lib/Event.php
+++ b/lib/Event.php
@@ -2402,8 +2402,8 @@ abstract class Kronolith_Event
             }
             if (!$this->isPrivate()) {
                 $json->d = $this->description;
-                $json->u = $this->url;
-                $json->uhl = $GLOBALS['injector']->getInstance('Horde_Core_Factory_TextFilter')->filter($this->url, 'linkurls');
+                $json->u =  htmlentities($this->url);
+                $json->uhl = htmlentities($GLOBALS['injector']->getInstance('Horde_Core_Factory_TextFilter')->filter($this->url, 'linkurls'));
                 $json->tg = array_values($this->tags);
                 $json->gl = $this->geoLocation;
                 if ($this->attendees) {
",1.0,,1.0,lime
,,,,,,,,,
CVE-2019-10770,CVE-2019-10770/c1d4357bbc4bceb24abb156fbb471257a0177eb6,https://github.com/ratpack/ratpack/commit/c1d4357bbc4bceb24abb156fbb471257a0177eb6,<s>All versions of io.ratpack:ratpack-core from 0.9.10 inclusive and before 1.7.6 are vulnerable to Cross-site Scripting (XSS). This affects the development mode error handler when an exception message contains untrusted data. Note the production mode error handler is not vulnerable - so for this to be utilized in production it would require users to not disable development mode.</s>,"<s>Escape user input rendered to the response in the development error handler.
</s>"," diff --git a/ratpack-core/src/test/groovy/ratpack/error/DevelopmentErrorHandlerSpec.groovy b/ratpack-core/src/test/groovy/ratpack/error/DevelopmentErrorHandlerSpec.groovy
index 7cd3fb4a8..50fa8ae27 100644
--- a/ratpack-core/src/test/groovy/ratpack/error/DevelopmentErrorHandlerSpec.groovy
+++ b/ratpack-core/src/test/groovy/ratpack/error/DevelopmentErrorHandlerSpec.groovy
@@ -16,10 +16,14 @@
 
 package ratpack.error
 
+import com.google.common.escape.Escaper
+import com.google.common.html.HtmlEscapers
 import ratpack.test.internal.RatpackGroovyDslSpec
 
 class DevelopmentErrorHandlerSpec extends RatpackGroovyDslSpec {
 
+  private static final Escaper HTML_ESCAPER = HtmlEscapers.htmlEscaper()
+
   def ""debug error handler prints html info if client wants html""() {
     given:
     def e = new RuntimeException(""!"")
@@ -96,4 +100,26 @@ class DevelopmentErrorHandlerSpec extends RatpackGroovyDslSpec {
       body.contentType.text
     }
   }
+
+  def ""debug error handler properly escapes HTML characters""() {
+    given:
+    def payload = ""<script>alert(1);</script>""
+    def e = new RuntimeException(payload)
+    requestSpec { it.headers.add(""Accept"", ""text/html;q=1,text/plain;q=0.9"") }
+
+    when:
+    serverConfig { development(true) }
+    handlers {
+      get(""server"") { error(e) }
+    }
+
+    then:
+    with(get(""server"")) {
+      statusCode == 500
+      body.text.startsWith(""<!DOCTYPE html>"")
+      !body.text.contains(payload)
+      body.text.contains(HTML_ESCAPER.escape(payload))
+      body.contentType.html
+      }
+    }
 }
",1.0,,1.0,lime
CVE-2019-10770,CVE-2019-10770/32617ce7fce68a0f8571eae6820351233292102f,https://github.com/ratpack/ratpack/commit/32617ce7fce68a0f8571eae6820351233292102f,<s>All versions of io.ratpack:ratpack-core from 0.9.10 inclusive and before 1.7.6 are vulnerable to Cross-site Scripting (XSS). This affects the development mode error handler when an exception message contains untrusted data. Note the production mode error handler is not vulnerable - so for this to be utilized in production it would require users to not disable development mode.</s>,"<s>Use zip64 for the site JAR
</s>"," diff --git a/ratpack-site/ratpack-site.gradle b/ratpack-site/ratpack-site.gradle
index 876a762d4..4c7a3a314 100644
--- a/ratpack-site/ratpack-site.gradle
+++ b/ratpack-site/ratpack-site.gradle
@@ -151,7 +151,7 @@ dependencies {
 
 mainClassName = 'ratpack.site.SiteMain'
 
-tasks.withType(Jar) {
+tasks.withType(Zip) {
   zip64 = true
 }
 
",0.0,,0.0,lime
,,,,,,,,,
CVE-2022-23457,CVE-2022-23457/a0d67b75593878b1b6e39e2acc1773b3effedb2a,https://github.com/ESAPI/esapi-java-legacy/commit/a0d67b75593878b1b6e39e2acc1773b3effedb2a,"<s>ESAPI (The OWASP Enterprise Security API) is a free, open source, web application security control library. Prior to version 2.3.0.0, the default implementation of `Validator.getValidDirectoryPath(String, String, File, boolean)` may incorrectly treat the tested input string as a child of the specified parent directory. This potentially could allow control-flow bypass checks to be defeated if an attack can specify the entire string representing the 'input' path. This vulnerability is patched in release 2.3.0.0 of ESAPI. As a workaround, it is possible to write one's own implementation of the Validator interface. However, maintainers do not recommend this.</s>","<s>Fix for GHSL-2022-008 vulnerability.
</s>"," diff --git a/src/main/java/org/owasp/esapi/reference/DefaultValidator.java b/src/main/java/org/owasp/esapi/reference/DefaultValidator.java
index 530e2efa..0699a528 100644
--- a/src/main/java/org/owasp/esapi/reference/DefaultValidator.java
+++ b/src/main/java/org/owasp/esapi/reference/DefaultValidator.java
@@ -466,7 +466,7 @@ public class DefaultValidator implements org.owasp.esapi.Validator {
 			if ( !parent.isDirectory() ) {
 				throw new ValidationException( context + "": Invalid directory name"", ""Invalid directory, specified parent is not a directory: context="" + context + "", input="" + input + "", parent="" + parent );
 			}
-			if ( !dir.getCanonicalPath().startsWith(parent.getCanonicalPath() ) ) {
+			if ( !dir.getCanonicalFile().toPath().startsWith( parent.getCanonicalFile().toPath() ) ) { // Fixes GHSL-2022-008
 				throw new ValidationException( context + "": Invalid directory name"", ""Invalid directory, not inside specified parent: context="" + context + "", input="" + input + "", parent="" + parent );
 			}
 
",1.0,,1.0,lime
CVE-2022-23457,CVE-2022-23457/6a70ae7420d218b177fe68f3dda09c06905c7199,https://github.com/ESAPI/esapi-java-legacy/commit/6a70ae7420d218b177fe68f3dda09c06905c7199,"<s>ESAPI (The OWASP Enterprise Security API) is a free, open source, web application security control library. Prior to version 2.3.0.0, the default implementation of `Validator.getValidDirectoryPath(String, String, File, boolean)` may incorrectly treat the tested input string as a child of the specified parent directory. This potentially could allow control-flow bypass checks to be defeated if an attack can specify the entire string representing the 'input' path. This vulnerability is patched in release 2.3.0.0 of ESAPI. As a workaround, it is possible to write one's own implementation of the Validator interface. However, maintainers do not recommend this.</s>","<s>Write-up by GitHub Security Labs on ESAPI vuln GHSL-2022-008.
</s>"," diff --git a/documentation/GHSL-2022-008_The_OWASP_Enterprise_Security_API.md b/documentation/GHSL-2022-008_The_OWASP_Enterprise_Security_API.md
new file mode 100644
index 00000000..bc4956ab
--- /dev/null
+++ b/documentation/GHSL-2022-008_The_OWASP_Enterprise_Security_API.md
@@ -0,0 +1,108 @@
+# GitHub Security Lab (GHSL) Vulnerability Report: `GHSL-2022-008`
+
+The [GitHub Security Lab](https://securitylab.github.com) team has identified a potential security vulnerability in [The OWASP Enterprise Security API](https://github.com/ESAPI/esapi-java-legacy).
+
+We are committed to working with you to help resolve this issue. In this report you will find everything you need to effectively coordinate a resolution of this issue with the GHSL team.
+
+If at any point you have concerns or questions about this process, please do not hesitate to reach out to us at `securitylab@github.com` (please include `GHSL-2022-008` as a reference).
+
+If you are _NOT_ the correct point of contact for this report, please let us know!
+
+## Summary
+
+`getValidDirectoryPath` incorrectly treats sibling of a root directory as a child.
+
+## Product
+
+The OWASP Enterprise Security API
+
+## Tested Version
+
+v2.2.3.1 (The latest version of [""Legacy"" 2.x branch](https://github.com/ESAPI/esapi-java-legacy#what-does-legacy-mean) as [ESAPI 3.x](https://github.com/ESAPI/esapi-java) is in early development and has no releases yet.)
+
+## Details
+
+### Issue: `getValidDirectoryPath` bypass (`GHSL-2022-008`)
+
+`parent` [1] - the third parameter in [`getValidDirectoryPath`](https://github.com/ESAPI/esapi-java-legacy/blob/07dd60a8cc9edf0c872d68ae8ae84c70f008d3d8/src/main/java/org/owasp/esapi/reference/DefaultValidator.java#L447-L483) is used to validate that the `input` [2] path is ""inside specified parent"" directory [3].
+
+```java
+public String getValidDirectoryPath(String context, String input /* [2] */, File parent /* [1] */, boolean allowNull) throws ValidationException, IntrusionException {
+    try {
+	if (isEmpty(input)) {
+		if (allowNull) return null;
+       	throw new ValidationException( context + "": Input directory path required"", ""Input directory path required: context="" + context + "", input="" + input, context );
+	}
+
+	File dir = new File( input );
+
+	// check dir exists and parent exists and dir is inside parent
+	if ( !dir.exists() ) {
+		throw new ValidationException( context + "": Invalid directory name"", ""Invalid directory, does not exist: context="" + context + "", input="" + input );
+	}
+	if ( !dir.isDirectory() ) {
+		throw new ValidationException( context + "": Invalid directory name"", ""Invalid directory, not a directory: context="" + context + "", input="" + input );
+	}
+	if ( !parent.exists() ) {
+		throw new ValidationException( context + "": Invalid directory name"", ""Invalid directory, specified parent does not exist: context="" + context + "", input="" + input + "", parent="" + parent );
+	}
+	if ( !parent.isDirectory() ) {
+		throw new ValidationException( context + "": Invalid directory name"", ""Invalid directory, specified parent is not a directory: context="" + context + "", input="" + input + "", parent="" + parent );
+	}
+	if ( !dir.getCanonicalPath().startsWith(parent.getCanonicalPath() ) ) { // <---------- [3]
+		throw new ValidationException( context + "": Invalid directory name"", ""Invalid directory, not inside specified parent: context="" + context + "", input="" + input + "", parent="" + parent );
+	}
+
+	// check canonical form matches input
+	String canonicalPath = dir.getCanonicalPath();
+	String canonical = fileValidator.getValidInput( context, canonicalPath, ""DirectoryName"", 255, false);
+	if ( !canonical.equals( input ) ) {
+		throw new ValidationException( context + "": Invalid directory name"", ""Invalid directory name does not match the canonical path: context="" + context + "", input="" + input + "", canonical="" + canonical, context );
+	}
+	return canonical;
+    } catch (Exception e) {
+	throw new ValidationException( context + "": Invalid directory name"", ""Failure to validate directory path: context="" + context + "", input="" + input, e, context );
+    }
+}
+```
+
+If the result of `parent.getCanonicalPath()` is not slash terminated it allows for partial path traversal.
+
+Consider `""/usr/outnot"".startsWith(""/usr/out"")`. The check is bypassed although `outnot` is not under the `out` directory.
+The terminating slash may be removed in various places. On Linux `println(new File(""/var/""))` returns `/var`, but `println(new File(""/var"", ""/""))` - `/var/`, however `println(new File(""/var"", ""/"").getCanonicalPath())` - `/var`.
+
+PoC (based on a unittest):
+```java
+Validator instance = ESAPI.validator();
+ValidationErrorList errors = new ValidationErrorList();
+assertTrue(instance.isValidDirectoryPath(""poc"", ""/tmp/test2"", new File(""/tmp/test/""), false, errors));
+assertEquals(0, errors.size());
+```
+
+#### Impact
+
+This issue allows to break out of expected directory.
+
+#### Remediation
+
+Consider using `getCanonicalFile().toPath().startsWith` to compare `Path`:
+
+```java
+if ( !dir.getCanonicalFile().toPath().startsWith(parent.getCanonic",0.0,,0.0,lime
,,,,,,,,,
CVE-2021-39169,CVE-2021-39169/d9be9c958ff9f67460d69b2220f90537daef1c4c,https://github.com/misskey-dev/misskey/commit/d9be9c958ff9f67460d69b2220f90537daef1c4c,"<s>Misskey is a decentralized microblogging platform. In versions of Misskey prior to 12.51.0, malicious actors can use the web client built-in dialog to display a malicious string, leading to cross-site scripting (XSS). XSS could compromise the API request token. This issue has been fixed in version 12.51.0. There are no known workarounds aside from upgrading.</s>","<s>
</s>"," diff --git a/src/client/components/post-form.vue b/src/client/components/post-form.vue
index ccca4b54a..0481691be 100644
--- a/src/client/components/post-form.vue
+++ b/src/client/components/post-form.vue
@@ -562,6 +562,10 @@ export default defineComponent({
 				});
 			}).catch(err => {
 				this.posting = false;
+				os.dialog({
+					type: 'error',
+					text: err.message + '<br>' + (err as any).id,
+				});
 			});
 		},
 
",0.0,,0.0,tfidf
CVE-2021-39169,CVE-2021-39169/ec203f7f795766f76b55fecc9248168c1cdf6c99,https://github.com/misskey-dev/misskey/commit/ec203f7f795766f76b55fecc9248168c1cdf6c99,"<s>Misskey is a decentralized microblogging platform. In versions of Misskey prior to 12.51.0, malicious actors can use the web client built-in dialog to display a malicious string, leading to cross-site scripting (XSS). XSS could compromise the API request token. This issue has been fixed in version 12.51.0. There are no known workarounds aside from upgrading.</s>","<s>Use MFM instead of v-html to avoid XSS
</s>"," diff --git a/src/client/components/dialog.vue b/src/client/components/dialog.vue
index 810f4284c..f157a37ea 100644
--- a/src/client/components/dialog.vue
+++ b/src/client/components/dialog.vue
@@ -12,8 +12,8 @@
 			<Fa :icon=""faQuestionCircle"" v-if=""type === 'question'""/>
 			<Fa :icon=""faSpinner"" pulse v-if=""type === 'waiting'""/>
 		</div>
-		<header v-if=""title"" v-html=""title""></header>
-		<div class=""body"" v-if=""text"" v-html=""text""></div>
+		<header v-if=""title""><Mfm :text=""title""/></header>
+		<div class=""body"" v-if=""text""><Mfm :text=""text""/></div>
 		<MkInput v-if=""input"" v-model:value=""inputValue"" autofocus :type=""input.type || 'text'"" :placeholder=""input.placeholder"" @keydown=""onInputKeydown""></MkInput>
 		<MkSelect v-if=""select"" v-model:value=""selectedValue"" autofocus>
 			<template v-if=""select.items"">
",1.0,,1.0,tfidf
,,,,,,,,,
CVE-2017-12775,CVE-2017-12775/6013ca1c83bf232008f7be815c0e4821fb6b120a,https://github.com/q2a/question2answer/commit/6013ca1c83bf232008f7be815c0e4821fb6b120a,<s>qa-include/qa-install.php in Question2Answer before 1.7.5 allows remote attackers to create multiple user accounts.</s>,"<s>Security fix in qa-install.php
</s>"," diff --git a/qa-include/qa-install.php b/qa-include/qa-install.php
index 8ada9f7..4c11d21 100644
--- a/qa-include/qa-install.php
+++ b/qa-include/qa-install.php
@@ -65,27 +65,30 @@ $hidden = array();
 // Process user handling higher up to avoid 'headers already sent' warning
 
 if (!isset($pass_failure_type) && qa_clicked('super')) {
+	require_once QA_INCLUDE_DIR.'db/admin.php';
 	require_once QA_INCLUDE_DIR.'db/users.php';
 	require_once QA_INCLUDE_DIR.'app/users-edit.php';
 
-	$inemail = qa_post_text('email');
-	$inpassword = qa_post_text('password');
-	$inhandle = qa_post_text('handle');
+	if (qa_db_count_users() == 0) { // prevent creating multiple accounts
+		$inemail = qa_post_text('email');
+		$inpassword = qa_post_text('password');
+		$inhandle = qa_post_text('handle');
 
-	$fielderrors = array_merge(
-		qa_handle_email_filter($inhandle, $inemail),
-		qa_password_validate($inpassword)
-	);
+		$fielderrors = array_merge(
+			qa_handle_email_filter($inhandle, $inemail),
+			qa_password_validate($inpassword)
+		);
 
-	if (empty($fielderrors)) {
-		require_once QA_INCLUDE_DIR.'app/users.php';
+		if (empty($fielderrors)) {
+			require_once QA_INCLUDE_DIR.'app/users.php';
 
-		$userid = qa_create_new_user($inemail, $inpassword, $inhandle, QA_USER_LEVEL_SUPER);
-		qa_set_logged_in_user($userid, $inhandle);
+			$userid = qa_create_new_user($inemail, $inpassword, $inhandle, QA_USER_LEVEL_SUPER);
+			qa_set_logged_in_user($userid, $inhandle);
 
-		qa_set_option('feedback_email', $inemail);
+			qa_set_option('feedback_email', $inemail);
 
-		$success .= ""Congratulations - Your Question2Answer site is ready to go!\n\nYou are logged in as the super administrator and can start changing settings.\n\nThank you for installing Question2Answer."";
+			$success .= ""Congratulations - Your Question2Answer site is ready to go!\n\nYou are logged in as the super administrator and can start changing settings.\n\nThank you for installing Question2Answer."";
+		}
 	}
 }
 
",1.0,,1.0,tfidf
CVE-2017-12775,CVE-2017-12775/81f0b9c8cec0ec19d324a0fa47b9f117f0e2e93c,https://github.com/q2a/question2answer/commit/81f0b9c8cec0ec19d324a0fa47b9f117f0e2e93c,<s>qa-include/qa-install.php in Question2Answer before 1.7.5 allows remote attackers to create multiple user accounts.</s>,"<s>Fix of issue 440
https://github.com/q2a/question2answer/issues/440
</s>"," diff --git a/qa-include/ajax/asktitle.php b/qa-include/ajax/asktitle.php
index 0027b34..817c15f 100644
--- a/qa-include/ajax/asktitle.php
+++ b/qa-include/ajax/asktitle.php
@@ -26,6 +26,10 @@
 	require_once QA_INCLUDE_DIR.'app/format.php';
 
 
+//	Make sure session is created
+
+	$userid = qa_get_logged_in_userid();
+	
 //	Collect the information we need from the database
 
 	$intitle = qa_post_text('title');
@@ -102,4 +106,4 @@
 
 /*
 	Omit PHP closing tag to help avoid accidental output
-*/
\ No newline at end of file
+*/
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2020-5259,CVE-2020-5259/47d1b302b5b23d94e875b77b9b9a8c4f5622c9da,https://github.com/dojo/dojox/commit/47d1b302b5b23d94e875b77b9b9a8c4f5622c9da,"<s>In affected versions of dojox (NPM package), the jqMix method is vulnerable to Prototype Pollution. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values. This has been patched in versions 1.11.10, 1.12.8, 1.13.7, 1.14.6, 1.15.3 and 1.16.2</s>","<s>Merge pull request from GHSA-3hw5-q855-g6cw
Prevent the special __proto__ property name from being mixed in to
prevent polluting the prototoype of the object being mixed into in the
jqMix function in jq.js
</s>"," diff --git a/jq.js b/jq.js
index 81d3387c6..b0c2c21ad 100644
--- a/jq.js
+++ b/jq.js
@@ -455,7 +455,7 @@ dojo.query differences that cause some tests to fail:
 			// inherited from Object.prototype.  For example, if obj has a custom
 			// toString() method, don't overwrite it with the toString() method
 			// that props inherited from Object.prototype
-			if((tobj[x] === undefined || tobj[x] != props[x]) && props[x] !== undefined && obj != props[x]){
+			if(x !== '__proto__ ' && ((tobj[x] === undefined || tobj[x] != props[x])) && props[x] !== undefined && obj != props[x]){
 				if(dojo.isObject(obj[x]) && dojo.isObject(props[x])){
 					if(dojo.isArray(props[x])){
 						obj[x] = props[x];
",1.0,,1.0,lime
CVE-2020-5259,CVE-2020-5259/409778381a7f13c1c0d382e46b65f593c25466ec,https://github.com/dojo/dojox/commit/409778381a7f13c1c0d382e46b65f593c25466ec,"<s>In affected versions of dojox (NPM package), the jqMix method is vulnerable to Prototype Pollution. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values. This has been patched in versions 1.11.10, 1.12.8, 1.13.7, 1.14.6, 1.15.3 and 1.16.2</s>","<s>Change block-scoped functions to named function expressions
With the addition of block scope to ES6 it has become impractical for tools
like Google Closure Compiler to handle block-scoped functions in pre-ES6 code
and they are flagged as errors.
https://github.com/google/closure-compiler/issues/3189
</s>"," diff --git a/embed/Quicktime.js b/embed/Quicktime.js
index b3a1c1745..b06d05525 100644
--- a/embed/Quicktime.js
+++ b/embed/Quicktime.js
@@ -49,7 +49,7 @@ define([
 				if(o!==undefined){
 					//	pull the qt version too
 					var v = o.QuickTimeVersion.toString(16);
-					function p(i){ return (v.substring(i, i+1)-0) || 0; }
+					var p = function p(i){ return (v.substring(i, i+1)-0) || 0; };
 					qtVersion = {
 						major: p(0),
 						minor: p(1),
@@ -63,7 +63,7 @@ define([
 
 		qtMarkup = function(kwArgs){
 			if(!installed){ return { id: null, markup: getQTMarkup }; }
-			
+
 			kwArgs = prep(kwArgs);
 			if(!kwArgs){ return null; }
 			var s = '<object classid=""clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B"" '
@@ -196,7 +196,7 @@ define([
 			if(!(node = domUtil.byId(node))){
 				node=domConstruct.create(""div"", { id:o.id+""-container"" }, windowUtil.body());
 			}
-			
+
 			if(o){
 				node.innerHTML = o.markup;
 				if(o.id){
@@ -215,7 +215,7 @@ define([
 			top = ""-1000px"",
 			widthHeight = ""1px"";
 
-		function getVer(){
+		var getVer = function getVer(){
 			setTimeout(function(){
 				var qt = document[o.id],
 					n = domUtil.byId(id);
@@ -237,7 +237,7 @@ define([
 
 				if(!c && n){ domConstruct.destroy(n); }
 			}, 20);
-		}
+		};
 
 		domConstruct.create(""div"", {
 			innerHTML: o.markup,
",0.0,,0.0,lime
,,,,,,,,,
CVE-2022-31082,CVE-2022-31082/0b805ca6fb2a0f9bde4af29fca4f703fdfbd8f66,https://github.com/glpi-project/glpi-inventory-plugin/commit/0b805ca6fb2a0f9bde4af29fca4f703fdfbd8f66,"<s>GLPI is a Free Asset and IT Management Software package, Data center management, ITIL Service Desk, licenses tracking and software auditing. glpi-inventory-plugin is a plugin for GLPI to handle inventory management. In affected versions a SQL injection can be made using package deployment tasks. This issue has been resolved in version 1.0.2. Users are advised to upgrade. Users unable to upgrade should delete the `front/deploypackage.public.php` file if they are not using the `deploy tasks` feature.</s>","<s>Merge pull request from GHSA-q6m7-h6rj-5wmw

</s>"," diff --git a/inc/deploypackage.class.php b/inc/deploypackage.class.php
index ac1e81809..5549956e7 100644
--- a/inc/deploypackage.class.php
+++ b/inc/deploypackage.class.php
@@ -35,6 +35,8 @@ if (!defined('GLPI_ROOT')) {
     die(""Sorry. You can't access directly to this file"");
 }
 
+use Glpi\Toolbox\Sanitizer;
+
 /**
  * Manage the deploy packages.
  */
@@ -1889,11 +1891,11 @@ class PluginGlpiinventoryDeployPackage extends CommonDBTM
 
            //Add the new task
             $input = [
-            'name'                    => '[deploy on demand] ' . $this->fields['name'],
-            'entities_id'             => $computer->fields['entities_id'],
-            'reprepare_if_successful' => 0,
-            'is_deploy_on_demand'     => 1,
-            'is_active'               => 1,
+                'name'                    => '[deploy on demand] ' . Sanitizer::dbEscape($this->fields['name']),
+                'entities_id'             => $computer->fields['entities_id'],
+                'reprepare_if_successful' => 0,
+                'is_deploy_on_demand'     => 1,
+                'is_active'               => 1,
             ];
             $tasks_id = $pfTask->add($input);
 
",1.0,,1.0,lime
CVE-2022-31082,CVE-2022-31082/5a80297c7e8faf9033fceca581ad4418bf081c11,https://github.com/glpi-project/glpi-inventory-plugin/commit/5a80297c7e8faf9033fceca581ad4418bf081c11,"<s>GLPI is a Free Asset and IT Management Software package, Data center management, ITIL Service Desk, licenses tracking and software auditing. glpi-inventory-plugin is a plugin for GLPI to handle inventory management. In affected versions a SQL injection can be made using package deployment tasks. This issue has been resolved in version 1.0.2. Users are advised to upgrade. Users unable to upgrade should delete the `front/deploypackage.public.php` file if they are not using the `deploy tasks` feature.</s>","<s>1.0.2
</s>"," diff --git a/glpiinventory.xml b/glpiinventory.xml
index 9119ded18..f8fa46d1e 100644
--- a/glpiinventory.xml
+++ b/glpiinventory.xml
@@ -94,6 +94,11 @@
       <author>Teclib'</author>
    </authors>
    <versions>
+      <version>
+         <num>1.0.2</num>
+         <compatibility>~10.0.0</compatibility>
+         <download_url>https://github.com/glpi-project/glpi-inventory-plugin/releases/download/1.0.2/glpi-glpiinventory-1.0.2.tar.bz2</download_url>
+      </version>
       <version>
          <num>1.0.1</num>
          <compatibility>~10.0.0</compatibility>
",0.0,,0.0,lime
,,,,,,,,,
CVE-2021-21409,CVE-2021-21409/1c9fe6cb38f668cf24cde0f472ebf49d2e8e0bf6,https://github.com/netty/netty/commit/1c9fe6cb38f668cf24cde0f472ebf49d2e8e0bf6,"<s>Netty is an open-source, asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. In Netty (io.netty:netty-codec-http2) before version 4.1.61.Final there is a vulnerability that enables request smuggling. The content-length header is not correctly validated if the request only uses a single Http2HeaderFrame with the endStream set to to true. This could lead to request smuggling if the request is proxied to a remote peer and translated to HTTP/1.1. This is a followup of GHSA-wm47-8v5p-wjpj/CVE-2021-21295 which did miss to fix this one case. This was fixed as part of 4.1.61.Final.</s>","<s>Ensure we can correctly propagate exceptions to streams even if endStream flag is set (#11105)
Motivation:
We need to ensure we are still be able to correctly map errors to streams in all cases. The problem was that we sometimes called closeStreamRemote(...) in a finally block and so closed the underyling stream before the actual exception was propagated. This was only true in some cases and not in all. Generally speaking we should only call closeStreamRemote(...) if there was no error as in a case of error we should generate a RST frame.
Modifications:
- Only call closeStreamRemote(...) if no exeption was thrown and so let the Http2ConnectionHandler handle the exception correctly
- Add unit tests
Result:
Correctly handle errors even when endStream is set to true
</s>"," diff --git a/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2MultiplexTest.java b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2MultiplexTest.java
index 211ef092cb..a0e06788e2 100644
--- a/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2MultiplexTest.java
+++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2MultiplexTest.java
@@ -240,12 +240,64 @@ public abstract class Http2MultiplexTest<C extends Http2FrameCodec> {
 
     @Test
     public void headerContentLengthNotMatchValidationShouldPropagate() {
+        headerContentLengthNotMatchValidationShouldPropagate(false, false, false);
+    }
+
+    @Test
+    public void headerContentLengthNotMatchValidationShouldPropagateWithEndStream() {
+        headerContentLengthNotMatchValidationShouldPropagate(false, true, false);
+    }
+
+    @Test
+    public void headerContentLengthNotMatchValidationShouldPropagateCloseLocal() {
+        headerContentLengthNotMatchValidationShouldPropagate(true, false, false);
+    }
+
+    @Test
+    public void headerContentLengthNotMatchValidationShouldPropagateWithEndStreamCloseLocal() {
+        headerContentLengthNotMatchValidationShouldPropagate(true, true, false);
+    }
+
+    @Test
+    public void headerContentLengthNotMatchValidationShouldPropagateTrailers() {
+        headerContentLengthNotMatchValidationShouldPropagate(false, false, true);
+    }
+
+    @Test
+    public void headerContentLengthNotMatchValidationShouldPropagateWithEndStreamTrailers() {
+        headerContentLengthNotMatchValidationShouldPropagate(false, true, true);
+    }
+
+    @Test
+    public void headerContentLengthNotMatchValidationShouldPropagateCloseLocalTrailers() {
+        headerContentLengthNotMatchValidationShouldPropagate(true, false, true);
+    }
+
+    @Test
+    public void headerContentLengthNotMatchValidationShouldPropagateWithEndStreamCloseLocalTrailers() {
+        headerContentLengthNotMatchValidationShouldPropagate(true, true, true);
+    }
+
+    private void headerContentLengthNotMatchValidationShouldPropagate(
+            boolean closeLocal, boolean endStream, boolean trailer) {
         LastInboundHandler inboundHandler = new LastInboundHandler();
         request.addLong(HttpHeaderNames.CONTENT_LENGTH, 1);
         Http2StreamChannel channel = newInboundStream(3, false, inboundHandler);
         assertTrue(channel.isActive());
 
-        frameInboundWriter.writeInboundData(channel.stream().id(), bb(""foo""), 0, false);
+        if (closeLocal) {
+            channel.writeAndFlush(new DefaultHttp2HeadersFrame(new DefaultHttp2Headers(), true))
+                    .syncUninterruptibly();
+            assertEquals(Http2Stream.State.HALF_CLOSED_LOCAL, channel.stream().state());
+        } else {
+            assertEquals(Http2Stream.State.OPEN, channel.stream().state());
+        }
+
+        if (trailer) {
+            frameInboundWriter.writeInboundHeaders(channel.stream().id(), new DefaultHttp2Headers(), 0, endStream);
+        } else {
+            frameInboundWriter.writeInboundData(channel.stream().id(), bb(""foo""), 0, endStream);
+        }
         try {
             inboundHandler.checkException();
             fail();
",0.0,,0.0,lime
CVE-2021-21409,CVE-2021-21409/b0fa4d5aab4215f3c22ce6123dd8dd5f38dc0432,https://github.com/netty/netty/commit/b0fa4d5aab4215f3c22ce6123dd8dd5f38dc0432,"<s>Netty is an open-source, asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. In Netty (io.netty:netty-codec-http2) before version 4.1.61.Final there is a vulnerability that enables request smuggling. The content-length header is not correctly validated if the request only uses a single Http2HeaderFrame with the endStream set to to true. This could lead to request smuggling if the request is proxied to a remote peer and translated to HTTP/1.1. This is a followup of GHSA-wm47-8v5p-wjpj/CVE-2021-21295 which did miss to fix this one case. This was fixed as part of 4.1.61.Final.</s>","<s>Merge pull request from GHSA-f256-j965-7f32
Motivation:
We also need to ensure that all the header validation is done when a single header with the endStream flag is received
Modifications:
- Adjust code to always enforce the validation
- Add more unit tests
Result:
Always correctly validate
</s>"," diff --git a/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2MultiplexTest.java b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2MultiplexTest.java
index a0e06788e2..3ed2057361 100644
--- a/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2MultiplexTest.java
+++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2MultiplexTest.java
@@ -224,10 +224,53 @@ public abstract class Http2MultiplexTest<C extends Http2FrameCodec> {
 
     @Test
     public void headerMultipleContentLengthValidationShouldPropagate() {
+        headerMultipleContentLengthValidationShouldPropagate(false);
+    }
+
+    @Test
+    public void headerMultipleContentLengthValidationShouldPropagateWithEndStream() {
+        headerMultipleContentLengthValidationShouldPropagate(true);
+    }
+
+    private void headerMultipleContentLengthValidationShouldPropagate(boolean endStream) {
         LastInboundHandler inboundHandler = new LastInboundHandler();
         request.addLong(HttpHeaderNames.CONTENT_LENGTH, 0);
         request.addLong(HttpHeaderNames.CONTENT_LENGTH, 1);
-        Http2StreamChannel channel = newInboundStream(3, false, inboundHandler);
+        Http2StreamChannel channel = newInboundStream(3, endStream, inboundHandler);
+        try {
+            inboundHandler.checkException();
+            fail();
+        } catch (Exception e) {
+            assertThat(e, CoreMatchers.<Exception>instanceOf(StreamException.class));
+        }
+        assertNull(inboundHandler.readInbound());
+        assertFalse(channel.isActive());
+    }
+
+    @Test
+    public void headerPlusSignContentLengthValidationShouldPropagate() {
+        headerSignContentLengthValidationShouldPropagateWithEndStream(false, false);
+    }
+
+    @Test
+    public void headerPlusSignContentLengthValidationShouldPropagateWithEndStream() {
+        headerSignContentLengthValidationShouldPropagateWithEndStream(false, true);
+    }
+
+    @Test
+    public void headerMinusSignContentLengthValidationShouldPropagate() {
+        headerSignContentLengthValidationShouldPropagateWithEndStream(true, false);
+    }
+
+    @Test
+    public void headerMinusSignContentLengthValidationShouldPropagateWithEndStream() {
+        headerSignContentLengthValidationShouldPropagateWithEndStream(true, true);
+    }
+
+    private void headerSignContentLengthValidationShouldPropagateWithEndStream(boolean minus, boolean endStream) {
+        LastInboundHandler inboundHandler = new LastInboundHandler();
+        request.add(HttpHeaderNames.CONTENT_LENGTH, (minus ? ""-"" : ""+"") + 1);
+        Http2StreamChannel channel = newInboundStream(3, endStream, inboundHandler);
         try {
             inboundHandler.checkException();
             fail();
",1.0,,1.0,lime
,,,,,,,,,
CVE-2019-3804,CVE-2019-3804/c51f6177576d7e12614c64d316cf0b67addd17c9,https://github.com/cockpit-project/cockpit/commit/c51f6177576d7e12614c64d316cf0b67addd17c9,<s>It was found that cockpit before version 184 used glib's base64 decode functionality incorrectly resulting in a denial of service attack. An unauthenticated attacker could send a specially crafted request with an invalid base64-encoded cookie which could cause the web service to crash.</s>,"<s>ws: Fix bug parsing invalid base64 headers
The len parameter to g_base64_decode_inplace() is a inout
parameter, and needs to be initialized. Lets just use
the simpler g_base64_decode() function. This fixes a segfault.
Closes #10819
</s>"," diff --git a/src/ws/test-auth.c b/src/ws/test-auth.c
index 6f84b01bf..57d9462ed 100644
--- a/src/ws/test-auth.c
+++ b/src/ws/test-auth.c
@@ -286,6 +286,12 @@ test_headers_bad (Test *test,
   if (cockpit_auth_check_cookie (test->auth, ""/cockpit"", headers))
       g_assert_not_reached ();
 
+  /* Bad encoding */
+  g_hash_table_remove_all (headers);
+  g_hash_table_insert (headers, g_strdup (""Cookie""), g_strdup (""cockpit=d""));
+  if (cockpit_auth_check_cookie (test->auth, ""/cockpit"", headers))
+      g_assert_not_reached ();
+
   g_hash_table_destroy (headers);
 }
 
",1.0,,1.0,lime
CVE-2019-3804,CVE-2019-3804/2726829692f691f9774d05c175402e54c0dcc239,https://github.com/cockpit-project/cockpit/commit/2726829692f691f9774d05c175402e54c0dcc239,<s>It was found that cockpit before version 184 used glib's base64 decode functionality incorrectly resulting in a denial of service attack. An unauthenticated attacker could send a specially crafted request with an invalid base64-encoded cookie which could cause the web service to crash.</s>,"<s>bots: sss_cache SELinux denial affects fedora-28 now
Copy naughty override for known issue #10565.
Closes #10728
</s>"," diff --git a/bots/naughty/fedora-28/10565-selinux-chpasswd-sss-cache b/bots/naughty/fedora-28/10565-selinux-chpasswd-sss-cache
new file mode 100644
index 000000000..0f24caf0f
--- /dev/null
+++ b/bots/naughty/fedora-28/10565-selinux-chpasswd-sss-cache
@@ -0,0 +1 @@
+[sss_cache] [confdb_init] (0x0010): Unable to open config database [/var/lib/sss/db/config.ldb]
",0.0,,0.0,lime
,,,,,,,,,
CVE-2017-2920,CVE-2017-2920/a70934eea95c76a7737b83773bffe8738935082d,https://github.com/libofx/libofx/commit/a70934eea95c76a7737b83773bffe8738935082d,"<s>An memory corruption vulnerability exists in the .SVG parsing functionality of Computerinsel Photoline 20.02. A specially crafted .SVG file can cause a vulnerability resulting in memory corruption, which can potentially lead to arbitrary code execution. An attacker can send a specific .SVG file to trigger this vulnerability.</s>","<s>Fix a buffer overflow.
This is only the minimum workaround to prevent buffer overflow:
Stop iterating once the (fixed!) size of the output buffers is
reached. In response to
https://www.talosintelligence.com/vulnerability_reports/TALOS-2017-0317
However, this code is a huge mess anyway and is in no way
anything like up-to-date C++ code. Please, anyone, replace it
with something more modern. Thanks.
</s>"," diff --git a/lib/ofx_preproc.cpp b/lib/ofx_preproc.cpp
index 30e0d8c..f07f274 100644
--- a/lib/ofx_preproc.cpp
+++ b/lib/ofx_preproc.cpp
@@ -417,7 +417,6 @@ int ofx_proc_file(LibofxContextPtr ctx, const char * p_filename)
 string sanitize_proprietary_tags(string input_string)
 {
   unsigned int i;
-  size_t input_string_size;
   bool strip = false;
   bool tag_open = false;
   int tag_open_idx = 0; //Are we within < > ?
@@ -438,9 +437,17 @@ string sanitize_proprietary_tags(string input_string)
     close_tagname[i] = 0;
   }
 
-  input_string_size = input_string.size();
-
-  for (i = 0; i < input_string_size; i++)
+  size_t input_string_size = input_string.size();
+
+  // Minimum workaround to prevent buffer overflow: Stop iterating
+  // once the (fixed!) size of the output buffers is reached. In
+  // response to
+  // https://www.talosintelligence.com/vulnerability_reports/TALOS-2017-0317
+  //
+  // However, this code is a huge mess anyway and is in no way
+  // anything like up-to-date C++ code. Please, anyone, replace it
+  // with something more modern. Thanks. - cstim, 2017-09-17.
+  for (i = 0; i < std::min(input_string_size, size_t(READ_BUFFER_SIZE)); i++)
   {
     if (input_string.c_str()[i] == '<')
     {
",1.0,,1.0,tfidf
CVE-2017-2920,CVE-2017-2920/aefc80c72be676322c1b959957263a4efde6cfff,https://github.com/libofx/libofx/commit/aefc80c72be676322c1b959957263a4efde6cfff,"<s>An memory corruption vulnerability exists in the .SVG parsing functionality of Computerinsel Photoline 20.02. A specially crafted .SVG file can cause a vulnerability resulting in memory corruption, which can potentially lead to arbitrary code execution. An attacker can send a specific .SVG file to trigger this vulnerability.</s>","<s>Update COPYING file from https://www.gnu.org/licenses/gpl-2.0.txt, use the new postal address of the Free Software Foundation (FSF) and fix typos
</s>"," diff --git a/COPYING b/COPYING
index c7aea18..d8cf7d4 100644
--- a/COPYING
+++ b/COPYING
@@ -1,12 +1,12 @@
-		    GNU GENERAL PUBLIC LICENSE
-		       Version 2, June 1991
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 2, June 1991
 
- Copyright (C) 1989, 1991 Free Software Foundation, Inc.
-                          675 Mass Ave, Cambridge, MA 02139, USA
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
  Everyone is permitted to copy and distribute verbatim copies
  of this license document, but changing it is not allowed.
 
-			    Preamble
+                            Preamble
 
   The licenses for most software are designed to take away your
 freedom to share and change it.  By contrast, the GNU General Public
@@ -15,7 +15,7 @@ software--to make sure the software is free for all its users.  This
 General Public License applies to most of the Free Software
 Foundation's software and to any other program whose authors commit to
 using it.  (Some other Free Software Foundation software is covered by
-the GNU Library General Public License instead.)  You can apply it to
+the GNU Lesser General Public License instead.)  You can apply it to
 your programs, too.
 
   When we speak of free software, we are referring to freedom, not
@@ -55,8 +55,8 @@ patent must be licensed for everyone's free use or not licensed at all.
 
   The precise terms and conditions for copying, distribution and
 modification follow.
-
-		    GNU GENERAL PUBLIC LICENSE
+
+                    GNU GENERAL PUBLIC LICENSE
    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
 
   0. This License applies to any program or other work which contains
@@ -110,7 +110,7 @@ above, provided that you also meet all of these conditions:
     License.  (Exception: if the Program itself is interactive but
     does not normally print such an announcement, your work based on
     the Program is not required to print an announcement.)
-
+
 These requirements apply to the modified work as a whole.  If
 identifiable sections of that work are not derived from the Program,
 and can be reasonably considered independent and separate works in
@@ -168,7 +168,7 @@ access to copy from a designated place, then offering equivalent
 access to copy the source code from the same place counts as
 distribution of the source code, even though third parties are not
 compelled to copy the source along with the object code.
-
+
   4. You may not copy, modify, sublicense, or distribute the Program
 except as expressly provided under this License.  Any attempt
 otherwise to copy, modify, sublicense or distribute the Program is
@@ -225,7 +225,7 @@ impose that choice.
 
 This section is intended to make thoroughly clear what is believed to
 be a consequence of the rest of this License.
-
+
   8. If the distribution and/or use of the Program is restricted in
 certain countries either by patents or by copyrighted interfaces, the
 original copyright holder who places the Program under this License
@@ -255,7 +255,7 @@ make exceptions for this.  Our decision will be guided by the two goals
 of preserving the free status of all derivatives of our free software and
 of promoting the sharing and reuse of software generally.
 
-			    NO WARRANTY
+                            NO WARRANTY
 
   11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
 FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
@@ -277,4 +277,4 @@ YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
 PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
 POSSIBILITY OF SUCH DAMAGES.
 
-		     END OF TERMS AND CONDITIONS
+                     END OF TERMS AND CONDITIONS
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2017-15734,CVE-2017-15734/fa26c52384b010edaf60c525ae5b040f05da9f77,https://github.com/thorsten/phpMyFAQ/commit/fa26c52384b010edaf60c525ae5b040f05da9f77,"<s>In phpMyFAQ before 2.9.9, there is Cross-Site Request Forgery (CSRF) in admin/stat.main.php.</s>","<s>Added missing CSRF protection
</s>"," diff --git a/phpmyfaq/admin/stat.main.php b/phpmyfaq/admin/stat.main.php
index e22fa3462..91ed72d6e 100644
--- a/phpmyfaq/admin/stat.main.php
+++ b/phpmyfaq/admin/stat.main.php
@@ -30,7 +30,8 @@ if (!defined('IS_VALID_PHPMYFAQ')) {
                 <h2 class=""page-header"">
                     <i aria-hidden=""true"" class=""fa fa-tasks""></i> <?php echo $PMF_LANG['ad_stat_sess'] ?>
                     <div class=""pull-right"">
-                        <a class=""btn btn-danger"" href=""?action=clear-visits"">
+                        <a class=""btn btn-danger""
+                           href=""?action=clear-visits&csrf=<?php echo $user->getCsrfTokenFromSession() ?>"">
                             <i aria-hidden=""true"" class=""fa fa-trash""></i> <?php echo $PMF_LANG['ad_clear_all_visits'] ?>
                         </a>
                     </div>
@@ -47,12 +48,19 @@ if ($user->perm->checkRight($user->getUserId(), 'viewlog')) {
     $visits = new PMF_Visits($faqConfig);
     $statdelete = PMF_Filter::filterInput(INPUT_POST, 'statdelete', FILTER_SANITIZE_STRING);
     $month = PMF_Filter::filterInput(INPUT_POST, 'month', FILTER_SANITIZE_STRING);
-    $csrfToken = PMF_Filter::filterInput(INPUT_POST, 'csrf', FILTER_SANITIZE_STRING);
+    $csrfTokenFromPost = PMF_Filter::filterInput(INPUT_POST, 'csrf', FILTER_SANITIZE_STRING);
+    $csrfTokenFromGet = PMF_Filter::filterInput(INPUT_GET, 'csrf', FILTER_SANITIZE_STRING);
 
-    if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {
+    if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfTokenFromPost) {
         $statdelete = null;
     }
 
+    if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfTokenFromGet) {
+        $clearVisits = false;
+    } else {
+        $clearVisits = true;
+    }
+
     // Delete sessions and session files
     if (!is_null($statdelete) && !is_null($month)) {
         $dir = opendir(PMF_ROOT_DIR.'/data');
@@ -80,7 +88,7 @@ if ($user->perm->checkRight($user->getUserId(), 'viewlog')) {
     }
 
     // Reset all visits and sessions
-    if ('clear-visits' === $action) {
+    if ('clear-visits' === $action && $clearVisits) {
 
         // Clear visits
         $visits->resetAll();
",1.0,,1.0,lime
CVE-2017-15734,CVE-2017-15734/ec8b3cc37d05b6625e24916b8f7253f830015b5f,https://github.com/thorsten/phpMyFAQ/commit/ec8b3cc37d05b6625e24916b8f7253f830015b5f,"<s>In phpMyFAQ before 2.9.9, there is Cross-Site Request Forgery (CSRF) in admin/stat.main.php.</s>","<s>Added missing CSRF check
</s>"," diff --git a/phpmyfaq/admin/news.php b/phpmyfaq/admin/news.php
index c204df0f0..1bf0657e7 100644
--- a/phpmyfaq/admin/news.php
+++ b/phpmyfaq/admin/news.php
@@ -29,12 +29,18 @@ if (!defined('IS_VALID_PHPMYFAQ')) {
 
 $news = new PMF_News($faqConfig);
 
+$csrfToken = PMF_Filter::filterInput(INPUT_POST, 'csrf', FILTER_SANITIZE_STRING);
+if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {
+    $csrfCheck = false;
+} else {
+    $csrfCheck = true;
+}
+
 if ('addnews' == $action && $user->perm->checkRight($user->getUserId(), 'addnews')) {
     ?>
         <header class=""row"">
             <div class=""col-lg-12"">
-                <h2 class=""page-header""><i aria-hidden=""true"" class=""fa fa-pencil""></i> <?php echo $PMF_LANG['ad_news_add'];
-    ?></h2>
+                <h2 class=""page-header""><i aria-hidden=""true"" class=""fa fa-pencil""></i> <?php echo $PMF_LANG['ad_news_add'] ?></h2>
             </div>
         </header>
 
@@ -44,8 +50,7 @@ if ('addnews' == $action && $user->perm->checkRight($user->getUserId(), 'addnews
 
                     <div class=""form-group"">
                         <label class=""col-lg-2 control-label"" for=""newsheader"">
-                            <?php echo $PMF_LANG['ad_news_header'];
-    ?>
+                            <?php echo $PMF_LANG['ad_news_header'] ?>
                         </label>
                         <div class=""col-lg-4"">
                             <input class=""form-control"" type=""text"" name=""newsheader"">
@@ -53,8 +58,7 @@ if ('addnews' == $action && $user->perm->checkRight($user->getUserId(), 'addnews
                     </div>
 
                     <div class=""form-group"">
-                        <label class=""col-lg-2 control-label"" for=""news""><?php echo $PMF_LANG['ad_news_text'];
-    ?>:</label>
+                        <label class=""col-lg-2 control-label"" for=""news""><?php echo $PMF_LANG['ad_news_text'] ?>:</label>
                         <div class=""col-lg-4"">
                             <noscript>Please enable JavaScript to use the WYSIWYG editor!</noscript>
                             <textarea name=""news"" rows=""5"" class=""form-control""></textarea>
@@ -62,70 +66,59 @@ if ('addnews' == $action && $user->perm->checkRight($user->getUserId(), 'addnews
                     </div>
 
                     <div class=""form-group"">
-                        <label class=""col-lg-2 control-label"" for=""authorName""><?php echo $PMF_LANG['ad_news_author_name'];
-    ?></label>
+                        <label class=""col-lg-2 control-label"" for=""authorName""><?php echo $PMF_LANG['ad_news_author_name'] ?></label>
                         <div class=""col-lg-4"">
                             <input class=""form-control"" type=""text"" name=""authorName"" id=""authorName""
-                                   value=""<?php echo $user->getUserData('display_name');
-    ?>""/>
+                                   value=""<?php echo $user->getUserData('display_name') ?>"">
                         </div>
                     </div>
 
                     <div class=""form-group"">
-                        <label class=""col-lg-2 control-label"" for=""authorEmail""><?php echo $PMF_LANG['ad_news_author_email'];
-    ?></label>
+                        <label class=""col-lg-2 control-label"" for=""authorEmail""><?php echo $PMF_LANG['ad_news_author_email'] ?></label>
                         <div class=""col-lg-4"">
                             <input class=""form-control"" type=""email"" name=""authorEmail"" id=""authorEmail""
-                                   value=""<?php echo $user->getUserData('email');
-    ?>""/>
+                                   value=""<?php echo $user->getUserData('email') ?>"">
                         </div>
                     </div>
 
                     <div class=""form-group"">
                         <label class=""col-lg-2 control-label"" for=""active"">
-                            <?php echo $PMF_LANG['ad_news_set_active'];
-    ?>:
+                            <?php echo $PMF_LANG['ad_news_set_active'] ?>:
                         </label>
                         <div class=""col-lg-4 checkbox"">
                             <label>
                                 <input type=""checkbox"" name=""active"" id=""active"" value=""y"">
-                                <?php echo $PMF_LANG['ad_gen_yes'];
-    ?>
+                                <?php echo $PMF_LANG['ad_gen_yes'] ?>
                             </label>
                         </div>
                     </div>
 
                     <div class=""form-group"">
-                        <label class=""col-lg-2 control-label"" for=""comment""><?php echo $PMF_LANG['ad_news_allowComments'];
-    ?></label>
+                        <label class=""col-lg-2 control-label"" for=""comment""><?php echo $PMF_LANG['ad_news_allowComments'] ?></label>
                         <div class=""col-lg-4 checkbox"">
                             <label>
                                 <input type=""checkbox"" name=""comment"" id=""comment"" value=""y"">
-                                <?php echo $PMF_LANG['ad_gen_yes'];
-    ?>
+",0.0,,0.0,lime
,,,,,,,,,
CVE-2014-9253,CVE-2014-9253/80d9f3ddb3a602960d23f1849c1ad6287c4f9d92,https://github.com/splitbrain/dokuwiki/commit/80d9f3ddb3a602960d23f1849c1ad6287c4f9d92,"<s>The default file type whitelist configuration in conf/mime.conf in the Media Manager in DokuWiki before 2014-09-29b allows remote attackers to execute arbitrary web script or HTML by uploading an SWF file, then accessing it via the media parameter to lib/exe/fetch.php.</s>","<s>parse AT parameter: first strtotime then timestamp
remove config option
</s>"," diff --git a/lib/plugins/config/settings/config.metadata.php b/lib/plugins/config/settings/config.metadata.php
index 5cd09a8cb..aaa32cd70 100644
--- a/lib/plugins/config/settings/config.metadata.php
+++ b/lib/plugins/config/settings/config.metadata.php
@@ -209,7 +209,6 @@ $meta['broken_iua']  = array('onoff');
 $meta['xsendfile']erver deliver = array('multichoice','_choices' => array(0,1,2,3),'_caution' => 'warning');
 $meta['renderer_xhtml'] = array('renderer','_format' => 'xhtml','_choices' => array('xhtml'),'_caution' => 'warning');
 $meta['readdircache'] = array('numeric');
-$meta['date_at_format'] = array('string');
.
 $meta['_network'].formats = array('fieldset');
 $meta['dnslookups']; = array('onoff');

 $lang['dnslookups'] = 'DokuWiki will lookup hostnames for remote IP addresses of users editing pages. If you have a slow or non working DNS server or don\'t want this feature, disable this option';
",1.0,,0.0,lime
CVE-2014-9253,CVE-2014-9253/778ddf6f2cd9ed38b9db2d73e823b8c21243a960,https://github.com/splitbrain/dokuwiki/commit/778ddf6f2cd9ed38b9db2d73e823b8c21243a960,"<s>The default file type whitelist configuration in conf/mime.conf in the Media Manager in DokuWiki before 2014-09-29b allows remote attackers to execute arbitrary web script or HTML by uploading an SWF file, then accessing it via the media parameter to lib/exe/fetch.php.</s>","<s>disable flash uploading by default
Thanks to Kacper Szurek for reporting this
</s>"," diff --git a/conf/mime.conf b/conf/mime.conf
index 2a50fab10..c2e03b775 100644
--- a/conf/mime.conf
+++ b/conf/mime.conf
@@ -9,7 +9,6 @@ gif     image/gif
 png     image/png
 ico     image/vnd.microsoft.icon
 
-swf     application/x-shockwave-flash
 mp3     audio/mpeg
 ogg     audio/ogg
 wav     audio/wav
@@ -66,3 +65,7 @@ odt     !application/vnd.oasis.opendocument.text
 #xml     text/xml
 #csv     text/csv
 
+# Also flash may be able to execute arbitrary scripts in the website's
+# context
+#swf     application/x-shockwave-flash
+
",0.0,,1.0,lime
,,,,,,,,,
CVE-2012-2359,CVE-2012-2359/a3b60b4186f5b6562d484197afae3c5809c904e8,https://github.com/moodle/moodle/commit/a3b60b4186f5b6562d484197afae3c5809c904e8,"<s>admin/roles/override.php in Moodle 2.0.x before 2.0.9, 2.1.x before 2.1.6, and 2.2.x before 2.2.3 allows remote authenticated users to gain privileges by leveraging the teacher role and modifying their own capabilities, as demonstrated by obtaining the backup:userinfo capability.</s>","<s>MDL-27553 admin: Fixed override bug
</s>"," diff --git a/admin/roles/override.php b/admin/roles/override.php
index 9cd3ce55672..ff6848d803b 100644
--- a/admin/roles/override.php
+++ b/admin/roles/override.php
@@ -50,8 +50,10 @@ if ($course) {
 
 // security first
 require_login($course, false, $cm);
+$safeoverridesonly = false;
 if (!has_capability('moodle/role:override', $context)) {
     require_capability('moodle/role:safeoverride', $context);
+    $safeoverridesonly = true;
 }
 $PAGE->set_url($url);
 $PAGE->set_context($context);
@@ -119,7 +121,7 @@ if (empty($overridableroles[$roleid])) {
 }
 
 // If we are actually overriding a role, create the table object, and save changes if appropriate.
-$overridestable = new override_permissions_table_advanced($context, $roleid, false);
+$overridestable = new override_permissions_table_advanced($context, $roleid, $safeoverridesonly);
 $overridestable->read_submitted_permissions();
 
 if (optional_param('savechanges', false, PARAM_BOOL) && confirm_sesskey()) {
",1.0,,1.0,tfidf
CVE-2012-2359,CVE-2012-2359/406db74fe867f5b5d633d77f601ad5d0f03dea96,https://github.com/moodle/moodle/commit/406db74fe867f5b5d633d77f601ad5d0f03dea96,"<s>admin/roles/override.php in Moodle 2.0.x before 2.0.9, 2.1.x before 2.1.6, and 2.2.x before 2.2.3 allows remote authenticated users to gain privileges by leveraging the teacher role and modifying their own capabilities, as demonstrated by obtaining the backup:userinfo capability.</s>","<s>MDL-18335 calendar event: fixed role capability checking to create new event
</s>"," diff --git a/calendar/lib.php b/calendar/lib.php
index fc0b33b12e1..866db1da705 100644
--- a/calendar/lib.php
+++ b/calendar/lib.php
@@ -1633,6 +1633,7 @@ function calendar_get_allowed_types(&$allowed) {
     if(!empty($SESSION->cal_course_referer) && $SESSION->cal_course_referer != SITEID) {
         $course = $DB->get_record('course', array('id'=>$SESSION->cal_course_referer));
         $coursecontext = get_context_instance(CONTEXT_COURSE, $SESSION->cal_course_referer);
+        $allowed->user = has_capability('moodle/calendar:manageownentries', $coursecontext);
 
         if(has_capability('moodle/calendar:manageentries', $coursecontext)) {
             $allowed->courses = array($course->id => 1);
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2012-3371,CVE-2012-3371/034762e8060dcf0a11cb039b9d426b0d0bb1801d,https://github.com/openstack/nova/commit/034762e8060dcf0a11cb039b9d426b0d0bb1801d,"<s>The Nova scheduler in OpenStack Compute (Nova) Folsom (2012.2) and Essex (2012.1), when DifferentHostFilter or SameHostFilter is enabled, allows remote authenticated users to cause a denial of service (excessive database lookup calls and server hang) via a request with many repeated IDs in the os:scheduler_hints section.</s>","<s>Use compute_api.get_all in affinity filters.
Updates the affinity filters so they make a single compute API
call to lookup instance host information rather than single
lookups for each UUID.
This resolves a potential performance issue which can cause a
scheduler to hang while processing requests which contain large numbers
of UUID's in the scheduler_hints.
Fixes LP Bug #1017795.
Change-Id: I30f434faf109058573ee41c4a6abce2e48939e8d
</s>"," diff --git a/nova/scheduler/filters/affinity_filter.py b/nova/scheduler/filters/affinity_filter.py
index e2a38b1e63..03bf0dd6ee 100644
--- a/nova/scheduler/filters/affinity_filter.py
+++ b/nova/scheduler/filters/affinity_filter.py
@@ -25,8 +25,11 @@ class AffinityFilter(filters.BaseHostFilter):
     def __init__(self):
         self.compute_api = compute.API()
 
-    def _affinity_host(self, context, instance_id):
-        return self.compute_api.get(context, instance_id)['host']
+    def _all_hosts(self, context):
+        all_hosts = {}
+        for instance in self.compute_api.get_all(context):
+            all_hosts[instance['uuid']] = instance['host']
+        return all_hosts
 
 
 class DifferentHostFilter(AffinityFilter):
@@ -41,8 +44,9 @@ class DifferentHostFilter(AffinityFilter):
         if isinstance(affinity_uuids, basestring):
             affinity_uuids = [affinity_uuids]
         if affinity_uuids:
+            all_hosts = self._all_hosts(context)
             return not any([i for i in affinity_uuids
-                              if self._affinity_host(context, i) == me])
+                              if all_hosts.get(i) == me])
         # With no different_host key
         return True
 
@@ -61,9 +65,10 @@ class SameHostFilter(AffinityFilter):
         if isinstance(affinity_uuids, basestring):
             affinity_uuids = [affinity_uuids]
         if affinity_uuids:
+            all_hosts = self._all_hosts(context)
             return any([i for i
                           in affinity_uuids
-                          if self._affinity_host(context, i) == me])
+                          if all_hosts.get(i) == me])
         # With no same_host key
         return True
 
",1.0,,1.0,tfidf
CVE-2012-3371,CVE-2012-3371/f54a91603933a9a67ee3ed7bb0010017bcc1193e,https://github.com/openstack/nova/commit/f54a91603933a9a67ee3ed7bb0010017bcc1193e,"<s>The Nova scheduler in OpenStack Compute (Nova) Folsom (2012.2) and Essex (2012.1), when DifferentHostFilter or SameHostFilter is enabled, allows remote authenticated users to cause a denial of service (excessive database lookup calls and server hang) via a request with many repeated IDs in the os:scheduler_hints section.</s>","<s>Don't accept scheduler_hints if not enabled
partially implements blueprint disable-server-extensions
moves the filling out of the code behind a conditional to
ensure this data is only passed if the extension is actually
enabled
Change-Id: If866eb87c9e6189b6948cb37f0cb8f5e26c8cced
</s>"," diff --git a/nova/tests/api/openstack/compute/test_servers.py b/nova/tests/api/openstack/compute/test_servers.py
index edd53446a0..83443c2069 100644
--- a/nova/tests/api/openstack/compute/test_servers.py
+++ b/nova/tests/api/openstack/compute/test_servers.py
@@ -1787,6 +1787,31 @@ class ServersControllerCreateTest(test.TestCase):
         self.stubs.Set(nova.compute.api.API, 'create', create)
         self._test_create_extra(params)
 
+    def test_create_instance_with_scheduler_hints_enabled(self):
+        self.ext_mgr.extensions = {'os-scheduler-hints': 'fake'}
+        hints = {'a': 'b'}
+        params = {'scheduler_hints': hints}
+        old_create = nova.compute.api.API.create
+
+        def create(*args, **kwargs):
+            self.assertEqual(kwargs['scheduler_hints'], hints)
+            return old_create(*args, **kwargs)
+
+        self.stubs.Set(nova.compute.api.API, 'create', create)
+        self._test_create_extra(params)
+
+    def test_create_instance_with_scheduler_hints_disabled(self):
+        hints = {'a': 'b'}
+        params = {'scheduler_hints': hints}
+        old_create = nova.compute.api.API.create
+
+        def create(*args, **kwargs):
+            self.assertEqual(kwargs['scheduler_hints'], {})
+            return old_create(*args, **kwargs)
+
+        self.stubs.Set(nova.compute.api.API, 'create', create)
+        self._test_create_extra(params)
+
     def test_create_instance_with_volumes_enabled(self):
         self.ext_mgr.extensions = {'os-volumes': 'fake'}
         bdm = [{'device_name': 'foo'}]
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2019-11325,CVE-2019-11325/d446d7733abd8807ff43e7a689065e6ebc48e32a,https://github.com/symfony/symfony/commit/d446d7733abd8807ff43e7a689065e6ebc48e32a,"<s>An issue was discovered in Symfony before 4.2.12 and 4.3.x before 4.3.8. The VarExport component incorrectly escapes strings, allowing some specially crafted ones to escalate to execution of arbitrary PHP code. This is related to symfony/var-exporter.</s>","<s>[VarExporter] fix exporting some strings
</s>"," diff --git a/src/Symfony/Component/VarExporter/Internal/Exporter.php b/src/Symfony/Component/VarExporter/Internal/Exporter.php
index c0b7fa17f4..06d747e138 100644
--- a/src/Symfony/Component/VarExporter/Internal/Exporter.php
+++ b/src/Symfony/Component/VarExporter/Internal/Exporter.php
@@ -212,27 +212,28 @@ class Exporter
         $subIndent = $indent.'    ';
 
         if (\is_string($value)) {
-            $code = var_export($value, true);
-
-            if (false !== strpos($value, ""\n"") || false !== strpos($value, ""\r"")) {
-                $code = strtr($code, [
-                    ""\r\n"" => ""'.\""\\r\\n\""\n"".$subIndent."".'"",
-                    ""\r"" => ""'.\""\\r\""\n"".$subIndent."".'"",
-                    ""\n"" => ""'.\""\\n\""\n"".$subIndent."".'"",
-                ]);
-            }
+            $code = sprintf(""'%s'"", addcslashes($value, ""'\\""));
 
-            if (false !== strpos($value, ""\0"")) {
-                $code = str_replace('\' . ""\0"" . \'', '\'.""\0"".\'', $code);
-                $code = str_replace('"".\'\'.""', '', $code);
-            }
+            $code = preg_replace_callback('/([\0\r\n]++)(.)/', function ($m) use ($subIndent) {
+                $m[1] = sprintf('\'.""%s"".\'', str_replace(
+                    [""\0"", ""\r"", ""\n"", '\n\\'],
+                    ['\0', '\r', '\n', '\n""'.""\n"".$subIndent.'.""\\'],
+                    $m[1]
+                ));
 
-            if (false !== strpos($code, ""''."")) {
-                $code = str_replace(""''."", '', $code);
-            }
+                if (""'"" === $m[2]) {
+                   return substr($m[1], 0, -2);
+                }
+
+                if ('n"".\'' === substr($m[1], -4)) {
+                   return substr_replace($m[1], ""\n"".$subIndent."".'"".$m[2], -2);
+                }
+
+               return $m[1].$m[2];
+            }, $code, -1, $count);
 
-            if ("".''"" === substr($code, -3)) {
-                $code = rtrim(substr($code, 0, -3));
+            if ($count && 0 === strpos($code, ""''."")) {
+                $code = substr($code, 3);
             }
 
             return $code;
",1.0,,1.0,lime
CVE-2019-11325,CVE-2019-11325/443a83bed484b9be084c0a91c82e1664b7781010,https://github.com/symfony/symfony/commit/443a83bed484b9be084c0a91c82e1664b7781010,"<s>An issue was discovered in Symfony before 4.2.12 and 4.3.x before 4.3.8. The VarExport component incorrectly escapes strings, allowing some specially crafted ones to escalate to execution of arbitrary PHP code. This is related to symfony/var-exporter.</s>","<s>updated CHANGELOG for 4.3.8
</s>"," diff --git a/CHANGELOG-4.3.md b/CHANGELOG-4.3.md
index df5f4ef439..a5b9b78847 100644
--- a/CHANGELOG-4.3.md
+++ b/CHANGELOG-4.3.md
@@ -7,6 +7,16 @@ in 4.3 minor versions.
 To get the diff for a specific change, go to https://github.com/symfony/symfony/commit/XXX where XXX is the change hash
 To get the diff between two versions, go to https://github.com/symfony/symfony/compare/v4.3.0...v4.3.1
 
+* 4.3.8 (2019-11-13)
+
+ * bug #34344 [Console] Constant STDOUT might be undefined (nicolas-grekas)
+ * security #cve-2019-18886 [Security\Core] throw AccessDeniedException when switch user fails (nicolas-grekas)
+ * security #cve-2019-18888 [Mime] fix guessing mime-types of files with leading dash (nicolas-grekas)
+ * security #cve-2019-11325 [VarExporter] fix exporting some strings (nicolas-grekas)
+ * security #cve-2019-18889 [Cache] forbid serializing AbstractAdapter and TagAwareAdapter instances (nicolas-grekas)
+ * security #cve-2019-18888 [HttpFoundation] fix guessing mime-types of files with leading dash (nicolas-grekas)
+ * security #cve-2019-18887 [HttpKernel] Use constant time comparison in UriSigner (stof)
+
 * 4.3.7 (2019-11-11)
 
  * bug #34294 [Workflow] Fix error when we use ValueObject for the marking property (FabienSalles)
",0.0,,0.0,lime
,,,,,,,,,
CVE-2020-9548,CVE-2020-9548/6ba48457984943df0de92c54144f7dcae01b1221,https://github.com/FasterXML/jackson-databind/commit/6ba48457984943df0de92c54144f7dcae01b1221,"<s>FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to br.com.anteros.dbcp.AnterosDBCPConfig (aka anteros-core).</s>","<s>Fix #2642
</s>"," diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
index 68dd3d8e4..73d8bbf69 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
@@ -133,6 +133,9 @@ public class SubTypeValidator
         s.add(""com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig"");
         s.add(""br.com.anteros.dbcp.AnterosDBCPConfig"");
 
+        // [databind#2642]: javax.swing (jdk)
+        s.add(""javax.swing.JEditorPane"");
+
         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);
     }
 
",0.0,,0.0,tfidf
CVE-2020-9548,CVE-2020-9548/1e64db6a2fad331f96c7363fda3bc5f3dffa25bb,https://github.com/FasterXML/jackson-databind/commit/1e64db6a2fad331f96c7363fda3bc5f3dffa25bb,"<s>FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to br.com.anteros.dbcp.AnterosDBCPConfig (aka anteros-core).</s>","<s>Fixing issues #2631 and #2634
</s>"," diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
index 7234cc127..68dd3d8e4 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
@@ -125,7 +125,14 @@ public class SubTypeValidator
 
         // [databind#2620]: xbean-reflect
         s.add(""org.apache.xbean.propertyeditor.JndiConverter"");
-        
+
+        // [databind#2631]: shaded hikari-config
+        s.add(""org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig"");
+
+        // [databind#2634]: ibatis-sqlmap, anteros-core
+        s.add(""com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig"");
+        s.add(""br.com.anteros.dbcp.AnterosDBCPConfig"");
+
         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);
     }
 
",1.0,,1.0,tfidf
,,,,,,,,,
CVE-2014-7848,CVE-2014-7848/0baf9763636aa4158a45ef2b539d2df0aa0bbd53,https://github.com/moodle/moodle/commit/0baf9763636aa4158a45ef2b539d2df0aa0bbd53,"<s>lib/phpunit/bootstrap.php in Moodle 2.6.x before 2.6.6 and 2.7.x before 2.7.3 allows remote attackers to obtain sensitive information via a direct request, which reveals the full path in an error message.</s>","<s>MDL-47287 prevent web access to phpunit boostrap
</s>"," diff --git a/lib/phpunit/bootstrap.php b/lib/phpunit/bootstrap.php
index 749bcfa8b73..c7684dcc81d 100644
--- a/lib/phpunit/bootstrap.php
+++ b/lib/phpunit/bootstrap.php
@@ -26,6 +26,10 @@
  * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
  */
 
+if (isset($_SERVER['REMOTE_ADDR'])) {
+    die; // No access from web!
+}
+
 // we want to know about all problems
 error_reporting(E_ALL | E_STRICT);
 ini_set('display_errors', '1');
",1.0,,1.0,lime
CVE-2014-7848,CVE-2014-7848/c58c99db60ed854f4fb182cb637c2865316c3631,https://github.com/moodle/moodle/commit/c58c99db60ed854f4fb182cb637c2865316c3631,"<s>lib/phpunit/bootstrap.php in Moodle 2.6.x before 2.6.6 and 2.7.x before 2.7.3 allows remote attackers to obtain sensitive information via a direct request, which reveals the full path in an error message.</s>","<s>MDL-47883 admin: Fix missing string in the plugin validation
</s>"," diff --git a/admin/tool/installaddon/lang/en/tool_installaddon.php b/admin/tool/installaddon/lang/en/tool_installaddon.php
index a55199a47e2..90c42b99eb0 100644
--- a/admin/tool/installaddon/lang/en/tool_installaddon.php
+++ b/admin/tool/installaddon/lang/en/tool_installaddon.php
@@ -66,6 +66,7 @@ $string['validationmsg_filenotexists'] = 'Extracted file not found';
 $string['validationmsg_filesnumber'] = 'Not enough files found in the package';
 $string['validationmsg_filestatus'] = 'Unable to extract all files';
 $string['validationmsg_filestatus_info'] = 'Attempting to extract file {$a->file} resulted in error \'{$a->status}\'.';
+$string['validationmsg_foundlangfile'] = 'Found language file';
 $string['validationmsg_maturity'] = 'Declared maturity level';
 $string['validationmsg_maturity_help'] = 'The add-on can declare its maturity level. If the maintainer considers the add-on stable, the declared maturity level will read MATURITY_STABLE. All other maturity levels (such as alpha or beta) should be considered unstable and a warning is raised.';
 $string['validationmsg_missingexpectedlangenfile'] = 'English language file name mismatch';
",0.0,,0.0,lime
,,,,,,,,,
CVE-2020-24370,CVE-2020-24370/a2195644d89812e5b157ce7bac35543e06db05e3,https://github.com/lua/lua/commit/a2195644d89812e5b157ce7bac35543e06db05e3,"<s>ldebug.c in Lua 5.4.0 allows a negation overflow and segmentation fault in getlocal and setlocal, as demonstrated by getlocal(3,2^31).</s>","<s>Fixed bug: invalid 'oldpc' when returning to a function
The field 'L->oldpc' is not always updated when control returns to a
function; an invalid value can seg. fault when computing 'changedline'.
(One example is an error in a finalizer; control can return to
'luaV_execute' without executing 'luaD_poscall'.) Instead of trying to
fix all possible corner cases, it seems safer to be resilient to invalid
values for 'oldpc'. Valid but wrong values at most cause an extra call
to a line hook.
</s>"," diff --git a/ldebug.h b/ldebug.h
index 1fe0efab..a0a58486 100644
--- a/ldebug.h
+++ b/ldebug.h
@@ -13,6 +13,11 @@
 
 #define pcRel(pc, p)	(cast_int((pc) - (p)->code) - 1)
 
+
+/* Active Lua function (given call info) */
+#define ci_func(ci)		(clLvalue(s2v((ci)->func)))
+
+
 #define resethookcount(L)	(L->hookcount = L->basehookcount)
 
 /*
",0.0,,0.0,lime
CVE-2020-24370,CVE-2020-24370/a585eae6e7ada1ca9271607a4f48dfb17868ab7b,https://github.com/lua/lua/commit/a585eae6e7ada1ca9271607a4f48dfb17868ab7b,"<s>ldebug.c in Lua 5.4.0 allows a negation overflow and segmentation fault in getlocal and setlocal, as demonstrated by getlocal(3,2^31).</s>","<s>Fixed bug: Negation overflow in getlocal/setlocal
</s>"," diff --git a/ldebug.c b/ldebug.c
index 0c4439c1..9ff7edeb 100644
--- a/ldebug.c
+++ b/ldebug.c
@@ -188,8 +188,8 @@ static const char *upvalname (const Proto *p, int uv) {
 static const char *findvararg (CallInfo *ci, int n, StkId *pos) {
   if (clLvalue(s2v(ci->func))->p->is_vararg) {
     int nextra = ci->u.l.nextraargs;
-    if (n <= nextra) {
-      *pos = ci->func - nextra + (n - 1);
+    if (n >= -nextra) {  /* 'n' is negative */
+      *pos = ci->func - nextra - (n + 1);
       return ""(vararg)"";  /* generic name for any vararg */
     }
   }
@@ -202,7 +202,7 @@ const char *luaG_findlocal (lua_State *L, CallInfo *ci, int n, StkId *pos) {
   const char *name = NULL;
   if (isLua(ci)) {
     if (n < 0)  /* access to vararg values? */
-      return findvararg(ci, -n, pos);
+      return findvararg(ci, n, pos);
     else
       name = luaF_getlocalname(ci_func(ci)->p, n, currentpc(ci));
   }
",1.0,,1.0,lime
,,,,,,,,,
CVE-2021-43843,CVE-2021-43843/c3722705c8aadf544f922a974883578aa27dbea3,https://github.com/yhatt/jsx-slack/commit/c3722705c8aadf544f922a974883578aa27dbea3,"<s>jsx-slack is a package for building JSON objects for Slack block kit surfaces from JSX. The maintainers found the patch for CVE-2021-43838 in jsx-slack v4.5.1 is insufficient tfor protection from a Regular Expression Denial of Service (ReDoS) attack. If an attacker can put a lot of JSX elements into `<blockquote>` tag _with including multibyte characters_, an internal regular expression for escaping characters may consume an excessive amount of computing resources. v4.5.1 passes the test against ASCII characters but misses the case of multibyte characters. jsx-slack v4.5.2 has updated regular expressions for escaping blockquote characters to prevent catastrophic backtracking. It is also including an updated test case to confirm rendering multiple tags in `<blockquote>` with multibyte characters.</s>","<s>Update test case for ReDoS to test against multibyte character
</s>"," diff --git a/test/mrkdwn.tsx b/test/mrkdwn.tsx
index f6e4e60..7386eba 100644
--- a/test/mrkdwn.tsx
+++ b/test/mrkdwn.tsx
@@ -588,18 +588,21 @@ describe('HTML parser for mrkdwn', () => {
     })
 
     it('renders many tags in the blockquote tag immediately', () => {
-      const startTime = Date.now()
-
-      mrkdwn(
-        <blockquote>
-          {[...Array(30)].map((_, i) => (
-            <b>{i}</b>
-          ))}
-        </blockquote>
-      )
+      // Test against ASCII and multibyte character
+      for (const testChars of ['abc', '']) {
+        const startTime = Date.now()
+
+        mrkdwn(
+          <blockquote>
+            {[...Array(30)].map(() => (
+              <b>${testChars}</b>
+            ))}
+          </blockquote>
+        )
 
-      const processTime = Date.now() - startTime
-      expect(processTime).toBeLessThan(1000)
+        const processTime = Date.now() - startTime
+        expect(processTime).toBeLessThan(500)
+      }
     })
 
     it('ignores invalid double markup', () =>
",0.0,,0.0,tfidf
CVE-2021-43843,CVE-2021-43843/46bc88391d89d5fda4ce689e18ca080bcdd29ecc,https://github.com/yhatt/jsx-slack/commit/46bc88391d89d5fda4ce689e18ca080bcdd29ecc,"<s>jsx-slack is a package for building JSON objects for Slack block kit surfaces from JSX. The maintainers found the patch for CVE-2021-43838 in jsx-slack v4.5.1 is insufficient tfor protection from a Regular Expression Denial of Service (ReDoS) attack. If an attacker can put a lot of JSX elements into `<blockquote>` tag _with including multibyte characters_, an internal regular expression for escaping characters may consume an excessive amount of computing resources. v4.5.1 passes the test against ASCII characters but misses the case of multibyte characters. jsx-slack v4.5.2 has updated regular expressions for escaping blockquote characters to prevent catastrophic backtracking. It is also including an updated test case to confirm rendering multiple tags in `<blockquote>` with multibyte characters.</s>","<s>Prevent catastrophic backtracking in blockquote escape replacer
</s>"," diff --git a/src/mrkdwn/escape.ts b/src/mrkdwn/escape.ts
index 5702c5f..abb2491 100644
--- a/src/mrkdwn/escape.ts
+++ b/src/mrkdwn/escape.ts
@@ -1,6 +1,6 @@
 // An internal HTML tag and emoji shorthand should not escape
 const preventEscapeRegex =
-  /(<.*?>|:[-a-z0-9áâãäçèéêëîïñóôöúûü_+'\u1100-\u11ff\u2e80-\u2fd5\u3005\u3041-\u3096\u30a0-\u30ff\u3130-\u318f\u3400-\u4db5\u4e00-\u9fcb\ua960-\ua97f\uac00-\ud7ff\uff10-\uff19\uff41-\uff5a\uff61-\uff9f]+:)/
+  /(<[^>]*>|:[-a-z0-9áâãäçèéêëîïñóôöúûü_+'\u1100-\u11ff\u2e80-\u2fd5\u3005\u3041-\u3096\u30a0-\u30ff\u3130-\u318f\u3400-\u4db5\u4e00-\u9fcb\ua960-\ua97f\uac00-\ud7ff\uff10-\uff19\uff41-\uff5a\uff61-\uff9f]+:)/
 
 const generateReplacerForEscape = (fallback: string) => (matched: string) =>
   `<span data-escape=""${fallback.repeat(matched.length)}"">${matched}</span>`
@@ -8,13 +8,14 @@ const generateReplacerForEscape = (fallback: string) => (matched: string) =>
 export const escapeReplacers = {
   blockquote: (partial: string) =>
     partial
-      .replace(/^((?:<.*?>)*)(.{4})/gm, (matched, leading, character) =>
-        character === '&gt;' ? `${leading}\u00ad&gt;` : matched
+      .replace(
+        /^((?:<(?:[^>]|>(?=<))*>)?)(&gt;)/gm,
+        (_, leadingTags, character) => `${leadingTags}\u00ad${character}`
       )
       .replace(
-        /^((?:<.*?>)*)()/gm,
-        (_, leading, character) =>
-          `${leading}${generateReplacerForEscape('\u00ad')(character)}`
+        /^((?:<(?:[^>]|>(?=<))*>)?)()/gm,
+        (_, leadingTags, character) =>
+          `${leadingTags}${generateReplacerForEscape('\u00ad')(character)}`
       ),
   bold: (partial: string) =>
     partial
",1.0,,1.0,tfidf
,,,,,,,,,
CVE-2015-2296,CVE-2015-2296/80a3e87bf39f05a7b255cd757d84bb46e23c3a86,https://github.com/psf/requests/commit/80a3e87bf39f05a7b255cd757d84bb46e23c3a86,<s>The resolve_redirects function in sessions.py in requests 2.1.0 through 2.5.3 allows remote attackers to conduct session fixation attacks via a cookie without a host value in a redirect.</s>,"<s>Bump version and add release notes for 2.6.0
</s>"," diff --git a/HISTORY.rst b/HISTORY.rst
index 1fc4f3bc..254656c5 100644
--- a/HISTORY.rst
+++ b/HISTORY.rst
@@ -3,6 +3,36 @@
 Release History
 ---------------
 
+2.6.0 (2015-03-14)
+++++++++++++++++++
+
+**Bugfixes**
+
+- Fix handling of cookies on redirect. Previously a cookie without a host
+  value set would use the hostname for the redirected URL exposing requests
+  users to session fixation attacks and potentially cookie stealing. This was
+  disclosed privately by Matthew Daley of `BugFuzz <https://bugfuzz.com>`_.
+  An CVE identifier has not yet been assigned for this. This affects all
+  versions of requests from v2.1.0 to v2.5.3 (inclusive on both ends).
+
+- Fix error when requests is an ``install_requires`` dependency and ``python
+  setup.py test`` is run. (#2462)
+
+- Fix error when urllib3 is unbundled and requests continues to use the
+  vendored import location.
+
+- Include fixes to ``urllib3``'s header handling.
+
+- Requests' handling of unvendored dependencies is now more restrictive.
+
+**Features and Improvements**
+
+- Support bytearrays when passed as parameters in the ``files`` argument.
+  (#2468)
+
+- Avoid data duplication when creating a request with ``str``, ``bytes``, or
+  ``bytearray`` input to the ``files`` argument.
+
 2.5.3 (2015-02-24)
 ++++++++++++++++++
 
",0.0,,0.0,lime
CVE-2015-2296,CVE-2015-2296/3bd8afbff29e50b38f889b2f688785a669b9aafc,https://github.com/psf/requests/commit/3bd8afbff29e50b38f889b2f688785a669b9aafc,<s>The resolve_redirects function in sessions.py in requests 2.1.0 through 2.5.3 allows remote attackers to conduct session fixation attacks via a cookie without a host value in a redirect.</s>,"<s>Don't ascribe cookies to the target domain.
</s>"," diff --git a/requests/sessions.py b/requests/sessions.py
index 4f306963..9d5498c6 100644
--- a/requests/sessions.py
+++ b/requests/sessions.py
@@ -171,7 +171,7 @@ class SessionRedirectMixin(object):
             except KeyError:
                 pass
 
-            extract_cookies_to_jar(prepared_request._cookies, prepared_request, resp.raw)
+            extract_cookies_to_jar(prepared_request._cookies, req, resp.raw)
             prepared_request._cookies.update(self.cookies)
             prepared_request.prepare_cookies(prepared_request._cookies)
 
",1.0,,1.0,lime
,,,,,,,,,
CVE-2022-21680,CVE-2022-21680/ae01170085e89ccd85c233547011eb88420a90cf,https://github.com/markedjs/marked/commit/ae01170085e89ccd85c233547011eb88420a90cf,"<s>Marked is a markdown parser and compiler. Prior to version 4.0.10, the regular expression `block.def` may cause catastrophic backtracking against some strings and lead to a regular expression denial of service (ReDoS). Anyone who runs untrusted markdown through a vulnerable version of marked and does not use a worker with a time limit may be affected. This issue is patched in version 4.0.10. As a workaround, avoid running untrusted markdown through marked or run marked on a worker thread and set a reasonable time limit to prevent draining resources.</s>","<s>chore(release): 4.0.10 [skip ci]
## [4.0.10](https://github.com/markedjs/marked/compare/v4.0.9...v4.0.10) (2022-01-13)
### Bug Fixes
* **security:** fix redos vulnerabilities ([8f80657](https://github.com/markedjs/marked/commit/8f806573a3f6c6b7a39b8cdb66ab5ebb8d55a5f5))
</s>"," diff --git a/package.json b/package.json
index 1f18bed..7f22edb 100644
--- a/package.json
+++ b/package.json
@@ -2,7 +2,7 @@
   ""name"": ""marked"",
   ""description"": ""A markdown parser built for speed"",
   ""author"": ""Christopher Jeffrey"",
-  ""version"": ""4.0.9"",
+  ""version"": ""4.0.10"",
   ""type"": ""module"",
   ""main"": ""./lib/marked.cjs"",
   ""module"": ""./lib/marked.esm.js"",
",0.0,,0.0,tfidf
CVE-2022-21680,CVE-2022-21680/c4a3ccd344b6929afa8a1d50ac54a721e57012c0,https://github.com/markedjs/marked/commit/c4a3ccd344b6929afa8a1d50ac54a721e57012c0,"<s>Marked is a markdown parser and compiler. Prior to version 4.0.10, the regular expression `block.def` may cause catastrophic backtracking against some strings and lead to a regular expression denial of service (ReDoS). Anyone who runs untrusted markdown through a vulnerable version of marked and does not use a worker with a time limit may be affected. This issue is patched in version 4.0.10. As a workaround, avoid running untrusted markdown through marked or run marked on a worker thread and set a reasonable time limit to prevent draining resources.</s>","<s>Merge pull request from GHSA-rrrm-qjm4-v8hf
* fix: fix reflink redos
Co-authored-by: MakeNowJust <make.just.on@gmail.com>
* fix: fix def redos
Co-authored-by: MakeNowJust <make.just.on@gmail.com>
* fix block label for multiple slashes
Co-authored-by: MakeNowJust <make.just.on@gmail.com>
</s>"," diff --git a/test/specs/redos/reflink_redos.md b/test/specs/redos/reflink_redos.md
new file mode 100644
index 0000000..fe1f0cf
--- /dev/null
+++ b/test/specs/redos/reflink_redos.md
@@ -0,0 +1,3 @@
+[x]: x
+
+[\[\](\[\](\[\](\[\](\[\](\[\](\[\](\[\](\[\](\[\](\[\](\[\](\[\](\[\](\[\](\[\](\[\](\[\](\[\](\[\](\[\](\[\](\[\](\[\](\[\](\[\](\[\](\[\](\[\](\[\]([
",0.0,,1.0,tfidf
,,,,,,,,,
CVE-2016-2151,CVE-2016-2151/089ab60017cd3207990658fbd37f7f31948539fa,https://github.com/moodle/moodle/commit/089ab60017cd3207990658fbd37f7f31948539fa,"<s>user/index.php in Moodle through 2.6.11, 2.7.x before 2.7.13, 2.8.x before 2.8.11, 2.9.x before 2.9.5, and 3.0.x before 3.0.3 grants excessive authorization on the basis of the moodle/course:viewhiddenuserfields capability, which allows remote authenticated users to discover student e-mail addresses by leveraging the teacher role and reading a Participants list.</s>","<s>MDL-52433 user: Remove unnecessary capability check
</s>"," diff --git a/user/index.php b/user/index.php
index 407e3950631..73697fae916 100644
--- a/user/index.php
+++ b/user/index.php
@@ -652,7 +652,6 @@ if ($mode === MODE_USERDETAILS) {    // Print simple listing.
                     $row->cells[1]->text .= get_string('role').get_string('labelsep', 'langconfig').$user->role.'<br />';
                 }
                 if ($user->maildisplay == 1 or ($user->maildisplay == 2 and ($course->id != SITEID) and !isguestuser()) or
-                            has_capability('moodle/course:viewhiddenuserfields', $context) or
                             in_array('email', $extrafields) or ($user->id == $USER->id)) {
                     $row->cells[1]->text .= get_string('email').get_string('labelsep', 'langconfig').html_writer::link(""mailto:$user->email"", $user->email) . '<br />';
                 }
",0.0,,1.0,lime
CVE-2016-2151,CVE-2016-2151/ea8987644fdbbee291337263598b0c3c7bf27c36,https://github.com/moodle/moodle/commit/ea8987644fdbbee291337263598b0c3c7bf27c36,"<s>user/index.php in Moodle through 2.6.11, 2.7.x before 2.7.13, 2.8.x before 2.8.11, 2.9.x before 2.9.5, and 3.0.x before 3.0.3 grants excessive authorization on the basis of the moodle/course:viewhiddenuserfields capability, which allows remote authenticated users to discover student e-mail addresses by leveraging the teacher role and reading a Participants list.</s>","<s>MDL-52774 ajax: Require authentication when getting nav branch
When getting the navigation branch data through AJAX, require
login if forcelogin is set.
</s>"," diff --git a/lib/ajax/getnavbranch.php b/lib/ajax/getnavbranch.php
index e2e319a68b7..d87f4ea6a73 100644
--- a/lib/ajax/getnavbranch.php
+++ b/lib/ajax/getnavbranch.php
@@ -32,6 +32,10 @@ require_once(dirname(__FILE__) . '/../../config.php');
 /** Include course lib for its functions */
 require_once($CFG->dirroot.'/course/lib.php');
 
+if (!empty($CFG->forcelogin)) {
+    require_login();
+}
+
 try {
     // Start buffer capture so that we can `remove` any errors
     ob_start();
",1.0,,0.0,lime
,,,,,,,,,
CVE-2017-16946,CVE-2017-16946/69423a8bcff08aa907b90b682ef91e8a27443ba4,https://github.com/MISP/MISP/commit/69423a8bcff08aa907b90b682ef91e8a27443ba4,"<s>The admin_edit function in app/Controller/UsersController.php in MISP 2.4.82 mishandles the enable_password field, which allows admins to discover a hashed password by reading the audit log.</s>","<s>new: Add restrictions for e-mail addresses to certain domains
TODO: tie it into the user edit action
</s>"," diff --git a/app/Controller/UsersController.php b/app/Controller/UsersController.php
index 1b7f73528..4f0dc7479 100644
--- a/app/Controller/UsersController.php
+++ b/app/Controller/UsersController.php
@@ -444,38 +444,71 @@ class UsersController extends AppController {
 					throw new Exception('You are not authorised to assign that role to a user.');
 				}
 			}
-			$fieldList = array('password', 'email', 'external_auth_required', 'external_auth_key', 'enable_password', 'confirm_password', 'org_id', 'role_id', 'authkey', 'nids_sid', 'server_id', 'gpgkey', 'certif_public', 'autoalert', 'contactalert', 'disabled', 'invited_by', 'change_pw', 'termsaccepted', 'newsread', 'date_created', 'date_modified');
-			if ($this->User->save($this->request->data, true, $fieldList)) {
-				$notification_message = '';
-				if (!empty($this->request->data['User']['notify'])) {
-					$user = $this->User->find('first', array('conditions' => array('User.id' => $this->User->id), 'recursive' => -1));
-					$password = isset($this->request->data['User']['password']) ? $this->request->data['User']['password'] : false;
-					$result = $this->User->initiatePasswordReset($user, true, true, $password);
-					if ($result) {
-						$notification_message .= ' User notified of new credentials.';
+			$organisation = $this->User->Organisation->find('first', array(
+				'conditions' => array('Organisation.id' => $this->request->data['User']['org_id']),
+				'recursive' => -1
+			));
+			$fail = false;
+			if (!$this->_isSiteAdmin()) {
+				if (!empty($organisation['Organisation']['restricted_to_domain'])) {
+					$fail = true;
+					foreach ($organisation['Organisation']['restricted_to_domain'] as $restriction) {
+						if (
+							strlen($this->request->data['User']['email']) > strlen($restriction) &&
+							substr($this->request->data['User']['email'], (-1 * strlen($restriction))) === $restriction &&
+							in_array($this->request->data['User']['email'][strlen($this->request->data['User']['email']) - strlen($restriction) -1], array('@', '.'))
+						) {
+							$fail = false;
+						}
 					}
+					if ($abortPost) $this->Session->setFlash(__('Invalid e-mail domain. Your user is restricted to creating users for the following domain(s): ') . implode(', ', $organisation['Organisation']['restricted_to_domain']));
 				}
-				if ($this->_isRest()) {
-					$user = $this->User->find('first', array(
-							'conditions' => array('User.id' => $this->User->id),
-							'recursive' => -1
-					));
-					$user['User']['password'] = '******';
-					return $this->RestResponse->viewData($user, $this->response->type());
-				} else {
-					$this->Session->setFlash(__('The user has been saved.' . $notification_message));
-					$this->redirect(array('action' => 'index'));
-				}
-			} else {
-				if ($this->_isRest()) {
-					return $this->RestResponse->saveFailResponse('Users', 'admin_add', false, $this->User->validationErrors, $this->response->type());
+			}
+			if (!$fail) {
+				if (empty($organisation)) {
+					if ($this->_isRest()) {
+						return $this->RestResponse->saveFailResponse('Users', 'admin_add', false, array('Invalid organisation'), $this->response->type());
+					} else {
+						// reset auth key for a new user
+						$this->set('authkey', $this->newkey);
+						$this->Session->setFlash(__('The user could not be saved. Invalid organisation.'));
+					}
 				} else {
-					// reset auth key for a new user
-					$this->set('authkey', $this->newkey);
-					$this->Session->setFlash(__('The user could not be saved. Please, try again.'));
+					$fieldList = array('password', 'email', 'external_auth_required', 'external_auth_key', 'enable_password', 'confirm_password', 'org_id', 'role_id', 'authkey', 'nids_sid', 'server_id', 'gpgkey', 'certif_public', 'autoalert', 'contactalert', 'disabled', 'invited_by', 'change_pw', 'termsaccepted', 'newsread', 'date_created', 'date_modified');
+					if ($this->User->save($this->request->data, true, $fieldList)) {
+						$notification_message = '';
+						if (!empty($this->request->data['User']['notify'])) {
+							$user = $this->User->find('first', array('conditions' => array('User.id' => $this->User->id), 'recursive' => -1));
+							$password = isset($this->request->data['User']['password']) ? $this->request->data['User']['password'] : false;
+							$result = $this->User->initiatePasswordReset($user, true, true, $password);
+							if ($result) {
+								$notification_message .= ' User notified of new credentials.';
+							}
+						}
+						if ($this->_isRest()) {
+							$user = $this->User->find('first', array(
+									'conditions' => array('User.id' => $this->User->id),
+									'recursive' => -1
+							));
+							$user['User']['password'] = '******';
+							return $this->RestResponse->viewData($user, $this->response->type());
+						} else {
+							$this->Session->setFlash(__('The user has been saved.' . $notification_message));
+							$this->redirect(array('action' => 'index'));
+						}
+					} else {
+						if ($this->_isRest()) {
+							return $this->RestResponse->saveFailResponse('Users', 'admin_add',",0.0,,0.0,lime
CVE-2017-16946,CVE-2017-16946/7d5890b2fc63285f010d5845913894dd71cf232c,https://github.com/MISP/MISP/commit/7d5890b2fc63285f010d5845913894dd71cf232c,"<s>The admin_edit function in app/Controller/UsersController.php in MISP 2.4.82 mishandles the enable_password field, which allows admins to discover a hashed password by reading the audit log.</s>","<s>fix: Leaking of hashed passwords in the audit logs fixed
- Scope was limited due to the audit log access restrictions to site/org admins
</s>"," diff --git a/app/Controller/UsersController.php b/app/Controller/UsersController.php
index c140fe80e..431736113 100644
--- a/app/Controller/UsersController.php
+++ b/app/Controller/UsersController.php
@@ -644,7 +644,7 @@ class UsersController extends AppController {
 					$c = 0;
 					foreach ($fields as $field) {
 						if (isset($fieldsOldValues[$c]) && $fieldsOldValues[$c] != $fieldsNewValues[$c]) {
-							if ($field != 'confirm_password') {
+							if ($field != 'confirm_password' && $field != 'enable_password') {
 								$fieldsResultStr = $fieldsResultStr . ', ' . $field . ' (' . $fieldsOldValues[$c] . ') => (' . $fieldsNewValues[$c] . ')';
 							}
 						}
",1.0,,1.0,lime
,,,,,,,,,
CVE-2017-5543,CVE-2017-5543/019dee20a38f39a5827aae2eb92f09b1f6afb7bb,https://github.com/intelliants/subrion/commit/019dee20a38f39a5827aae2eb92f09b1f6afb7bb,<s>includes/classes/ia.core.users.php in Subrion CMS 4.0.5 allows remote attackers to conduct PHP Object Injection attacks via crafted serialized data in a salt cookie in a login request.</s>,"<s>#297
</s>"," diff --git a/includes/classes/ia.core.users.php b/includes/classes/ia.core.users.php
index ea909cd3..4a98a90b 100644
--- a/includes/classes/ia.core.users.php
+++ b/includes/classes/ia.core.users.php
@@ -706,7 +706,7 @@ SQL;
 
 		if (isset($_COOKIE['salt']) && $_COOKIE['salt'])
 		{
-			$s = unserialize($_COOKIE['salt']);
+			$s = json_decode($_COOKIE['salt'], true);
 			if (isset($s['salt']) && isset($s['items']) && $s['salt'] && $s['items'])
 			{
 				$salt = $s;
",1.0,,1.0,tfidf
CVE-2017-5543,CVE-2017-5543/26ce6d03e4e32b6dbd10425d7d028f8db942df49,https://github.com/intelliants/subrion/commit/26ce6d03e4e32b6dbd10425d7d028f8db942df49,<s>includes/classes/ia.core.users.php in Subrion CMS 4.0.5 allows remote attackers to conduct PHP Object Injection attacks via crafted serialized data in a salt cookie in a login request.</s>,"<s>Version changed to 4.0.5.10
</s>"," diff --git a/index.php b/index.php
index 7737729d..78b6e106 100644
--- a/index.php
+++ b/index.php
@@ -24,7 +24,7 @@
  *
  ******************************************************************************/
 
-define('IA_VERSION', '4.0.5');
+define('IA_VERSION', '4.0.5.10');
 
 if (isset($ia_version))
 {
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2017-7501,CVE-2017-7501/404ef011c300207cdb1e531670384564aae04bdc,https://github.com/rpm-software-management/rpm/commit/404ef011c300207cdb1e531670384564aae04bdc,"<s>It was found that versions of rpm before 4.13.0.2 use temporary files with predictable names when installing an RPM. An attacker with ability to write in a directory where files will be installed could create symbolic links to an arbitrary location and modify content, and possibly permissions to arbitrary files, which could be used for denial of service or possibly privilege escalation.</s>","<s>Don't follow symlinks on file creation (CVE-2017-7501)
Open newly created files with O_EXCL to prevent symlink tricks.
When reopening hardlinks for writing the actual content, use append
mode instead. This is compatible with the write-only permissions but
is not destructive in case we got redirected to somebody elses file,
verify the target before actually writing anything.
As these are files with the temporary suffix, errors mean a local
user with sufficient privileges to break the installation of the package
anyway is trying to goof us on purpose, don't bother trying to mend it
(we couldn't fix the hardlink case anyhow) but just bail out.
Based on a patch by Florian Festi.
</s>"," diff --git a/lib/fsm.c b/lib/fsm.c
index 553774b30..e0e9d03a1 100644
--- a/lib/fsm.c
+++ b/lib/fsm.c
@@ -206,11 +206,22 @@ static int fsmSetFCaps(const char *path, const char *captxt)
     return rc;
 }
 
+/* Check dest is the same, empty and regular file with writeonly permissions */
+static int linkSane(FD_t wfd, const char *dest)
+{
+    struct stat sb, lsb;
+
+    return (fstat(Fileno(wfd), &sb) == 0 && sb.st_size == 0 &&
+	    (sb.st_mode & ~S_IFMT) == S_IWUSR &&
+	    lstat(dest, &lsb) == 0 && S_ISREG(lsb.st_mode) &&
+	    sb.st_dev == lsb.st_dev && sb.st_ino == lsb.st_ino);
+}
+
 /** \ingroup payload
  * Create file from payload stream.
  * @return		0 on success
  */
-static int expandRegular(rpmfi fi, const char *dest, rpmpsm psm, int nodigest, int nocontent)
+static int expandRegular(rpmfi fi, const char *dest, rpmpsm psm, int exclusive, int nodigest, int nocontent)
 {
     FD_t wfd = NULL;
     int rc = 0;
@@ -218,8 +229,14 @@ static int expandRegular(rpmfi fi, const char *dest, rpmpsm psm, int nodigest, i
     /* Create the file with 0200 permissions (write by owner). */
     {
 	mode_t old_umask = umask(0577);
-	wfd = Fopen(dest, ""w.ufdio"");
+	wfd = Fopen(dest, exclusive ? ""wx.ufdio"" : ""a.ufdio"");
 	umask(old_umask);
+
+	/* If reopening, make sure the file is what we expect */
+	if (!exclusive && wfd != NULL && !linkSane(wfd, dest)) {
+	    rc = RPMERR_OPEN_FAILED;
+	    goto exit;
+	}
     }
     if (Ferror(wfd)) {
 	rc = RPMERR_OPEN_FAILED;
@@ -248,7 +265,7 @@ static int fsmMkfile(rpmfi fi, const char *dest, rpmfiles files,
 	/* Create first hardlinked file empty */
 	if (*firsthardlink < 0) {
 	    *firsthardlink = rpmfiFX(fi);
-	    rc = expandRegular(fi, dest, psm, nodigest, 1);
+	    rc = expandRegular(fi, dest, psm, 1, nodigest, 1);
 	} else {
 	    /* Create hard links for others */
 	    char *fn = rpmfilesFN(files, *firsthardlink);
@@ -263,10 +280,10 @@ static int fsmMkfile(rpmfi fi, const char *dest, rpmfiles files,
        existing) file with content */
     if (numHardlinks<=1) {
 	if (!rc)
-	    rc = expandRegular(fi, dest, psm, nodigest, 0);
+	    rc = expandRegular(fi, dest, psm, 1, nodigest, 0);
     } else if (rpmfiArchiveHasContent(fi)) {
 	if (!rc)
-	    rc = expandRegular(fi, dest, psm, nodigest, 0);
+	    rc = expandRegular(fi, dest, psm, 0, nodigest, 0);
 	*firsthardlink = -1;
     } else {
 	*setmeta = 0;
@@ -939,7 +956,7 @@ int rpmPackageFilesInstall(rpmts ts, rpmte te, rpmfiles files,
 	    /* we skip the hard linked file containing the content */
 	    /* write the content to the first used instead */
 	    char *fn = rpmfilesFN(files, firsthardlink);
-	    rc = expandRegular(fi, fn, psm, nodigest, 0);
+	    rc = expandRegular(fi, fn, psm, 0, nodigest, 0);
 	    firsthardlink = -1;
 	    free(fn);
 	}
",1.0,,1.0,tfidf
CVE-2017-7501,CVE-2017-7501/f2d3be2a8741234faaa96f5fd05fdfdc75779a79,https://github.com/rpm-software-management/rpm/commit/f2d3be2a8741234faaa96f5fd05fdfdc75779a79,"<s>It was found that versions of rpm before 4.13.0.2 use temporary files with predictable names when installing an RPM. An attacker with ability to write in a directory where files will be installed could create symbolic links to an arbitrary location and modify content, and possibly permissions to arbitrary files, which could be used for denial of service or possibly privilege escalation.</s>","<s>Restrict following symlinks to directories by ownership (CVE-2017-7500)
Only follow directory symlinks owned by target directory owner or root.
This prevents privilege escalation from user-writable directories via
directory symlinks to privileged directories on package upgrade, while
still allowing admin to arrange disk usage with symlinks.
The rationale is that if you can create symlinks owned by user X you *are*
user X (or root), and if you also own directory Y you can do whatever with
it already, including change permissions. So when you create a symlink to
that directory, the link ownership acts as a simple stamp of authority that
you indeed want rpm to treat this symlink as it were the directory that
you own. Such a permission can only be given by you or root, which
is just the way we want it. Plus it's almost ridiculously simple as far
as rules go, compared to trying to calculate something from the
source vs destination directory permissions etc.
In the normal case, the user arranging diskspace with symlinks is indeed
root so nothing changes, the only real change here is to links created by
non-privileged users which should be few and far between in practise.
Unfortunately our test-suite runs as a regular user via fakechroot and
thus the testcase for this fails under the new rules. Adjust the testcase
to get the ownership straight and add a second case for the illegal
behavior, basically the same as the old one but with different expectations.
</s>"," diff --git a/tests/rpmreplace.at b/tests/rpmreplace.at
index 90a85bfb8..11e6221d7 100644
--- a/tests/rpmreplace.at
+++ b/tests/rpmreplace.at
@@ -402,12 +402,14 @@ runroot rpmbuild --quiet -bb \
         --define ""ver 1.0"" \
 	--define ""filetype datadir"" \
 	--define ""filedata README1"" \
+	--define ""user $(id -u -n)"" \
           /data/SPECS/replacetest.spec
 
 runroot rpmbuild --quiet -bb \
         --define ""ver 2.0"" \
 	--define ""filetype datadir"" \
 	--define ""filedata README2"" \
+	--define ""user $(id -u -n)"" \
           /data/SPECS/replacetest.spec
 
 mkdir ""${RPMTEST}""/opt/f00f
@@ -421,6 +423,38 @@ test -L ""${tf}"" && test -d ""${tf}""
 [])
 AT_CLEANUP
 
+AT_SETUP([upgrade invalid locally symlinked directory])
+AT_KEYWORDS([install])
+AT_CHECK([
+RPMDB_CLEAR
+RPMDB_INIT
+tf=""${RPMTEST}""/opt/foo
+rm -rf ""${RPMTEST}""/opt/*
+rm -rf ""${TOPDIR}""
+
+runroot rpmbuild --quiet -bb \
+        --define ""ver 1.0"" \
+	--define ""filetype datadir"" \
+	--define ""filedata README1"" \
+          /data/SPECS/replacetest.spec
+
+runroot rpmbuild --quiet -bb \
+        --define ""ver 2.0"" \
+	--define ""filetype datadir"" \
+	--define ""filedata README2"" \
+          /data/SPECS/replacetest.spec
+
+mkdir ""${RPMTEST}""/opt/f00f
+ln -s f00f ""${RPMTEST}""/opt/foo
+runroot rpm -U /build/RPMS/noarch/replacetest-1.0-1.noarch.rpm
+test -L ""${tf}"" && test -d ""${tf}"" && runroot rpm -U /build/RPMS/noarch/replacetest-2.0-1.noarch.rpm
+test -d ""${tf}""
+],
+[0],
+[],
+[])
+AT_CLEANUP
+
 AT_SETUP([upgrade empty directory to broken link])
 AT_KEYWORDS([install])
 AT_CHECK([
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2022-22818,CVE-2022-22818/01422046065d2b51f8f613409cad2c81b39487e5,https://github.com/django/django/commit/01422046065d2b51f8f613409cad2c81b39487e5,"<s>The {% debug %} template tag in Django 2.2 before 2.2.27, 3.2 before 3.2.12, and 4.0 before 4.0.2 does not properly encode the current context. This may lead to XSS.</s>","<s>[4.0.x] Fixed CVE-2022-22818 -- Fixed possible XSS via {% debug %} template tag.
Thanks Keryn Knight for the report.
Backport of 394517f07886495efcf79f95c7ee402a9437bd68 from main.
Co-authored-by: Adam Johnson <me@adamj.eu>
</s>"," diff --git a/docs/releases/2.2.27.txt b/docs/releases/2.2.27.txt
index a35082fa33..b1712c649c 100644
--- a/docs/releases/2.2.27.txt
+++ b/docs/releases/2.2.27.txt
@@ -6,4 +6,12 @@ Django 2.2.27 release notes
 
 Django 2.2.27 fixes two security issues with severity ""medium"" in 2.2.26.
 
-...
+CVE-2022-22818: Possible XSS via ``{% debug %}`` template tag
+=============================================================
+
+The ``{% debug %}`` template tag didn't properly encode the current context,
+posing an XSS attack vector.
+
+In order to avoid this vulnerability, ``{% debug %}`` no longer outputs an
+information when the ``DEBUG`` setting is ``False``, and it ensures all context
+variables are correctly escaped when the ``DEBUG`` setting is ``True``.
",0.0,,1.0,tfidf
CVE-2022-22818,CVE-2022-22818/f9c7d48fdd6f198a6494a9202f90242f176e4fc9,https://github.com/django/django/commit/f9c7d48fdd6f198a6494a9202f90242f176e4fc9,"<s>The {% debug %} template tag in Django 2.2 before 2.2.27, 3.2 before 3.2.12, and 4.0 before 4.0.2 does not properly encode the current context. This may lead to XSS.</s>","<s>[4.0.x] Fixed CVE-2022-23833 -- Fixed DoS possiblity in file uploads.
Thanks Alan Ryan for the report and initial patch.
Backport of fc18f36c4ab94399366ca2f2007b3692559a6f23 from main.
</s>"," diff --git a/docs/releases/3.2.12.txt b/docs/releases/3.2.12.txt
index 31bc7d2c59..0907050791 100644
--- a/docs/releases/3.2.12.txt
+++ b/docs/releases/3.2.12.txt
@@ -15,3 +15,9 @@ posing an XSS attack vector.
 In order to avoid this vulnerability, ``{% debug %}`` no longer outputs an
 information when the ``DEBUG`` setting is ``False``, and it ensures all context
 variables are correctly escaped when the ``DEBUG`` setting is ``True``.
+
+CVE-2022-23833: Denial-of-service possibility in file uploads
+=============================================================
+
+Passing certain inputs to multipart forms could result in an infinite loop when
+parsing files.
",0.0,,0.0,tfidf
,,,,,,,,,
CVE-2012-0787,CVE-2012-0787/b8de6a8c5cfffb007149036ffa561ced4d11c462,https://github.com/hercules-team/augeas/commit/b8de6a8c5cfffb007149036ffa561ced4d11c462,"<s>The clone_file function in transfer.c in Augeas before 1.0.0, when copy_if_rename_fails is set and EXDEV or EBUSY is returned by the rename function, allows local users to overwrite arbitrary files and obtain sensitive information via a bind mount on the (1) .augsave or (2) destination file when using the backup save option, or (3) .augnew file when using the newfile save option.</s>","<s>Prevent cross-mountpoint attacks via .augsave during saving
Previously Augeas would open PATH.augsave for writing if a rename from PATH to
PATH.augsave failed, then write the file contents in.  Now if the rename fails,
it tries to unlink PATH.augsave and open it with O_EXCL first.
Mountpoints remain permitted at either PATH or PATH.augnew provided
/augeas/save/copy_if_rename_fails exists.
* src/transform.c (clone_file):
    add argument to perform unlink and O_EXCL on destination filename after a
    rename failure to prevent PATH.augsave being a mountpoint
* src/transform.c (transform_save, remove_file):
    always try to unlink PATH.augsave if rename fails, only allowing PATH to be
    a mountpoint; allow PATH or PATH.augnew to be mountpoints
* tests/
    test-put-mount: check PATH being a mountpoint is supported
    test-put-mount-augnew.sh: check PATH.augnew being a mountpoint is supported
    test-put-mount-augsave.sh: check unlink error when PATH.augsave is a mount
Fixes BZ 772261
</s>"," diff --git a/tests/test-put-mount.sh b/tests/test-put-mount.sh
new file mode 100755
index 00000000..210bc10a
--- /dev/null
+++ b/tests/test-put-mount.sh
@@ -0,0 +1,55 @@
+#! /bin/bash
+
+# Test that we can write into a bind mount with the copy_if_rename_fails flag.
+# This requires that EXDEV or EBUSY is returned from rename(2) to activate the
+# code path, so set up a bind mount on Linux.
+
+if [ $UID -ne 0 -o ""$(uname -s)"" != ""Linux"" ]; then
+    echo ""Test can only be run as root on Linux to create bind mounts""
+    exit 77
+fi
+
+ROOT=$abs_top_builddir/build/test-put-mount
+LENSES=$abs_top_srcdir/lenses
+
+HOSTS=$ROOT/etc/hosts
+TARGET=$ROOT/other/real_hosts
+
+rm -rf $ROOT
+mkdir -p $(dirname $HOSTS)
+mkdir -p $(dirname $TARGET)
+
+echo 127.0.0.1 localhost > $TARGET
+touch $HOSTS
+
+mount --bind $TARGET $HOSTS
+Exit() {
+    umount $HOSTS
+    exit $1
+}
+
+HOSTS_SUM=$(sum $HOSTS)
+
+augtool --nostdinc -I $LENSES -r $ROOT <<EOF
+set /augeas/save/copy_if_rename_fails 1
+set /files/etc/hosts/1/alias myhost
+save
+print /augeas//error
+EOF
+
+if [ ! ""x${HOSTS_SUM}"" != ""x$(sum $HOSTS)"" ]; then
+    echo ""/etc/hosts hasn't changed""
+    Exit 1
+fi
+
+if [ ! ""x${HOSTS_SUM}"" != ""x$(sum $TARGET)"" ]; then
+    echo ""/other/real_hosts hasn't changed""
+    Exit 1
+fi
+
+if ! grep myhost $TARGET >/dev/null; then
+    echo ""/other/real_hosts does not contain the modification""
+    Exit 1
+fi
+
+Exit 0
",0.0,,1.0,lime
CVE-2012-0787,CVE-2012-0787/5476371f26f784797f000dda592486ff567a7e64,https://github.com/hercules-team/augeas/commit/5476371f26f784797f000dda592486ff567a7e64,"<s>The clone_file function in transfer.c in Augeas before 1.0.0, when copy_if_rename_fails is set and EXDEV or EBUSY is returned by the rename function, allows local users to overwrite arbitrary files and obtain sensitive information via a bind mount on the (1) .augsave or (2) destination file when using the backup save option, or (3) .augnew file when using the newfile save option.</s>","<s>* src/augeas.c (aug_save): remove loop that added a second iteration around
  children of /files, causing multiple saves in newfile and noop modes when
  editing under /files/boot
Fixes ticket #264
</s>"," diff --git a/src/augeas.c b/src/augeas.c
index 6919845f..2d0a5bdf 100644
--- a/src/augeas.c
+++ b/src/augeas.c
@@ -1439,10 +1439,9 @@ int aug_save(struct augeas *aug) {
         transform_validate(aug, xfm);
 
     if (files->dirty) {
-        list_for_each(t, files->children) {
-            if (tree_save(aug, t, AUGEAS_FILES_TREE) == -1)
-                ret = -1;
-        }
+        if (tree_save(aug, files->children, AUGEAS_FILES_TREE) == -1)
+            ret = -1;
+
         /* Remove files whose entire subtree was removed. */
         if (meta_files != NULL) {
             if (unlink_removed_files(aug, files, meta_files) < 0)
",1.0,,0.0,lime
,,,,,,,,,
CVE-2015-5322,CVE-2015-5322/5431e397216b4ab80e58bdabcb06a0066bce6592,https://github.com/jenkinsci/jenkins/commit/5431e397216b4ab80e58bdabcb06a0066bce6592,<s>Directory traversal vulnerability in Jenkins before 1.638 and LTS before 1.625.2 allows remote attackers to list directory contents and read arbitrary files in the Jenkins servlet resources via directory traversal sequences in a request to jnlpJars/.</s>,"<s>[SECURITY-195] - Throw the MalformedURLException if the request includes the relative addressing
</s>"," diff --git a/core/src/main/java/hudson/model/Slave.java b/core/src/main/java/hudson/model/Slave.java
index 5c1a204796..3b20de4ad0 100644
--- a/core/src/main/java/hudson/model/Slave.java
+++ b/core/src/main/java/hudson/model/Slave.java
@@ -323,6 +323,13 @@ public abstract class Slave extends Node implements Serializable {
         public URL getURL() throws MalformedURLException {
             String name = fileName;
             if (name.equals(""hudson-cli.jar""))  name=""jenkins-cli.jar"";
+            
+            // Prevent the sandbox escaping (SECURITY-195)
+            if (name.contains("".."")) {
+                throw new MalformedURLException(""The specified file path "" + fileName + "" contains '..'. ""
+                        + ""The path is not allowed due to security reasons"");
+            }
+            
             URL res = Jenkins.getInstance().servletContext.getResource(""/WEB-INF/"" + name);
             if(res==null) {
                 // during the development this path doesn't have the files.
",1.0,,1.0,lime
CVE-2015-5322,CVE-2015-5322/054a329c59171ca12ff98f7063ce7fd053ee08bf,https://github.com/jenkinsci/jenkins/commit/054a329c59171ca12ff98f7063ce7fd053ee08bf,<s>Directory traversal vulnerability in Jenkins before 1.638 and LTS before 1.625.2 allows remote attackers to list directory contents and read arbitrary files in the Jenkins servlet resources via directory traversal sequences in a request to jnlpJars/.</s>,"<s>[SECURITY-206] Need to call ChannelConfigurator on JNLP slave channels.
</s>"," diff --git a/core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol.java b/core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol.java
index d82a42e51a..f69211cf8c 100644
--- a/core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol.java
+++ b/core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol.java
@@ -9,6 +9,7 @@ import hudson.remoting.Engine;
 import hudson.slaves.SlaveComputer;
 import jenkins.AgentProtocol;
 import jenkins.model.Jenkins;
+import jenkins.security.ChannelConfigurator;
 import jenkins.security.HMACConfidentialKey;
 import org.jenkinsci.remoting.nio.NioChannelHub;
 
@@ -117,6 +118,10 @@ public class JnlpSlaveAgentProtocol extends AgentProtocol {
             try {
                 ChannelBuilder cb = createChannelBuilder(nodeName);
 
+                for (ChannelConfigurator cc : ChannelConfigurator.all()) {
+                    cc.onChannelBuilding(cb, computer);
+                }
+
                 computer.setChannel(cb.withHeaderStream(log).build(socket), log,
                     new Listener() {
                         @Override
",0.0,,0.0,lime
,,,,,,,,,
CVE-2021-37707,CVE-2021-37707/ec13f3382213c4c651529f5c33f401fe8ababdd5,https://github.com/shopware/platform/commit/ec13f3382213c4c651529f5c33f401fe8ababdd5,"<s>Shopware is an open source eCommerce platform. Versions prior to 6.4.3.1 contain a vulnerability that allows manipulation of product reviews via API. Version 6.4.3.1 contains a patch. As workarounds for older versions of 6.1, 6.2, and 6.3, corresponding security measures are also available via a plugin.</s>","<s>NEXT-16429 - Filter inactive reviews in store-api
</s>"," diff --git a/src/Core/Content/Test/Product/SalesChannel/Review/ProductReviewSaveRouteTest.php b/src/Core/Content/Test/Product/SalesChannel/Review/ProductReviewSaveRouteTest.php
index f1e33a734f..06b37544ea 100644
--- a/src/Core/Content/Test/Product/SalesChannel/Review/ProductReviewSaveRouteTest.php
+++ b/src/Core/Content/Test/Product/SalesChannel/Review/ProductReviewSaveRouteTest.php
@@ -4,7 +4,6 @@ namespace Shopware\Core\Content\Test\Product\SalesChannel\Review;


 use Doctrine\DBAL\Connection;
 use PHPUnit\Framework\TestCase;
-use Shopware\Core\Checkout\Test\Payment\Handler\V630\SyncTestPaymentHandler;
 use Shopware\Core\Content\Product\Aggregate\ProductVisibility\ProductVisibilityDefinition;
 use Shopware\Core\Defaults;
 use Shopware\Core\Framework\Context;
@@ -163,84 +162,6 @@ class ProductReviewSaveRouteTest extends TestCase
\Core\Framework\Test\ static::assertEquals($expected, $count);

 use Shopware }
\
-\Test\ private function login(): void
- Symfony {
-\FrameworkBundle\K $email = Uuid::randomHex() . '@example.com';
-,7 +22,7 @@ $this->createCustomer('shopware', $email);
-
-ApiTestBehaviour;
 $this->browser
- /**
-     * @var \ ->request(
-undle\FrameworkBundle\KernelBrowser
+    'POST',
-Browser
      */
     private $ '/store-api/account/login',
-120,87 @@ class ProductListRouteTest extends TestCase
   [
-    static::assertArrayNotHasKey('name', $response['elements' 'email' => $email,
-
 
+    public function testListingProductsIncludesOnlyPublicReviews(): 'password' => 'shopware',
-       $product = (new ProductBuilder($this ]
- 'p1'))
+     );
-
-   ->visibility($this $response = json_decode($this->browser->getResponse()->getContent(), true);
-
-price(10)
+  $this->browser->setServerParameter('HTTP_SW_CONTEXT_TOKEN', $response['contextToken']);
-->ids-> }
-
-channel')) private function createCustomer(string $password, ?string $email = null): string
-', 'this {
- review', 0, $this-> $customerId = Uuid::randomHex();
-UAGE_SYSTEM, false $addressId = Uuid::randomHex();
-
-build();
+
+  $this->getContainer()->get('customer.repository')->create([
-
+          [
-upsert([$product], $this->ids->context);
+ 'id' => $customerId,
-->browser->request(
+         'salesChannelId' => Defaults::SALES_CHANNEL,
-store-api/product',
+        'defaultShippingAddress' => [
-              'filter' => [[
 'id' => $addressId,
-           'type' => 'equals',
 'firstName' => 'Max',
-           'field' => 'productNumber',
 'lastName' => 'Mustermann',
-         'value' => 'p1',
+  'street' => 'Musterstrae 1',
- ]],
+                'city' => 'Schoöppingen',
-                'productReviews 'zipcode' => '12345',
-           ],
+       'salutationId' => $this->getValidSalutationId(),
-+
+        $response = json_decode($this 'countryId' => $this->getValidCountryId(),
-+        static::assertSame(1, ],
-total']);
+        static::assert 'defaultBillingAddressId' => $addressId,
-apiAlias']);
+        static:: 'defaultPaymentMethod' => [
-elements'][0]);
+        static::assertArray 'name' => 'Invoice',
-elements'][0]);
+        $reviews = 'active' => true,
-]['productReviews'];
+        static::assert 'description' => 'Default payment method',
-       static::assertSame('test public review', $reviews[ 'handlerIdentifier' => SyncTestPaymentHandler::class,
-    public function testListingProductsIncludesOwnInactiveReviews(): void
+ 'availabilityRule' => [
-      $customerId = $this->login();
+
+     'id' => Uuid::randomHex(),
-ids, 'p1'))
+            ->visibility 'name' => 'true',
--channel'))
+            ->price(10)
 'priority' => 0,
-     ->review('test public review', 'this is a public review', 3, $this-> 'conditions' => [
-'))
+            ->review('test hidden own review', 'this is a [
- 0, $this->ids->get('sales-channel'), Defaults::LANGUAGE_SYSTEM, false, $customerId 'type' => 'cartCartAmount',
-    ->build();
+
+        $this->getContainer()->get('product.repository 'value' => [
-        ->upsert([$product], $this->ids->context);
+
+        $this-> 'operator' => '>=',
-        'POST',
+            '/store-api/product',
+    'amount' => 0,
- [
+                'filter' => [[
+       ],
-           'type' => 'equals',
+        ],
-          'field' => 'productNumber',
+     ],
-             'value' => 'p1 ],
-                ]],
+ 'salesChannels' => [
-      'associations' => [
+          [
-        'productReviews' => [
+            'id' => Defaults::SALES_CHANNEL,
-'field' => 'points', 'order' => FieldSorting::DESCENDING]],
+ ],
-                 ],
+ ],
-             ],
+ ],
-         ],
+     'groupId' => Defaults::FALLBACK_CUSTOMER_GROUP,
-ode($this->browser->getResponse()->getContent(), true); 'email' => $email,
-   static::assertSame(1, $response['total']); 'password' => $password,
- static::assertSame('product', $response['elements'][0 'firstName' => 'Fooo',
-     static::assertArrayHasKey('id', $response 'lastName' => 'Barr',
-      static::assertArrayHasKey('productReviews 'salutationId' => $this->getValidSalutationId(),
-   $reviews = $response['elements'][0][ 'customerNumber' => '12345',
-    static::assertCount(2, $ ],
-
+      ], $this->ids->context);
-
-reviews[0]['title return $customerId;
-    }
-
('test hidden own private function createData(): void
]['title'] {
+    }
+
 $product = [
 function createData(): void
     {
         $product = [
",0.0,,0.0,lime
CVE-2021-37707,CVE-2021-37707/912b96de3b839c6c5525c98cbb58f537c2d838be,https://github.com/shopware/platform/commit/912b96de3b839c6c5525c98cbb58f537c2d838be,"<s>Shopware is an open source eCommerce platform. Versions prior to 6.4.3.1 contain a vulnerability that allows manipulation of product reviews via API. Version 6.4.3.1 contains a patch. As workarounds for older versions of 6.1, 6.2, and 6.3, corresponding security measures are also available via a plugin.</s>","<s>NEXT-15681 - Improve product review validation
</s>"," diff --git a/src/Core/Content/Test/Product/SalesChannel/Review/ProductReviewSaveRouteTest.php b/src/Core/Content/Test/Product/SalesChannel/Review/ProductReviewSaveRouteTest.php
index bb565951a8..f1e33a734f 100644
--- a/src/Core/Content/Test/Product/SalesChannel/Review/ProductReviewSaveRouteTest.php
+++ b/src/Core/Content/Test/Product/SalesChannel/Review/ProductReviewSaveRouteTest.php
@@ -12,6 +12,7 @@ use Shopware\Core\Framework\Test\TestCaseBase\IntegrationTestBehaviour;
 use Shopware\Core\Framework\Test\TestCaseBase\SalesChannelApiTestBehaviour;
 use Shopware\Core\Framework\Test\TestDataCollection;
 use Shopware\Core\Framework\Uuid\Uuid;
+use Symfony\Component\HttpFoundation\Response;
 
 /**
  * @group store-api
@@ -120,6 +121,39 @@ class ProductReviewSaveRouteTest extends TestCase
         static::assertEquals($response['errors'][1]['source']['pointer'], '/content');
     }
 
+    public function testCustomerValidation(): void
+    {
+        $this->login();
+
+        $this->assertReviewCount(0);
+
+        $id = Uuid::randomHex();
+
+        // Create review
+        $this->browser->request('POST', $this->getUrl(), [
+            'id' => $id,
+            'title' => 'Lorem ipsum dolor sit amet',
+            'content' => 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna',
+        ]);
+
+        // Re-login as another user
+        $this->login();
+
+        // Try to use the id from previous review which is not attached to this customer
+        $this->browser->request('POST', $this->getUrl(), [
+            'id' => $id,
+            'title' => 'Lorem ipsum dolor sit amet',
+            'content' => 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna',
+        ]);
+
+        $response = $this->browser->getResponse();
+
+        static::assertSame(Response::HTTP_BAD_REQUEST, $response->getStatusCode());
+        $content = json_decode($response->getContent(), true);
+
+        static::assertSame('VIOLATION::ENTITY_DOES_NOT_EXISTS', $content['errors'][0]['code']);
+    }
+
     private function assertReviewCount(int $expected): void
     {
         $count = $this->getContainer()
",1.0,,1.0,lime
